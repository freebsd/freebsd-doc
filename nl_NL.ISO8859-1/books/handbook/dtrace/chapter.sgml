<!--
Recently I suggested to myself that this should become a profiling
and debugging chapter, which covers things like ktrace(1) and
using other debugging (like -x in shell scripts).  But then I
realized that, over time and while DTrace becomes better supported,
that might make this chapter too large.
-->

<!--
     The FreeBSD Dutch Documentation Project
     $FreeBSD$

     %SOURCE%	en_US.ISO8859-1/books/handbook/dtrace/chapter.sgml
     %SRCID%	38826
-->

<chapter id="dtrace">
  <chapterinfo>
    <authorgroup>
      <author>
	<firstname>Tom</firstname>
	<surname>Rhodes</surname>
	<contrib>Geschreven door </contrib>
      </author>
    </authorgroup>
    <authorgroup>
      <author>
	<firstname>Ren&eacute;</firstname>
	<surname>Ladan</surname>
	<contrib>Vertaald door </contrib>
      </author>
    </authorgroup>
  </chapterinfo>

  <title>&dtrace;</title>

  <sect1 id="dtrace-synopsis">
    <title>Overzicht</title>

    <indexterm><primary>&dtrace;</primary></indexterm>

    <indexterm>
      <primary>&dtrace;-ondersteuning</primary>

      <see>&dtrace;</see>
    </indexterm>

    <para>&dtrace;, ook bekend als Dynamic Tracing, was ontwikkeld door
      &sun; als een gereedschap om prestatie-bottlenecks in productie-
      en preproductiesystemen op te sporen.  Het is in geen enkel opzicht
      een debug-gereedschap, maar een gereedschap voor real-time analyse
      om prestatie- en andere zaken op te sporen.</para>

    <para>&dtrace; is een opmerkelijk profileringsgereedschap, met een
      indrukwekkende verzameling mogelijkheden om systeemzaken te
      diagnosticeren.  Het kan ook worden gebruikt om vooraf geschreven
      scripts te draaien om zo voordeel te halen uit de mogelijkheden.
      Gebruikers kunnen zelfs hun eigen middelen schrijven door gebruik
      te maken van de &dtrace; D Language, wat ze in staat stelt om hun
      profilering aan te passen aan hun specifieke behoeften.</para>

    <para>Na het lezen van dit hoofdstuk weet u:</para>

    <itemizedlist>
      <listitem>
	<para>Wat &dtrace; is en welke mogelijkheden het biedt.</para>
      </listitem>

      <listitem>
	<para>De verschillen tussen de &dtrace;-implementatie van
	  &solaris; en degene die door &os; wordt aangeboden.</para>
      </listitem>

      <listitem>
	<para>Hoe &dtrace; op &os; aan te zetten en te gebruiken.</para>
      </listitem>
    </itemizedlist>

    <para>Voordat u dit hoofdstuk leest, dient u:</para>

    <itemizedlist>
      <listitem>
	<para>De beginselen van &unix; en &os; te begrijpen
	  (<xref linkend="basics">).</para>
      </listitem>

      <listitem>
	<para>Bekend te zijn met de beginselen van kernelconfiguratie en
	  -compilatie (<xref linkend="kernelconfig">).</para>
      </listitem>

      <listitem>
	<para>Wat bekendheid te hebben met beveiliging en hoe het zich
	  verhoudt tot &os; (<xref linkend="security">).</para>
      </listitem>

      <listitem>
	<para>Te begrijpen hoe de broncode van &os; te verkrijgen en te
	  herbouwen (<xref linkend="updating-upgrading">).</para>
      </listitem>
    </itemizedlist>

    <!--
      Temporary warning to avoid listing experimental versions
      and production versions of FreeBSD with this technology.
    -->
    <warning>
      <para>Deze mogelijkheid wordt als experimenteel beschouwd.  Van
	sommige opties kan er functionaliteit ontbreken, andere delen
	kunnen in het geheel niet werken.  In de loop der tijd zal deze
	mogelijkheid als productierijp worden beschouwd en zal deze
	documentatie worden aangepast om die situatie te
	representeren.</para>
    </warning>
  </sect1>

  <sect1 id="dtrace-implementation">
    <title>Implementatieverschillen</title>

    <para>Hoewel &dtrace; in &os; erg lijkt op degene die in &solaris;
      zit, zijn er verschillen die uitgelegd moeten worden voordat er
      verder wordt gegaan.  Het primaire verschil dat gebruikers zullen
      zien is dat &dtrace; specifiek moet worden aangezet op &os;.  Er
      zijn kernelopties en modulen die aangezet moeten worden om
      &dtrace; juist te laten werken.  Deze zullen later worden
      uitgelegd.</para>

    <para>Er is een kerneloptie <literal>DDB_CTF</literal> die gebruikt
      wordt om ondersteuning voor het laden van
      <acronym>CTF</acronym>-gegevens van kernelmodulen en de kernel
      zelf.  <acronym>CTF</acronym> is het Compact C Type Format van
      &solaris; welke een beperkte vorm van debuginformatie bevat
      die vergelijkbaar is met <acronym>DWARF</acronym> en de befaamde
      stabs.  Deze <acronym>CTF</acronym>-gegevens worden door de
      bouwmiddelen <command>ctfconvert</command> en
      <command>ctfmerge</command> aan de binairen toegevoegd.  Het
      hulpmiddel <command>ctfconvert</command> parseert
      <acronym>DWARF</acronym> <acronym>ELF</acronym>-debug-secties die
      door de compiler zijn aangemaakt en <command>ctfmerge</command>
      voegt <acronym>CTF</acronym> <acronym>ELF</acronym>-secties van
      objecten samen in hun executables of gedeelde bibliotheken.  Meer
      informatie over hoe dit voor de bouw van de kernel en &os; aan te
      zetten komt eraan.</para>

    <para>Sommige aanbieders voor &os; verschillen van die voor
      &solaris;.  De meest opmerkelijke is de aanbieder
      <literal>dtmalloc</literal>, welke het volgen van
      <function>malloc()</function> op soort in de &os;-kernel
      toestaat.</para>

    <para>Alleen <username>root</username> mag &dtrace; op &os;
      gebruiken.  Dit heeft te maken met beveiligingsverschillen,
      &solaris; heeft enkele beveiligingscontroles op laag niveau die
      nog niet bestaan in &os;.  Hierom is
      <devicename>/dev/dtrace/dtrace</devicename> strikt beperkt tot
      <username>root</username>.</para>

    <para>Tenslotte valt de &dtrace;-software onder de
      <acronym>CDDL</acronym>-licentie van &sun;.  De <literal>Common
      Development and Distribution License</literal> wordt bij &os;
      geleverd, zie
      <filename>/usr/src/cddl/contrib/opensolaris/OPENSOLARIS.LICENSE</filename>
      of bekijk het online op
      <ulink url="http://www.opensolaris.org/os/licensing"></ulink>.</para>

    <para>Deze licentie houdt in dat een &os;-kernel met de
      &dtrace;-opties nog steeds onder de
      <acronym>BSD</acronym>-licentie valt; de <acronym>CDDL</acronym>
      komt echter op de proppen wanneer de modulen in binaire vorm
      worden verspreid, of wanneer de binairen zijn geladen.</para>
  </sect1>

  <sect1 id="dtrace-enable">
    <title>Ondersteuning voor &dtrace; aanzetten</title>

    <para>Voeg de volgende regels toe aan het kernelinstellingenbestand
      om ondersteuning voor &dtrace; aan te zetten:</para>

    <programlisting>options         KDTRACE_HOOKS
options         DDB_CTF</programlisting>

    <note>
      <para>Gebruikers van de AMD64-architectuur zullen de volgende
	regel aan hun kernelinstellingenbestand willen toevoegen:</para>

      <programlisting>options         KDTRACE_FRAME</programlisting>

      <para>Deze optie biedt ondersteuning voor de mogelijkheid
	<acronym>FBT</acronym>.  &dtrace; zal zonder deze optie werken;
	er zal echter beperkte ondersteuning zijn voor het volgen van
	functiegrenzen.</para>
    </note>

    <para>Alle broncode moet herbouwd en geherinstalleerd worden met de
      <acronym>CTF</acronym>-opties.  Om deze taak te volbrengen, wordt
      de &os;-broncode herbouwd met:</para>

    <!-- XXXTR: WITH_CTF has been reported to leave a use with a
	 broken system when used with buildworld.  Until this is
	 fixed, comment out those parts.  When uncommenting, kill
	 the extra screen.
    -->

    <screen>&prompt.root; <userinput>cd /usr/src</userinput>
<!-- &prompt.root; <userinput>make WITH_CTF=1 buildworld</userinput> -->
&prompt.root; <userinput>make WITH_CTF=1 kernel</userinput></screen>
<!-- &prompt.root; <userinput>make WITH_CTF=1 installworld</userinput>
&prompt.root; <userinput>mergemaster -Ui</userinput></screen> -->

    <para>Het systeem moet opnieuw gestart worden.</para>

    <para>Nadat opnieuw is opgestart en de nieuwe kernel in het geheugen
      is geladen, dient ondersteuning voor de Korn-shell te worden
      toegevoegd.  Dit is nodig omdat de verschillende hulpmiddelen van
      &dtrace; in <command>ksh</command> zijn geschreven.  Installeer
      <filename role="package">shells/ksh93</filename>.  Het is ook
      mogelijk om deze hulpmiddelen in <filename
	role="package">shells/pdksh</filename> of <filename
	role="package">shells/mksh</filename> te draaien.</para>

    <para>Als laatste dient de huidige &dtrace;-gereedschapskist
      verkregen te worden.  De huidige versie is beschikbaar op <ulink
	url="http://www.opensolaris.org/os/community/dtrace/dtracetoolkit/"></ulink>.
      Het bevat een installatiemechanisme; om gebruik te maken van de
      bijgeleverde hulpmiddelen is installatie echter niet nodig.</para>
  </sect1>

  <sect1 id="dtrace-using">
    <title>&dtrace; gebruiken</title>

    <para>Voordat er gebruik wordt gemaakt van de functionaliteit van
      &dtrace;, moet het &dtrace;-apparaat bestaan.  Geef het volgende
      commando om het apparaat te laten:</para>

    <screen>&prompt.root; <userinput>kldload dtraceall</userinput></screen>

    <para>Ondersteuning van &dtrace; zou nu beschikbaar moeten zijn.  De
      beheerder kan het volgende commando uitvoeren om alle sondes te
      bekijken:</para>

    <screen>&prompt.root; <userinput>dtrace -l | more</userinput></screen>

    <para>Alle uitvoer wordt aan het hulpmiddel <command>more</command>
      doorgegeven omdat het snel de schermbuffer zal laten overstromen.
      &dtrace; kan nu als werkend worden beschouwd.  Het is nu tijd om
      de gereedschapskist te bekijken.</para>

    <para>De gereedschapskist is een verzameling van kant-en-klare
      scripts die met &dtrace; gedraaid kunnen worden om informatie over
      het systeem te verzamelen.  Er zijn scripts om open bestanden,
      geheugen, <acronym>CPU</acronym>-gebruik, en nog veel meer te
      controleren.  Pak de scripts uit met het volgende commando:</para>

    <screen>&prompt.root; <userinput>gunzip -c DTraceToolkit* | tar xvf -</userinput></screen>

    <para>Ga naar die map met <command>cd</command> en zet de
      uitvoerpermissies voor alle bestanden waarvan de naam uit kleine
      letters bestaat, op <literal>755</literal>.</para>

    <para>De inhoud van al deze scripts moet veranderd worden.  Degenen
      die naar <filename>/usr/bin/ksh</filename> verwijzen dienen naar
      <filename>/usr/local/bin/ksh</filename> te verwijzen, de anderen
      die <filename>/usr/bin/sh</filename> gebruiken dienen gewijzigd te
      worden om <filename>/bin/sh</filename> te gebruiken, en tenslotte
      dienen degenen die <filename>/usr/bin/perl</filename> gebruiken
      veranderd te worden om <filename>/usr/local/bin/perl</filename> te
      gebruiken.</para>

    <important>
      <para>Op dit moment is het voorzichtig om de lezer eraan te
	herinneren dat de ondersteuning voor &dtrace; in &os;
	<emphasis>niet compleet</emphasis> en
	<emphasis>experimenteel</emphasis> is.  Veel van deze scripts
	zullen niet werken omdat ze of te &solaris;-specifiek zijn of
	omdat ze sondes gebruiken die momenteel niet ondersteund
	worden.</para>
    </important>

    <para>Op het moment van schrijven worden slechts twee scripts van de
      &dtrace; Toolkit volledig ondersteund in &os;: de scripts
      <filename>hotkernel</filename> en
      <filename>procsystime</filename>.  Dit zijn de twee die we in de
      volgende gedeelten van deze sectie zullen bekijken.</para>

    <para>De <filename>hotkernel</filename> is ontworpen om te
      identificeren welke functie de meeste kerneltijd gebruikt.  Als
      het normaal gedraaid wordt, zal het uitvoer die op de volgende
      lijkt produceren:</para>

    <screen>&prompt.root; <userinput>./hotkernel</userinput>
Sampling... Hit Ctrl-C to end.</screen>

    <para>De systeembeheerder moet de toetsencombinatie <keycombo
	action="simul"><keycap>Ctrl</keycap><keycap>C</keycap></keycombo>
      gebruiken om het proces te stoppen.  Nadat het gestopt is, zal het
      script een lijst van kernelfuncties en timinginformatie weergeven,
      waarbij de uitvoer in volgorde van toenemende tijd is
      gesorteerd:</para>

    <screen>kernel`_thread_lock_flags                                   2   0.0%
0xc1097063                                                  2   0.0%
kernel`sched_userret                                        2   0.0%
kernel`kern_select                                          2   0.0%
kernel`generic_copyin                                       3   0.0%
kernel`_mtx_assert                                          3   0.0%
kernel`vm_fault                                             3   0.0%
kernel`sopoll_generic                                       3   0.0%
kernel`fixup_filename                                       4   0.0%
kernel`_isitmyx                                             4   0.0%
kernel`find_instance                                        4   0.0%
kernel`_mtx_unlock_flags                                    5   0.0%
kernel`syscall                                              5   0.0%
kernel`DELAY                                                5   0.0%
0xc108a253                                                  6   0.0%
kernel`witness_lock                                         7   0.0%
kernel`read_aux_data_no_wait                                7   0.0%
kernel`Xint0x80_syscall                                     7   0.0%
kernel`witness_checkorder                                   7   0.0%
kernel`sse2_pagezero                                        8   0.0%
kernel`strncmp                                              9   0.0%
kernel`spinlock_exit                                       10   0.0%
kernel`_mtx_lock_flags                                     11   0.0%
kernel`witness_unlock                                      15   0.0%
kernel`sched_idletd                                       137   0.3%
0xc10981a5                                              42139  99.3%</screen>

    <!-- XXXTR: I attempted to use objdump and nm on /boot/kernel/kernel
        to find 0xc10981a5, but to no avail.  It would be nice to know
	how we should look that up. -->

    <para>Het script werkt ook met kernelmodules.  Draai het script met
      de vlag <option>-m</option> om deze mogelijkheid te
      gebruiken:</para>

    <screen>&prompt.root; <userinput>./hotkernel -m</userinput>
Sampling... Hit Ctrl-C to end.
^C
MODULE                                                  COUNT   PCNT
0xc107882e                                                  1   0.0%
0xc10e6aa4                                                  1   0.0%
0xc1076983                                                  1   0.0%
0xc109708a                                                  1   0.0%
0xc1075a5d                                                  1   0.0%
0xc1077325                                                  1   0.0%
0xc108a245                                                  1   0.0%
0xc107730d                                                  1   0.0%
0xc1097063                                                  2   0.0%
0xc108a253                                                 73   0.0%
kernel                                                    874   0.4%
0xc10981a5                                             213781  99.6%</screen>

    <!-- XXXTR: I was unable to match these up with output from
        kldstat and kldstat -v and grep.  Maybe I'm missing something
	seriously obvious.  It is 5AM btw. -->

    <para>Het script <filename>procsystime</filename> vangt en beeldt
      het tijdsgebruik van systeemaanroepen af voor een gegeven
      <acronym>PID</acronym> of procesnaam.  In het volgende voorbeeld
      wordt er een nieuwe instantie van <filename>/bin/csh</filename>
      gedraaid.  Het <filename>procsystime</filename> werd uitgevoerd en
      bleef wachten terwijl er enkele commando's op de andere instantie
      van <command>csh</command> werden getypt.  Dit zijn de resultaten
      van deze test:</para>

    <screen>&prompt.root; <userinput>./procsystime -n csh</userinput>
Tracing... Hit Ctrl-C to end...
^C

Elapsed Times for processes csh,

         SYSCALL          TIME (ns)
          getpid               6131
       sigreturn               8121
           close              19127
           fcntl              19959
             dup              26955
         setpgid              28070
            stat              31899
       setitimer              40938
           wait4              62717
       sigaction              67372
     sigprocmask             119091
    gettimeofday             183710
           write             263242
          execve             492547
           ioctl             770073
           vfork            3258923
      sigsuspend            6985124
            read         3988049784</screen>

    <para>Zoals te zien is, lijkt de systeemaanroep
      <function>read()</function> de meeste tijd in nanoseconden te
      gebruiken en gebruikte de systeemaanroep
      <function>getpid()</function> de minste hoeveelheid tijd.</para>
  </sect1>

  <sect1 id="dtrace-language">
    <title>De taal D</title>

    <para>De &dtrace;-gereedschapskist bevat vele scripts in de speciale
      taal van &dtrace;.  Deze taal wordt <quote>de taal D</quote>
      genoemd door de documentatie van &sun;, en lijkt sterk op C++.
      Een diepgaande discussie over de taal valt buiten het bereik van
      dit document.  Het wordt uitgebreid behandeld op <ulink
	url="http://wikis.sun.com/display/&dtrace;/Documentation"></ulink>.</para>
  </sect1>
</chapter>

<!-- XXXTR: Should probably put links and resources here.  I'm
     nervous about this chapter as it may require a partial
     re-write and large modification once DTrace is complete, but
     at least we can get everyone started ... -->
