.\" Copyright (c) 1990, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" This code is derived from software contributed to Berkeley by
.\" Chris Torek and the American National Standards Committee X3,
.\" on Information Processing Systems.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"     @(#)strcpy.3	8.1 (Berkeley) 6/4/93
.\" %FreeBSD: src/lib/libc/string/strcpy.3,v 1.26 2007/01/09 00:28:12 imp Exp %
.\" $FreeBSDru: frdp/doc/ru_RU.KOI8-R/man/man3/strcpy.3,v 1.2 2007/10/30 19:34:10 ru Exp $
.\" $FreeBSD$
.\"
.Dd 9 августа 2001
.Dt STRCPY 3
.Os
.Sh НАЗВАНИЕ
.Nm strcpy , strncpy
.Nd копировать строки
.Sh БИБЛИОТЕКА
.Lb libc
.Sh СИНТАКСИС
.In string.h
.Ft char *
.Fn stpcpy "char *dst" "const char *src"
.Ft char *
.Fn strcpy "char * restrict dst" "const char * restrict src"
.Ft char *
.Fn strncpy "char * restrict dst" "const char * restrict src" "size_t len"
.Sh ОПИСАНИЕ
Функции
.Fn stpcpy
и
.Fn strcpy
копируют исходную строку
.Fa src
в целевую строку
.Fa dst
(включая завершающий символ
.Ql \e0 ) .
.Pp
Функция
.Fn strncpy
копирует не более
.Fa len
символов из
.Fa src
в
.Fa dst .
Если длина
.Fa src
меньше, чем
.Fa len ,
остаток строки
.Fa dst
заполняется символами
.Ql \e0 .
В противном случае,
.Fa dst
.Em не
завершается символом
.Ql \e0 .
.Sh ВОЗВРАЩАЕМЫЕ ЗНАЧЕНИЯ
Функции
.Fn strcpy
и
.Fn strncpy
возвращают
.Fa dst .
Функция
.Fn stpcpy
возвращает указатель на завершающий символ
.Ql \e0
строки
.Fa dst .
.Sh ПРИМЕРЫ
Нижеследующее запишет строку
.Dq Li abc\e0\e0\e0
в массив
.Va chararray :
.Bd -literal -offset indent
char chararray[6];

(void)strncpy(chararray, "abc", sizeof(chararray));
.Ed
.Pp
Нижеследующее запишет в массив
.Va chararray
строку
.Dq Li abcdef :
.Bd -literal -offset indent
char chararray[6];

(void)strncpy(chararray, "abcdefgh", sizeof(chararray));
.Ed
.Pp
Необходимо заметить, что это
.Em не
завершит
.Va chararray
символом
.Tn NUL ,
поскольку длина исходной строки не меньше значения аргумента
.Fa len .
.Pp
Нижеследующее копирует столько символов из
.Va input
в
.Va buf ,
сколько возможно, и завершает результат символом
.Tn NUL .
Поскольку
.Fn strncpy
.Em не
гарантирует завершение строки символом
.Tn NUL ,
это должно быть сделано явно.
.Bd -literal -offset indent
char buf[1024];

(void)strncpy(buf, input, sizeof(buf) - 1);
buf[sizeof(buf) - 1] = '\e0';
.Ed
.Pp
Можно сделать то же самое, но лучше, с помощью
.Xr strlcpy 3 ,
как показано в следующем примере:
.Pp
.Dl "(void)strlcpy(buf, input, sizeof(buf));"
.Pp
Следует отметить, что поскольку функция
.Xr strlcpy 3
не определена ни в одном стандарте, то её стоит использовать
только в том случае, если переносимость не требуется.
.Sh СООБРАЖЕНИЯ БЕЗОПАСНОСТИ
Функция
.Fn strcpy
легко может быть использована неправильным способом, позволяющим
злонамеренному пользователю произвольным образом изменить
функциональность работающей программы посредством переполнения буфера
(buffer overflow attack).
(См.\& FSA и раздел
.Sx ПРИМЕРЫ . )
.Sh СМОТРИ ТАКЖЕ
.Xr bcopy 3 ,
.Xr memccpy 3 ,
.Xr memcpy 3 ,
.Xr memmove 3 ,
.Xr strlcpy 3
.Rs
.%T "The FreeBSD Security Architecture"
.Re
.Sh СТАНДАРТЫ
Функции
.Fn strcpy
и
.Fn strncpy
соответствуют стандарту
.St -isoC .
Функция
.Fn stpcpy
есть наследие MS-DOS и GNU, и не соответствует ни одному
стандарту.
.Sh ИСТОРИЯ
Функция
.Fn stpcpy
впервые появилась во
.Fx 4.4 ,
придя из Linux образца 1998 года.
