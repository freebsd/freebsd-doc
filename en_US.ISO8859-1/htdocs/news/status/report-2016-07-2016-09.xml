<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE report PUBLIC "-//FreeBSD//DTD FreeBSD XML Database for
  Status Report//EN"
  "http://www.FreeBSD.org/XML/share/xml/statusreport.dtd" >

<!-- $FreeBSD$ -->

<report>
  <date>
    <month>July-September</month>

    <year>2016</year>
  </date>

  <section>
    <title>Introduction</title>

    <p>As focused as we are on the present and what is happening
      now, it is sometimes useful to take a fresh look at where we have
      come from, and where we are going.  This quarter, we had our
      newest doc committer working to trace through the tangled
      history of many utilities, and we also get a glimpse looking
      forward at what may come in &os; 12.</p>

    <p>Though 11.0-RELEASE was not finalized until after the period
      covered in this report, we can still have some anticipatory
      excitement for the features that will be coming in 12.0.  The
      possibilities are tantalizing: a base system with no GPL
      components, arm64 as a Tier-1 architecture, capsicum protection
      for common utilities, and the CloudABI for custom software are
      just a few.</p>

    <p>The work of the present is no less exciting, with 11.0
      making its way out just after the end of Q3, the new core
      coming into its own, and much more that you'll have to read
      and find out.</p>

    <p>&mdash;Benjamin Kaduk</p>

    <p><hr /></p>

    <p>Please submit status reports for the fourth quarter of 2016
      by January 7.</p>
  </section>

  <category>
    <name>team</name>

    <description>&os; Team Reports</description>
  </category>

  <category>
    <name>proj</name>

    <description>Projects</description>
  </category>

  <category>
    <name>kern</name>

    <description>Kernel</description>
  </category>

  <category>
    <name>gsoc</name>

    <description>Google Summer of Code</description>
  </category>

  <category>
    <name>arch</name>

    <description>Architectures</description>
  </category>

  <category>
    <name>ports</name>

    <description>Ports</description>
  </category>

  <category>
    <name>doc</name>

    <description>Documentation</description>
  </category>

  <project cat='proj'>
    <title>ClonOS: New &os;-Based Free/Open Hosting Platform</title>

    <contact>
      <person>
	<name>
	  <given>Oleg</given>
	  <common>Ginzburg</common>
	</name>
	<email>olevole@olevole.ru</email>
      </person>
    </contact>

    <links>
      <url href="http://clonos.tekroutine.com">ClonOS Homepage</url>
    </links>

    <body>
      <p>Currently, &os; is well proven as a base for routers
	(<strong>pfSense</strong>, <strong>OPNSense</strong>,
	<strong>BSDRP</strong>) and NAS (<strong>FreeNAS</strong>,
	<strong>zfsGuru</strong>, <strong>NAS4Free</strong>).
	However, &os;-based solutions are almost completely absent in
	the virtualization area, and <strong>ClonOS</strong> is one of
	the attempts to change that.</p>

      <p>ClonOS is a new free open-source &os;-based platform for
	virtual environment creation and management.  In the core
	platform are:</p>

      <ul>
	<li>&os; as the host OS</li>

	<li><a href="https://man.FreeBSD.org/bhyve/8">bhyve</a></li>

	<li><a href="https://www.xenproject.org/">xen</a></li>

	<li><a href="https://man.FreeBSD.org/vale/4">vale</a></li>

	<li><a href="https://man.FreeBSD.org/jail/8">jail</a></li>

	<li><a href="https://www.bsdstore.ru/">CBSD</a> (as a
	  management tool)</li>

	<li><a href="https://puppet.com/">puppet</a> (for
	  configuration management)</li>

	<li>additional features such as go-micro services (obtaining
	  VMs, resizing disks, and so on)</li>
      </ul>
    </body>

    <help>
      <task>We would like to see ClonOS in real-world use.  In this
	regard we are interested in finding more people and companies
	that use &os; in hosting tasks.  In addition, it could be
	great to work with the developers of existing NAS solutions
	(zfsGuru, NAS4Free).
      </task>
    </help>
  </project>

  <project cat='gsoc'>
    <title>Google Summer of Code 2016</title>

    <contact>
      <person>
	<name>
	  <given>Gavin</given>
	  <common>Atkinson</common>
	</name>
	<email>gavin@FreeBSD.org</email>
      </person>

      <person>
	<name>
	  <given>Pedro</given>
	  <common>Giffuni</common>
	</name>
	<email>pfg@FreeBSD.org</email>
      </person>
    </contact>

    <links>
      <url href="https://wiki.FreeBSD.org/SummerOfCode2016Projects">GSoC 2016 Projects</url>
      <url href="https://wiki.FreeBSD.org/SummerOfCodeIdeas">GSoC Ideas page</url>
    </links>

    <body>
      <p>As in all previous editions of the Google Summer of Code,
	&os; was an accepted organization, and we had the chance to
	mentor 15 projects.  Huge thanks to all our mentors for
	keeping the high quality standards that make our community
	shine.</p>

      <p>This year was rather unique in that we accepted for the first
	time well-known members of the community that are not src
	committers to co-mentor.  We also accepted projects that have
	a different upstream than &os;.  Both are clear signs that
	&os; is growing and adapting to the wider community.</p>

      <p>This year we are also had administrative issues with Perforce
	and have officially accepted the use of external repositories,
	in particular github, as requested by students.</p>

      <p>12 of 15 projects were successful, which we think is an
	excellent result for a Google Summer of Code.</p>
    </body>

    <sponsor>
      Google Inc
    </sponsor>

    <sponsor>
      The FreeBSD Foundation
    </sponsor>

    <help>
      <task>The world is changing and we need fresh project ideas.  We
	need to start looking for those ideas
	<strong>now</strong>.</task>

      <task>The project ideas wiki page has been reset and we need to
	get it populated before applying for the next Google Summer of
	Code.  Please help unleash the next stream of projects you
	want to see in &os;.</task>
    </help>
  </project>

  <project cat='proj'>
    <title>CloudABI: Running Untrusted Programs Directly on top of
      &os;</title>

    <contact>
      <person>
	<name>
	  <given>Ed</given>
	  <common>Schouten</common>
	</name>
	<email>ed@FreeBSD.org</email>
      </person>

      <person>
	<name>The CloudABI mailing list</name>
	<email>cloudabi-devel@googlegroups.com</email>
      </person>
    </contact>

    <links>
      <url href="https://nuxi.nl/">Official CloudABI Website</url>
      <url href="https://nuxi.nl/cloudabi/freebsd/">Using CloudABI on &os;</url>
      <url href="https://nuxi.nl/blog/2016/08/01/cloudabi-python.html">Python for CloudABI</url>
      <url href="https://github.com/NuxiNL">CloudABI on GitHub</url>
    </links>

    <body>
      <p>CloudABI is a compact UNIX-like runtime environment inspired
	by &os;'s Capsicum security framework.  It allows you to
	safely run potentially untrusted programs directly on top of
	&os;, Linux and macOS, without requiring the use of
	virtualisation, jails, etc.  This makes it a useful building
	block for cluster/cloud computing.</p>

      <p>Over the last couple of months, several new libraries and
	applications have been ported over to CloudABI, the most
	important addition being Python 3.6.  This means that you can
	now write strongly sandboxed apps in Python!</p>

      <p>Support for different hardware platforms has also improved.
	In addition to amd64 and arm64, we now support i686 and armv6.
	The release of LLVM 3.9 was important to us, as it has
	integrated all the necessary changes to support the first
	three platforms.  Full armv6 support is still blocked on some
	issues with LLVM's linker, LLD.</p>
    </body>

    <sponsor>
      Nuxi, the Netherlands
    </sponsor>

    <help>
      <task>Play around with CloudABI and let us know what you think
	of it!  Full support for amd64 and arm64 is part of &os; 11.0.
	i686 and armv6 support is only available on head, but will be
	merged to the stable/11 branch in the future.</task>

      <task>Interested in Python programming? Give our copy of Python
	a try and share your experiences!</task>

      <task>Do you maintain pieces of software that could benefit from
	strong sandboxing?  Try building them using the CloudABI cross
	compiler!</task>
    </help>
  </project>

  <project cat='kern'>
    <title>&os; on Hyper-V and Azure</title>

    <contact>
      <person>
	<name>
	  <given>Sepherosa</given>
	  <common>Ziehau</common>
	</name>
	<email>sepherosa@gmail.com</email>
      </person>

      <person>
	<name>
	  <given>Hongjiang</given>
	  <common>Zhang</common>
	</name>
	<email>honzhan@microsoft.com</email>
      </person>

      <person>
	<name>
	  <given>Dexuan</given>
	  <common>Cui</common>
	</name>
	<email>decui@microsoft.com</email>
      </person>

      <person>
	<name>
	  <given>Kylie</given>
	  <common>Liang</common>
	</name>
	<email>kyliel@microsoft.com</email>
      </person>
    </contact>

    <links>
      <url href="https://wiki.FreeBSD.org/HyperV">&os; Virtual Machines on Microsoft Hyper-V</url>
      <url href="https://technet.microsoft.com/en-us/library/dn531030.aspx">Supported Linux and &os; virtual machines for Hyper-V on Windows</url>
    </links>

    <body>
      <p>This quarter, the Hyper-V storage driver was greatly
	improved: its performance was increased by a factor of 1.2-2
	by applying BUS_DMA and UNMAP_IO, enlarging the request queue,
	and selecting the outgoing channel with the LUN considered;
	TRIM/UNMAP was enabled; and some critical bugs (PRs 209443,
	211000, 212998) were fixed so that disk hot add/remove and
	VHDX online resizing should work now.</p>

      <p>The VMBus driver also received attention, with enhancements
	made for the handling of device hot add/remove.</p>

      <p> In the Hyper-V network driver, configurable RSS key and
	dynamic MTU change are now supported.</p>

      <p>&os; images on Azure continue to be updated &mdash; after
	publishing the &os; 10.3 VM image on the global Microsoft
	Azure in June, Microsoft also published the VM image on the
	Microsoft Azure operated by 21Vianet in China in
	September.</p>

      <p>Patches have been developed to support PCIe pass-through
	(also known as Discrete Device Assignment); this feature
	allows physical PCIe devices to be passed through to &os; VMs
	running on Hyper-V (Windows Server 2016), giving them
	near-native performance with low CPU utilization.  The patch
	to enable the feature will be posted for review soon.</p>
    </body>

    <sponsor>
      Microsoft
    </sponsor>
  </project>

  <project cat='gsoc'>
    <title><tt>ptnet</tt> Driver and <tt>bhyve</tt> Device
      Model</title>

    <contact>
      <person>
	<name>
	  <given>Vincenzo</given>
	  <common>Maffione</common>
	</name>
	<email>v.maffione@gmail.com</email>
      </person>
    </contact>

    <links>
      <url href="https://wiki.FreeBSD.org/SummerOfCode2016/PtnetDriverAndDeviceModel">&os; Wiki Page for Project Overview</url>
      <url href="http://info.iet.unipi.it/~luigi/papers/20160613-ptnet.pdf">Conference Paper</url>
      <url href="https://svnweb.FreeBSD.org/socsvn/soc2016/vincenzo/head/">Subversion Repository</url>
    </links>

    <body>
      <p>This project provides:</p>

      <ul>
	<li>A new driver (<tt>if_ptnet</tt>) for a paravirtualized
	  network device, modeled after the netmap API.  The driver
	  supports multi-queue netmap ports, and it is able to work
	  both in netmap mode and in normal mode.</li>

	<li>The emulation of the <tt>ptnet</tt> device model as a
	  module of the <tt>bhyve</tt> hypervisor.</li>
      </ul>

      <p>The <tt>ptnet</tt> device and driver has been introduced to
	overcome the performance limitations of TCP/IP networking
	between bhyve VMs.  Prior to this work, the most performant
	solution for VM-to-VM intra-host TCP communication provided
	less than 2 Gbps TCP throughput.  With <tt>ptnet</tt>, in the
	same VM-to-VM TCP communication scenario, it is possible to
	obtain up to 20 Gbps.</p>
    </body>

    <sponsor>
      Google Summer of Code
    </sponsor>

    <help>
      <task>Share <tt>virtio-net</tt> header management code with the
	<tt>if_vtnet</tt> driver.  In the current code, about 100
	lines of code have been copied and pasted from
	<tt>if_vtnet.c</tt>.</task>
    </help>
  </project>

  <project cat='ports'>
    <title>LXQt on &os;</title>

    <contact>
      <person>
	<name>
	  <given>Olivier</given>
	  <common>Duchateau</common>
	</name>
	<email>olivierd@FreeBSD.org</email>
      </person>

      <person>
	<name>
	  <given>Jesper</given>
	  <common>Schmitz Mouridsen</common>
	</name>
	<email>jesper@schmitz.computer</email>
      </person>
    </contact>

    <links>
      <url href="https://wiki.FreeBSD.org/LXQt">&os; LXQt Project</url>
      <url href="http://lxqt.org/">LXQt Project</url>
      <url href="https://www.assembla.com/spaces/lxqt/subversion/source">LXQt Development Repository</url>
    </links>

    <body>
      <p>LXQt is the Qt port of and the upcoming version of LXDE, the
	Lightweight Desktop Environment.  It is the product of a merge
	between the LXDE-Qt and Razor-qt projects.</p>

      <p>The porting effort remains very much a work in progress: it
	requires some components of Plasma 5, the new major KDE
	workspace.</p>

      <p>The porting of the 0.11 branch is now complete, with new
	ports (compared to the previous release).  See our wiki page
	for a complete list of applications.</p>

      <p>We also have updates for:</p>

      <ul>

	<li><tt>x11-toolkits/qtermwidget</tt> (0.7.0)</li>

	<li><tt>x11/qterminal</tt> (0.7.0)</li>

	<li><tt>x11/qterminal-l10n</tt></li>
      </ul>
    </body>

    <help>
      <task> Improve &os; support in <tt>sysutils/lxqt-admin</tt>,
	especially with respect to user management.</task>

      <task>Add additional panel plugins.</task>
    </help>
  </project>

  <project cat='ports'>
    <title>Xfce on &os;</title>

    <contact>
      <person>
	<name>
	  <given>&os; Xfce Team</given>
	</name>
	<email>xfce@FreeBSD.org</email>
      </person>
    </contact>

    <links>
      <url href="https://wiki.FreeBSD.org/Xfce">&os; Xfce Project</url>
      <url href="https://www.assembla.com/spaces/xfce4/subversion/source">&os; Xfce Repository</url>
    </links>

    <body>
      <p>Xfce is a free software desktop environment for Unix and
	Unix-like platforms such as &os;.  It aims to be fast and
	lightweight, while still being visually appealing and easy to
	use.</p>

      <p>During this quarter, the team has kept these applications
	up-to-date:</p>

      <ul>
	<li><tt>audio/xfmpc</tt> (0.2.3)</li>

	<li><tt>deskutils/xfce4-notifyd</tt> (0.3.2)</li>

	<li><tt>deskutils/xfce4-volumed-pulse</tt> (0.2.2)</li>

	<li><tt>devel/thunar-vcs-plugin</tt> (0.1.5)</li>

	<li><tt>misc/xfce4-weather-plugin</tt> (0.8.8)</li>

	<li><tt>sysutils/xfce4-settings</tt> (4.12.1)</li>

	<li><tt>x11/xfce4-clipman-plugin</tt> (1.4.0)</li>

	<li><tt>x11/xfce4-dashboard</tt> (0.6.0)</li>

	<li><tt>x11/xfce4-goodies</tt>, the meta-port for the Xfce4
	  Goodies Project (plugins, applications)</li>

	<li><tt>x11/xfce4-whiskermenu-plugin</tt> (1.6.0)</li>
      </ul>

      <p>We also follow the unstable releases; the current unstable
	release brings support for Gtk3 (available in our experimental
	repository) to:</p>

      <ul>
	<li><tt>audio/xfce4-mpc-plugin</tt> (0.4.99)</li>

	<li><tt>sysutils/garcon</tt> (0.5.0)</li>

	<li><tt>sysutils/xfce4-battery-plugin</tt> (1.0.99)</li>

	<li><tt>sysutils/xfce4-diskperf-plugin</tt> (2.5.99)</li>

	<li><tt>sysutils/xfce4-fsguard-plugin</tt> (1.0.99)</li>

	<li><tt>sysutils/xfce4-netload-plugin</tt> (1.2.99)</li>

	<li><tt>sysutils/xfce4-systemload-plugin</tt> (1.1.99)</li>

	<li><tt>www/xfce4-smartbookmark-plugin</tt> (0.4.99)</li>

	<li><tt>x11/libexo</tt> (0.11.1)</li>

	<li><tt>x11/libxfce4menu</tt> (4.13.1)</li>

	<li><tt>x11/xfce4-dashboard</tt> (0.7.0)</li>

	<li><tt>x11/xfce4-terminal</tt> (0.6.92)</li>

	<li><tt>x11/xfce4-whiskermenu-plugin</tt> (2.0.1)</li>

	<li><tt>x11-clocks/xfce4-datetime-plugin</tt> (0.6.99)</li>
      </ul>

      <p>Currently the unstable releases work fine with our Gtk3
	ports available in the ports tree, but in the future support
	for 3.18 will be removed in preference of 3.20.x.</p>
    </body>

    <help>
      <task>Continue working on unstable releases.</task>
    </help>
  </project>

  <project cat='gsoc'>
    <title>Non-BSM to BSM Conversion Tools</title>

    <contact>
      <person>
	<name>
	  <given>Mateusz</given>
	  <common>Piotrowski</common>
	</name>
	<email>0mp@FreeBSD.org</email>
      </person>
    </contact>

    <links>
      <url href="https://wiki.FreeBSD.org/SummerOfCode2016/NonBSMtoBSMConversionTools">Wiki Page</url>
      <url href="https://github.com/0mp/FreeBSD">GitHub Repository</url>
      <url href="https://github.com/0mp/FreeBSD/pull/9">Pull Request With Consolidated Patch</url>
    </links>

    <body>
      <p>This project was started during Google Summer of Code this
	year.  The aim was to create a library which can convert the
	audit trail files in Linux Audit format or the format used by
	Windows to the BSM format used by &os; for its audit logs.
	Apart from that, I wanted to create a simple command-line tool
	and extend <tt>auditdistd</tt> so that it is possible to send
	non-BSM logs to it over a secure connection and save those
	audit logs on disk, preferably in the BSM format.</p>

      <p>So far, it is possible to reasonably convert some of the most
	common Linux audit log events to BSM, but it still needs a lot
	of work.  Secondly, I was able to configure
	<tt>auditdistd</tt> to communicate with CentOS over an
	insecure connection.  Thirdly, the command-line tool is usable
	but not perfect.</p>

      <p>The present work focuses on configuring the secure TLS
	connection between CentOS and <tt>auditdistd</tt>.  I have
	already tried using <tt>rsyslogd</tt> but was not able to make it
	work.</p>
    </body>

    <sponsor>
      Google Summer of Code
    </sponsor>

    <help>
      <task>I need more examples of rare Linux Audit logs; please send
	me some examples if you have any.  It is much easier to
	improve the conversion process with real-life examples of
	audit events as you write the code to convert them.</task>

      <task>Configure <tt>auditdistd</tt> to be able to communicate
	with some software on CentOS over TLS in order to receive
	audit logs.  I was not able to come up with a simple solution
	for that.</task>

      <task>Additional open tasks are listed on the Wiki page and in
	the <tt>TODO</tt> file in the root directory of the project.</task>
    </help>
  </project>

  <project cat='proj'>
    <title>Improvements to Non-Transparent Bridge Subsystem</title>

    <contact>
      <person>
	<name>
	  <given>Alexander</given>
	  <common>Motin</common>
	</name>
	<email>mav@FreeBSD.org</email>
      </person>
    </contact>

    <body>
      <p>Non-Transparent Bridges allow the creation of memory windows
	between different systems using the regular PCIe links of CPUs
	as a transport.  During the last quarter, the NTB subsystem
	gained a significant set of improvements and fixes:</p>

      <ul>
	<li>The code was modularized, utilizing &os;'s NewBus
	  interfaces to allow support for different hardware types
	  with different drivers, support for multiple NTB instances
	  in a system, using the <tt>ntb_transport</tt> module for
	  consumers other than <tt>if_ntb</tt>, etc.</li>

	<li>Support for splitting NTB resources between different
	  applications was added, such as doing direct access to some
	  range of remote memory and to a virtual network interface
	  between nodes at the same time, etc.</li>

	<li>The virtual network interface driver gained support for
	  many modern features, such as multiple queues, new locking,
	  etc.</li>

	<li>NTB performance and SMP scalability was improved.</li>

	<li>Multiple workarounds for hardware issues were added.</li>
      </ul>

      <p>The code is committed to the &os; head, stable/11 and
	stable/10 branches.</p>
    </body>

    <sponsor>
      iXsystems, Inc
    </sponsor>

    <help>
      <task>Support for the next generation of Intel hardware.</task>

      <task>Support for non-Intel hardware (AMD, PLX, etc.).</task>

      <task>Support for I/OAT and other DMA offloads.</task>

      <task>Creating a more efficient packet transport
	protocol.</task>

      <task>Creating a greater variety of NTB applications.</task>
    </help>
  </project>

  <project cat='proj'>
    <title>ZFS Code Sync with Latest OpenZFS/Illumos</title>

    <contact>
      <person>
	<name>
	  <given>Alexander</given>
	  <common>Motin</common>
	</name>
	<email>mav@FreeBSD.org</email>
      </person>

      <person>
	<name>
	  <given>Andriy</given>
	  <common>Gapon</common>
	</name>
	<email>avg@FreeBSD.org</email>
      </person>
    </contact>

    <body>
      <p>The ZFS code base in &os; regularly gets merges of new code,
	staying in sync with the latest OpenZFS/Illumos sources.  Among
	other things, the latest merge included the following
	improvements:</p>

      <ul>
	<li>The ARC now mostly stores compressed data, the same as is
	  stored on disk, decompressing them on demand.</li>

	<li>The L2ARC now stores the same (compressed) data as the ARC
	  without recompression, and its RAM usage was further
	  reduced.</li>

	<li>The largest size of indirect block possible has been
	  increased from 16KB to 128KB, and speculative prefetching of
	  indirect blocks is now performed.</li>

	<li>Improved ordering of space allocation.</li>

	<li>The SHA-512t256 and Skein hashing algorithms are now
	  supported.</li>
      </ul>
    </body>
  </project>

  <project cat='arch'>
    <title>&os; on Marvell Armada38x</title>

    <contact>
      <person>
	<name>
	  <given>Marcin</given>
	  <common>Wojtas</common>
	</name>
	<email>mw@semihalf.com</email>
      </person>

      <person>
	<name>
	  <given>Bartosz</given>
	  <common>Szczepanek</common>
	</name>
	<email>bsz@semihalf.com</email>
      </person>
    </contact>


    <body>
      <p>&os; includes support for the Marvell Armada38x platform,
	which has been tested and improved in order to gain production
	quality.  Most of this effort has been invested in development
	and benchmarking of the on-chip Gigabit Ethernet (NETA)
	functionality.  Numerous bug fixes and some new features have
	been introduced.</p>

      <p>Work completed this quarter includes:</p>

      <ul>
	<li>NETA rework and improvements.</li>

	<li>Enable multi-port support in PCIe 2.0 driver
	  (<tt>mv_pci_ctrl</tt>).</li>

	<li>Introduce an alternative, coherent, <tt>bus_dma</tt> for
	  the armv7 arch.</li>

	<li>AHCI controller support.</li>

	<li>SDHCI controller support.</li>

	<li>Improve the <tt>e6000sw</tt> etherswitch driver.</li>

	<li>Fix Marvell bus configuration for numerous
	  interfaces.</li>
      </ul>

      <p>Along with support for new boards (SolidRun ClearFog and
	DB-88F6285-AP), all changes will be submitted upstream.</p>
    </body>

    <sponsor>
      Stormshield
    </sponsor>

    <sponsor>
      Semihalf
    </sponsor>

    <help>
      <task>Finalize NETA and prepare for submission.</task>

      <task>Submit remaining fixes and drivers.</task>
    </help>
  </project>

  <project cat='kern'>
    <title>&os; Driver for the Annapurna Labs ENA</title>

    <contact>
      <person>
	<name>
	  <given>Jan</given>
	  <common>Medala</common>
	</name>
	<email>jan@semihalf.com</email>
      </person>

      <person>
	<name>
	  <given>Jakub</given>
	  <common>Palider</common>
	</name>
	<email>jpa@semihalf.com</email>
      </person>
    </contact>

    <links>
      <url href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/enhanced-networking.html">Amazon AWS Documentation of the ENA</url>
    </links>

    <body>
      <p>The Elastic Network Adapter (ENA) is a 25G SmartNIC developed
	by Annapurna Labs based on a custom ARMv8 chip.  This is a
	high-performance networking card that is available to AWS
	virtual machines.  It introduces enhancements in network
	utilization scalability on EC2 machines running various
	operating systems, in particular &os;.</p>

      <p>The goal of &os; enablement is to provide top performance and
	a wide range of monitoring and management features such
	as:</p>

      <ul>
	<li>multiple queue modes</li>

	<li>various offload functionality</li>

	<li>admin queue</li>

	<li>asynchronous notification</li>

	<li>robust hardware access</li>

	<li>scalable number of MSI-X interrupts</li>

	<li>counters</li>
      </ul>

      <p>The current state offers stable driver operation with good
	performance on machines running &os; directly on the
	hardware.</p>
    </body>

    <sponsor>
      Annapurna Labs &mdash; an Amazon company
    </sponsor>

    <help>
      <task>Optimize performance for virtualized environments.</task>

      <task>Prepare for submitting the driver as a Phabricator
	review.</task>
    </help>
  </project>

  <project cat='arch'>
    <title>&os; on Annapurna Labs Alpine</title>

    <contact>
      <person>
	<name>
	  <given>Jan</given>
	  <common>Medala</common>
	</name>
	<email>jan@semihalf.com</email>
      </person>

      <person>
	<name>
	  <given>Michal</given>
	  <common>Stanek</common>
	</name>
	<email>mst@semihalf.com</email>
      </person>

      <person>
	<name>
	  <given>Wojciech</given>
	  <common>Macek</common>
	</name>
	<email>wma@semihalf.com</email>
      </person>
    </contact>

    <body>
      <p>Alpine is a family of Platform-on-Chip devices, including
	multi-core 32-bit (first-gen Alpine) and 64-bit (Alpine V2)
	ARM CPUs, developed by Annapurna Labs.</p>

      <p>The primary focus areas of the Alpine platform are
	high-performance networking, storage, and embedded
	applications.  The network subsystem features 10-, 25-, and
	50-Gbit Ethernet controllers with support for virtualization,
	load-balancing, hardware offload and other advanced
	features.</p>

      <p>A basic patch set has already been committed to head
	including:</p>

      <ul>
	<li>PCIe Root Complex support</li>

	<li>Cache Coherency Unit driver</li>

	<li>North Bridge Service driver</li>

	<li>Updated Alpine HAL</li>

	<li>Extended MSI support in GICv2 and GICv3 code</li>
      </ul>

      <p>Additional work, such as an MSI-X driver and full Ethernet
	support, is currently undergoing community review on
	Phabricator.</p>

      <p>The multi-user SMP system is stable and fully working, along
	with the 1G and 10G Ethernet links.</p>

      <p>The interrupt management code has been adjusted to work with
	the new INTRNG framework on both ARM32 and ARM64.</p>
    </body>

    <sponsor>
      Annapurna Labs &mdash; an Amazon company
    </sponsor>

    <sponsor>
      Semihalf
    </sponsor>
  </project>

  <project cat='doc'>
    <title>Documenting the History of Utilities in <tt>/bin</tt> and
      <tt>/sbin</tt></title>

    <contact>
      <person>
	<name>
	  <given>Sevan</given>
	  <common>Janiyan</common>
	</name>
	<email>sevan@FreeBSD.org</email>
      </person>
    </contact>

    <links>
      <url href="https://svnweb.FreeBSD.org/ports/head/textproc/igor">The <tt>igor</tt> Port</url>
      <url href="https://svnweb.FreeBSD.org/base/head/share/misc/bsd-family-tree?view=log">BSD Family Tree in Subversion</url>
      <url href="http://www.tuhs.org">The UNIX Heritage Society</url>
      <url href="http://man.cat-v.org">Cat-V Manual Library</url>
    </links>

    <body>
      <p>For EuroBSDcon, I began looking into inconsistencies within
	components inside our family of operating systems.  My
	workflow consisted of reading the documentation for a given
	utility and checking the history in the revision control
	system for missing fixes or functionality in the trees of
	NetBSD, &os;, OpenBSD, and DragonFly BSD.</p>

      <p>One thing which became obvious very quickly was the
	inconsistency between operating systems about where and/or
	which version a utility originated in, despite our common
	heritage.</p>

      <p>I began working through the man pages in &os;, verifying
	the details in pages which already had a history section and
	making patches for those which did not.</p>

      <p>From there, changes were propogated out to NetBSD, OpenBSD,
	and Dragonfly BSD where applicable (not all utilities
	originated from the same source or implementation, for
	example).</p>

      <p>This was a good exercise in:</p>

      <ul>
	<li>Becoming familiar with
	  <a href="http://mdocml.bsd.lv/man">mandoc</a>.</li>

	<li>Using tools such as the linting functionality in mandoc
	  and the <tt>igor</tt> documentation script.</li>

	<li>Becoming familiar with the locations where things are
	  documented and with external sources of historical
	  information, such as the BSD Family Tree included in the
	  &os; base system, and projects like
	  <a href="http://www.tuhs.org">The UNIX Heritage Society</a>
	  and the <a href="http://man.cat-v.org">manual library</a>
	  on <a href="http://cat-v.org">cat-v.org</a> which hosts
	  copies of manuals such as those shipped with
	  <a href="https://en.wikipedia.org/wiki/Research_Unix">Research UNIX</a>.
	  These manuals are not commonly available elsewhere.</li>
      </ul>
    </body>

    <help>
      <task>Cover the remaining manuals for userland utilities, and
	maybe expand into library and syscall APIs, though I say that
	without estimating the feasibility.  The history of components
	originating from a closed-source operating system is tricky to
	document, since older versions are not always
	available.</task>
    </help>
  </project>

  <project cat='proj'>
    <title>VirtualBox Shared Folders Filesystem</title>

    <contact>
      <person>
	<name>
	  <given>Li-Wen</given>
	  <common>Hsu</common>
	</name>
	<email>lwhsu@FreeBSD.org</email>
      </person>

      <person>
	<name>
	  <given>Oleksandr</given>
	  <common>Tymoshenko</common>
	</name>
	<email>gonzo@FreeBSD.org</email>
      </person>
    </contact>

    <links>
      <url href="https://github.com/lwhsu/FreeBSD-vboxfs">Project Repository</url>
    </links>

    <body>
      <p>&os; provides an API for guest operating systems to access
	shared folders on the host so that the kernel driver can
	expose them to the guest's userland.  This project aims to add
	such functionality to the VirtualBox Guest Additions
	driver.</p>

      <p>Good progress was made over the last few months.  Developers were
	able to mount a filesystem in read-only mode and, with some
	limitations, in read-write mode.  The implementation still
	lacks some critical pieces, but the roadmap is clear.</p>
    </body>

    <help>
      <task>Finish the missing pieces.</task>

      <task>Implement proper locking.</task>

      <task>General clean-up and bugfixes.</task>
    </help>
  </project>

  <project cat='kern'>
    <title><tt>evdev</tt> Support</title>

    <contact>
      <person>
	<name>
	  <given>Vladimir</given>
	  <common>Kondratiev</common>
	</name>
	<email>wulf@cicgroup.ru</email>
      </person>

      <person>
	<name>
	  <given>Oleksandr</given>
	  <common>Tymoshenko</common>
	</name>
	<email>gonzo@FreeBSD.org</email>
      </person>
    </contact>

    <links>
      <url href="https://github.com/wulf7/&os;">evdev WIP Repository</url>
      <url href="https://wiki.FreeBSD.org/SummerOfCode2014/evdev_Touchscreens">Original evdev Proposal</url>
    </links>

    <body>
      <p><tt>evdev</tt> is a portable, API-compatible implementation
	of the Linux <tt>/dev/input/eventX</tt> interface.  It covers
	a wide variety of input devices like keyboards, mice, and
	touchscreens (with multitouch support), and support for it is
	implemented in a lot of existing userland components like Qt,
	<tt>libinput</tt>, and <tt>tslib</tt>.</p>

      <p><tt>evdev</tt> support was started by Jakub Klama as a Google
	SoC 2014 project, and later picked up and finished by Vladimir
	Kondratiev.  General API and <tt>evdev</tt> support bits for
	<tt>ukbd</tt> and <tt>ums</tt> were committed to head.
	Support was also added for TI's AM33xx touchstreen controller
	(the popular BeagleBone is based on the AM33xx) and the
	official touchscreen for the Raspberry Pi.  Multitouch support
	for the Raspberry Pi was successfully demonstrated using the
	latest Qt development branch.</p>
    </body>

    <help>
      <task>Documentation.  In particular, manual pages are needed for
	the KPI.</task>

      <task>Support additional hardware.</task>

      <task>Enable <tt>evdev</tt> support in existing ports, and add
	new <tt>evdev</tt>-dependent ports.</task>
    </help>
  </project>

  <project cat='arch'>
    <title>&os;/arm64</title>

    <contact>
      <person>
	<name>
	  <given>Andrew</given>
	  <common>Turner</common>
	</name>
	<email>andrew@FreeBSD.org</email>
      </person>

      <person>
	<name>
	  <given>Jared</given>
	  <common>McNeill</common>
	</name>
	<email>jmcneill@FreeBSD.org</email>
      </person>
    </contact>

    <links>
      <url href="https://wiki.FreeBSD.org/arm64">&os; arm64 Wiki Entry</url>
      <url href="https://github.com/wca/crochet/tree/add-pine64-support">Using Crochet to Build &os; Images</url>
    </links>

    <body>
      <p>Transparent superpage support has been added.  This allows
	&os; to create 2MiB blocks with a single pagetable and TLB
	entry.  This shows a small but significant improvement in the
	buildworld time on ThunderX machines.  Superpages have been
	enabled in head and merged to stable/11, but they are disabled
	by default on stable/11 due to a lack of testing there.</p>

      <p>Support for the pre-INTRNG interrupt framework has been
	removed.  This means that arm64 requires INTRNG to even build.
	This has allowed various cleanups within the arm64 drivers
	that interact with the interrupt controller.</p>

      <p>The cortex Strings library from Linaro has been imported.
	The parts of this that have been shown to be improvements over
	the previous C code were attached to the libc build.</p>

      <p>There is ongoing work to add ACPI support to the kernel.  On
	ThunderX, &os; can get to the mountroot prompt, however, due
	to incomplete ACPI tables the external PCIe support needed to
	support the netboot setup in the test cluster is not
	functional.</p>

      <p>Pine64 support has been committed to head.  &os; can now boot
	to multiuser with SMP enabled.  This includes support for
	clocks, secure ID controller, USB Host controller, GPIOs,
	non-maskable interrupts, AXP81x power management unit, cpu
	freqency and voltage scaling, MMC, UART, gigabit networking,
	watchdog, and thermal sensors.</p>
    </body>

    <sponsor>
      The FreeBSD Foundation
    </sponsor>

    <sponsor>
      ABT Systems Ltd
    </sponsor>
  </project>

  <project cat='ports'>
    <title>KDE on &os;</title>

    <contact>
      <person>
	<name>KDE on &os; Team</name>
	<email>kde@FreeBSD.org</email>
      </person>
    </contact>

    <links>
      <url href="https://FreeBSD.kde.org/">KDE on &os; website</url>
      <url href="https://FreeBSD.kde.org/area51.php">KDE ports staging area</url>
      <url href="https://wiki.FreeBSD.org/KDE">KDE on &os; wiki</url>
      <url href="https://mail.kde.org/mailman/listinfo/kde-FreeBSD">KDE/&os; mailing list</url>
      <url href="http://src.mouf.net/area51/log/branches/plasma5">Development repository for integrating Plasma 5 and KDE Frameworks 5</url>
      <url href="http://src.mouf.net/area51/log/branches/qt-5.7">Development repository for integrating Qt 5.7</url>
    </links>

    <body>
      <p>The KDE on &os; team focuses on packaging the KDE software
	and making sure that the experience of KDE and Qt on &os; is
	as good as possible.</p>

      <p>The following big updates were landed in the ports tree this
	quarter:</p>

      <ul>
	<li>Added a Qt5 option to <tt>multimedia/mlt</tt>.</li>

	<li>Added the <tt>devel/grantlee5</tt> port and, with it,
	  <tt>Uses/grantlee.mk</tt>.</li>

	<li>Added the <tt>multimedia/gstreamer1-qt5</tt> port.</li>

	<li>Added the <tt>net-im/telepathy-qt5</tt> port.</li>

	<li>CMake was updated to versions 3.6.1 and 3.6.2.</li>

	<li>An important fix was made to <tt>qmake</tt>, where the
	  clang version was not correctly detected.</li>

	<li>Qt 5.6.1 was committed to ports.</li>

	<li>Phonon and its backend to were updated to 4.9.0 in
	  preparation for Qt 5.6.1.</li>

	<li>Updated the <tt>net-im/telepathy-qt4</tt> port to
	  0.9.7.</li>

	<li>Various LibreSSL related fixes by Matthew Rezny.</li>

	<li>bsd.kde4.mk has been replaced by Uses/kde.mk.</li>

	<li><tt>www/webkit-qt5</tt> was fixed to depend on the systems
	  leveldb.</li>
      </ul>

      <p>In our development repository, we have done this
	work:</p>

      <ul>
	<li>The plasma5 branch has been kept up to date with KDE's
	  upstream and contains ports for Frameworks 5.26.0, Plasma
	  Desktop 5.8.0, and Applications 16.08.1
	  (branches/plasma5).</li>
      </ul>
    </body>
  </project>

  <project cat='team'>
    <title>The &os; Core Team</title>

    <contact>
      <person>
	<name>&os; Core Team</name>
	<email>core@FreeBSD.org</email>
      </person>
    </contact>

    <body>
      <p>The third quarter started with the handover to the ninth Core
	team as it took office.  With four members returning from the
	previous core (Baptiste Daroussin, Ed Maste, George
	Neville-Neil and Hiroki Sato), one returning member after a
	term away (John Baldwin), and four members new to core (Allan
	Jude, Kris Moore, Benedict Reuschling and Benno Rice), the new
	core team represents just about the ideal balance between
	experience and fresh blood.</p>

      <p>Beyond handing over all of the ongoing business, reviewing
	everything on Core's agenda, and other routine changeover
	activities, the first action of the new core was to respond to
	a query from Craig Rodrigues concerning how hardware supplied
	to the project through donations to the &os; Foundation was
	being used.</p>

      <p>The Foundation does keep records of what hardware has been
	supplied over time and has some idea of the original purpose
	that hardware was provisioned for, but does not track the
	current usage of the project's hardware assets.  Cluster
	administration keeps their own configuration database, but
	this is not suitable for general publication and covers much
	more than Foundation supplied equipment.  After some
	discussion it was decided that updated information about the
	current disposition of Foundation supplied equipment should be
	incorporated in the Foundation's annual report.</p>

      <p>Ensuring that all of the &os; code base is supplied under
	open and unencumbered licensing terms and that we do not
	infringe on patent terms or otherwise act counter to any legal
	requirements are some of Core's primary concerns.  During this
	quarter, there were three items of this nature.</p>

      <ul>
	<li>Importing Concurrency Kit.  In consultation with the
	  Foundation's legal counsel, it was determined that
	  importing selected parts of concurrency kit is acceptable,
	  and has been approved.</li>

	<li>The proposal to create a shadow GPLv3 toolchain repository
	  was put to the community.  Ultimately the whole idea has
	  been rendered largely redundant by faster than anticipated
	  progress on the external toolchain ports and packages for
	  those architectures where LLVM is not yet sufficiently
	  mature.</li>

	<li>Concerns were raised about handling GPL code in work in
	  progress on the linuxkpi shim. This issue is not related to
	  the FreeBSD svn repository but Core would like to stress
	  that care must be taken to avoid license infringement and
	  plans to write a set of guidelines for handling GPL
	  code.</li>
      </ul>

      <p>The item that has absorbed the largest portion of Core's
	attention this quarter concerns the project's handling of
	security vulnerabilities in <tt>bspatch(1)</tt>,
	<tt>libarchive(3)</tt>,
	<tt>freebsd-update(8)</tt> and <tt>portsnap(8)</tt>.
	A partial fix was applied
	in &os;-SA-16:25.bspatch but this lacks fixes to <tt>libarchive</tt>
	code that were not yet available from upstream.</p>

      <p>SecTeam receives privileged early reports of many
	vulnerabilities and consequently has a strict policy of not
	commenting publicly until an advisory and patches have been
	published.  Early access to information about vulnerabilities
	is contingent on their ability to avoid premature disclosure,
	and without such, they could not have security advisories and
	patches ready to go immediately when a vulnerability is
	published.</p>

      <p>However, in this case, vulnerabilities were already public
	and the lack of any official response from the &os; Project
	was leading to concern amongst users and some critical press
	coverage.  Core stepped in and published a statement
	clarifying the situation and the particular difficulties
	involved in securely modifying the mechanisms used to deliver
	security patches.  Core believes that prompt notification and
	discussion of the implications and possible workarounds to any
	<i>public</i> vulnerability should not wait on the
	availability of formal OS patches.</p>

      <p>The OpenSSH project has deprecated DSA keys upstream.  &os;
	had kept DSA keys enabled in the later 10.x releases for
	compatibility reasons, but with the release of 11.0 the time
	has come to synchronize again with upstream.  Since there are
	numerous DSA keys in use in the &os; cluster, this
	necessitated an exercise to get replacement keys installed.
	Core would like to thank David Wolfskill and the accounts team
	for handling the surge in key changes with a great deal of
	aplomb.</p>

      <p>During this quarter we welcomed Michael Zhilin, Imre Vadasz,
	Steve Kiernan and Toomas Soome as new source committers.  Over
	the same period, we said farewell to Martin Wilke and Erwin
	Lansing who have handed in their commit bits.  We wish them
	well in their future endeavours and hope to see them return as
	soon as they can.</p>
    </body>
  </project>

  <project cat='kern'>
    <title>Timekeeping Code Improvements</title>

    <contact>
      <person>
	<name>
	  <given>Konstantin</given>
	  <common>Belousov</common>
	</name>
	<email>kib@FreeBSD.org</email>
      </person>
    </contact>

    <body>
      <p>Work was done to properly lock the time-keeping code.  The
	existing code correctly interoperated with readers, both
	kernel- and user-space, giving them lock-less access to the
	actual data ('timehands') needed to derive the time of day
	from the timecounter hardware in the presence of updaters.
	But updates of the timehands, which are performed by periodic
	clock interrupts, the ntpd-driven <tt>sys_ntp_adjtime(2)</tt>
	syscall, the <tt>settimeofday(2)</tt> syscall, pps sync, and
	possibly other sources, were not coordinated.  Moreso, the NTP
	code was locked by Giant, which did not really serve any
	purpose.</p>

      <p>As a result of the work, locking was applied to ensure that
	any timehands adjustments are performed by a single mutator.
	An interesting case is the parallel modification of the
	timehands from the top of the kernel, for instance the
	<tt>settimeoday(2)</tt> syscall, and a simultaneous clock tick
	event, where the syscall has already acquired the resources.
	In this case, it is highly desirable to not block (spin) in
	the tick handler, and the required adjustments are performed
	by the already executing call from the top half.  There, the
	typical trylock operation is desired, which was surprisingly
	lacking in our spinlock implementation.
	<tt>mtx_trylock_spin(9)</tt> was implemented and is used for
	this purpose.</p>

      <p>The userspace <tt>gettimeofday(2)</tt> implementation was
	enhanced to allow syscall-less operation on machines that use
	HPET hardware for timecounters.  The HPET algorithm coexists
	with older RDTSC-based code, allowing dynamic switching of
	timecounters.  A page with HPET registers is
	<tt>mmap(2)</tt>-ed readonly by libc into userland application
	programs' address space as needed.  Measurements demonstrated
	modest improvements in <tt>gettimeofday(2)</tt> performance,
	but, not unexpectedly, even the syscall-less HPET timecounter
	is slower than invoking a syscall for RDTSC.</p>

      <p>Some not strictly intertwined but related code is the
	time-bound sleep implementation.  Handling of races between
	callouts and the top-half code that sets and processes the
	timeouts depended on the many fine details of the
	<tt>callout_stop(9)</tt> KPI (kernel programming interface).
	In particular, races or unpunctual KPI changes usually result
	in the &quot;catch-all&quot; unkillable thread state with the
	&quot;-&quot; waitchain bug.  The sleepqueue timeout code was
	rewritten to stop depending on the KPI details, which removed
	the source of recurring bugs, and also surprisingly simplified
	the code.</p>
    </body>

    <sponsor>
      The FreeBSD Foundation
    </sponsor>
  </project>

  <project cat='arch'>
    <title>UEFI Runtime Services</title>

    <contact>
      <person>
	<name>
	  <given>Konstantin</given>
	  <common>Belousov</common>
	</name>
	<email>kib@FreeBSD.org</email>
      </person>
    </contact>

    <body>
      <p>UEFI (Unified Extensible Firmware Interface) specifies two
	kinds of services for use by operating systems.  Boot Services
	are designed for OS loaders to load and initialize kernels,
	while Runtime Services are meant to be used by kernels during
	regular system operations.  The boot and runtime phases are
	explicitly separated.  During boot, when loaders are executed,
	the machine configuration is owned by UEFI.  During runtime,
	the kernel manages the configuration, but needs to inform the
	firmware about any changes that are made.</p>

      <p>The model of split boot/runtime configuration makes
	assumptions about the OS architecture that do not quite apply
	to the existing &os; codebase.  For instance, the firmware
	notification of the future runtime configuration must be done
	while the loader is effectively still in control.  In
	technical terms, the <tt>SetVirtualAddressMap()</tt> call must
	be made with the 1:1 physical:virtual mapping on amd64
	systems, which for &os; means that the call can only be issued
	by the loader.  But the loader needs to know intimate details
	of the kernel address map to provide the requested
	information.  This creates a new, unfortunate, coupling
	between loader and kernel.</p>

      <p>Reading the publicly available information about the MS
	Windows boot process explained the UEFI control transfer
	model.  The Windows loader constructs the address map for the
	kernel, and with such a division of work the UEFI model is
	reasonable.  The &os; kernel constructs its own address
	space, only relying on a minimal map constructed by the
	loader, which is enough for the pmap subsystem to bootstrap
	itself and then to perform machine initialization in common
	code.</p>

      <p>Initial experiments with enabling runtime services were
	centered around utilizing the direct address map (DMAP) on
	amd64, which currently always exists and linearly maps at
	least the lower 4G of physical addresses at some KVA location.
	It was supposed that the kernel would export the DMAP details
	like linear base and guaranteed size for loader from its ELF
	image, and provide the needed overflow map if the DMAP cannot
	completely serve.  Unfortunately, two show-stopper bugs were
	discovered with this approach.</p>

      <p>First, EDK-based firmware apparently requires that the
	runtime mapping exists simultaneously with the physical
	mapping for the <tt>SetVirtualAddressMap()</tt> call.  Second,
	there were references from other open-source projects
	mentioning that some firmware required the presence of the
	physical mapping during the runtime call.  Effectively, this
	forces both kernel and loader to provide both mappings for all
	runtime calls.</p>

      <p>With such restrictions, informing the firmware about the
	details of the kernel address space only adds useless work.
	We could just as easily establish the 1:1 physical mapping
	during runtime and get rid of
	<tt>SetVirtualAddressMap()</tt> entirely.  This approach was
	coded and the kernel interface to access runtime services is
	based on it.</p>

      <p>During development, particularly when trying to make
	the loader modifications, it was quickly realized that there
	were no fault-reporting facilities in <tt>loader.efi</tt>.
	Machine exceptions resulted in a silent hang.  Curiously, in
	such a situation the Intel firmware outputs the error code
	over the serial port over 115200/8/1 settings, regardless of
	UEFI console configuration, which was discovered by accident.
	Unfortunately, the error code alone is not enough to diagnose
	most problems.</p>

      <p>A primitive fault reporter was written for
	<tt>loader.efi</tt> on amd64, which intercepts exceptions from
	the firmware IDT and dumps the machine state to the loader
	console.  Due to the complexity of the interception and
	possible bugs which might do more harm than good there, the
	dumper is only activated on explicit administrator
	action.</p>

      <p>Note that the described work only provides the kernel
	interfaces to make calling the EFI runtime services as easy as
	calling a regular C function.  User-visible feature
	development making use of the new interfaces is being
	performed right now.</p>
    </body>

    <sponsor>
      The FreeBSD Foundation
    </sponsor>
  </project>

  <project cat='team'>
    <title>&os; Release Engineering Team</title>

    <contact>
      <person>
	<name>&os;&nbsp;Release Engineering Team</name>
	<email>re@FreeBSD.org</email>
      </person>
    </contact>

    <links>
      <url href="https://www.FreeBSD.org/releases/11.0R/schedule.html">&os;&nbsp;11.0-RELEASE schedule</url>
    </links>

    <body>
      <p>The &os; Release Engineering Team is responsible for setting
	and publishing release schedules for official project releases
	of &os;, announcing code freezes, and maintaining the
	respective branches, among other things.</p>

      <p>The &os; Release Engineering Team continued the 11.0-RELEASE
	cycle which was planned to be released in September, but as a
	result of several last-minute issues, the final release
	announcement was delayed.</p>
    </body>

    <sponsor>
      The FreeBSD Foundation
    </sponsor>
  </project>

  <project cat='proj'>
    <title>The Graphics Stack on &os;</title>

    <contact>
      <person>
	<name>&os; Graphics Team</name>
	<email>freebsd-x11@FreeBSD.org</email>
      </person>

      <person>
	<name>
	  <given>Matthew</given>
	  <common>Macy</common>
	</name>
	<email>mmacy@nextbsd.org</email>
      </person>

      <person>
	<name>
	  <given>Johannes</given>
	  <common>Lundberg</common>
	</name>
	<email>yohanesu75@me.com</email>
      </person>
    </contact>

    <links>
      <url href="https://github.com/&os;Desktop/&os;-base-graphics">GitHub Repository</url>
      <url href="https://wiki.FreeBSD.org/Graphics">Graphics Stack Roadmap and Supported Hardware Matrix</url>
      <url href="https://github.com/&os;/&os;-ports-graphics">Ports Development Repository</url>
      <url href="https://github.com/&os;Desktop/&os;-base-graphics/tree/drm-next-4.7">DRM 4.7 Development Repository</url>
      <url href="https://wiki.FreeBSD.org/action/recall/SummerOfCodeIdeas?action=recall&amp;rev=67#Devices_management:_link_.2Fdev_entries_to_sysctl_nodes">GSoC 2016: Link <tt>/dev</tt> Entries to Sysctl Nodes</url>
      <url href="https://wiki.FreeBSD.org/SummerOfCode2016/RethinkLibdevq">GSoC 2016: Redesign libdevq </url>
      <url href="https://github.com/yohanesu75/&os;-base-graphics/wiki/Wayland-on-&os;">Wayland Notes</url>
      <url href="https://planet.FreeBSD.org/graphics">Graphics Team Blog</url>
    </links>

    <body>
      <p>We are sad to report that both GSoc projects failed.  The
	<tt>libdevq</tt> project was abandoned as the student
	disappeared.  The kernel project was incomplete because the
	student could not work for personal reasons.  He plans to
	resume work and complete the task, even though GSoC 2016 is
	finished.</p>

      <p>X.org server version 1.18.4 and updates for
	the <tt>xf86-video-ati</tt> and <tt>xf86-video-intel</tt> DDX
	drivers are ready for wider testing.  A CFT will be sent out
	shortly.  These updates are required to use newer DRM
	versions.</p>

      <p>The missing functionality from <tt>libdrm</tt> that is
	needed by the <tt>amdgpu</tt> driver has been added.  These
	changes will be committed to the ports tree shortly after the
	xorg-server update.</p>

      <p>DRM from Linux 4.8 was ported to the <tt>drm-next</tt>
	branch.  This branch should be used for <tt>radeon</tt> and
	<tt>amdgpu</tt> cards.  The <tt>drm-next-4.7</tt> branch
	should be used for <tt>i915</tt> cards due to instabilities
	in the <tt>intel</tt> driver in the <tt>drm-next</tt> branch.</p>

      <p>Johannes Lundberg has been working on getting the Wayland
	environment running on &os;.  The Wayland ports are in
	a working state except for the Weston compositor.</p>

      <p>The current Weston port (from DragonFlyBSD) might be
	scrapped and a new port created from scratch based on the
	upstream source code.  With the use of <tt>libinput</tt>,
	<tt>libudev-devd</tt>, and <tt>epoll-shim</tt>, the diff will
	not be very large and will be easier to maintain.</p>

      <p>Patches for <tt>wlc</tt> (another Wayland compositor) are
	being pushed upstream.  On the TODO list is refactoring the
	tty code into selectable backends (linux, &os;, etc), as
	recommended by the author of <tt>wlc</tt>.  For now, it is
	running on &os; with patches in the ports tree.</p>
    </body>
  </project>

  <project cat='team'>
    <title>The FreeBSD Foundation</title>

    <contact>
      <person>
	<name>
	  <given>Deb</given>
	  <common>Goodkin</common>
	</name>
	<email>deb@FreeBSDFoundation.org</email>
      </person>
    </contact>

    <links>
      <url href="https://www.FreeBSDFoundation.org/">FreeBSD Foundation Website</url>
    </links>

    <body>
      <p>The FreeBSD Foundation is a 501(c)(3) non-profit organization
	dedicated to supporting and promoting the &os; Project and
	community worldwide.  Funding comes from individual and
	corporate donations and is used to fund and manage software
	development projects, conferences and developer summits, and
	provide travel grants to &os; contributors.  The Foundation
	purchases hardware to improve and maintain &os; infrastructure
	and publishes &os; white papers and marketing material to
	promote, educate, and advocate for the &os; Project.  The
	Foundation also represents the &os; Project in executing
	contracts, license agreements, and other legal arrangements
	that require a recognized legal entity.</p>

      <p>Here are some highlights of what we did to help &os; last
	quarter:</p>

      <p>Fundraising Efforts</p>

      <p>Our work is 100% funded by your donations.  Our spending
	budget for 2016 is $1,250,000 and we have raised $271,500 so
	far.  Our Q1-Q3 financial reports will be posted in early
	November.  As you can see, we need your donations to
	continue supporting &os; at our current level.  Please
	consider making a donation at <a
	  href="https://www.FreeBSDFoundation.org/donate/">https://www.FreeBSDFoundation.org/donate/</a>.</p>

      <p>OS Improvements</p>

      <p>The Foundation improves &os; by funding software development
	projects approved through our proposal submission process, and
	our internal software developer staff members.  Two
	Foundation-funded projects continued last quarter: one project
	is to port NetBSD's <tt>blacklistd</tt> daemon and related
	elements to &os;, and the second is phase two of the
	&os;/arm64 port.</p>

      <p>Foundation staff members were responsible for many changes
	over the quarter.  Kostik Belousov accomplished this
	work last quarter:</p>

      <ul>
	<li>Provided kernel support for EFI Runtime Services
	  calls</li>

	<li>Implemented <tt>gettimeofday(2)</tt> purely in userspace
	  for HPET timers</li>

	<li>Implemented <tt>fdatasync(2)</tt></li>

	<li>Improved the locking of the time keeping code</li>

	<li>Made the sleepqueue code immune to rapid callout
	  changes</li>

	<li>Made many stability fixes, the most important of which
	  were UFS issues and an i386 bug</li>

	<li>Improved the process management and ptrace code</li>
      </ul>

      <p>Ed Maste, our Project Development Director, accomplished this
	work last quarter:</p>

      <ul>
	<li>Worked on &os;/arm64 issues and Cavium ThunderX
	  deployment (including RMAs)</li>

	<li>Worked with upstream developers to test works in progress
	  and prepare LLD as the replacement linker in the &os; base
	  system</li>

	<li>Switched to using LLVM's <tt>libunwind</tt> in the base
	  system</li>

	<li>Improved the reproducibility of builds in the &os; base
	  system and ports</li>

	<li>Reviewed the <tt>blacklistd</tt> work that is in
	  progress</li>

	<li>Attended BSDCam 2016, with a primary focus on toolchain
	  discussions</li>

	<li>Participated in ongoing Capsicum calls, and helped with
	  the Capsicumization of several base system utilities</li>

	<li>Fixed a number of ELF Tool Chain issues, and integrated a
	  new upstream version into the &os; base system</li>

	<li>Hosted biweekly graphics calls to coordinate work in
	  progress by funded and volunteer developers</li>

	<li>Implemented fixes for security issues in some &os; update
	  tools, and coordinated their integration into the stable and
	  release branches</li>
      </ul>

      <p>George Neville-Neil continued hosting a bi-weekly Transport
	conference call (notes at <a
	  href="https://wiki.FreeBSD.org/TransportProtocols">https://wiki.FreeBSD.org/TransportProtocols</a>)
	and the bi-weekly DTrace conference call (notes at <a
	  href="https://wiki.FreeBSD.org/DTrace">https://wiki.FreeBSD.org/DTrace</a>).</p>

      <p>Release Engineering</p>

      <p>Foundation staff member Glen Barber  worked with the Release
	Engineering team to continue finalizing the 11.0-RELEASE
	cycle, which was delayed to address several last-minute
	issues.</p>

      <p>As part of the Cluster Administration team, Glen worked with
	the amazing on-site staff at NYI to rack and install two
	Cavium ThunderX machines, one of which is used for native
	package builds for the &os;/arm64 architecture, and the
	other of which is targeted to be used as a reference machine
	in the &os; infrastructure.</p>

      <p>Getting Started with &os; Project</p>

      <p>We hired a summer intern, with no experience on &os;, Linux,
	or any command-line operating system, to figure out on his own
	how to install and use &os;.  He wrote easy-to-follow how-to
	guides to help make the new-user experience straightforward
	and positive.  He submitted bug reports and reported issues
	through the appropriate channels, and worked with Glen Barber
	and Brad Davis to improve the new user information on
	FreeBSD.org to make it easier for new people to get started
	with &os;.  You can find his how-to guides at <a
	  href="https://www.FreeBSDFoundation.org/FreeBSD/how-to-guides/">https://www.FreeBSDFoundation.org/FreeBSD/how-to-guides/</a>
	and check out his interview on BSDNow at <a
	  href="http://www.bsdnow.tv/episodes/2016_08_24-the_fresh_bsd_experience">http://www.bsdnow.tv/episodes/2016_08_24-the_fresh_bsd_experience</a>.</p>

      <p>Supporting &os; Infrastructure</p>

      <p>We provide hardware and support for &os; infrastructure.
	Last quarter we purchased and brought up two 48-core Cavium
	ThunderX machines to build &os; package sets for the arm64
	platform.  We also purchased more servers to help with
	continuous integration efforts.</p>

      <p>&os; Advocacy and Education</p>

      <p>A large part of our efforts are dedicated to advocating for
	the Project.  This includes promoting work being done by
	others using &os;, producing advocacy literature to teach
	people about &os; and ease the path to starting out with &os;,
	contributing to the Project, and attending and getting other
	&os; contributors to volunteer to run &os; events, staff &os;
	tables, and give &os; presentations.</p>

      <p>We created new handouts to promote TeachBSD.org (<a
	  href="https://www.FreeBSDFoundation.org/wp-content/uploads/2016/08/TeachBSD_half_final.pdf">https://www.FreeBSDFoundation.org/wp-content/uploads/2016/08/TeachBSD_half_final.pdf</a>)
	and the Google Summer of Code program (<a
	  href="https://www.FreeBSDFoundation.org/wp-content/uploads/2016/08/GSOC-flyerv2.pdf">https://www.FreeBSDFoundation.org/wp-content/uploads/2016/08/GSOC-flyerv2.pdf</a>).</p>

      <p>We published the July/August issue of the &os; Journal: <a
	  href="https://www.FreeBSDFoundation.org/past-issues/FreeBSD-and-rtems/">https://www.FreeBSDFoundation.org/past-issues/FreeBSD-and-rtems/</a>.</p>

      <p>We also published monthly newsletters to highlight work being
	done to support &os;, tell you about upcoming events, and
	provide other information to keep you in the loop of what we are doing
	to support the &os; Project and community: <a
	  href="https://www.FreeBSDFoundation.org/news-and-events/newsletter/">https://www.FreeBSDFoundation.org/news-and-events/newsletter/</a>.</p>

      <p>Conferences and Events</p>

      <p>The FreeBSD Foundation sponsors many conferences, events, and
	summits around the globe.  These events can be BSD-related,
	open source, or technology events geared towards
	underrepresented groups.</p>

      <p>We support the &os;-focused events to help provide a venue
	for sharing knowledge, to work together on projects, and
	facilitate collaboration between developers and commercial
	users.  This all helps provide a healthy ecosystem.  We
	support the non-&os; events to promote and raise awareness
	about &os;, to increase the use of &os; in different
	applications, and to recruit more contributors to the
	Project.</p>

      <p>This quarter, we sponsored and/or attended the following
	events:</p>

      <ul>
	<li>Texas Linux Fest, July 8-9, 2016, Austin, TX
	  (<a href="http://2016.texaslinuxfest.org/">http://2016.texaslinuxfest.org/</a>)</li>

	<li>The Eleventh HOPE, July 22-24, 2016, New York, NY
	  (<a href="https://hope.net/index.html">https://hope.net/index.html</a>)</li>

	<li>BSDCam 2016, August 15-17, 2016, Cambridge, UK (sponsor,
	  organizer, and participated) (<a
	    href="https://wiki.FreeBSD.org/DevSummit/201608">https://wiki.FreeBSD.org/DevSummit/201608</a>)</li>

	<li>FOSSCON 2016, August 20, 2016, Philadelphia, PA
	  (<a href="https://fosscon.us/">https://fosscon.us/</a>)</li>

	<li>womENcourage 2016, September 12-13, 2016, Linz, Austria
	  (Silver Sponsor) (<a
	    href="http://womencourage.acm.org">http://womencourage.acm.org</a>)</li>

	<li>SNIA Storage Developer Conference 2016, September 19-22,
	  2016, Santa Clara, CA (Industry Partner Sponsor) (<a
	    href="http://www.snia.org/events/storage-developer">http://www.snia.org/events/storage-developer</a>)</li>

	<li><p>EuroBSDcon 2016 and &os; Developer Summit, September
	  22-25, 2016, Belgrade, Serbia (Silver Sponsor) (<a
	    href="https://2016.eurobsdcon.org/">https://2016.eurobsdcon.org/</a>)</p>

	  <p>Our EuroBSDcon involvement included:</p>

	  <ul>
	    <li>Held a Women in Tech BoF in partnership with ACM-W
	      Europe</li>

	    <li>Benedict organized the EuroBSDcon Developer
	    Summit</li>

	    <li>Deb gave a Foundation Update talk and Hiroki Sato and
	      Benedict Reuschling joined her for a Q&amp;A
	      session.</li>

	    <li>Kirk McKusick taught his two-day &os; tutorial (<a
		href="https://2016.eurobsdcon.org/speakers/#kirkmckusick">https://2016.eurobsdcon.org/speakers/#kirkmckusick</a>)</li>

	    <li>George Neville-Neil taught a tutorial on Tracing &os;
	      for DevOps and Developers (<a
		href="https://2016.eurobsdcon.org/speakers/#georgenevilleneil">https://2016.eurobsdcon.org/speakers/#georgenevilleneil</a>)</li>

	    <li>George also gave the Keynote talk, titled The Coming
	      Decades of BSD</li>

	    <li>Phillip Paeps was one of the primary organizers for
	      this conference.</li>
	  </ul>
	</li>

	<li><p>OpenZFS Developer Summit 2016, September 26-27, 2016,
	  San Francisco, CA (Silver) (<a
	    href="http://open-zfs.org/wiki/OpenZFS_Developer_Summit">http://open-zfs.org/wiki/OpenZFS_Developer_Summit</a>)</p>

	  <ul>
	    <li>Justin Gibbs gave a talk on Fault Management (<a
		href="http://open-zfs.org/wiki/Fault_Management">http://open-zfs.org/wiki/Fault_Management</a>)</li>
	  </ul>
	</li>
      </ul>

      <p>We sponsored three &os; contributors to attend
	EuroBSDcon.</p>

      <p>Legal/&os; IP</p>

      <p>The Foundation owns the &os; trademarks, and it is our
	responsibility to protect them.  We continued to review
	requests and grant permission to use the trademarks.</p>

      <p>&os; Community Engagement</p>

      <p>Anne Dickison, our Marketing Director, has been overseeing
	the efforts to rewrite the Project's Code of Conduct to help
	make this a safe, inclusive, and welcoming community.</p>

      <p>Other Stuff We Did</p>

      <p>We welcomed Kylie Liang and Philip Paeps to the Board of
	Directors.  More information and interviews can be found at:
	<a
	  href="https://www.FreeBSDFoundation.org/blog/FreeBSD-foundation-welcomes-new-board-members/">https://www.FreeBSDFoundation.org/blog/FreeBSD-foundation-welcomes-new-board-members/</a>.</p>

      <p>George attended the ARM Partner Meeting in Cambridge.</p>
    </body>
  </project>

  <project cat='proj'>
    <title>Capsicum Update</title>

    <contact>
      <person>
	<name>
	  <given>Allan</given>
	  <common>Jude</common>
	</name>
	<email>allanjude@FreeBSD.org</email>
      </person>

      <person>
	<name>
	  <given>Baptiste</given>
	  <common>Daroussin</common>
	</name>
	<email>bapt@FreeBSD.org</email>
      </person>

      <person>
	<name>
	  <given>Conrad</given>
	  <common>Meyer</common>
	</name>
	<email>cem@FreeBSD.org</email>
      </person>

      <person>
	<name>
	  <given>Ed</given>
	  <common>Maste</common>
	</name>
	<email>emaste@FreeBSD.org</email>
      </person>

      <person>
	<name>
	  <given>Mariusz</given>
	  <common>Zaborski</common>
	</name>
	<email>oshogbo@FreeBSD.org</email>
      </person>
    </contact>

    <links>
      <url href="https://wiki.FreeBSD.org/Capsicum">Capsicum Wiki Page</url>
    </links>

    <body>
      <p>Several developers have undertaken a recent effort to
	sandbox additional applications in the base system.  This work
	is proceeding nicely and one of the goals is to target basic
	utilities used in security sensitive applications, like
	<tt>freebsd-update</tt> and <tt>portsnap</tt>.</p>

      <p>This work highlighted two longstanding challenges in
	applying Capsicum.  First, there are a number of common
	constructs shared by many simple programs, such as limiting
	capability rights on the stdio file descriptors.  To address
	this, a set of capsicum helper routines has been added for
	these common cases.</p>

      <p>Second, a common challenge occurs where applications need
	to open an arbitrarily large number of files, possibly from
	various directories, where preopening the file descriptors may
	not be suitable.  Several possible solutions for this are in
	discussion.</p>

      <p>Recently Capsicumized utilities include:</p>

      <ul>
	<li><tt>bspatch</tt></li>

	<li><tt>cmp</tt></li>

	<li><tt>ident</tt></li>

	<li><tt>primes</tt></li>

	<li><tt>tee</tt></li>

	<li><tt>tr</tt></li>

	<li><tt>write</tt></li>
      </ul>

      <p>Additional Capsicum changes are in review:</p>

      <ul>
	<li><tt>b64decode</tt>, <tt>b64encode</tt>,
	  <tt>uudecode</tt>, <tt>uuencode</tt></li>

	<li><tt>brandelf</tt></li>

	<li><tt>dma-mbox-create</tt></li>

	<li><tt>elf2aout</tt></li>

	<li><tt>file</tt></li>

	<li><tt>head</tt></li>

	<li><tt>hexdump</tt></li>

	<li><tt>iconv</tt></li>

	<li><tt>ident</tt></li>

	<li><tt>jot</tt></li>

	<li><tt>ktrdump</tt></li>

	<li><tt>lam</tt></li>

	<li><tt>last</tt></li>

	<li><tt>ministat</tt></li>

	<li><tt>praudit</tt></li>

	<li><tt>strings</tt></li>
      </ul>

      <p>An additional syscall (<tt>getdtablesize</tt>) and
	additional sysctls (<tt>kern.proc.nfds</tt>,
	<tt>kern.hostname</tt>, etc.) are now permitted in capability
	mode.  </p>

      <p>Capability rights are now propagated to child descriptors on
	accept(2).</p>

      <p>Capsicum is now enabled in the 32-bit compatibility syscall
	layer.</p>

      <p>Per-process (<tt>procctl</tt>) and global (<tt>sysctl</tt>)
	settings have been added to aid in debugging while
	Capsicumizing existing applications.  When enabled, instead of
	returning ENOTCAPABLE or ECAPMODE for a system call, the
	kernel will issue a SIGTRAP to generate a core dump or enter
	the debugger.  </p>
    </body>

    <sponsor>
      Dell EMC Isilon
    </sponsor>

    <sponsor>
      ScaleEngine Inc.
    </sponsor>

    <sponsor>
      The FreeBSD Foundation
    </sponsor>
  </project>

  <project cat='proj'>
    <title>Using <tt>lld</tt>, the LLVM Linker, to Link &os;</title>

    <contact>
      <person>
	<name>
	  <given>Ed</given>
	  <common>Maste</common>
	</name>
	<email>emaste@FreeBSD.org</email>
      </person>
    </contact>

    <links>
      <url href="https://wiki.FreeBSD.org/LLD">LLD Wiki Page</url>
    </links>

    <body>
      <p><tt>lld</tt> is the linker in the LLVM family of projects.
	It is a high-performance linker that supports the ELF, COFF,
	and Mach-O object formats.  Where possible, <tt>lld</tt>
	maintains command-line and functional compatibility with the
	existing GNU BFD ld and gold linkers.  However, the authors of
	<tt>lld</tt> are not constrained by strict compatibility where
	it would hamper performance or desired functionality.</p>

      <p>Compared to the GNU <tt>ld</tt> 2.17.50 currently in the base system,
	<tt>lld</tt> will bring:</p>

      <ul>
	<li>AArch64 (arm64) support</li>

	<li>Link Time Optimization (LTO)</li>

	<li>New ABI support</li>

	<li>Other linker optimizations</li>

	<li>Much faster link times</li>

	<li>Maintained code base</li>
      </ul>

      <p>The upstream <tt>lld</tt> project has now implemented
	nearly all of the functionality required to link the amd64
	&os; base system, including the kernel.  The boot loader
	components and <tt>rescue</tt> utilities currently do not
	build with <tt>lld</tt>.</p>
    </body>

    <help>
      <task>Merge <tt>lld</tt> to &os; head as part of the Clang
	3.9.0 import.</task>

      <task>Request a ports exp-run with <tt>lld</tt> installed as
	<tt>/usr/bin/ld</tt>.</task>

      <task>Fix building the boot loader with <tt>lld</tt>.</task>

      <task>Fix building <tt>rescue</tt> with <tt>lld</tt>.</task>

      <task>Test and iterate making <tt>lld</tt> fixes for
	additional architectures.</task>
    </help>

    <sponsor>
      The FreeBSD Foundation
    </sponsor>
  </project>

  <project cat='team'>
    <title>Ports Collection</title>

    <contact>
      <person>
	<name>
	  <given>Ren&eacute;</given>
	  <common>Ladan</common>
	</name>
	<email>portmgr-secretary@FreeBSD.org</email>
      </person>

      <person>
	<name>&os; Ports Management Team</name>
	<email>portmgr@FreeBSD.org</email>
      </person>
    </contact>

    <links>
      <url href="https://www.FreeBSD.org/ports/">&os; Ports Website</url>
      <url href="https://www.FreeBSD.org/doc/en_US.ISO8859-1/articles/contributing/ports-contributing.html">How to Contribute</url>
      <url href="http://portsmon.FreeBSD.org/index.html">Ports Monitoring Website</url>
      <url href="https://www.FreeBSD.org/portmgr/index.html">Ports Management Team Website</url>
      <url href="https://twitter.com/FreeBSD_portmgr/">Ports Management Team on Twitter</url>
      <url href="https://www.facebook.com/portmgr">Ports Management Team on Facebook</url>
      <url href="https://plus.google.com/communities/108335846196454338383">Ports Management Team on Google+</url>
    </links>

    <body>
      <p>The Ports Tree currently contains over 26,300 ports, with the
	PR count around 2,150.  Of these PRs, 516 are unassigned.  The
	last quarter saw 5,295 commits by 117 active committers.
	Compared to the preceding quarter, there is both a slight
	increase in the number of PRs and the number of unassigned
	PRs, and a slight decrease in the number of committers.</p>

      <p>In the last quarter, four commits bits were taken in for safe
	keeping: erwin, miwi, and sem left by their own request and
	jase was inactive for more than 18 months.  We welcomed two
	new committers: Tobias Berner (tcberner) and Joseph Mingrone
	(jrm).</p>

      <p>On the management side, erwin and miwi left portmgr.  bapt
	also left portmgr but is still the liaison for core.</p>

      <p>On the infrastructure side, three new USES (grantlee, kde,
	linux) and one new Keyword (javavm) were introduced.  The
	default version of the Linux ports is now CentOS 6, with the
	Fedora 10 ports scheduled for removal at the end of the year.
	The license framework has been extended with a NONE license to
	indicate that a port has no clearly defined licensing terms.
	For those ports, no packages or distribution files are
	distributed.  Also, support for the complete set of Creative
	Commons licenses has been added.</p>

      <p>Some major user-visible ports were updated: Firefox to 49.0
	and Firefox Extended Service Release to 45.4.0; Chromium to
	52.0.2743.116; the default version of <tt>gcc</tt> to 4.8.5;
	and <tt>pkg</tt> itself to 1.8.7.</p>

      <p>Behind the scenes, antoine ran 24 exp-runs to validate
	various package updates, framework changes, and changes to the
	base system.  bdrewery added two new package building
	machines, supervised the package builds for 11.0-RELEASE, and
	added support for building arm64 packages.</p>

      <p>At EuroBSDcon, rene visited a presentation by Landry Breuil
	&lt;landry@openbsd.org&gt; explaining how packages are built
	in the OpenBSD world and explaining various design
	decisions.</p>
    </body>

    <help>
      <task>If you have some spare time, please take up a PR for
	testing and committing.</task>
    </help>
  </project>
</report>
