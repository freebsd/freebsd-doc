<?xml version="1.0" encoding="iso-8859-1"?>
<!--
     The FreeBSD Documentation Project

     $FreeBSD$
-->
<sect1 xml:id="releng-building">
  <title>Building &os; Installation Media</title>

  <para>This section describes the general procedures producing &os;
    development snapshots and releases.</para>

  <sect2 xml:id="releng-build-scripts">
    <title>Release Build Scripts</title>

    <para>This section describes the build scripts used by &team.re;
      to produce development snapshots and releases.</para>

    <sect3 xml:id="releng-build-scripts-single">
      <title>The <filename>release.sh</filename> Script</title>

      <para>Prior to &os;&nbsp;9.0-RELEASE,
	<filename>src/release/Makefile</filename> was updated to
	support &man.bsdinstall.8;, and the
	<filename>src/release/generate-release.sh</filename> script
	was introduced as a wrapper to automate invoking the
	&man.release.7; targets.</para>

      <para>Prior to &os;&nbsp;9.2-RELEASE,
	<filename>src/release/release.sh</filename> was introduced,
	which heavily based on
	<filename>src/release/generate-release.sh</filename> included
	support to specify configuration files to override various
	options and environment variables.  Support for configuration
	files provided support for cross building each architecture
	for a release by specifying a separate configuration file for
	each invocation.</para>

      <para>As a brief example of using
	<filename>src/release/release.sh</filename> to build a single
	release in <filename
	  class="directory">/scratch</filename>:</para>

      <screen>&prompt.root; <userinput>/bin/sh /usr/src/release/release.sh</userinput></screen>

      <para>As a brief example of using
	<filename>src/release/release.sh</filename> to build a single,
	cross-built release using a different target directory, create
	a custom <filename>release.conf</filename> containing:</para>

      <programlisting># release.sh configuration for powerpc/powerpc64
CHROOTDIR="/scratch-powerpc64"
TARGET="powerpc"
TARGET_ARCH="powerpc64"
KERNEL="GENERIC64"</programlisting>

      <para>Then invoke <filename>src/release/release.sh</filename>
	as:</para>

      <screen>&prompt.root; <userinput>/bin/sh /usr/src/release/release.sh -c <replaceable>&dollar;HOME/release.conf</replaceable></userinput></screen>

      <para>See &man.release.7; and
	<filename>src/release/release.conf.sample</filename> for more
	details and example usage.</para>
    </sect3>

    <sect3 xml:id="releng-build-scripts-multiple">
      <title>The <filename>thermite.sh</filename> Wrapper
	Script</title>

      <para>In order to make cross building the full set of
	architectures supported on a given branch faster, easier, and
	reduce human error factors, a wrapper script around
	<filename>src/release/release.sh</filename> was written to
	iterate through the various combinations of architectures and
	invoke <filename>src/release/release.sh</filename> using
	a configuration file specific to that architecture.</para>

      <para>The wrapper script is called
	<filename>thermite.sh</filename>, which is available in the
	&os; Subversion repository at
	<literal>svn://svn.freebsd.org/base/user/gjb/thermite/</literal>,
	in addition to configuration files used to build
	&branch.head; and &branch.stablex; development
	snapshots.</para>

      <para>Using <filename>thermite.sh</filename> is covered in <xref
	  linkend="releng-build-snapshot"/> and <xref
	  linkend="releng-build-release"/>.</para>

      <para>Each architecture and individual kernel have their own
	configuration file used by <filename>release.sh</filename>.
	Each branch has its own <filename>defaults-X.conf</filename>
	configuration which contains entries common throughout each
	architecture, where overrides or special variables are set
	and/or overridden in the per-build files.</para>

      <para>The per-build configuration file naming scheme is in the
	form of
	<filename>&dollar;{revision}-&dollar;{TARGET_ARCH}-&dollar;{KERNCONF}-&dollar;{type}.conf</filename>,
	where the uppercase variables are equivalent to what
	&man.make.1; uses in the build system, and lowercase variables
	are set within the configuration files, mapping to the major
	version of the respective branch.</para>

      <para>Each branch also has its own
	<filename>builds-X.conf</filename> configuration, which is
	used by <filename>thermite.sh</filename>.  The
	<filename>thermite.sh</filename> script iterates through each
	&dollar;{revision}, &dollar;{TARGET_ARCH},
	&dollar;{KERNCONF}, and &dollar;{type} value, creating
	a master list of what to build.  However, a given
	combination from the list will only be built if the
	respective configuration file exists, which is where the
	naming scheme above is relevant.</para>

      <para>There are two paths of file sourcing:</para>

      <itemizedlist>
	<listitem>
	  <para><filename>builds-<replaceable>11</replaceable>.conf</filename>
	    -&gt; <filename>main.conf</filename></para>
	  <para>This controls <filename>thermite.sh</filename>
	    behavior</para>
	</listitem>

	<listitem>
	  <para><filename><replaceable>11</replaceable>-<replaceable>amd64</replaceable>-<replaceable>GENERIC</replaceable>-<replaceable>snap</replaceable>.conf</filename>
	    -&gt;
	    <filename>defaults-<replaceable>11</replaceable>.conf</filename>
	    -&gt; <filename>main.conf</filename></para>
	  <para>This controls <filename>release/release.sh</filename>
	    behavior within the build &man.chroot.8;</para>
	</listitem>
      </itemizedlist>

      <note>
	<para>The
	  <filename>builds-<replaceable>11</replaceable>.conf</filename>,
	  <filename>defaults-<replaceable>11</replaceable>.conf</filename>,
	  and <filename>main.conf</filename> configuration files exist
	  to reduce repetition between the various per-build
	  files.</para>
      </note>
    </sect3>
  </sect2>

  <sect2 xml:id="releng-build-snapshot">
    <title>Building &os; Development Snapshots</title>

    <para>The official release build machines have a specific
      filesystem layout, which using <acronym>ZFS</acronym>,
      <filename>thermite.sh</filename> takes heavy advantage of with
      clones and snapshots, ensuring a pristine build
      environment.</para>

    <para>The build scripts reside in <filename
	class="directory">/releng/scripts-snapshot/scripts</filename>
      or <filename
	class="directory">/releng/scripts-release/scripts</filename>
      respectfully, to avoid collisions between an
      <literal>RC</literal> build from a releng branch versus
      a <literal>STABLE</literal> snapshot from the respective stable
      branch.</para>

    <para>A separate dataset exists for the final build images,
      <filename class="directory">/snap/ftp</filename>.  This
      directory contains both snapshots and releases directories.
      They are only used if the <literal>EVERYTHINGISFINE</literal>
      variable is defined in <filename>main.conf</filename>.</para>

    <note>
      <para>The <literal>EVERYTHINGISFINE</literal> variable name was
	chosen to avoid colliding with a variable that might be
	possibly set in the user environment, accidentally enabling
	the behavior that depends on it being defined.</para>
    </note>

    <para>As <filename>thermite.sh</filename> iterates through the
      master list of combinations and locates the per-build
      configuration file, a <acronym>ZFS</acronym> dataset is created
      under <filename class="directory">/releng</filename>, such as
      <filename
	class="directory">/releng/12-amd64-GENERIC-snap</filename>.
      The <literal>src/</literal>, <literal>ports/</literal>, and
      <literal>doc/</literal> trees are checked out to separate
      <acronym>ZFS</acronym> datasets, such as <filename
	class="directory">/releng/12-src-snap</filename>, which are
      then cloned and mounted into the respective build datasets.
      This is done to avoid checking out a given tree more than
      once.</para>

    <para>Assuming these filesystem paths,
      <filename>thermite.sh</filename> would be invoked as:</para>

    <screen>&prompt.root; <userinput>cd /releng/scripts-snapshot/scripts</userinput>
&prompt.root; <userinput>./setrev.sh -b &branch.stablex;</userinput>
&prompt.root; <userinput>./zfs-setup.sh -c ./builds-<replaceable>11</replaceable>.conf</userinput>
&prompt.root; <userinput>./thermite.sh -c ./builds-<replaceable>11</replaceable>.conf</userinput></screen>

    <para>Once the builds have completed, additional helper scripts
      are available to generate development snapshot emails which are
      sent to the <literal>freebsd-snapshots@freebsd.org</literal>
      mailing list:</para>

    <screen>&prompt.root; <userinput>cd /releng/scripts-snapshot/scripts</userinput>
&prompt.root; <userinput>./get-checksums.sh -c ./builds-<replaceable>11</replaceable>.conf | ./generate-email.pl > snapshot-<replaceable>11</replaceable>-mail</userinput></screen>

    <note>
      <para>The generated output should be double-checked for
	correctness, and the email itself should be PGP signed,
	in-line.</para>
    </note>

    <note>
      <para>These helper scripts only apply to development snapshot
	builds.  Announcements during the release cycle (excluding the
	final release announcement) are created from an email
	template.  A sample of the email template currently used can
	be found <link
	  xlink:href="https://svn.freebsd.org/base/user/gjb/thermite/non-release-template-mail.txt">here</link>.</para>
    </note>
  </sect2>

  <sect2 xml:id="releng-build-release">
    <title>Building &os; Releases</title>

    <para>Similar to building &os; development snapshots,
      <filename>thermite.sh</filename> would be invoked the same way.
      The difference between development snapshots and release builds,
      <literal>BETA</literal> and <literal>RC</literal> included, is
      that the &man.chroot.8; configuration files must be named with
      <literal>release</literal> instead of <literal>snap</literal> as
      the &quot;type&quot;, as mentioned above.</para>

    <para>In addition, the <literal>BUILDTYPE</literal> and
      <literal>types</literal> must be changed from
      <literal>snap</literal> to <literal>release</literal> in
      <filename>defaults-<replaceable>11</replaceable>.conf</filename>
      and
      <filename>builds-<replaceable>11</replaceable>.conf</filename>,
      respectively.</para>

    <para>When building <literal>BETA</literal>,
      <literal>RC</literal>, and the final <literal>RELEASE</literal>,
      also statically set <literal>BUILDSVNREV</literal> to the
      revision on the branch reflecting the name change,
      <literal>BUILDDATE</literal> to the date the builds are started
      in <literal>YYYYMMDD</literal> format.  If the
      <literal>doc/</literal> and <literal>ports/</literal> trees have
      been tagged, also set <literal>PORTBRANCH</literal> and
      <literal>DOCBRANCH</literal> to the relevant tag path in the
      Subversion repository, replacing <literal>HEAD</literal> with
      the last changed revision.  Also set
      <literal>releasesrc</literal> in
      <filename>builds-<replaceable>11</replaceable>.conf</filename>
      to the relevant branch, such as &branch.stablex; or
      &branch.relengx;.</para>

    <para>During the release cycle, a copy of
      <filename>CHECKSUM.SHA512</filename> and
      <filename>CHECKSUM.SHA256</filename> for each architecture are
      stored in the &team.re; internal repository in addition to being
      included in the various announcement emails.  Each
      <filename>MANIFEST</filename> containing the hashes of
      <filename>base.txz</filename>, <filename>kernel.txz</filename>,
      etc. are added to
      <package>misc/freebsd-release-manifests</package> in the Ports
      Collection, as well.</para>

    <para>After building the final <literal>RELEASE</literal>, the
      &branch.relengx; branch is tagged as &branch.releasex; using the
      revision from which the <literal>RELEASE</literal> was built.
      Similar to creating the &branch.stablex; and &branch.relengx;
      branches, this is done with <command>svn cp</command>.  From the
      repository root:</para>

    <screen>&prompt.user; <userinput>svn cp ^/&branch.relengx;@r<replaceable>306420</replaceable> &branch.releasex;</userinput>
&prompt.user; <userinput>svn commit &branch.releasex;</userinput></screen>
  </sect2>
</sect1>
