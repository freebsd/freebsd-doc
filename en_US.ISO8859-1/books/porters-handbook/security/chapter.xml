<?xml version="1.0" encoding="iso-8859-1"?>
<!--
     The FreeBSD Documentation Project

     $FreeBSD$
-->
<chapter xmlns="http://docbook.org/ns/docbook"
  xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0"
  xml:id="security">

  <title>Security</title>

  <sect1 xml:id="security-intro">
    <title>Why Security is So Important</title>

    <para>Bugs are occasionally introduced to the software.  Arguably,
      the most dangerous of them are those opening security
      vulnerabilities.  From the technical viewpoint, such
      vulnerabilities are to be closed by exterminating the bugs that
      caused them.  However, the policies for handling mere bugs and
      security vulnerabilities are very different.</para>

    <para>A typical small bug affects only those users who have
      enabled some combination of options triggering the bug.  The
      developer will eventually release a patch followed by a new
      version of the software, free of the bug, but the majority of
      users will not take the trouble of upgrading immediately because
      the bug has never vexed them.  A critical bug that may cause
      data loss represents a graver issue.  Nevertheless, prudent
      users know that a lot of possible accidents, besides software
      bugs, are likely to lead to data loss, and so they make backups
      of important data; in addition, a critical bug will be
      discovered really soon.</para>

    <para>A security vulnerability is all different.  First, it may
      remain unnoticed for years because often it does not cause
      software malfunction.  Second, a malicious party can use it to
      gain unauthorized access to a vulnerable system, to destroy or
      alter sensitive data; and in the worst case the user will not
      even notice the harm caused.  Third, exposing a vulnerable
      system often assists attackers to break into other systems that
      could not be compromised otherwise.  Therefore closing a
      vulnerability alone is not enough: notify the audience
      of it in the most clear and comprehensive manner, which
      will allow them to evaluate the danger and take appropriate
      action.</para>
  </sect1>

  <sect1 xml:id="security-fix">
    <title>Fixing Security Vulnerabilities</title>

    <para>While on the subject of ports and packages, a security
      vulnerability may initially appear in the original distribution
      or in the port files.  In the former case, the original software
      developer is likely to release a patch or a new version
      instantly.  Update the port promptly
      with respect to the author's fix.  If the fix is delayed for
      some reason, either
      <link linkend="dads-noinstall">mark the port as
      <varname>FORBIDDEN</varname></link> or introduce a patch file
      to the port.  In the case of a vulnerable port, just
      fix the port as soon as possible.  In either case, follow
      <link linkend="port-upgrading">the standard procedure for
      submitting changes</link> unless having
      rights to commit it directly to the ports tree.</para>

    <important>
      <para>Being a ports committer is not enough to commit to an
	arbitrary port.  Remember that ports usually have maintainers,
	must be respected.</para>
    </important>

    <para>Please make sure that the port's revision is bumped as soon
      as the vulnerability has been closed.  That is how the users who
      upgrade installed packages on a regular basis will see they need
      to run an update.  Besides, a new package will be built and
      distributed over FTP and WWW mirrors, replacing the vulnerable
      one.  Bump <varname>PORTREVISION</varname> unless
      <varname>DISTVERSION</varname> has changed in the course of
      correcting the vulnerability.  That is, bump
      <varname>PORTREVISION</varname> if adding a patch file
      to the port, but do not bump it if updating the port to
      the latest software version and thus already touched
      <varname>DISTVERSION</varname>.  Please refer to the
      <link linkend="makefile-naming-revepoch">corresponding
	section</link> for more information.</para>
  </sect1>

  <sect1 xml:id="security-notify">
    <title>Keeping the Community Informed</title>

    <sect2 xml:id="security-notify-vuxml-db">
      <title>The VuXML Database</title>

      <para>A very important and urgent step to take as early after a
	security vulnerability is discovered as possible is to notify
	the community of port users about the jeopardy.  Such
	notification serves two purposes.  First, if the danger is
	really severe it will be wise to apply an instant workaround.
	For example, stop the affected network service or even
	deinstall the port completely until the vulnerability is
	closed.  Second, a lot of users tend to upgrade installed
	packages only occasionally.  They will know from the
	notification that they <emphasis>must</emphasis> update the
	package without delay as soon as a corrected version is
	available.</para>

      <para>Given the huge number of ports in the tree, a security
	advisory cannot be issued on each incident without creating a
	flood and losing the attention of the audience when it comes
	to really serious matters.  Therefore security vulnerabilities
	found in ports are recorded in
	<link xlink:href="https://vuxml.freebsd.org/">the &os;
	  VuXML database</link>.  The Security Officer Team members
	also monitor it for issues requiring their
	intervention.</para>

      <para>Committers can update the <acronym>VuXML</acronym>
	database themselves, assisting the Security Officer Team and
	delivering crucial information to the community more quickly.
	Those who are not committers or have discovered an
	exceptionally severe vulnerability should not hesitate to
	contact the Security Officer Team directly, as described on
	the <link
	  xlink:href="https://www.freebsd.org/security/#how">&os;
	  Security Information</link> page.</para>

      <para>The VuXML database is an <acronym>XML</acronym> document.
	Its source file <filename>vuln.xml</filename> is kept right
	inside the port <package role="port">security/vuxml</package>.
	Therefore the file's full pathname will be
	<filename>PORTSDIR/security/vuxml/vuln.xml</filename>.  Each
	time a security vulnerability is discovered in a port, please
	add an entry for it to that file.  Until familiar with
	VuXML, the best thing to do is to find an existing entry
	fitting the case at hand, then copy it and use it as a
	template.</para>
    </sect2>

    <sect2 xml:id="security-notify-vuxml-intro">
      <title>A Short Introduction to VuXML</title>

      <para>The full-blown <acronym>XML</acronym> format is complex,
	and far beyond the scope of this book.  However, to gain basic
	insight on the structure of a VuXML entry only the notion of
	tags is needed.  XML tag names are enclosed in angle brackets.
	Each opening &lt;tag&gt; must have a matching closing
	&lt;/tag&gt;.  Tags may be nested.  If nesting, the inner tags
	must be closed before the outer ones.  There is a hierarchy of
	tags, that is, more complex rules of nesting them.  This is
	similar to HTML.  The major difference is that XML is
	e<emphasis>X</emphasis>tensible, that is, based on defining
	custom tags.  Due to its intrinsic structure XML puts
	otherwise amorphous data into shape.  VuXML is particularly
	tailored to mark up descriptions of security
	vulnerabilities.</para>

      <para>Now consider a realistic VuXML entry:</para>

      <programlisting>&lt;vuln vid="f4bc80f4-da62-11d8-90ea-0004ac98a7b9"&gt; <co xml:id="co-vx-vid"/>
  &lt;topic&gt;Several vulnerabilities found in Foo&lt;/topic&gt; <co xml:id="co-vx-top"/>
  &lt;affects&gt;
    &lt;package&gt;
      &lt;name&gt;foo&lt;/name&gt; <co xml:id="co-vx-nam"/>
      &lt;name&gt;foo-devel&lt;/name&gt;
      &lt;name&gt;ja-foo&lt;/name&gt;
      &lt;range&gt;&lt;ge&gt;1.6&lt;/ge&gt;&lt;lt&gt;1.9&lt;/lt&gt;&lt;/range&gt; <co xml:id="co-vx-rng"/>
      &lt;range&gt;&lt;ge&gt;2.*&lt;/ge&gt;&lt;lt&gt;2.4_1&lt;/lt&gt;&lt;/range&gt;
      &lt;range&gt;&lt;eq&gt;3.0b1&lt;/eq&gt;&lt;/range&gt;
    &lt;/package&gt;
    &lt;package&gt;
      &lt;name&gt;openfoo&lt;/name&gt; <co xml:id="co-vx-nm2"/>
      &lt;range&gt;&lt;lt&gt;1.10_7&lt;/lt&gt;&lt;/range&gt; <co xml:id="co-vx-epo"/>
      &lt;range&gt;&lt;ge&gt;1.2,1&lt;/ge&gt;&lt;lt&gt;1.3_1,1&lt;/lt&gt;&lt;/range&gt;
    &lt;/package&gt;
  &lt;/affects&gt;
  &lt;description&gt;
    &lt;body xmlns="http://www.w3.org/1999/xhtml"&gt;
      &lt;p&gt;J. Random Hacker reports:&lt;/p&gt; <co xml:id="co-vx-bdy"/>
      &lt;blockquote
        cite="http://j.r.hacker.com/advisories/1"&gt;
        &lt;p&gt;Several issues in the Foo software may be exploited
          via carefully crafted QUUX requests.  These requests will
          permit the injection of Bar code, mumble theft, and the
          readability of the Foo administrator account.&lt;/p&gt;
      &lt;/blockquote&gt;
    &lt;/body&gt;
  &lt;/description&gt;
  &lt;references&gt; <co xml:id="co-vx-ref"/>
    &lt;freebsdsa&gt;SA-10:75.foo&lt;/freebsdsa&gt; <co xml:id="co-vx-fsa"/>
    &lt;freebsdpr&gt;ports/987654&lt;/freebsdpr&gt; <co xml:id="co-vx-fpr"/>
    &lt;cvename&gt;CAN-2010-0201&lt;/cvename&gt; <co xml:id="co-vx-cve"/>
    &lt;cvename&gt;CAN-2010-0466&lt;/cvename&gt;
    &lt;bid&gt;96298&lt;/bid&gt; <co xml:id="co-vx-bid"/>
    &lt;certsa&gt;CA-2010-99&lt;/certsa&gt; <co xml:id="co-vx-cts"/>
    &lt;certvu&gt;740169&lt;/certvu&gt; <co xml:id="co-vx-ctv"/>
    &lt;uscertsa&gt;SA10-99A&lt;/uscertsa&gt; <co xml:id="co-vx-ucs"/>
    &lt;uscertta&gt;SA10-99A&lt;/uscertta&gt; <co xml:id="co-vx-uct"/>
    &lt;mlist msgid="201075606@hacker.com"&gt;http://marc.theaimsgroup.com/?l=bugtraq&amp;amp;m=203886607825605&lt;/mlist&gt; <co xml:id="co-vx-mls"/>
    &lt;url&gt;http://j.r.hacker.com/advisories/1&lt;/url&gt; <co xml:id="co-vx-url"/>
  &lt;/references&gt;
  &lt;dates&gt;
    &lt;discovery&gt;2010-05-25&lt;/discovery&gt; <co xml:id="co-vx-dsc"/>
    &lt;entry&gt;2010-07-13&lt;/entry&gt; <co xml:id="co-vx-ent"/>
    &lt;modified&gt;2010-09-17&lt;/modified&gt; <co xml:id="co-vx-mod"/>
  &lt;/dates&gt;
&lt;/vuln&gt;</programlisting>

      <para>The tag names are supposed to be self-explanatory so we
	shall take a closer look only at fields which needs to be
	filled in:</para>

      <calloutlist>
	<callout arearefs="co-vx-vid">
	  <para>This is the top-level tag of a VuXML entry.  It has a
	    mandatory attribute, <literal>vid</literal>, specifying a
	    universally unique identifier (UUID) for this entry (in
	    quotes).  Generate a UUID for each new VuXML
	    entry (and do not forget to substitute it for the template
	    UUID unless writing the entry from scratch).
	    use &man.uuidgen.1; to generate a VuXML UUID.</para>
	</callout>

	<callout arearefs="co-vx-top">
	  <para>This is a one-line description of the issue
	    found.</para>
	</callout>

	<callout arearefs="co-vx-nam">
	  <para>The names of packages affected are listed there.
	    Multiple names can be given since several packages may be
	    based on a single master port or software product.  This
	    may include stable and development branches, localized
	    versions, and slave ports featuring different choices of
	    important build-time configuration options.</para>

	  <important>
	    <para>It is the submitter's responsibility to find all
	      such related packages when writing a VuXML entry.  Keep
	      in mind that <literal>make search name=foo</literal> is
	      helpful.  The primary points to look for are:</para>

	    <itemizedlist>
	      <listitem>
		<para>the <filename>foo-devel</filename> variant for a
		  <filename>foo</filename> port;</para>
	      </listitem>

	      <listitem>
		<para>other variants with a suffix like
		  <literal>-a4</literal> (for print-related packages),
		  <literal>-without-gui</literal> (for packages with X
		  support disabled), or similar;</para>
	      </listitem>

	      <listitem>
		<para><literal>jp-</literal>, <literal>ru-</literal>,
		  <literal>zh-</literal>, and other possible localized
		  variants in the corresponding national categories of
		  the ports collection.</para>
	      </listitem>
	    </itemizedlist>
	  </important>
	</callout>

	<callout arearefs="co-vx-rng">
	  <para>Affected versions of the package(s) are specified
	    there as one or more ranges using a combination of
	    <literal>&lt;lt&gt;</literal>,
	    <literal>&lt;le&gt;</literal>,
	    <literal>&lt;eq&gt;</literal>,
	    <literal>&lt;ge&gt;</literal>, and
	    <literal>&lt;gt&gt;</literal> elements.  Check that the
	    version ranges given do not overlap.</para>

	  <para>In a range specification, <literal>*</literal>
	    (asterisk) denotes the smallest version number.  In
	    particular, <literal>2.*</literal> is less than
	    <literal>2.a</literal>.  Therefore an asterisk may be used
	    for a range to match all possible
	    <literal>alpha</literal>, <literal>beta</literal>, and
	    <literal>RC</literal> versions.  For instance,
	    <literal>&lt;ge&gt;2.*&lt;/ge&gt;&lt;lt&gt;3.*&lt;/lt&gt;</literal>
	    will selectively match every <literal>2.x</literal>
	    version while
	    <literal>&lt;ge&gt;2.0&lt;/ge&gt;&lt;lt&gt;3.0&lt;/lt&gt;</literal>
	    will not since the latter misses <literal>2.r3</literal>
	    and matches <literal>3.b</literal>.</para>

	  <para>The above example specifies that affected are versions
	    from <literal>1.6</literal> to <literal>1.9</literal>
	    inclusive, versions <literal>2.x</literal> before
	    <literal>2.4_1</literal>, and version
	    <literal>3.0b1</literal>.</para>
	</callout>

	<callout arearefs="co-vx-nm2">
	  <para>Several related package groups (essentially, ports)
	    can be listed in the <literal>&lt;affected&gt;</literal>
	    section.  This can be used if several software products
	    (say FooBar, FreeBar and OpenBar) grow from the same code
	    base and still share its bugs and vulnerabilities.  Note
	    the difference from listing multiple names within a single
	    &lt;package&gt; section.</para>
	</callout>

	<callout arearefs="co-vx-epo">
	  <para>The version ranges have to allow for
	    <varname>PORTEPOCH</varname> and
	    <varname>PORTREVISION</varname> if applicable.  Please
	    remember that according to the collation rules, a version
	    with a non-zero <varname>PORTEPOCH</varname> is greater
	    than any version without <varname>PORTEPOCH</varname>,
	    for example, <literal>3.0,1</literal> is greater than
	    <literal>3.1</literal> or even than
	    <literal>8.9</literal>.</para>
	</callout>

	<callout arearefs="co-vx-bdy">
	  <para>This is a summary of the issue.  XHTML is used in this
	    field.  At least enclosing <literal>&lt;p&gt;</literal>
	    and <literal>&lt;/p&gt;</literal> has to appear.  More
	    complex mark-up may be used, but only for the sake of
	    accuracy and clarity: No eye candy please.</para>
	</callout>

	<callout arearefs="co-vx-ref">
	  <para>This section contains references to relevant
	    documents.  As many references as apply are
	    encouraged.</para>
	</callout>

	<callout arearefs="co-vx-fsa">
	  <para>This is a <link
	      xlink:href="https://www.freebsd.org/security/#adv">&os;
	      security advisory</link>.</para>
	</callout>

	<callout arearefs="co-vx-fpr">
	  <para>This is a <link
	      xlink:href="https://www.freebsd.org/support.html">&os;
	      problem report</link>.</para>
	</callout>

	<callout arearefs="co-vx-cve">
	  <para>This is a
	    <link xlink:href="http://www.cve.mitre.org/">MITRE
	      CVE</link> identifier.</para>
	</callout>

	<callout arearefs="co-vx-bid">
	  <para>This is a <link
	      xlink:href="http://www.securityfocus.com/bid">SecurityFocus
	      Bug ID</link>.</para>
	</callout>

	<callout arearefs="co-vx-cts">
	  <para>This is a
	    <link xlink:href="http://www.cert.org/">US-CERT</link>
	    security advisory.</para>
	</callout>

	<callout arearefs="co-vx-ctv">
	  <para>This is a
	    <link xlink:href="http://www.cert.org/">US-CERT</link>
	    vulnerability note.</para>
	</callout>

	<callout arearefs="co-vx-ucs">
	  <para>This is a
	    <link xlink:href="http://www.cert.org/">US-CERT</link>
	    Cyber Security Alert.</para>
	</callout>

	<callout arearefs="co-vx-uct">
	  <para>This is a
	    <link xlink:href="http://www.cert.org/">US-CERT</link>
	    Technical Cyber Security Alert.</para>
	</callout>

	<callout arearefs="co-vx-mls">
	  <para>This is a URL to an archived posting in a mailing
	    list.  The attribute <literal>msgid</literal> is optional
	    and may specify the message ID of the posting.</para>
	</callout>

	<callout arearefs="co-vx-url">
	  <para>This is a generic URL.  Only it if none
	    of the other reference categories apply.</para>
	</callout>

	<callout arearefs="co-vx-dsc">
	  <para>This is the date when the issue was disclosed
	    (<replaceable>YYYY-MM-DD</replaceable>).</para>
	</callout>

	<callout arearefs="co-vx-ent">
	  <para>This is the date when the entry was added
	    (<replaceable>YYYY-MM-DD</replaceable>).</para>
	</callout>

	<callout arearefs="co-vx-mod">
	  <para>This is the date when any information in the entry was
	    last modified (<replaceable>YYYY-MM-DD</replaceable>).
	    New entries must not include this field.  Add it when
	    editing an existing entry.</para>
	</callout>
      </calloutlist>
    </sect2>

    <sect2 xml:id="security-notify-vuxml-testing">
      <title>Testing Changes to the VuXML Database</title>

      <para>This example describes a new entry for a vulnerability in
	the package <literal>dropbear</literal> that has been fixed in
	version <literal>dropbear-2013.59</literal>.</para>

      <para>As a prerequisite, install a fresh version of
	<package role="port">security/vuxml</package> port.</para>

      <para>First, check whether there already is an entry for this
	vulnerability.  If there were such an entry, it would match
	the previous version of the package,
	<literal>2013.58</literal>:</para>

      <screen>&prompt.user; <userinput>pkg audit dropbear-2013.58</userinput></screen>

      <para>If there is none found, add a
	new entry for this vulnerability.</para>

      <screen>&prompt.user; <userinput>cd ${PORTSDIR}/security/vuxml</userinput>
&prompt.user; <userinput>make newentry</userinput></screen>

      <para>Verify its syntax and formatting:</para>

      <screen>&prompt.user; <userinput>make validate</userinput></screen>

      <note>
	<para>At least one of these packages needs to be installed:
	  <package role="port">textproc/libxml2</package>,
	  <package role="port">textproc/jade</package>.</para>
      </note>

      <para>Verify that the <literal>&lt;affected&gt;</literal>
	section of the entry will match the correct packages:</para>

      <screen>&prompt.user; <userinput>pkg audit -f ${PORTSDIR}/security/vuxml/vuln.xml dropbear-2013.58</userinput></screen>

      <para>Make sure that the entry produces no spurious matches in
	the output.</para>

      <para>Now check whether the right package versions are matched
	by the entry:</para>

      <screen>&prompt.user; <userinput>pkg audit -f ${PORTSDIR}/security/vuxml/vuln.xml dropbear-2013.58 dropbear-2013.59</userinput>
dropbear-2012.58 is vulnerable:
dropbear -- exposure of sensitive information, DoS
CVE: CVE-2013-4434
CVE: CVE-2013-4421
WWW: http://portaudit.FreeBSD.org/8c9b48d1-3715-11e3-a624-00262d8b701d.html

1 problem(s) in the installed packages found.</screen>

      <para>The former version matches while the latter one
	does not.</para>
    </sect2>
  </sect1>
</chapter>
