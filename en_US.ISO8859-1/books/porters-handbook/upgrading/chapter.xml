<?xml version="1.0" encoding="iso-8859-1"?>
<!--
     The FreeBSD Documentation Project

     $FreeBSD$
-->

<chapter xmlns="http://docbook.org/ns/docbook"
  xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0"
  xml:id="port-upgrading">

  <title>Upgrading a Port</title>

  <para>When a port is not the most recent version available from the
    authors, update the local working copy of
    <filename>/usr/ports</filename>.  The port might have already been
    updated to the new version.</para>

  <para>When working with more than a few ports, it will probably be
    easier to use <application>Subversion</application> to keep
    the whole ports collection up-to-date, as described in the <link
      xlink:href="&url.books.handbook;/ports-using.html">Handbook</link>.
    This will have the added benefit of tracking all the port's
    dependencies.</para>

  <para>The next step is to see if there is an update already pending.
    To do this, there are two options.  There is a searchable
    interface to the <link
      xlink:href="https://bugs.freebsd.org/search/">FreeBSD Problem
      Report (PR) or bug database</link>.  Select <literal>Ports &amp;
      Packages</literal> in the <literal>Product</literal> multiple
    select menu, and
    enter the name of the port in the <literal>Summary</literal>
    field.</para>

  <para>However, sometimes people forget to put the name of the port
    into the Summary field in an unambiguous fashion.  In that
    case, try searching in the <literal>Comment</literal> field in
    the <literal>Detailled Bug Information</literal> section, or try
    the
    <link linkend="portsmon">&os; Ports Monitoring System</link>
    (also known as <literal>portsmon</literal>).  This system
    attempts to classify port PRs by portname.  To search for PRs
    about a particular port, use the <link
      xlink:href="http://portsmon.FreeBSD.org/portoverview.py">Overview
      of One Port</link>.</para>

  <para>If there is no pending PR, the next step is to send an email
    to the port's maintainer, as shown by
    <command>make maintainer</command>.  That person may already be
    working on an upgrade, or have a reason to not upgrade the port
    right now (because of, for example, stability problems of the
    new version), and there is no need to duplicate their work.  Note
    that unmaintained ports are listed with a maintainer of
    <literal>ports@FreeBSD.org</literal>, which is just the general
    ports mailing list, so sending mail there probably will not help
    in this case.</para>

  <para>If the maintainer asks you to do the upgrade or there is
    no maintainer, then help out &os; by
    preparing the update!  Please do this by using the
    &man.diff.1; command in the base system.</para>

  <para>To create a suitable <command>diff</command> for a single
    patch, copy the file that needs patching to
    <filename><replaceable>something</replaceable>.orig</filename>,
    save the changes to
    <filename><replaceable>something</replaceable></filename> and then
    create the patch:</para>

  <informalexample>
    <screen>&prompt.user; <userinput>diff -u <replaceable>something</replaceable>.orig <replaceable>something</replaceable> &gt; something.diff</userinput></screen>
  </informalexample>

  <para>Otherwise, either use the
    <command>svn diff</command> method (<xref linkend="svn-diff"/>)
    or copy the contents of the port to an entire different
    directory and use the result of the recursive &man.diff.1;
    output of the new and old ports directories (for example, if the
    modified port directory is called <filename>superedit</filename>
    and the original is in our tree as
    <filename>superedit.bak</filename>, then save the result of
    <command>diff -ruN superedit.bak superedit</command>).  Either
    unified or context diff is fine, but port committers generally
    prefer unified diffs.  Note the use of the <literal>-N</literal>
    option&mdash;this is the accepted way to force diff to properly
    deal with the case of new files being added or old files being
    deleted.  Before sending us the diff, please examine the output
    to make sure all the changes make sense.  (In particular, make
    sure to first clean out the work directories with
    <command>make clean</command>).</para>

  <note>
    <para>If some files have been added, copied, moved, or removed,
      add this information to the problem report so that the committer
      picking up the patch will know what &man.svn.1; commands to
      run.</para>
  </note>

  <para>To simplify common operations with patch files, use
    <command>make makepatch</command> as described in <xref
      linkend="slow-patch"/>.
    Other tools exists, like
    <filename>/usr/ports/Tools/scripts/patchtool.py</filename>.
    Before using it, please read
    <filename>/usr/ports/Tools/scripts/README.patchtool</filename>.</para>

  <para>If the port is unmaintained, and you are actively using
    it, please consider volunteering to become its
    maintainer.  &os; has over 4000 ports without maintainers, and
    this is an area where more volunteers are always needed.  (For a
    detailed description of the responsibilities of maintainers,
    refer to the section in the <link
      xlink:href="&url.books.developers-handbook;/policies.html#POLICIES-MAINTAINER">Developer's
      Handbook</link>.)</para>

  <para>To submit the diff, use the <link
      xlink:href="https://bugs.freebsd.org/submit/">bug submit
      form</link> (product <literal>Ports &amp; Packages</literal>,
    component <literal>Individual Port(s)</literal>).  If the
    submitter is also
    maintaining the port, be sure to put
    <literal>[MAINTAINER]</literal> at the beginning of the
    <literal>Summary</literal> line.  Always include the category
    with the port name, followed by colon, and brief descripton of the
    issue.  For example:
    <literal><replaceable>category/portname</replaceable>:
      <replaceable>add FOO option</replaceable></literal>, or if
    maintaining the port, <literal>[MAINTAINER]
      <replaceable>category/portname</replaceable>:
      <replaceable>Update to X.Y</replaceable></literal>.
    Please mention any added or
    deleted files in the message, as they have to be explicitly
    specified to &man.svn.1; when doing a commit.  Do not compress or
    encode the diff.</para>

  <para>Before submitting the bug, review the <link
      xlink:href="&url.articles.problem-reports;/pr-writing.html">
    Writing the problem report</link> section in the Problem
    Reports article.  It contains far more information about how to
    write useful problem reports.</para>

  <important>
    <para>If the upgrade is motivated by security concerns or a
      serious fault in the currently committed port, please notify
      the &a.portmgr; to request immediate rebuilding and
      redistribution of the port's package.  Unsuspecting users
      of <command>pkg</command> will otherwise continue to install
      the old version via <command>pkg install</command> for several
      weeks.</para>
  </important>

  <note>
    <para>Please use &man.diff.1; or <command>svn diff</command> to
      create updates to existing ports.  Other formats include the
      whole file and make it impossible to see just what has changed.
      When diffs are not included, the entire update might be
      ignored.</para>
  </note>

  <para>Now that all of that is done, read about
    how to keep up-to-date in <xref linkend="keeping-up"/>.</para>

  <sect1 xml:id="svn-diff">
    <title>Using <application>Subversion</application> to Make
      Patches</title>

    <para>When possible, please submit a &man.svn.1; diff.  They
      are easier to handle than diffs between
      <quote>new and old</quote> directories.  It is easier
      to see what has changed, and to update the diff if
      something was modified in the Ports Collection since the
      work on it began, or if the
      committer asks for something to be fixed.  Also, a patch
      generated with <command>svn diff</command> can be easily applied
      with <command>svn patch</command> and will save some time to the
      committer.</para>

    <screen>&prompt.user; <userinput>cd ~/my_wrkdir</userinput> <co xml:id="my-wrkdir"/>
&prompt.user; <userinput>svn co <replaceable>https://svn.FreeBSD.org</replaceable>/ports/head/dns/pdnsd</userinput> <co xml:id="svn-FreeBSD-org"/>
&prompt.user; <userinput>cd ~/my_wrkdir/pdnsd</userinput></screen>

    <calloutlist>
      <callout arearefs="my-wrkdir">

	<para>This can be anywhere, of course.  Building
	  ports is not limited to within
	  <filename>/usr/ports/</filename>.</para>
      </callout>

      <callout arearefs="svn-FreeBSD-org">
	<para><link
	    xlink:href="https://svn.FreeBSD.org/">svn.FreeBSD.org</link>
	  is the &os; public <application>Subversion</application>
	  server.  See <link
	    xlink:href="&url.books.handbook;/svn.html#svn-mirrors">Subversion
	    mirror sites</link> for more information.</para>
      </callout>
    </calloutlist>

    <para>While in the port directory, make any changes that are
      needed.  If adding, copying, moving, or removing a
      file, use <command>svn</command> to track these changes:</para>

    <screen>&prompt.user; <userinput>svn add <replaceable>new_file</replaceable></userinput>
&prompt.user; <userinput>svn copy <replaceable>some_file</replaceable> <replaceable>file_copy</replaceable></userinput>
&prompt.user; <userinput>svn move <replaceable>old_name</replaceable> <replaceable>new_name</replaceable></userinput>
&prompt.user; <userinput>svn remove <replaceable>deleted_file</replaceable></userinput></screen>

    <para>Make sure to check the port using the checklist in
      <xref linkend="porting-testing"/> and
      <xref linkend="porting-portlint"/>.</para>

    <screen>&prompt.user; <userinput>svn status</userinput>
&prompt.user; <userinput>svn update</userinput> <co xml:id="svn-update"/></screen>

    <calloutlist>
      <callout arearefs="svn-update">
	<para>This will attempt to merge the differences between the
	  patch and current repository version.  Watch the output
	  carefully.  The letter in front of each file name
	  indicates what was done with it.  See
	  <xref linkend="table-svn-up"/> for a complete list.</para>
      </callout>
    </calloutlist>

    <table pgwide="1" frame="none" xml:id="table-svn-up">
      <title><application>Subversion</application> Update File
	Prefixes</title>

      <tgroup cols="2">
	<tbody>
	  <row>
	    <entry>U</entry>
	    <entry>The file was updated without problems.</entry>
	  </row>

	  <row>
	    <entry>G</entry>
	    <entry>The file was updated without problems (only when
	      working against a remote
	      repository).</entry>
	  </row>

	  <row>
	    <entry>M</entry>
	    <entry>The file had been modified, and was merged
	      without conflicts.</entry>
	  </row>

	  <row>
	    <entry>C</entry>
	    <entry>The file had been modified, and was merged with
	      conflicts.</entry>
	  </row>
	</tbody>
      </tgroup>
    </table>

    <para>If <literal>C</literal> is displayed as a result of
      <command>svn update</command>, it means something changed in
      the <application>Subversion</application> repository and
      &man.svn.1; was not able to merge the local changes with those
      from the repository.  It is always a good idea to inspect the
      changes anyway, since &man.svn.1; does not know anything about
      the structure of a port, so it might (and probably will) merge
      things that do not make sense.</para>

    <para>The last step is to make a unified &man.diff.1;
      of the changes:</para>

    <screen>&prompt.user; <userinput>svn diff &gt; ../`make -VPKGNAME`.diff</userinput></screen>

    <note>
      <para>If files have been added, copied, moved, or removed,
	include the &man.svn.1; <command>add</command>,
	<command>copy</command>, <command>move</command>, and
	<command>remove</command> commands that were used.
	<command>svn move</command> or <command>svn copy</command>
	must be run before the patch can be applied.  <command>svn
	  add</command> or <command>svn remove</command> must be run
	after the patch is applied.</para>
    </note>

    <para>Send the patch following the <link
	xlink:href="&url.articles.problem-reports;/pr-writing.html">problem
	report submission guidelines</link>.</para>
  </sect1>

  <sect1 xml:id="moved-and-updating-files">
    <title><filename>UPDATING</filename> and
      <filename>MOVED</filename></title>

    <sect2 xml:id="moved-and-updating-updating">
      <title><filename>/usr/ports/UPDATING</filename></title>

      <para>If upgrading the port requires special steps like
	changing configuration files or running a specific program,
	it must be documented in this file.  The format of
	an entry in this file is:</para>

      <programlisting>YYYYMMDD:
  AFFECTS: users of portcategory/portname
  AUTHOR: Your name &lt;Your email address&gt;

  Special instructions</programlisting>

      <tip>
	<para>When including exact
	  <application>portmaster</application>,
	  <application>portupgrade</application>, and/or
	  <application>pkg</application> instructions, please make
	  sure
	  to get the shell escaping right.  For example, do
	  <emphasis>not</emphasis> use:</para>

	<screen>&prompt.root; <userinput>pkg delete -g -f docbook-xml* docbook-sk* docbook[2345]??-* docbook-4*</userinput></screen>

	<para>As shown, the command will only work with
	  <application>bourne shells</application>.  Instead, use the
	  form shown below, which will work with both
	  <application>bourne shell</application> and
	  <application>c-shell</application>:</para>

	<screen>&prompt.root; <userinput>pkg delete -g -f docbook-xml\* docbook-sk\* docbook\[2345\]\?\?-\* docbook-4\*</userinput></screen>
      </tip>

      <note>
	<para>It is recommended that the AFFECTS line contains a glob
	  matching all the ports affected by the entry so that
	  automated tools can parse it as easily as possible.  If an
	  update concerns all the existing <application>BIND
	    9</application> versions the <literal>AFFECTS</literal>
	  content must be <literal>users of dns/bind9*</literal>, it
	  must <emphasis>not</emphasis> be <literal>users of BIND
	    9</literal></para>
      </note>

    </sect2>

    <sect2 xml:id="moved-and-updating-moved">
      <title><filename>/usr/ports/MOVED</filename></title>

      <para>This file is used to
	list moved or removed ports.  Each line in the file is made
	up of the name of the port, where the port was moved, when,
	and why.  If the port was removed, the section detailing where
	it was moved can be left blank.  Each section must be
	separated by the <literal>|</literal> (pipe) character, like
	so:</para>

      <programlisting>old name|new name (blank for deleted)|date of move|reason</programlisting>

      <para>The date must be entered in the form
	<literal>YYYY-MM-DD</literal>.  New entries are added to
	the end of the list to keep it in chronological order,
	with the oldest entry at the top of the list.</para>

      <para>If a port was removed but has since been restored,
	delete the line in this file that states that it was
	removed.</para>

      <para>If a port was renamed and then renamed back to its
	original name, add a new one with the intermediate name to the
	old name, and remove the old entry as to not create a
	loop.</para>

      <note>
	<para>Any changes must be validated with
	  <command>Tools/scripts/MOVEDlint.awk</command>.</para>

	<para>If using a ports directory other than
	  <filename>/usr/ports</filename>, use:</para>

	<informalexample>
	  <screen>&prompt.user; <userinput>cd <replaceable>/home/user/ports</replaceable></userinput>
&prompt.user; <userinput>env PORTSDIR=$PWD Tools/scripts/MOVEDlint.awk</userinput></screen>
	</informalexample>
      </note>
    </sect2>
  </sect1>
</chapter>

