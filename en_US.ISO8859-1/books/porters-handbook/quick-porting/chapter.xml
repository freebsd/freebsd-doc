<?xml version="1.0" encoding="iso-8859-1"?>
<!--
     The FreeBSD Documentation Project

     $FreeBSD$
-->
<chapter xmlns="http://docbook.org/ns/docbook"
  xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0"
  xml:id="quick-porting">

  <title>Quick Porting</title>

  <para>This section describes how to quickly create a new port.  For
    applications where this quick method is not adequate, the full
    <quote>Slow Porting</quote> process is described in
    <xref linkend="slow-porting"/>.</para>

  <para>First, get the original tarball and put it into
    <varname>DISTDIR</varname>, which defaults to
    <filename>/usr/ports/distfiles</filename>.</para>

  <note>
    <para>These steps assume that the software compiled
      out-of-the-box.  In other words, absolutely no changes were
      required for the application to work on a &os; system.  If
      anything had to be changed, refer to <xref
	linkend="slow-porting"/>.</para>
  </note>

  <note>
    <para>It is recommended to set the <varname>DEVELOPER</varname>
      &man.make.1; variable in <filename>/etc/make.conf</filename>
      before getting into porting.</para>

    <screen>&prompt.root; <userinput>echo DEVELOPER=yes &gt;&gt; /etc/make.conf</userinput></screen>

    <para>This setting enables the <quote>developer mode</quote>
      that displays deprecation warnings and activates some further
      quality checks on calling <command>make</command>.</para>
  </note>

  <sect1 xml:id="porting-makefile">
    <title>Writing the <filename>Makefile</filename></title>

    <para>The minimal <filename>Makefile</filename> would look
      something like this:</para>

    <programlisting># &dollar;FreeBSD&dollar;

PORTNAME=	oneko
DISTVERSION=	1.1b
CATEGORIES=	games
MASTER_SITES=	ftp://ftp.cs.columbia.edu/archives/X11R5/contrib/

MAINTAINER=	youremail@example.com
COMMENT=	Cat chasing a mouse all over the screen

.include &lt;bsd.port.mk&gt;</programlisting>

    <note>
      <para>In some cases, the <filename>Makefile</filename> of an
	existing port may contain additional lines in the header,
	such as the name of the port and the date it was created.
	This additional information has been declared obsolete, and
	is being phased out.</para>
    </note>

    <para>Try to figure it out.  Do not worry about the
      contents of the <literal>&dollar;FreeBSD&dollar;</literal>
      line, it will be filled in automatically by
      <application>Subversion</application> when the port is
      imported to our main ports tree.  A more detailed
      example is shown in the
      <link linkend="porting-samplem">sample Makefile</link>
      section.</para>
  </sect1>

  <sect1 xml:id="porting-desc">
    <title>Writing the Description Files</title>

    <para>There are two description files that are required for
      any port, whether they actually package or not.  They are
      <filename>pkg-descr</filename> and
      <filename>pkg-plist</filename>.  Their
      <filename>pkg-</filename> prefix distinguishes them from other
      files.</para>

    <sect2 xml:id="porting-pkg-descr">
      <title><filename>pkg-descr</filename></title>

      <para>This is a longer description of the port.  One to a few
	paragraphs concisely explaining what the port does is
	sufficient.</para>

      <note>
	<para>This is <emphasis>not</emphasis> a manual or an
	  in-depth description on how to use or compile the port!
	  <emphasis>Please be careful when copying from the
	  <filename>README</filename> or manpage</emphasis>.  Too
	  often they are not a concise description of the port or
	  are in an awkward format.  For example, manpages have
	  justified spacing, which looks particularly bad with
	  monospaced fonts.</para>

	<para>On the other hand, the content of
	  <filename>pkg-descr</filename> must be longer than the <link
	    linkend="makefile-comment"><varname>COMMENT</varname></link>
	  line from the Makefile.  It must explain in more depth what
	  the port is all about.</para>
      </note>

      <para>A well-written <filename>pkg-descr</filename> describes
	the port completely enough that users would not have to
	consult the documentation or visit the website to understand
	what the software does, how it can be useful, or what
	particularly nice features it has.  Mentioning certain
	requirements like a graphical toolkit, heavy dependencies,
	runtime environment, or implementation languages help users
	decide whether this port will work for them.</para>

      <para>Include a URL to the official WWW homepage.  Prepend
	<emphasis>one</emphasis> of the websites (pick the most
	common one) with <literal>WWW:</literal> (followed by single
	space) so that automated tools will work correctly.  If the
	URI is the root of the website or directory, it must be
	terminated with a slash.</para>

      <note>
	<para>If the listed webpage for a port is not available, try
	  to search the Internet first to see if the official site
	  moved, was renamed, or is hosted elsewhere.</para>
      </note>

      <para>This example shows how
	<filename>pkg-descr</filename> looks:</para>

      <programlisting>This is a port of oneko, in which a cat chases a poor mouse all over
the screen.
 :
(etc.)

WWW: http://www.oneko.org/</programlisting>
    </sect2>

    <sect2 xml:id="porting-pkg-plist">
      <title><filename>pkg-plist</filename></title>

      <para>This file lists all the files installed by the port.  It
	is also called the <quote>packing list</quote> because the
	package is generated by packing the files listed here.  The
	pathnames are relative to the installation prefix (usually
	<filename>/usr/local</filename>).</para>

      <para>Here is a small example:</para>

      <programlisting>bin/oneko
man/man1/oneko.1.gz
lib/X11/app-defaults/Oneko
lib/X11/oneko/cat1.xpm
lib/X11/oneko/cat2.xpm
lib/X11/oneko/mouse.xpm</programlisting>

      <para>Refer to the &man.pkg-create.8; manual page for details
	on the packing list.</para>

      <note>
	<para>It is recommended to keep all the filenames in
	  this file sorted alphabetically.  It will make verifying
	  changes when upgrading the port much easier.</para>
      </note>

      <tip>
	<para>Creating a packing list manually can be a very tedious
	  task.  If the port installs a large numbers of files,
	  <link linkend="plist-autoplist">creating the packing list
	    automatically</link> might save time.</para>
      </tip>

      <para>There is only one case when
	<filename>pkg-plist</filename> can be omitted from a port.
	If the port installs just a handful of files, list them in
	<varname>PLIST_FILES</varname>, within the
	port's <filename>Makefile</filename>.  For instance, we
	could get along without <filename>pkg-plist</filename> in
	the above <filename>oneko</filename> port by adding these
	lines to the <filename>Makefile</filename>:</para>

      <programlisting>PLIST_FILES=	bin/oneko \
		man/man1/oneko.1.gz \
		lib/X11/app-defaults/Oneko \
		lib/X11/oneko/cat1.xpm \
		lib/X11/oneko/cat2.xpm \
		lib/X11/oneko/mouse.xpm</programlisting>

      <note>
	<para>Usage of <varname>PLIST_FILES</varname> should not be
	  abused.  When looking for the origin of a file, people
	  usually try to <application>grep</application> through the
	  <filename>pkg-plist</filename> files in the ports tree.
	  Listing files in <varname>PLIST_FILES</varname> in the
	  <filename>Makefile</filename> makes that search more
	  difficult.</para>
      </note>

      <tip>
	<para>If a port needs to create an empty directory, or creates
	  directories outside of <filename>${PREFIX}</filename> during
	  installation, refer to <xref linkend="plist-dir-cleaning"/>
	  for more information.</para>
      </tip>

      <tip>
	<para>As <varname>PLIST_FILES</varname> is a &man.make.1; variable,
	  any entry with spaces must be quoted.  For example, if using
	  keywords described in &man.pkg-create.8; and <xref
	    linkend="plist-keywords"/>, the entry must be quoted.</para>

	<programlisting>PLIST_FILES=	"@sample ${ETCDIR}/oneko.conf.sample"</programlisting>
      </tip>

      <para>Later we will see how <filename>pkg-plist</filename>
	and <varname>PLIST_FILES</varname> can be used to fulfill
	<link linkend="plist">more sophisticated
	  tasks</link>.</para>
    </sect2>
  </sect1>

  <sect1 xml:id="porting-checksum">
    <title>Creating the Checksum File</title>

    <para>Just type <command>make makesum</command>.  The ports
      framework will automatically generate
      <filename>distinfo</filename>.  Do not try to generate the file
      manually.</para>
  </sect1>

  <sect1 xml:id="porting-testing">
    <title>Testing the Port</title>

    <para>Make sure that the port rules do exactly what
      is desired, including packaging up the port.  These
      are the important points to verify:</para>

    <itemizedlist>
      <listitem>
	<para><filename>pkg-plist</filename> does not contain
	  anything not installed by the port.</para>
      </listitem>

      <listitem>
	<para><filename>pkg-plist</filename> contains everything
	  that is installed by the port.</para>
      </listitem>

      <listitem>
	<para>The port can be installed using the
	  <buildtarget>install</buildtarget> target.  This verifies
	  that the install script works correctly.</para>
      </listitem>

      <listitem>
	<para>The port can be deinstalled properly using the
	  <buildtarget>deinstall</buildtarget> target.  This
	  verifies that the deinstall script works correctly.</para>
      </listitem>

      <listitem>
	<para>The port only has access to network resources during the
	  <buildtarget>fetch</buildtarget> target phase.  This is
	  important for package builders, such as <package
	    role="port">ports-mgmt/poudriere</package>.</para>
      </listitem>

      <listitem>
	<para>Make sure that <command>make package</command> can be
	  run as a normal user (that is, not as
	  <systemitem class="username">root</systemitem>).  If that
	  fails, the software may need to be patched.  See also <xref
	    linkend="uses-fakeroot"/> and <xref
	    linkend="uses-uidfix"/>.</para>
      </listitem>
    </itemizedlist>

    <procedure>
      <title>Recommended Test Ordering</title>

      <step>
	<para><command>make stage</command></para>
      </step>

      <step>
	<para><command>make check-orphans</command></para>
      </step>

      <step>
	<para><command>make package</command></para>
      </step>

      <step>
	<para><command>make install</command></para>
      </step>

      <step>
	<para><command>make deinstall</command></para>
      </step>

      <step>
	<para><command>make package</command> (as user)</para>
      </step>
    </procedure>

    <para>Make certain no warnings are shown in any of
      the stages.</para>

    <para>Thorough automated testing can be done with
      <package role="port">ports-mgmt/poudriere</package> from the
      Ports Collection, see <xref linkend="testing-poudriere"/> for
      more information.  It maintains <literal>jails</literal> where
      all of the steps shown above can be tested without affecting the
      state of the host system.</para>
  </sect1>

  <sect1 xml:id="porting-portlint">
    <title>Checking the Port with
      <command>portlint</command></title>

    <para>Please use <command>portlint</command> to see if the port
      conforms to our guidelines.  The
      <package role="port">ports-mgmt/portlint</package>
      program is part of the ports collection.  In particular,
      check that the
      <link linkend="porting-samplem">Makefile</link> is in the
      right shape and the
      <link linkend="porting-pkgname">package</link> is named
      appropriately.</para>

    <important>
      <para>Do not blindly follow the output of
	<command>portlint</command>.  It is a static lint tool and
	sometimes gets things wrong.</para>
    </important>
  </sect1>

  <sect1 xml:id="porting-submitting">
    <title>Submitting the New Port</title>

    <para>Before submitting the new port, read the
      <link linkend="porting-dads">DOs and DON'Ts</link>
      section.</para>

    <para>Once happy with the port, the only thing remaining is to
      put it in the main &os; ports tree and make everybody else
      happy about it too.</para>

    <important>
      <para>We do not need the <filename>work</filename> directory or
	the <filename>pkgname.tgz</filename> package, so delete them
	now.</para>
    </important>

    <para>Next, either create a &man.patch.1;, or a &man.shar.1; file.
      Assuming the port is called <literal>oneko</literal> and is in
      the <literal>games</literal> category.</para>

    <example xml:id="porting-submitting-diff">
      <title>Creating a <filename>.diff</filename> for a New
	Port</title>

      <para>Add all the files with <command>svn add</command>.
	<command>cd</command> to the base of the ports tree so full
	paths to the changed files are included in the diff, then
	generate the diff with <command>svn diff</command>.  For
	example:</para>

      <screen>&prompt.user; <userinput>svn add .</userinput>
&prompt.user; <userinput>cd ../..</userinput>
&prompt.user; <userinput>svn diff <replaceable>games/oneko</replaceable> &gt; <replaceable>oneko.diff</replaceable></userinput></screen>

      <important>
	<para>To make it easier for committers to apply the patch on
	  their working copy of the ports tree, please generate the
	  <filename>.diff</filename> from the base of your ports
	  tree.</para>
      </important>
    </example>

    <example xml:id="porting-submitting-shar">
      <title>Creating a <filename>.shar</filename> for a New
	Port</title>

      <para><command>cd</command> to the directory above where the
	port directory is located, and use <command>shar</command> to
	create the archive:</para>

      <screen>&prompt.user; <userinput>cd ..</userinput>
&prompt.user; <userinput>shar `find <replaceable>oneko</replaceable>` &gt; <replaceable>oneko</replaceable>.shar</userinput></screen>
    </example>

    <para>Submit one of <filename>oneko.shar</filename> or
      <filename>oneko.diff</filename> with the <link
	xlink:href="https://bugs.freebsd.org/submit/">bug submission
	form</link>.  Use product <quote>Ports &amp;
	Packages</quote>, component <quote>Individual Port(s)</quote>,
      and follow the guidelines shown there.
      Add a short description of the program to the Description field
      of the PR (perhaps a short version of
      <varname>COMMENT</varname>), and remember to add
      <filename>oneko.shar</filename> or
      <filename>oneko.diff</filename> as an attachment.</para>

    <note>
      <para>Giving a good description in the summary of the problem
	report makes the work of port committers a lot easier.  We
	prefer something like <quote>New port:
	  <replaceable>category</replaceable>/<replaceable>portname</replaceable>
	  <replaceable>short description of
	    the port</replaceable></quote> for new ports.  Using this
	scheme makes it easier and faster to begin the work of
	committing the new port.</para>
    </note>

    <para>After submitting the port, please be patient.  The time
      needed to include a new port in &os; can vary from a few days
      to a few months.  A simple search form of the Problem Report
      database can be searched at <link
	xlink:href="https://bugs.freebsd.org/bugzilla/query.cgi"></link>.</para>

    <para>To get a listing of <emphasis>open</emphasis> port
      <acronym>PR</acronym>s, select <emphasis>Open</emphasis> and
      <emphasis>Ports &amp; Packages</emphasis> in the search form,
      then click <guibutton>[&nbsp;Search&nbsp;]</guibutton>.</para>

    <para>After looking at the new port, we will reply if necessary,
      and commit it to the tree.  The submitter's name will also be
      added to the list of <link
	xlink:href="&url.articles.contributors;/contrib-additional.html">Additional
	&os; Contributors</link> and other files.</para>
  </sect1>
</chapter>
