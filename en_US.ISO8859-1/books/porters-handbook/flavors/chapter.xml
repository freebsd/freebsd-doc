<?xml version="1.0" encoding="iso-8859-1"?>
<!--
     The FreeBSD Documentation Project

     $FreeBSD$

-->

<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink=
  "http://www.w3.org/1999/xlink" version="5.0" xml:id="flavors">

  <title>Flavors</title>

  <sect1 xml:id="flavors-intro">
    <title>An Introduction to Flavors</title>

    <para>Flavors are a way to have multiple variations of a port.
      The port is built multiple times, with variations.</para>

    <para>For example, a port can have a normal version with many
      features and quite a few dependencies, and a light
      <quote>lite</quote> version with only basic features and minimal
      dependencies.</para>

    <para>Another example could be, a port can have a
      <application>GTK</application> flavor and a
      <application>QT</application> flavor, depending on which toolkit
      it uses.</para> </sect1>

  <sect1 xml:id="flavors-using">
    <title>Using FLAVORS</title>

    <para>To declare a port having multiple flavors, add
      <varname>FLAVORS</varname> to its <filename>Makefile</filename>.
      The first flavor in <varname>FLAVORS</varname> is the default
      flavor.</para>

    <tip>
      <para>It can help simplify the logic of the
	<filename>Makefile</filename> to also define
	<varname>FLAVOR</varname> as:</para>

      <programlisting>FLAVOR?=	${FLAVORS:[1]}</programlisting>
    </tip>

    <important>
      <para>To distinguish flavors from options, which are always
	uppercase letters, flavor names can <emphasis>only</emphasis>
	contain lowercase letters, numbers, and the underscore
	<literal>_</literal>.</para>
    </important>

    <example xml:id="flavors-using-ex1">
      <title>Basic Flavors Usage</title>

      <para>If a port has a <quote>lite</quote> slave port, the slave
	port can be removed, and the port can be converted to flavors
	with:</para>

      <programlisting>FLAVORS=	default lite
lite_PKGNAMESUFFIX=	-lite
[...]
.if ${FLAVOR:U} != lite
[enable non lite features]
.endif</programlisting>

      <note>
	<para>The first flavor is the default one, and is called,
	  here, <literal>default</literal>.  It is not an obligation,
	  and if possible, use a more specific flavor name, like in
	  <xref linkend="flavors-using-ex2"/>.</para>
      </note>
    </example>

    <example xml:id="flavors-using-ex2">
      <title>Another Basic Flavors Usage</title>

      <para>If a port has a <literal>-nox11</literal> slave port, the
	slave port can be removed, and the port can be converted to
	flavors with:</para>

      <programlisting>FLAVORS=	x11 nox11
FLAVOR?=	${FLAVORS:[1]}
nox11_PKGNAMESUFFIX=	-nox11
[...]
.if ${FLAVOR} == x11
[enable x11 features]
.endif</programlisting>
    </example>

    <example xml:id="flavors-using-ex3">
      <title>More Complex Flavors Usage</title>

      <para>Here is a slightly edited excerpt of what is present in
	  <package role="port">devel/libpeas</package>, a port that
	  uses the <link
	    linkend="flavors-auto-python"><application>Python</application>
	    flavors</link>.  With the default
	  <application>Python</application> 2 and 3 versions being 2.7
	  and 3.6, it will automatically get <literal>FLAVORS=py27
	    py36</literal></para>

      <programlisting>USES=		gnome python
USE_PYTHON=	flavors <co xml:id="flavors-using-ex2-use"/>

.if ${FLAVOR:Upy27:Mpy2*} <co xml:id="flavors-using-ex2-if"/>
USE_GNOME=	pygobject3 <co xml:id="flavors-using-ex2-pygobject3"/>

CONFIGURE_ARGS+=	--enable-python2 --disable-python3

BUILD_WRKSRC=	${WRKSRC}/loaders/python <co xml:id="flavors-using-ex2-build2"/>
INSTALL_WRKSRC=	${WRKSRC}/loaders/python <co xml:id="flavors-using-ex2-install2"/>
.else # py3*
USE_GNOME+=	py3gobject3 <co xml:id="flavors-using-ex2-py3gobject3"/>

CONFIGURE_ARGS+=	--disable-python2 --enable-python3 \
			ac_cv_path_PYTHON3_CONFIG=${LOCALBASE}/bin/python${PYTHON_VER}-config <co xml:id="flavors-using-ex2-ac_cv"/>

BUILD_WRKSRC=	${WRKSRC}/loaders/python3 <co xml:id="flavors-using-ex2-build3"/>
INSTALL_WRKSRC=	${WRKSRC}/loaders/python3 <co xml:id="flavors-using-ex2-install3"/>
.endif

py34_PLIST=	${.CURDIR}/pkg-plist-py3 <co xml:id="flavors-using-ex2-plist34"/>
py35_PLIST=	${.CURDIR}/pkg-plist-py3 <co xml:id="flavors-using-ex2-plist35"/>
py36_PLIST=	${.CURDIR}/pkg-plist-py3 <co xml:id="flavors-using-ex2-plist36"/></programlisting>

      <calloutlist>
	<callout arearefs="flavors-using-ex2-use">
	  <para>This port does not use
	    <literal>USE_PYTHON=distutils</literal> but needs
	    <application>Python</application> flavors anyway.</para>
	</callout>

	<callout arearefs="flavors-using-ex2-if">
	  <para>To guard against <varname>FLAVOR</varname> being
	    empty, which would cause a &man.make.1; error, use
	    <literal>${FLAVOR:U}</literal> in string comparisons
	    instead of <literal>${FLAVOR}</literal>.</para>
	</callout>

	<callout arearefs="flavors-using-ex2-pygobject3
	  flavors-using-ex2-py3gobject3">
	  <para>The <application>Gnome</application>
	    <application>Python</application> gobject3 bindings have
	    two different names, one for
	    <application>Python</application> 2, pygobject3 and one
	    for <application>Python</application> 3,
	    py3gobject3.</para>
	</callout>

	<callout arearefs="flavors-using-ex2-build2
	  flavors-using-ex2-install2 flavors-using-ex2-build3
	  flavors-using-ex2-install3">
	  <para>The <command>configure</command> script has to run in
	    <filename>${WRKSRC}</filename>, but we are only interested
	    in building and installing the Python 2 or Python 3 parts
	    of the software, so set the build and install base
	    directories appropriately.</para>
	</callout>

	<callout arearefs="flavors-using-ex2-ac_cv">
	  <para>Hint about the correct
	    <application>Python</application> 3 config script
	    path name.</para>
	</callout>

	<callout arearefs="flavors-using-ex2-plist34
	  flavors-using-ex2-plist35 flavors-using-ex2-plist36">
	  <para>The packing list is different when the built with
	    <application>Python</application> 3.  As there are three
	    possible <application>Python</application> 3 versions, set
	    <varname>PLIST</varname> for all three using the <link
	      linkend="flavors-using-helpers">helper</link>.</para>
	</callout>
      </calloutlist>
    </example>

    <sect2 xml:id="flavors-using-helpers">
      <title>Flavors Helpers</title>

      <para>To make the <filename>Makefile</filename> easier to write,
	a few flavors helpers exist.</para>

      <para>This list of helpers will set their variable:</para>

      <itemizedlist>
	<listitem>
	  <para><varname><replaceable>flavor</replaceable>_PKGNAMEPREFIX</varname></para>
	</listitem>

	<listitem>
	  <para><varname><replaceable>flavor</replaceable>_PKGNAMESUFFIX</varname></para>
	</listitem>

	<listitem>
	  <para><varname><replaceable>flavor</replaceable>_PLIST</varname></para>
	</listitem>

	<listitem>
	  <para><varname><replaceable>flavor</replaceable>_DESCR</varname></para>
	</listitem>
      </itemizedlist>

      <para>This list of helpers will append to their variable:</para>

      <itemizedlist>
	<listitem>
	  <para><varname><replaceable>flavor</replaceable>_CONFLICTS</varname></para>
	</listitem>

	<listitem>
	  <para><varname><replaceable>flavor</replaceable>_CONFLICTS_BUILD</varname></para>
	</listitem>

	<listitem>
	  <para><varname><replaceable>flavor</replaceable>_CONFLICTS_INSTALL</varname></para>
	</listitem>

	<listitem>
	  <para><varname><replaceable>flavor</replaceable>_PKG_DEPENDS</varname></para>
	</listitem>

	<listitem>
	  <para><varname><replaceable>flavor</replaceable>_EXTRACT_DEPENDS</varname></para>
	</listitem>

	<listitem>
	  <para><varname><replaceable>flavor</replaceable>_PATCH_DEPENDS</varname></para>
	</listitem>

	<listitem>
	  <para><varname><replaceable>flavor</replaceable>_FETCH_DEPENDS</varname></para>
	</listitem>

	<listitem>
	  <para><varname><replaceable>flavor</replaceable>_BUILD_DEPENDS</varname></para>
	</listitem>

	<listitem>
	  <para><varname><replaceable>flavor</replaceable>_LIB_DEPENDS</varname></para>
	</listitem>

	<listitem>
	  <para><varname><replaceable>flavor</replaceable>_RUN_DEPENDS</varname></para>
	</listitem>

	<listitem>
	  <para><varname><replaceable>flavor</replaceable>_TEST_DEPENDS</varname></para>
	</listitem>
      </itemizedlist>

      <example xml:id="flavors-helpers-ex1">
	<title>Flavor Specific <varname>PKGNAME</varname></title>

	<para>As all packages must have a different package name,
	  flavors must change theirs, using
	  <varname><replaceable>flavor</replaceable>_PKGNAMEPREFIX</varname>
	  and
	  <varname><replaceable>flavor</replaceable>_PKGNAMESUFFIX</varname>
	  makes this easy:</para>

	<programlisting>FLAVORS=	normal lite
lite_PKGNAMESUFFIX=	-lite</programlisting>
      </example>
    </sect2>
  </sect1>

  <sect1 xml:id="flavors-auto-php">
    <title><literal>USES=php</literal> and Flavors</title>

    <para>When using <link linkend="uses-php">USES=php</link> with
      one of these arguments, <literal>phpize</literal>,
      <literal>ext</literal>, <literal>zend</literal>, or
      <literal>pecl</literal>, the port will automatically have
      <varname>FLAVORS</varname> filled in with the
      <application>PHP</application> versions it supports.</para>

    <note>
      <para>All the examples assume the currently supported PHP
	versions are 5.6, 7.0, 7.1, and 7.2.</para>
    </note>

    <example xml:id="flavors-auto-php-ex1">
      <title>Simple <literal>USES=php</literal> Extension</title>

      <para>This will generate package for all the supported
	versions:</para>

      <programlisting>PORTNAME=	some-ext
PORTVERSION=	0.0.1
PKGNAMEPREFIX=	${PHP_PKGNAMEPREFIX}

USES=		php:ext</programlisting>

      <para>This will generate package for all the supported
	versions but 7.2:</para>

      <programlisting>PORTNAME=	some-ext
PORTVERSION=	0.0.1
PKGNAMEPREFIX=	${PHP_PKGNAMEPREFIX}

USES=		php:ext
IGNORE_WITH_PHP=	72</programlisting>
    </example>

    <sect2 xml:id="flavors-auto-php-app">
      <title>PHP Flavors with PHP Applications</title>

      <para>PHP applications can also be flavorized.</para>

      <para>This allows generating packages for all PHP versions, so
	that users can use them with whatever version they need on
	their servers.</para>

      <important>
	<para>PHP applications that are flavorized
	  <emphasis>must</emphasis> append
	  <varname>PHP_PKGNAMESUFFIX</varname> to their package
	  names.</para>
      </important>

      <example xml:id="flavors-auto-php-app-ex1">
	<title>Flavorizing a PHP Application</title>

	<para>Adding Flavors support to a PHP application is
	  straightforward:</para>

	<programlisting>PKGNAMESUFFIX=	${PHP_PKGNAMESUFFIX}

USES=	php:flavors</programlisting>
      </example>

      <tip>
	<para>When adding a dependency on a
	  <application>PHP</application> flavored port, use
	  <literal>@${PHP_FLAVOR}</literal>.
	  <emphasis>Never</emphasis> use <varname>FLAVOR</varname>
	  directly.</para>
      </tip>
    </sect2>
  </sect1>

  <sect1 xml:id="flavors-auto-python">
    <title><literal>USES=python</literal> and Flavors</title>

    <para>When using <link
	linkend="uses-python"><literal>USES=python</literal></link>
      and <literal>USE_PYTHON=distutils</literal>, the port will
      automatically have <varname>FLAVORS</varname> filled in with
      the <application>Python</application> versions it
      supports.</para>

    <example xml:id="flavors-auto-python-ex1">
      <title>Simple <literal>USES=python</literal></title>

      <para>Supposing the current <application>Python</application>
	supported versions are 2.7, 3.4, 3.5, and 3.6, and the
	default <application>Python</application> 2 and 3 versions
	are 2.7 and 3.6, a port with:</para>

      <programlisting>USES=	python
USE_PYTHON=	distutils</programlisting>

      <para>Will get these flavors: <literal>py27</literal>, and
	<literal>py36</literal>.</para>

      <programlisting>USES=	python
USE_PYTHON=	distutils allflavors</programlisting>

      <para>Will get these flavors: <literal>py27</literal>,
	<literal>py34</literal>, <literal>py35</literal> and
	<literal>py36</literal>.</para>
    </example>

    <example xml:id="flavors-auto-python-ex2">
      <title><literal>USES=python</literal> with Version
	Requirements</title>

      <para>Supposing the current <application>Python</application>
	supported versions are 2.7, 3.4, 3.5, and 3.6, and the
	default <application>Python</application> 2 and 3 versions
	are 2.7 and 3.6, a port with:</para>

      <programlisting>USES=	python:-3.5
USE_PYTHON=	distutils</programlisting>

      <para>Will get this flavor: <literal>py27</literal>.</para>

      <programlisting>USES=	python:-3.5
USE_PYTHON=	distutils allflavors</programlisting>

      <para>Will get these flavors: <literal>py27</literal>,
	<literal>py34</literal>, and <literal>py35</literal>.</para>

      <programlisting>USES=	python:3.4+
USE_PYTHON=	distutils</programlisting>

      <para>Will get this flavor: <literal>py36</literal>.</para>

      <programlisting>USES=	python:3.4+
USE_PYTHON=	distutils allflavors</programlisting>

      <para>Will get these flavors: <literal>py34</literal>,
	<literal>py35</literal>, and <literal>py36</literal>.</para>
    </example>

    <para><varname>PY_FLAVOR</varname> is available to depend
      on the correct version of <application>Python</application>
      modules.  All dependencies on flavored Python ports should
      use <varname>PY_FLAVOR</varname>, and not
      <varname>FLAVOR</varname> directly..</para>

    <example xml:id="flavors-auto-python-ex3">
      <title>For a Port Not Using
	<literal>distutils</literal></title>

      <para>If the default <application>Python</application> 3
	version is 3.6, the following will set
	<varname>PY_FLAVOR</varname> to
	<literal>py36</literal>:</para>

      <programlisting>RUN_DEPENDS=	${PYTHON_PKGNAMEPREFIX}mutagen>0:audio/py-mutagen@${PY_FLAVOR}

USES=	python:3.5+</programlisting>
    </example>
  </sect1>
</chapter>
