<?xml version="1.0" encoding="iso-8859-1"?>
<!--
     The FreeBSD Documentation Project

     $FreeBSD$
-->

<chapter xmlns="http://docbook.org/ns/docbook"
  xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0"
  xml:id="plist">

  <title>Advanced <filename>pkg-plist</filename> Practices</title>

  <sect1 xml:id="plist-sub">
    <title>Changing <filename>pkg-plist</filename> Based on Make
      Variables</title>

    <para>Some ports, particularly the <literal>p5-</literal> ports,
      need to change their <filename>pkg-plist</filename> depending on
      what options they are configured with (or version of
      <literal>perl</literal>, in the case of <literal>p5-</literal>
      ports).  To make this easy, any instances in
      <filename>pkg-plist</filename> of <literal>%%OSREL%%</literal>,
      <literal>%%PERL_VER%%</literal>, and
      <literal>%%PERL_VERSION%%</literal> will be substituted
      appropriately.  The value of <literal>%%OSREL%%</literal> is the
      numeric revision of the operating system (for example,
      <literal>4.9</literal>).  <literal>%%PERL_VERSION%%</literal>
      and <literal>%%PERL_VER%%</literal> is the full version number
      of <command>perl</command> (for example,
      <literal>5.8.9</literal>).  Several other
      <literal>%%<replaceable>VARS</replaceable>%%</literal> related
      to port's documentation files are described in <link
	linkend="install-documentation">the relevant
	section</link>.</para>

    <para>To make other substitutions, set
      <varname>PLIST_SUB</varname> with a list of
      <literal><replaceable>VAR</replaceable>=<replaceable>VALUE</replaceable></literal>
      pairs and instances of
      <literal>%%<replaceable>VAR</replaceable>%%</literal> will be
      substituted with <replaceable>VALUE</replaceable> in
      <filename>pkg-plist</filename>.</para>

    <para>For instance, if a port installs many files
      in a version-specific subdirectory, use a placeholder for the
      version so that <filename>pkg-plist</filename> does not have to
      be regenerated every time the port is updated.  For
      example:</para>

    <programlisting>OCTAVE_VERSION=	${PORTREVISION}
PLIST_SUB=	OCTAVE_VERSION=${OCTAVE_VERSION}</programlisting>

    <para>in the <filename>Makefile</filename> and use
      <literal>%%OCTAVE_VERSION%%</literal> wherever the version shows
      up in <filename>pkg-plist</filename>.  When
      the port is upgraded, it will not be necessary to edit dozens
      (or in some cases, hundreds) of lines in
      <filename>pkg-plist</filename>.</para>

    <para>If files are installed conditionally on the options
      set in the port, the usual way of handling it is prefixing
      <filename>pkg-plist</filename> lines with a
      <literal>%%OPT%%</literal> for lines needed when the option is
      enabled, or <literal>%%NO_OPT%%</literal> when the option is
      disabled, and adding <literal>OPTIONS_SUB=yes</literal> to the
      <filename>Makefile</filename>.  See <xref
	linkend="options_sub"/> for more information.</para>

    <para>For instance, if there are files that are only installed
      when the <literal>X11</literal> option is enabled, and
      <filename>Makefile</filename> has:</para>

    <programlisting>OPTIONS_DEFINE=	X11
OPTIONS_SUB=	yes</programlisting>

    <para>In <filename>pkg-plist</filename>, put
      <literal>%%X11%%</literal> in front of the lines only being
      installed when the option is enabled, like this :</para>

    <programlisting>%%X11%%bin/foo-gui</programlisting>

    <para>This substitution will be done between the
      <buildtarget>pre-install</buildtarget> and
      <buildtarget>do-install</buildtarget> targets, by reading from
      <filename>PLIST</filename> and writing to
      <filename>TMPPLIST</filename> (default:
      <filename>WRKDIR/.PLIST.mktmp</filename>).  So if the port
      builds <filename>PLIST</filename> on the fly, do so in or before
      <buildtarget>pre-install</buildtarget>.  Also, if the port
      needs to edit the resulting file, do so in
      <buildtarget>post-install</buildtarget> to a file named
      <filename>TMPPLIST</filename>.</para>

    <para>Another way of modifying a port's packing list is based on
      setting the variables <varname>PLIST_FILES</varname> and
      <varname>PLIST_DIRS</varname>.  The value of each variable is
      regarded as a list of pathnames to write to
      <filename>TMPPLIST</filename> along with
      <filename>PLIST</filename> contents.  While names listed in
      <varname>PLIST_FILES</varname> and
      <varname>PLIST_DIRS</varname> are subject to
      <literal>%%<replaceable>VAR</replaceable>%%</literal>
      substitution as described above, it is better to use the
      <literal>${<replaceable>VAR</replaceable>}</literal> directly.
      Except for that, names from
      <varname>PLIST_FILES</varname> will appear in the final packing
      list unchanged, while <literal>@dir</literal>
      will be prepended to names from
      <varname>PLIST_DIRS</varname>.  To take effect,
      <varname>PLIST_FILES</varname> and
      <varname>PLIST_DIRS</varname> must be set before
      <filename>TMPPLIST</filename> is written, that is, in
      <buildtarget>pre-install</buildtarget> or earlier.</para>

    <para>From time to time, using <varname>OPTIONS_SUB</varname>
      is not enough.  In those cases, adding a specific
      <literal><replaceable>TAG</replaceable></literal> to
      <varname>PLIST_SUB</varname>
      inside the <filename>Makefile</filename> with a special
      value of <literal>@comment</literal>, makes package tools to
      ignore the line.  For instance, if some files are only installed
      when the <literal>X11</literal> option is on and the
      architecture is <literal>i386</literal>:</para>

    <programlisting>.include &lt;bsd.port.pre.mk&gt;

.if ${PORT_OPTIONS:MX11} &amp;&amp; ${ARCH} == "i386"
PLIST_SUB+=	X11I386=""
.else
PLIST_SUB+=	X11I386="@comment "
.endif</programlisting>

  </sect1>

  <sect1 xml:id="plist-cleaning">
    <title>Empty Directories</title>

    <sect2 xml:id="plist-dir-cleaning">
      <title>Cleaning Up Empty Directories</title>

      <para>When being de-installed, a port has to remove empty
	directories it created.  Most of these directories are removed
	automatically by &man.pkg.8;, but for directories created
	outside of <filename>${PREFIX}</filename>, or empty
	directories, some more work needs to be done.  This is usually
	accomplished by adding <literal>@dir</literal> lines for those
	directories.  Subdirectories must be deleted before deleting
	parent directories.</para>

      <programlisting>[...]
@dir /var/games/oneko/saved-games
@dir /var/games/oneko</programlisting>
    </sect2>

    <sect2 xml:id="plist-dir-empty">
      <title>Creating Empty Directories</title>

      <para>Empty directories created during port installation need
	special attention.  They must be present when the package
	is created.   If they are not created by the port code, create
	them in the <filename>Makefile</filename>:</para>

      <programlisting>post-install:
	${MKDIR} ${STAGEDIR}${PREFIX}/some/directory</programlisting>

      <para>Add the directory to <filename>pkg-plist</filename>
	like any other.  For example:</para>

      <programlisting>@dir some/directory</programlisting>
    </sect2>
  </sect1>

  <sect1 xml:id="plist-config">
    <title>Configuration Files</title>

    <para>If the port installs configuration files to
      <filename>PREFIX/etc</filename> (or elsewhere) do
      <emphasis>not</emphasis> list them in
      <filename>pkg-plist</filename>.  That will cause
      <command>pkg delete</command> to remove files that have been
      carefully edited by the user, and a re-installation will wipe
      them out.</para>

    <para>Instead, install sample files with a
      <filename><replaceable>filename</replaceable>.sample</filename>
      extension.  The <literal>@sample</literal> macro automates this,
      see <xref linkend="plist-keywords-sample"/> for what it does
      exactly.  For each sample file, add a line to
      <filename>pkg-plist</filename>:</para>

    <programlisting>@sample etc/orbit.conf.sample</programlisting>

    <para>If there is a very good reason not to install a working
      configuration file by default, only list the sample filename in
      <filename>pkg-plist</filename>, without the
      <literal>@sample</literal> followed by a space part, and add a
      <link
	linkend="porting-message">message</link> pointing out that the
      user must copy and edit the file before the software will
      work.</para>

    <tip>
      <para>When a port installs its configuration in a subdirectory
	of <filename>${PREFIX}/etc</filename>, use
	<varname>ETCDIR</varname>, which defaults to
	<literal>${PREFIX}/etc/${PORTNAME}</literal>, it can be
	overridden in the ports <filename>Makefile</filename> if there
	is a convention for the port to use some other directory.  The
	<literal>%%ETCDIR%%</literal> macro will be used in its
	stead in <filename>pkg-plist</filename>.</para>
    </tip>

    <note>
      <para>The sample configuration files should always have the
	<filename>.sample</filename> suffix.  If for some historical
	reason using the standard suffix is not possible, or if the
	sample files come from some other directory, use
	this construct:</para>

      <programlisting>@sample etc/orbit.conf-dist etc/orbit.conf</programlisting>

      <para>or</para>

      <programlisting>@sample %%EXAMPLESDIR%%/orbit.conf etc/orbit.conf</programlisting>

      <para>The format is <literal>@sample
	  <replaceable>sample-file</replaceable>
	  <replaceable>actual-config-file</replaceable></literal>.</para>
    </note>
  </sect1>

  <sect1 xml:id="plist-dynamic">
    <title>Dynamic Versus Static Package List</title>

    <para>A <emphasis>static package list</emphasis> is a package
      list which is available in the Ports Collection either as
      <filename>pkg-plist</filename> (with or without variable
      substitution), or embedded into the
      <filename>Makefile</filename> via
      <varname>PLIST_FILES</varname> and
      <varname>PLIST_DIRS</varname>.  Even if the contents are
      auto-generated by a tool or a target in the Makefile
      <emphasis>before</emphasis> the inclusion into the Ports
      Collection by a committer (for example, using <command>make
	makeplist></command>), this is still considered a static list,
      since it is possible to examine it without having to download or
      compile the distfile.</para>

    <para>A <emphasis>dynamic package list</emphasis> is a package
      list which is generated at the time the port is compiled based
      upon the files and directories which are installed.  It is not
      possible to examine it before the source code of the ported
      application is downloaded and compiled, or after running a
      <literal>make clean</literal>.</para>

    <para>While the use of dynamic package lists is not forbidden,
      maintainers should use static package lists wherever possible,
      as it enables users to &man.grep.1; through available ports to
      discover, for example, which port installs a certain file.
      Dynamic lists should be primarily used for complex ports where
      the package list changes drastically based upon optional
      features of the port (and thus maintaining a static package list
      is infeasible), or ports which change the package list based
      upon the version of dependent software used.  For example, ports
      which generate docs with
      <application>Javadoc</application>.</para>
  </sect1>

  <sect1 xml:id="plist-autoplist">
    <title>Automated Package List Creation</title>

    <para>First, make sure the port is almost complete, with only
      <filename>pkg-plist</filename> missing.  Running <command>make
	makeplist</command> will show an example for
      <filename>pkg-plist</filename>.  The output of
      <buildtarget>makeplist</buildtarget> must be double checked for
      correctness as it tries to automatically guess a few things, and
      can get it wrong.</para>

    <para>User configuration files should be installed as
      <filename><replaceable>filename</replaceable>.sample</filename>,
      as it is described in <xref linkend="plist-config"/>.
      <filename>info/dir</filename> must not be listed and
      appropriate <filename>install-info</filename> lines must be
      added as noted in the <link linkend="makefile-info">info
	files</link> section.  Any libraries installed by the port
      must be listed as specified in the <link
	linkend="porting-shlibs">shared libraries</link>
      section.</para>

    <sect2 xml:id="plist-autoplist-regex">
      <title>Expanding <varname>PLIST_SUB</varname> with Regular
	Expressions</title>

      <para>Strings to be replaced sometimes need to be very specific
	to avoid undesired replacements.  This is a common problem
	with shorter values.</para>

      <para>To address this problem, for each
	<literal><replaceable>PLACEHOLDER</replaceable>=<replaceable>value</replaceable></literal>,
	a
	<literal><replaceable>PLACEHOLDER</replaceable>_regex=<replaceable>regex</replaceable></literal>
	can be set, with the
	<literal><replaceable>regex</replaceable></literal> part
	matching <replaceable>value</replaceable> more
	precisely.</para>

      <example xml:id="plist-autoplist-regex-ex1">
	<title>Using PLIST_SUB with Regular Expressions</title>

	<para><application>Perl</application> ports can install
	  architecture dependent files in a specific tree.  On &os; to
	  ease porting, this tree is called <literal>mach</literal>.
	  For example, a port that installs a file whose path contains
	  <literal>mach</literal> could have that part of the path
	  string replaced with the wrong values.  Consider this
	  <filename>Makefile</filename>:</para>

	<programlisting>PORTNAME=	Machine-Build
DISTVERSION=	1
CATEGORIES=	devel perl5
MASTER_SITES=	CPAN
PKGNAMEPREFIX=	p5-

MAINTAINER=	perl@FreeBSD.org
COMMENT=	Building machine

USES=		perl5
USE_PERL5=	configure

PLIST_SUB=	PERL_ARCH=mach</programlisting>

	<para>The files installed by the port are:</para>

	<programlisting>/usr/local/bin/machine-build
/usr/local/lib/perl5/site_perl/man/man1/machine-build.1.gz
/usr/local/lib/perl5/site_perl/man/man3/Machine::Build.3.gz
/usr/local/lib/perl5/site_perl/Machine/Build.pm
/usr/local/lib/perl5/site_perl/mach/5.20/Machine/Build/Build.so</programlisting>

	<para>Running <command>make makeplist</command> wrongly
	  generates:</para>

	<programlisting>bin/<emphasis>%%PERL_ARCH%%</emphasis>ine-build
%%PERL5_MAN1%%/<emphasis>%%PERL_ARCH%%</emphasis>ine-build.1.gz
%%PERL5_MAN3%%/Machine::Build.3.gz
%%SITE_PERL%%/Machine/Build.pm
%%SITE_PERL%%/%%PERL_ARCH%%/%%PERL_VER%%/Machine/Build/Build.so</programlisting>

	<para>Change the <varname>PLIST_SUB</varname> line from the
	  <filename>Makefile</filename> to:</para>

	<programlisting>PLIST_SUB=	PERL_ARCH=mach \
		PERL_ARCH_regex=\bmach\b</programlisting>

	<para>Now <command>make makeplist</command> correctly
	  generates:</para>

	<programlisting>bin/machine-build
%%PERL5_MAN1%%/machine-build.1.gz
%%PERL5_MAN3%%/Machine::Build.3.gz
%%SITE_PERL%%/Machine/Build.pm
%%SITE_PERL%%/%%PERL_ARCH%%/%%PERL_VER%%/Machine/Build/Build.so</programlisting>
      </example>
    </sect2>
  </sect1>

  <sect1 xml:id="plist-keywords">
    <title>Expanding Package List with Keywords</title>

    <para>All keywords can also take optional arguments in
      parentheses.  The arguments are owner, group, and mode.  This
      argument is used on the file or directory referenced.
      To change the owner, group, and mode of a configuration file,
      use:</para>

    <programlisting>@sample(games,games,640) etc/config.sample</programlisting>

    <para>The arguments are optional.  If only the group and mode
      need to be changed, use:</para>

    <programlisting>@sample(,games,660) etc/config.sample</programlisting>

    <warning>
      <para>If a keyword is used on an <link
	  linkend="makefile-options">optional</link> entry, it must to
	be added after the helper:</para>

      <programlisting>%%FOO%%@sample etc/orbit.conf.sample</programlisting>

      <para>This is because the options plist helpers are used to
	comment out the line, so they need to be put first.  See <xref
	  linkend="options_sub"/> for more information.</para>
    </warning>

    <!--
    Keywords up-to-date with r381632.
    Try and keep the keywords alphanumerically sorted.
    -->

    <sect2 xml:id="plist-keywords-desktop-file-utils">
      <title><literal>@desktop-file-utils</literal></title>

      <para>Will run <command>update-desktop-database -q</command>
	after installation and deinstallation.
	<emphasis>Never</emphasis> use directly, add <link
	  linkend="uses-desktop-file-utils"><literal>USES=desktop-file-utils</literal></link>
	to the <filename>Makefile</filename>.</para>
    </sect2>

    <sect2 xml:id="plist-keywords-fc">
      <title><literal>@fc</literal>
	<replaceable>directory</replaceable></title>

      <para>Add a <literal>@dir</literal> entry for the directory
	passed as an argument, and run <command>fc-cache -fs</command>
	on that directory after installation and
	deinstallation.</para>
    </sect2>

    <sect2 xml:id="plist-keywords-fcfontsdir">
      <title><literal>@fcfontsdir</literal>
	<replaceable>directory</replaceable></title>

      <para>Add a <literal>@dir</literal> entry for the
	directory passed as an argument, and run <command>fc-cache
	  -fs</command>, <command>mkfontscale</command> and
	<command>mkfontdir</command> on that directory after
	installation and deinstallation.  Additionally, on
	deinstallation, it removes the
	<filename>fonts.scale</filename> and
	<filename>fonts.dir</filename> cache files if they are
	empty.  This keyword is equivalent to adding both <link
	  linkend="plist-keywords-fc"><literal>@fc</literal>
	  <replaceable>directory</replaceable></link> and <link
	  linkend="plist-keywords-fontsdir"><literal>@fontsdir</literal>
	  <replaceable>directory</replaceable></link>.</para>
    </sect2>

    <sect2 xml:id="plist-keywords-fontsdir">
      <title><literal>@fontsdir</literal>
	<replaceable>directory</replaceable></title>

      <para>Add a <literal>@dir</literal> entry for the
	directory passed as an argument, and run
	<command>mkfontscale</command> and
	<command>mkfontdir</command> on that directory after
	installation and deinstallation.  Additionally, on
	deinstallation, it removes the
	<filename>fonts.scale</filename> and
	<filename>fonts.dir</filename> cache files if they are
	empty.</para>
    </sect2>

    <sect2 xml:id="plist-keywords-glib-schemas">
      <title><literal>@glib-schemas</literal></title>

      <para>Runs <command>glib-compile-schemas</command> on
	installation and deinstallation.</para>
    </sect2>

    <sect2 xml:id="plist-keywords-info">
      <title><literal>@info</literal>
	<replaceable>file</replaceable></title>

      <para>Add the file passed as argument to the plist, and updates
	the info document index on installation and deinstallation.
	Additionally, it removes the index if empty on
	deinstallation.  This should never be used manually, but
	always through <varname>INFO</varname>.  See <xref
	  linkend="makefile-info"/> for more information.</para>
    </sect2>

    <sect2 xml:id="plist-keywords-kld">
      <title><literal>@kld</literal>
	<replaceable>directory</replaceable></title>

      <para>Runs <command>kldxref</command> on the directory
	on installation and deinstallation.  Additionally, on
	deinstallation, it will remove the directory if empty.</para>
    </sect2>

    <sect2 xml:id="plist-keywords-rmtry">
      <title><literal>@rmtry</literal>
	<replaceable>file</replaceable></title>

      <para>Will remove the file on deinstallation, and not give an
	error if the file is not there.</para>
    </sect2>

    <sect2 xml:id="plist-keywords-sample">
      <title><literal>@sample</literal>
	<replaceable>file</replaceable>
	[<replaceable>file</replaceable>]</title>

      <para>This is used to handle installation of configuration
	files, through example files bundled with the package.  The
	<quote>actual</quote>, non-sample, file is either the second
	filename, if present, or the first filename without the
	<filename>.sample</filename> extension.</para>

      <para>This does three things.  First, add the first file passed
	as argument, the sample file, to the plist.  Then, on
	installation, if the actual file is not found, copy the sample
	file to the actual file.  And finally, on deinstallation,
	remove the actual file if it has not been modified.  See <xref
	  linkend="plist-config"/> for more information.</para>
    </sect2>

    <sect2 xml:id="plist-keywords-shared-mime-info">
      <title><literal>@shared-mime-info</literal>
	<replaceable>directory</replaceable></title>

      <para>Runs <command>update-mime-database</command> on the
	directory on installation and deinstallation.</para>
    </sect2>

    <sect2 xml:id="plist-keywords-shell">
      <title><literal>@shell</literal>
	<replaceable>file</replaceable></title>

      <para>Add the file passed as argument to the plist.</para>

      <para>On installation, add the full path to
	<replaceable>file</replaceable> to
	<filename>/etc/shells</filename>, while making sure it is not
	added twice.  On deinstallation, remove it from
	<filename>/etc/shells</filename>.</para>
    </sect2>

    <sect2 xml:id="plist-keywords-terminfo">
      <title><literal>@terminfo</literal></title>

      <para>Do not use by itself.  If the port installs
	<filename><replaceable>*</replaceable>.terminfo</filename>
	files, add <link linkend="uses-terminfo">USES=terminfo</link>
	to its <filename>Makefile</filename>.</para>

      <para>On installation and deinstallation, if
	<command>tic</command> is present, refresh
	<filename>${PREFIX}/share/misc/terminfo.db</filename> from the
	<filename><replaceable>*</replaceable>.terminfo</filename>
	files in <filename>${PREFIX}/share/misc</filename>.</para>
    </sect2>

    <sect2 xml:id="plist-keywords-base">
      <title>Base Keywords</title>

      <para>There are a few keywords that are hardcoded, and
	documented in &man.pkg-create.8;.  For the sake of
	completeness, they are also documented here.</para>

      <sect3 xml:id="plist-keywords-base-empty">
	<title><literal>@</literal>
	  [<replaceable>file</replaceable>]</title>

	<para>The empty keyword is a placeholder to use when the
	  file's owner, group, or mode need to be changed.  For
	  example, to set the group of the file to
	  <literal>games</literal> and add the setgid bit, add:</para>

	<programlisting>@(,games,2755) sbin/daemon</programlisting>
      </sect3>

      <sect3 xml:id="plist-keywords-base-exec">
	<title><literal>@preexec</literal>
	  <replaceable>command</replaceable>,
	  <literal>@postexec</literal>
	  <replaceable>command</replaceable>,
	  <literal>@preunexec</literal>
	  <replaceable>command</replaceable>,
	  <literal>@postunexec</literal>
	  <replaceable>command</replaceable></title>

	<para>Execute <replaceable>command</replaceable> as part of
	  the package installation or deinstallation process.</para>

	<variablelist>
	  <varlistentry>
	    <term><literal>@preexec</literal>
	      <replaceable>command</replaceable></term>

	    <listitem>
	      <para>Execute <replaceable>command</replaceable> as part
		of the <filename>pre-install</filename>
		scripts.</para>
	    </listitem>
	  </varlistentry>

	  <varlistentry>
	    <term><literal>@postexec</literal>
	      <replaceable>command</replaceable></term>

	    <listitem>
	      <para>Execute <replaceable>command</replaceable> as part
		of the <filename>post-install</filename>
		scripts.</para>
	    </listitem>
	  </varlistentry>

	  <varlistentry>
	    <term><literal>@preunexec</literal>
	      <replaceable>command</replaceable></term>

	    <listitem>
	      <para>Execute <replaceable>command</replaceable> as part
		of the <filename>pre-deinstall</filename>
		scripts.</para>
	    </listitem>
	  </varlistentry>

	  <varlistentry>
	    <term><literal>@postunexec</literal>
	      <replaceable>command</replaceable></term>

	    <listitem>
	      <para>Execute <replaceable>command</replaceable> as part
		of the <filename>post-deinstall</filename>
		scripts.</para>
	    </listitem>
	  </varlistentry>
	</variablelist>

	<para>If <replaceable>command</replaceable> contains
	  any of these
	  sequences somewhere in it, they are expanded
	  inline.  For these examples, assume that
	  <literal>@cwd</literal> is set to
	  <filename>/usr/local</filename> and the last
	  extracted file was <filename>bin/emacs</filename>.</para>

	<variablelist>
	  <varlistentry>
	    <term><literal>%F</literal></term>

	    <listitem>
	      <para>Expand to the last filename extracted (as
		specified).  In the example case
		<filename>bin/emacs</filename>.</para>
	    </listitem>
	  </varlistentry>

	  <varlistentry>
	    <term><literal>%D</literal></term>
	    <listitem>
	      <para>Expand to the current directory prefix, as set
		with <literal>@cwd</literal>.  In the example case
		<filename>/usr/local</filename>.</para>
	    </listitem>
	  </varlistentry>

	  <varlistentry>
	    <term><literal>%B</literal></term>

	    <listitem>
	      <para>Expand to the basename of the fully qualified
		filename, that is, the current directory prefix plus
		the last filespec, minus the trailing filename.  In
		the example case, that would be
		<filename>/usr/local/bin</filename>.</para>
	    </listitem>
	  </varlistentry>

	  <varlistentry>
	    <term><literal>%f</literal></term>

	    <listitem>
	      <para>Expand to the filename part of the fully qualified
		name, or the converse of <literal>%B</literal>.  In
		the example case,
		<filename>emacs</filename>.</para>
	    </listitem>
	  </varlistentry>
	</variablelist>

	<important>
	  <para>These keywords are here to help you set up the package
	    so that it is as ready to use as possible.  They
	    <emphasis>must not</emphasis> be abused to start services,
	    stop services, or run any other commands that will modify
	    the currently running system.</para>
	</important>
      </sect3>

      <sect3 xml:id="plist-keywords-base-mode">
	<title><literal>@mode</literal>
	  <replaceable>mode</replaceable></title>

	<para>Set default permission for all subsequently extracted
	  files to <replaceable>mode</replaceable>.  Format is the
	  same as that used by &man.chmod.1;.  Use without an arg to
	  set back to default permissions (mode of the file while
	  being packed).</para>

	<important>
	  <para>This must be a numeric mode, like
	    <literal>644</literal>, <literal>4755</literal>, or
	    <literal>600</literal>.  It cannot be a relative mode
	    like <literal>u+s</literal>.</para>
	</important>
      </sect3>

      <sect3 xml:id="plist-keywords-base-owner">
	<title><literal>@owner</literal>
	  <replaceable>user</replaceable></title>

	<para>Set default ownership for all subsequent files to
	  <replaceable>user</replaceable>.  Use without an argument to
	  set back to default ownership (<systemitem
	    class="username">root</systemitem>).</para>
      </sect3>

      <sect3 xml:id="plist-keywords-base-group">
	<title><literal>@group</literal>
	  <replaceable>group</replaceable></title>

	<para>Set default group ownership for all subsequent files to
	  <replaceable>group</replaceable>.  Use without an arg to set
	  back to default group ownership (<systemitem
	    class="groupname">wheel</systemitem>).</para>
      </sect3>

      <sect3 xml:id="plist-keywords-base-comment">
	<title><literal>@comment</literal>
	  <replaceable>string</replaceable></title>

	<para>This line is ignored when packing.</para>
      </sect3>

      <sect3 xml:id="plist-keywords-base-dir">
	<title><literal>@dir</literal>
	  <replaceable>directory</replaceable></title>

	<para>Declare directory name.  By default, directories created
	  under <varname>PREFIX</varname> by a package installation
	  are automatically removed.  Use this when an empty directory
	  under <varname>PREFIX</varname> needs to be created, or when
	  the directory needs to have non default owner, group, or
	  mode.  Directories outside of <varname>PREFIX</varname> need
	  to be registered.  For example,
	  <filename>/var/db/${PORTNAME}</filename> needs to have a
	  <literal>@dir</literal> entry whereas
	  <filename>${PREFIX}/share/${PORTNAME}</filename> does not if
	  it contains files or uses the default owner, group, and
	  mode.</para>
      </sect3>

      <sect3 xml:id="plist-keywords-base-exec-deprecated">
	<title><literal>@exec</literal>
	  <replaceable>command</replaceable>,
	  <literal>@unexec</literal>
	  <replaceable>command</replaceable> (Deprecated)</title>

	<para>Execute <replaceable>command</replaceable> as part of
	  the installation or deinstallation process.  Please use
	  <xref linkend="plist-keywords-base-exec"/> instead.</para>
      </sect3>

      <sect3 xml:id="plist-keywords-base-dirrm">
	<title><literal>@dirrm</literal>
	  <replaceable>directory</replaceable> (Deprecated)</title>

	<para>Declare directory name to be deleted at deinstall time.
	  By default, directories created under
	  <varname>PREFIX</varname> by a package installation are
	  deleted when the package is deinstalled.</para>
      </sect3>

      <sect3 xml:id="plist-keywords-base-dirrmtry">
	<title><literal>@dirrmtry</literal>
	  <replaceable>directory</replaceable> (Deprecated)</title>

	<para>Declare directory name to be removed, as for
	  <literal>@dirrm</literal>, but does not issue a warning if
	  the directory cannot be removed.</para>
      </sect3>
    </sect2>

    <sect2 xml:id="plist-keywords-creating-new">
      <title>Creating New Keywords</title>

      <para>Package list files can be extended by keywords that are
	defined in the <filename>${PORTSDIR}/Keywords</filename>
	directory.  The settings for each keyword are stored in a
	<acronym>UCL</acronym> file named
	<filename><replaceable>keyword</replaceable>.ucl</filename>.
	The file must contain at least one of these sections:</para>

      <itemizedlist>
	<listitem>
	  <para><literal>attributes</literal></para>
	</listitem>

	<listitem>
	  <para><literal>action</literal></para>
	</listitem>

	<listitem>
	  <para><literal>pre-install</literal></para>
	</listitem>

	<listitem>
	  <para><literal>post-install</literal></para>
	</listitem>

	<listitem>
	  <para><literal>pre-deinstall</literal></para>
	</listitem>

	<listitem>
	  <para><literal>post-deinstall</literal></para>
	</listitem>

	<listitem>
	  <para><literal>pre-upgrade</literal></para>
	</listitem>

	<listitem>
	  <para><literal>post-upgrade</literal></para>
	</listitem>
      </itemizedlist>

      <sect3 xml:id="plist-keywords-attributes">
	<title><literal>attributes</literal></title>

	<para>Changes the owner, group, or mode used by the keyword.
	  Contains an associative array where the possible keys are
	  <literal>owner</literal>, <literal>group</literal>, and
	  <literal>mode</literal>.  The values are, respectively, a
	  user name, a group name, and a file mode.  For
	  example:</para>

	<programlisting>attributes: { owner: "games", group: "games", mode: 0555 }</programlisting>
      </sect3>

      <sect3 xml:id="plist-keywords-action">
	<title><literal>action</literal></title>

	<para>Defines what happens to the keyword's parameter.
	  Contains an array where the possible values are:</para>

	<variablelist>
	  <varlistentry>
	    <term><literal>setprefix</literal></term>

	    <listitem>
	      <para>Set the prefix for the next plist entries.</para>
	    </listitem>
	  </varlistentry>

	  <varlistentry>
	    <term><literal>dir</literal></term>

	    <listitem>
	      <para>Register a directory to be created on install and
		removed on deinstall.</para>
	    </listitem>
	  </varlistentry>

	  <varlistentry>
	    <term><literal>dirrm</literal></term>

	    <listitem>
	      <para>Register a directory to be deleted on deinstall.
		Deprecated.</para>
	    </listitem>
	  </varlistentry>

	  <varlistentry>
	    <term><literal>dirrmtry</literal></term>

	    <listitem>
	      <para>Register a directory to try and deleted on
		deinstall.  Deprecated.</para>
	    </listitem>
	  </varlistentry>

	  <varlistentry>
	    <term><literal>file</literal></term>

	    <listitem>
	      <para>Register a file.</para>
	    </listitem>
	  </varlistentry>

	  <varlistentry>
	    <term><literal>setmode</literal></term>

	    <listitem>
	      <para>Set the mode for the next plist entries.</para>
	    </listitem>
	  </varlistentry>

	  <varlistentry>
	    <term><literal>setowner</literal></term>

	    <listitem>
	      <para>Set the owner for the next plist entries.</para>
	    </listitem>
	  </varlistentry>

	  <varlistentry>
	    <term><literal>setgroup</literal></term>

	    <listitem>
	      <para>Set the group for the next plist entries.</para>
	    </listitem>
	  </varlistentry>

	  <varlistentry>
	    <term><literal>comment</literal></term>

	    <listitem>
	      <para>Does not do anything, equivalent to not entering
		an <literal>action</literal> section.</para>
	    </listitem>
	  </varlistentry>

	  <varlistentry>
	    <term><literal>ignore_next</literal></term>

	    <listitem>
	      <para>Ignore the next entry in the plist.</para>
	    </listitem>
	  </varlistentry>
	</variablelist>
      </sect3>

      <sect3 xml:id="plist-keywords-arguments">
	<title><literal>arguments</literal></title>

	<para>If set to <literal>true</literal>, adds argument
	  handling, splitting the whole line, <literal>%@</literal>,
	  into numbered arguments, <literal>%1</literal>,
	  <literal>%2</literal>, and so on.  For example, for this
	  line:</para>

	<programlisting>@foo some.content other.content</programlisting>

	<para><literal>%1</literal> and <literal>%2</literal> will
	  contain:</para>

	<programlisting>some.content
other.content</programlisting>

	<para>It also affects how the <link
	    linkend="plist-keywords-action"><literal>action</literal></link>
	  entry works.  When there is more than one argument, the
	  argument number must be specified.  For example:</para>

	<programlisting>actions: [file(1)]</programlisting>
      </sect3>

      <sect3 xml:id="plist-keywords-pre-post">
	<title><literal>pre-install</literal>,
	  <literal>post-install</literal>,
	  <literal>pre-deinstall</literal>,
	  <literal>post-deinstall</literal>,
	  <literal>pre-upgrade</literal>,
	  <literal>post-upgrade</literal></title>

	<para>These keywords contains a &man.sh.1; script to be
	  executed before or after installation, deinstallation, or
	  upgrade of the package.  In addition to the usual
	  <literal>@exec</literal>
	  <literal>%<replaceable>foo</replaceable></literal>
	  placeholders described in <xref
	    linkend="plist-keywords-base-exec"/>, there is a new one,
	  <literal>%@</literal>, which represents the argument of the
	  keyword.</para>
      </sect3>

      <sect3 xml:id="plist-keywords-examples">
	<title>Custom Keyword Examples</title>

	<example xml:id="plist-keywords-fc-example">
	  <title>Example of a <literal>@dirrmtryecho</literal>
	    Keyword</title>

	  <para>This keyword does two things, it adds a
	    <literal>@dirrmtry
	      <replaceable>directory</replaceable></literal> line to
	    the packing list, and echoes the fact that the directory
	    is removed when deinstalling the package.</para>

	  <programlisting>actions: [dirrmtry]
post-deinstall: &lt;&lt;EOD
  echo "Directory %D/%@ removed."
EOD</programlisting>
	</example>

	<example xml:id="plist-keywords-sample-example">
	  <title>Real Life Example, How <literal>@sample</literal> is
	    Implemented</title>

	  <para>This keyword does three things.  It adds the first
	    <replaceable>filename</replaceable> passed as an argument
	    to <literal>@sample</literal> to the packing list, it adds
	    to the <literal>post-install</literal> script instructions
	    to copy the sample to the actual configuration file if it
	    does not already exist, and it adds to the
	    <literal>post-deinstall</literal> instructions to remove
	    the configuration file if it has not been modified.</para>

	  <programlisting>actions: [file(1)]
arguments: true
post-install: &lt;&lt;EOD
  case "%1" in
  /*) sample_file="%1" ;;
  *) sample_file="%D/%1" ;;
  esac
  target_file="${sample_file%.sample}"
  set -- %@
  if [ $# -eq 2 ]; then
      target_file=${2}
  fi
  case "${target_file}" in
  /*) target_file="${target_file}" ;;
  *) target_file="%D/${target_file}" ;;
  esac
  if ! [ -f "${target_file}" ]; then
    /bin/cp -p "${sample_file}" "${target_file}" &amp;&amp; \
      /bin/chmod u+w "${target_file}"
  fi
EOD
pre-deinstall: &lt;&lt;EOD
  case "%1" in
  /*) sample_file="%1" ;;
  *) sample_file="%D/%1" ;;
  esac
  target_file="${sample_file%.sample}"
  set -- %@
  if [ $# -eq 2 ]; then
      set -- %@
      target_file=${2}
  fi
  case "${target_file}" in
  /*) target_file="${target_file}" ;;
  *) target_file="%D/${target_file}" ;;
  esac
  if cmp -s "${target_file}" "${sample_file}"; then
    rm -f "${target_file}"
  else
    echo "You may need to manually remove ${target_file} if it is no longer needed."
  fi
EOD</programlisting>
	</example>
      </sect3>
    </sect2>
  </sect1>
</chapter>
