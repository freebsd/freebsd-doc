<!--
     $FreeBSD$
-->

<glossary id="glossary">
  <title>Glossary of Jargon</title>

  <glossentry>
    <glossterm>attribute</glossterm>

    <glossdef>
      <para>A property given to a target that causes
	<application>PMake</application> to treat it differently.</para>
    </glossdef>
  </glossentry>

  <glossentry>
    <glossterm id="cmdscript">command script</glossterm>

    <glossdef>
      <para>The lines immediately following a dependency line that specify
	commands to execute to create each of the targets on the dependency
	line.  Each line in the command script must begin with a tab.</para>
    </glossdef>
  </glossentry>

  <glossentry>
    <glossterm>command-line variable</glossterm>

    <glossdef>
      <para>A variable defined in an argument when
	<application>PMake</application> is first executed.
	Overrides all assignments to the same variable name in the
	makefile.</para>
    </glossdef>
  </glossentry>

  <glossentry>
    <glossterm>conditional</glossterm>

    <glossdef>
      <para>A construct much like that used in C that allows a makefile to be
	configured on the fly based on the local environment, or on what is
	being made by that invocation of <application>PMake</application>.</para>
    </glossdef>
  </glossentry>

  <glossentry>
    <glossterm>creation script</glossterm>

    <glossdef>
      <para>Commands used to create a target.</para>
    </glossdef>
  </glossentry>

  <glossentry>
    <glossterm>dependency</glossterm>

    <glossdef>
      <para>The relationship between a source and a target.  This comes in
	three flavors, as indicated by the operator between the target and the
	source.  <literal>:</literal> gives a straight time-wise dependency
	(if the target is older than the source, the target is out-of-date),
	while <literal>!</literal> provides simply an ordering and always
	considers the target out-of-date.  <literal>::</literal> is much like
	<literal>:</literal>, save it creates multiple instances of a target
	each of which depends on its own list of sources.</para>
    </glossdef>
  </glossentry>

  <glossentry>
    <glossterm>dynamic source</glossterm>

    <glossdef>
      <para>This refers to a source that has a local variable invocation in
	it.  It allows a single dependency line to specify a different source
	for each target on the line.</para>
    </glossdef>
  </glossentry>

  <glossentry>
    <glossterm>global variable</glossterm>

    <glossdef>
      <para>Any variable defined in a makefile.  Takes precedence over
	variables defined in the environment, but not over command-line or
	local variables.</para>
    </glossdef>
  </glossentry>

  <glossentry>
    <glossterm>input graph</glossterm>

    <glossdef>
      <para>What <application>PMake</application> constructs from a makefile.
	Consists of nodes made of the targets in the makefile, and the links
	between them (the dependencies).  The links are directed (from source
	to target) and there may not be any cycles (loops) in the graph.</para>
    </glossdef>
  </glossentry>

  <glossentry>
    <glossterm>local variable</glossterm>

    <glossdef>
      <para>A variable defined by <application>PMake</application> visible
	only in a target's shell script.
	There are seven local variables, not all of which are defined for
	every target: <makevar>.TARGET</makevar>, <makevar>.ALLSRC</makevar>,
	<makevar>.OODATE</makevar>, <makevar>.PREFIX</makevar>,
	<makevar>.IMPSRC</makevar>, <makevar>.ARCHIVE</makevar>, and
	<makevar>.MEMBER</makevar>.
	<makevar>.TARGET</makevar>, <makevar>.PREFIX</makevar>,
	<makevar>.ARCHIVE</makevar>, and <makevar>.MEMBER</makevar>
	may be used on dependency lines to create
	<quote>dynamic sources</quote>.</para>
    </glossdef>
  </glossentry>

  <glossentry>
    <glossterm>makefile</glossterm>

    <glossdef>
      <para>A file that describes how a system is built.  If you do not know
	what it is after reading this tutorial&hellip;</para>
    </glossdef>
  </glossentry>

  <glossentry>
    <glossterm>modifier</glossterm>

    <glossdef>
      <para>A letter, following a colon, used to alter how a variable is
	expanded.  It has no effect on the variable itself.</para>
    </glossdef>
  </glossentry>

  <glossentry>
    <glossterm>operator</glossterm>

    <glossdef>
      <para>What separates a source from a target (on a dependency line) and
	specifies the relationship between the two.  There are three:
	<literal>:</literal>, <literal>::</literal>,
	and <literal>!</literal>.</para>
    </glossdef>
  </glossentry>

  <glossentry>
    <glossterm>search path</glossterm>

    <glossdef>
      <para>A list of directories in which a file should be sought.
	<application>PMake</application>'s view of the contents of directories
	in a search path does not change once the makefile has been read.
	A file is sought on a search path only if it is exclusively a
	source.</para>
    </glossdef>
  </glossentry>

  <glossentry>
    <glossterm>shell</glossterm>

    <glossdef>
      <para>A program to which commands are passed in order to create
	targets.</para>
    </glossdef>
  </glossentry>

  <glossentry>
    <glossterm>source</glossterm>

    <glossdef>
      <para>Anything to the right of an operator on a dependency line.
	Targets on the dependency line are usually created
	from the sources.</para>
    </glossdef>
  </glossentry>

  <glossentry>
    <glossterm>special target</glossterm>

    <glossdef>
      <para>A target that causes <application>PMake</application> to do
      special things when it is encountered.</para>
    </glossdef>
  </glossentry>

  <glossentry>
    <glossterm>suffix</glossterm>

    <glossdef>
      <para>The tail end of a file name.  Usually begins with a period, like
	<filename>.c</filename> or <filename>.ms</filename>.</para>
    </glossdef>
  </glossentry>

  <glossentry>
    <glossterm>target</glossterm>

    <glossdef>
      <para>A word to the left of the operator on a dependency line.
	More generally, any file that <application>PMake</application> might
	create.  A file may be (and often is) both a target and a source (what
	it is depends on how <application>PMake</application> is looking at it
	at the time &ndash; sort of like the wave/particle duality of light,
	you know).</para>
    </glossdef>
  </glossentry>

  <glossentry>
    <glossterm>transformation rule</glossterm>

    <glossdef>
      <para>A special construct in a makefile that specifies how to create a
	file of one type from a file of another, as indicated by their
	suffixes.</para>
    </glossdef>
  </glossentry>

  <glossentry>
    <glossterm>variable expansion</glossterm>

    <glossdef>
      <para>The process of substituting the value of a variable for a
	reference to it.  Expansion may be altered by means of modifiers.</para>
    </glossdef>
  </glossentry>

  <glossentry>
    <glossterm>variable</glossterm>

    <glossdef>
      <para>A place in which to store text that may be retrieved later.
	Also used to define the local environment.
	Conditionals exist that test whether a variable is defined or not.</para>
    </glossdef>
  </glossentry>
</glossary>

<!--
     Local Variables:
     mode: sgml
     sgml-indent-data: t
     sgml-omittag: nil
     sgml-always-quote-attributes: t
     sgml-parent-document: ("../book.sgml" "glossary")
     End:
-->
