<!DOCTYPE HTML PUBLIC "-//FreeBSD//DTD HTML 4.01 Transitional-Based Extension//EN" [
<!ENTITY date "$FreeBSD$">
<!ENTITY title "关于 FreeBSD 技术上的先进性">
<!ENTITY % navinclude.about "INCLUDE">
]>

<!-- The FreeBSD Simplified Chinese Documentation Project -->
<!-- Original Revision: 1.27 -->

<html>
    &header;
    
    <h1>FreeBSD 提供了许多先进特性。</h1>
    
      <p>无论运行何种应用， 您总会希望系统资源发挥其最大潜能。
	FreeBSD 的先进特性， 能够帮助您达成这一目的。</p>

    <h2>基于 4.4BSD 的完整操作系统。</h2>

      <p>FreeBSD 的高贵根基， 派生于来自加州大学伯克利分校计算机系统研究小组最新的 <b>BSD</b>
	软件版本。 因此， 由 4.4BSD 系统架构师们撰写的 <i>The Design and
	  Implementation of 4.4BSD Operating System</i>
	(4.4BSD 操作系统的设计与实现) 也详细地介绍了 FreeBSD 的大部分核心功能。</p>

      <p>来自全球各地的富有经验和开发技能的志愿者的长期努力，
	使得 FreeBSD Project 得以在许多方面拓展 4.4BSD 操作系统的能力，
	并不断使这一操作系统的每一个新版本更为稳定、 性能更好，
	并提供用户所需的各种新功能。</p>

    <h2>FreeBSD 不仅提供了更好的性能， 也提供了更好的与其它操作系统的兼容性，
	于此同时， 其所需要的人工管理和干预却比其他操作系统更少。</h2>

      <p>FreeBSD 的开发人员解决了许多操作系统设计上的疑难问题，
	能够为您提供许多先进特性：</p>
      
      <ul>
	<li><b>与虚拟内存整合的文件系统快取缓存</b>
	  能够持续地调整用于程序和磁盘快取缓存的内存量。 其结果是，
	  不仅为应用程序提供了良好的内存管理， 也提供了更高的磁盘访问性能，
	  并将系统管理员从调整快取缓存尺寸的工作中解放出来。</li>
	
	<li><b>兼容性模块</b> 使得其他操作系统的应用程序能够在 FreeBSD
	  上正确运行， 目前已经能够兼容为 Linux、 SCO UNIX，
	  以及 System V Release 4 所编译的二进制形式的程序。</li>
	  
	<li><b>Soft Updates</b> 在不牺牲安全性和可靠性的情况下，
	  大大改善了文件系统性能。 它能够分析文件系统的元数据操作，
	  并避免以同步方式执行全部操作。 它维护关于元数据操作的一组内部状态，
	  并利用这些信息对元数据进行缓存， 并通过重新组织元数据操作的方法，
	  来合并对同一文件的后续操作， 并重新排列元数据操作，
	  以便使其更为有效地进行处理。 包括后台文件系统检查，
	  以及文件系统快照等在内的一系列功能， 均是在 soft updates
	  所提供的一致性和性能基础之上完成的。</li>

	<li><b>文件系统快照</b>， 使得管理员能够获得文件系统的原子快照，
	  并利用文件系统中的剩余空间来实现备份以及 <b>后台
	  fsck</b>， 使系统立即进入多用户模式，
	  而无需等待突然断电之后所需的文件系统清理操作。
	  </li>

	<li>支持 <b>安全 IP (IPsec)</b> 为网络提供了更好的安全性，
	  并支持下一代 Internet 协议，
	  IPv6。 FreeBSD 的 IPsec 实现同时还支持许多 <b>硬件加密加速设备</b>。</li>

	<li><b>直接可用的 IPv6 支持</b> 来自 KAME 的 IPv6 协议栈，
	  使得 FreeBSD 得以无缝地接入下一代网络环境。 FreeBSD
	  甚至还附带了许多支持 IPv6 的应用程序！</li>

	<li><b>多线程的 SMP 架构</b> 能够在多个处理器上并行地运行内核，
	  配合 <b>抢占式内核</b>， 使得高优先级的内核任务能够抢占其他内核动作，
	  从而缩短响应时间。 这包括了
	  <b>多线程的网络协议栈</b> 以及 <b>多线程的虚拟内存子系统</b>。
	  从 FreeBSD 6.x 开始， 完全并行执行的 VFS，
	  使得 UFS 文件系统能够同时在多个处理器上执行， 从而使得
	  CPU-密集的 I/O 优化所造成的负荷得以分担。</li>

	<li><b>通过 pthread 接口提供的 M:N 应用程序线程支持</b>
	  使得线程能够以具有强适应性的方式在多个 CPU 上执行，
	  并将许多用户线程映射为少量 <b>内核调度实体</b>(KSE)。
	  通过采用 <b>调度器激活</b>(Scheduler Activation) 模型，
	  线程支持能够适应更多应用程序的需要。</li>

	<li><b>Netgraph 可插入式网络协议栈</b>，
	  使开发人员能够很容易地通过清晰的网络层次抽象来动态扩展网络协议栈。
	  Netgraph 节点能够实现各式各样的新网络服务， 包括封装、
	  隧道、 加密， 以及性能适配。 其结果是， 能够轻易地迅速完成原形构建，
	  以及产品级的部署， 也减少了引入新问题的机会。</li>

	<li><b>可扩展的内核安全 TrustedBSD MAC 框架</b>，
	  能够使开发人员为特定的环境定制操作系统的安全模型，
	  无论是建立强化的安全策略， 还是部署完整性策略的强制性机密标签。
	  示范的安全策略包括 <b>多级别安全 (MLS)</b>， 以及 <b>Biba
	  完整性保护</b>。 第三方模块包括 <b>SEBSD</b>， 一种基于 FLASK
	  实现的 <b>Type Enforcement</b>。</li>

	<li><b>GEOM 可插入式存储层</b>， 使您能够迅速开发并将新的存储服务完全集成进
	  FreeBSD 存储系统。 GEOM 提供了一致和连贯的模型，
	  用于发现和堆叠存储服务， 从而使层次式服务， 如 RAID 和卷管理更为容易。</li>

	<li>FreeBSD <b>基于 GEOM 的磁盘加密 (GBDE)</b>，
	  通过 GEOM 框架提供了强加密保护， 并能用于保护文件系统、
	  交换区设备， 以及其他保存在存储介质上的数据。</li>

	<li><b>内核队列</b>(Kernel Queues, kqueue)
	  使得应用程序能够更为高效地响应各种异步事件， 包括文件和 socket IO，
	  从而改善应用程序和系统性能。</li>

	<li><b>数据接收过滤器</b> (Accept Filters) 使得类似 web
	  服务器这样的连接密集型应用， 能够将它们的部分功能，
	  完全放入操作系统内核进行， 从而改善性能。</li>
      </ul>

    <h2>FreeBSD 提供了一系列用于保护网络和服务器的安全功能。</h2>

      <p>FreeBSD 的开发人员在关注性能和稳定性的同时， 也同样非常关注安全。
	FreeBSD 包含了内核级的
	<b>状态式 IP 防火墙</b>， 以及许多其他服务， 如
	<b>IP 代理网关</b>、 <b>访问控制表</b>、 <b>强制式访问控制</b>、
	<b>基于 jail 的虚拟主机</b>， 以及 <b>加密保护的存储</b>。
	这些功能可以用于支持高度安全地为不同的不受信客户或消费者提供托管服务，
	为网络进行可靠的分区， 以及建立安全的信息净化和信息流传递途径。</p>

      <p>FreeBSD 也包含了对于加密软件、 安全 shell (SSH)、 Kerberos 认证、
	通过 jail 建立 "虚拟服务器"、
	通过 chroot 服务限制应用程序访问文件系统的能力， 安全 RPC
	机制， 以及为支持 TCP wrapper 的服务建立访问控制表等多种能力。</p>

      &footer;
  </body>
</html>

<!-- 
     Local Variables:
     mode: sgml
     sgml-indent-data: t
     sgml-omittag: nil
     sgml-always-quote-attributes: t
     End:
-->
