--- usr.sbin/bhyve/pci_virtio_console.c.orig
+++ usr.sbin/bhyve/pci_virtio_console.c
@@ -418,6 +418,7 @@
 
 	do {
 		n = vq_getchain(vq, &idx, &iov, 1, NULL);
+		assert(n == 1);
 		len = readv(sock->vss_conn_fd, &iov, n);
 
 		if (len == 0 || (len < 0 && errno == EWOULDBLOCK)) {
@@ -558,7 +559,6 @@
 		return;
 
 	n = vq_getchain(vq, &idx, &iov, 1, NULL);
-
 	assert(n == 1);
 
 	memcpy(iov.iov_base, ctrl, sizeof(struct pci_vtcon_control));
@@ -577,7 +577,8 @@
 	struct pci_vtcon_softc *sc;
 	struct pci_vtcon_port *port;
 	struct iovec iov[1];
-	uint16_t idx, n;
+	int n;
+	uint16_t idx;
 	uint16_t flags[8];
 
 	sc = vsc;
@@ -585,7 +586,7 @@
 
 	while (vq_has_descs(vq)) {
 		n = vq_getchain(vq, &idx, iov, 1, flags);
-		assert(n >= 1);
+		assert(n == 1);
 		if (port != NULL)
 			port->vsp_cb(port, port->vsp_arg, iov, 1);
 
--- usr.sbin/bhyve/pci_virtio_rnd.c.orig
+++ usr.sbin/bhyve/pci_virtio_rnd.c
@@ -113,7 +113,7 @@
 {
 	struct iovec iov;
 	struct pci_vtrnd_softc *sc;
-	int len;
+	int len, n;
 	uint16_t idx;
 
 	sc = vsc;
@@ -124,7 +124,8 @@
 	}
 
 	while (vq_has_descs(vq)) {
-		vq_getchain(vq, &idx, &iov, 1, NULL);
+		n = vq_getchain(vq, &idx, &iov, 1, NULL);
+		assert(n == 1);
 
 		len = read(sc->vrsc_fd, iov.iov_base, iov.iov_len);
 
--- usr.sbin/bhyve/pci_virtio_scsi.c.orig
+++ usr.sbin/bhyve/pci_virtio_scsi.c
@@ -556,15 +556,16 @@
 {
 	struct pci_vtscsi_softc *sc;
 	struct iovec iov[VTSCSI_MAXSEG];
-	uint16_t idx, n;
+	uint16_t idx;
 	void *buf = NULL;
 	size_t bufsize;
-	int iolen;
+	int iolen, n;
 
 	sc = vsc;
 
 	while (vq_has_descs(vq)) {
 		n = vq_getchain(vq, &idx, iov, VTSCSI_MAXSEG, NULL);
+		assert(n >= 1 && n <= VTSCSI_MAXSEG);
 		bufsize = iov_to_buf(iov, n, &buf);
 		iolen = pci_vtscsi_control_handle(sc, buf, bufsize);
 		buf_to_iov(buf + bufsize - iolen, iolen, iov, n,
@@ -594,8 +595,8 @@
 	struct pci_vtscsi_request *req;
 	struct iovec iov[VTSCSI_MAXSEG];
 	uint16_t flags[VTSCSI_MAXSEG];
-	uint16_t idx, n, i;
-	int readable;
+	uint16_t idx, i;
+	int readable, n;
 
 	sc = vsc;
 	q = &sc->vss_queues[vq->vq_num - 2];
@@ -603,6 +604,7 @@
 	while (vq_has_descs(vq)) {
 		readable = 0;
 		n = vq_getchain(vq, &idx, iov, VTSCSI_MAXSEG, flags);
+		assert(n >= 1 && n <= VTSCSI_MAXSEG);
 
 		/* Count readable descriptors */
 		for (i = 0; i < n; i++) {
