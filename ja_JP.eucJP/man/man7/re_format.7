.\" Copyright (c) 1992, 1993, 1994 Henry Spencer.
.\" Copyright (c) 1992, 1993, 1994
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" This code is derived from software contributed to Berkeley by
.\" Henry Spencer.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"	@(#)re_format.7	8.3 (Berkeley) 3/20/94
.\" %FreeBSD: src/lib/libc/regex/re_format.7,v 1.11 2004/07/02 23:52:12 ru Exp %
.\"
.\" $FreeBSD$
.\"
.\" WORD: branch		枝
.\" WORD: bracket expression	角括弧式
.\" WORD: substring		サブストリング
.\" WORD: subexpression		サブ式
.\" WORD: collating element	連続要素
.\" WORD: case			ケース (大文字/小文字)
.\" WORD: bound			領域
.\"
.Dd March 20, 1994
.Dt RE_FORMAT 7
.Os
.Sh 名称
.Nm re_format
.Nd POSIX 1003.2 正規表現
.Sh 解説
.St -p1003.2
において定義されているように、
正規表現
.Pq Dq RE
には 2 つの形式があります。
ひとつは現代正規表現 (大雑把にいうと
.Xr egrep 1
で使用されているもので、1003.2 での
.Dq 拡張
正規表現)
で、もうひとつは旧式正規表現 (これも大雑把には
.Xr ed 1
で使用されているもので、1003.2 での
.Dq 基本
正規表現) です。
旧式正規表現は大抵の場合いくつかの古くからあるプログラムでの
旧バージョンとの互換性のために存在しています。
これについては最後に説明します。
.St -p1003.2
は正規表現の構文と意味のいくつかの部分を明確に定めないままに
しています。
他の
.St -p1003.2
の実装とは完全な互換性がないかもしれない
これらの部分については、`\(dd' によって印をつけて示します。
.Pp
正規表現 (現代正規表現) はひとつ\(ddもしくはそれ以上の空でない\(dd
.Em 枝 (branch)
を
.Ql \&|
によって区切ったものです。
いずれかの枝にマッチすると正規表現はマッチします。
.Pp
枝はひとつ\(dd以上の
.Em ピース (piece)
が結合されたものです。
枝は最初のピース、次のピース...とすべてがマッチしたものにマッチします。
.Pp
ピースは
.Em アトム (atom)
、もしくはそれに単一の \(dd
.Ql \&* ,
.Ql \&+ ,
.Ql \&?
か
.Em 領域 (bound)
のいずれかが続いたものです。
アトムに
.Ql \&*
が続いたものは、
そのアトムの 0 個以上のシーケンスにマッチします。
アトムに
.Ql \&+
が続いたものは、
そのアトム 1 個以上のシーケンスにマッチします。
アトムに
.Ql ?\&
が続いたものは、
そのアトムの 0 個か 1 個のシーケンスにマッチします。
.Pp
.Em 領域
は
.Ql \&{
で始まり、符号なしの 10 進数の整数が続き、
その次に
.Ql \&,
が続くことがあり、
またその次にもうひとつ符号なしの 10 進数の整数が続くことがあり、
最後には常に
.Ql \&}
が続きます。
ここでの整数は 0 から
.Dv RE_DUP_MAX
(255\(dd) の範囲
(これらの数値を含む) でなくてはならず、
数値が 2 つある場合は、
最初のものは 2 番目のもの以下でなければなりません。
ひとつの整数値
.Em i
が含まれコンマが含まれない領域がアトムに続くと、
アトムがちょうど
.Em i
個のシーケンスにマッチします。
ひとつの整数値
.Em i
とコンマが含まれる領域がアトムに続くと、
.Em i
個以上のアトムのシーケンスにマッチします。
2 つの整数値
.Em i
と
.Em j
が含まれる領域がアトムに続くと、
.Em i
個以上
.Em j
個以下のアトムからなるシーケンスにマッチします。
.Pp
アトムは次のいずれかです:
.Ql ()
に囲まれた正規表現 (その正規表現にマッチ)、
.Ql ()
の空のセット (ヌルストリングにマッチ)\(dd、
.Em 角括弧式 (下記参照)、
.Ql .\&
(任意の 1 文字にマッチ)、
.Ql \&^
(行の先頭のヌルストリングにマッチ)、
.Ql \&$
(行の末尾のヌルストリングにマッチ)、
.Ql \e
とそれに続く
.Ql ^.[$()|*+?{\e
の内のどれか 1 文字
(それらの通常の扱いでの文字にマッチ)、
.Ql \e
とそれに続くその他の文字\(dd
(それらの通常の扱いでの文字にマッチ、
.Ql \e
がない場合と同様\(dd)、
もしくはその他に何も指定されていない文字 (その文字にマッチ)。
.Ql \&{
に数字以外の文字が続くものは通常の文字であり、
領域の開始とはなりません\(dd。
.Ql \e
で終了する正規表現は規則違反となります。
.Pp
.Em 角括弧式 (bracket expression)
とは
.Ql []
で囲まれた文字のリストです。
通常はリスト中のどれか 1 文字にマッチします (下記を除く)。
リストの最初が
.Ql \&^
で始まる場合、
リストの残りの文字
.Em でない
1 文字にマッチします (下記を除く)。
リスト中の 2 文字が
.Ql \&-
で分割されている場合は、
これら 2 文字の
.Em 範囲
(その 2 文字を含む) にある文字の省略形となり、
例えば ASCII では
.Ql [0-9]
は 10 進数数字にマッチします。
.Ql a-c-e
のように
2 つの文字範囲がひとつの文字を共有することはできません\(dd。
文字範囲は文字コードの配列に非常に依存しており、
移植性の良いプログラムを書くにはこれに頼ることを避けるのが賢明でしょう。
.Pp
リスト中に文字
.Ql \&]
を含めるには、これを最初の文字にする
(もしくは
.Ql \&^
に続ける) ようにします。
文字
.Ql \&-
を含めるには、これを最初もしくは最後の文字にするか、
文字範囲の終了文字とします。
文字
.Ql \&-
を文字範囲の開始文字とするには、
これを連続要素とするために
.Ql [.\&
と
.Ql .]
で括ります (下記参照)。
これらと
.Ql \&[
を使用したいくつかの組合せの例外を除いて、
.Ql \e
を含むすべての他の特殊文字は角括弧式の中では
それらの特殊な作用は無効となります。
.Pp
角括弧式の中では、連続要素
(文字、1 文字のように扱われる複数文字からなるシーケンス、
またはそれら連続シーケンスの名称) は、
.Ql [.\&
と
.Ql .]\&
で括られ、
その連続要素の文字のシーケンスの意味となります。
このシーケンスは角括弧式のリストのひとつの要素となります。
複数文字からなる連続要素を含む角括弧式はこのように 1 文字以上のものに
マッチすることができます。
例えば、連続シーケンスが連続要素として
.Ql ch
を含む場合、
正規表現
.Ql [[.ch.]]*c
は
.Ql chchcc
の最初の 5 文字にマッチします。
.Pp
角括弧式の中では、
.Ql [=
と
.Ql =]
で囲まれた連続要素は
ひとつの等価クラスであり、
それ自身を含むすべての連続要素の文字のシーケンスを示しています。
(もしその他に等価な連続要素がない場合は、
それはそれを囲うものが
.Ql [.\&
と
.Ql .]\&
であるもののように扱われます。)
例えば、
.Ql x
と
.Ql y
が等価クラスのメンバである時、
.Ql [[=x=]]
と
.Ql [[=y=]]
と
.Ql [xy]
はすべて同じ意味を持ちます。
等価クラスは文字範囲の終了点とすることはできません\(dd。
.Pp
角括弧式の中では、
.Ql [:
と
.Ql :]
で囲まれた
.Em 文字クラス
の名称は
そのクラスに属するすべての文字のリストを表わします。
標準の文字クラスの名称には次のものがあります。
.Pp
.Bl -column "alnum" "digit" "xdigit" -offset indent
.It Em "alnum	digit	punct"
.It Em "alpha	graph	space"
.It Em "blank	lower	upper"
.It Em "cntrl	print	xdigit"
.El
.Pp
これらは
.Xr ctype 3
において定義されている文字クラスを表わしています。
ロケールによってはこれら以外のものがあることがあります。
文字クラスは文字範囲の終了点として使うことは出来ません。
.Pp
角括弧式には 2 つの特殊なケース\(ddがあります。
角括弧式
.Ql [[:<:]]
と
.Ql [[:>:]]
はそれぞれ単語の開始および終了点に
おけるヌルストリングにマッチします。
単語は単語文字が前にも後にも付加されない
単語文字のシーケンスとして定義されます。
単語文字は
.Em alnum
(アルファベットと数字) 文字 (
.Xr ctype 3
で定義されているように) か下線文字です。
これは拡張して定義されているもので、
.St -p1003.2
に互換性はありますが、指定はされていません。
この拡張はソフトウェアにおいては、
他のシステムへの移植性をよく考えて使うべきです。
.Pp
与えられた文字列の複数のサブストリング (文字列の一部)
に、ある正規表現がマッチ可能な場合、
その正規表現は文字列の中で最初に現れたものにマッチします。
もし正規表現が同じ位置に現れた複数のサブストリングにマッチする場合は、
最も長いものにマッチします。
サブ式 (subexpression - 式の一部) も最も長いサブストリングにマッチしますが、
マッチ全体が最も長くなるように、
また正規表現中で先に開始しているサブ式が遅く開始しているものより
高い優先度をもつような条件があります。
高いレベルのサブ式はこのため低いレベルの部品的なサブ式より
高い優先度を持ちます。
.Pp
マッチの長さは連続要素ではなく、文字数で計られます。
ヌルストリングは全くマッチしないものよりは長いものであると考えられます。
例えば、
.Ql bb*
は
.Ql abbbc
の 3 つの真中の文字にマッチし、
.Ql (wee|week)(knights|nights)
は
.Ql weeknights
の 10 個すべての文字にマッチし、
.Ql (.*).*\&
が
.Ql abc
にマッチする時には、括弧で囲まれたサブ式は
3 つすべての文字にマッチします。
そして
.Ql (a*)*
が
.Ql bc
にマッチする時には、
正規表現全体と括弧で囲まれたサブ式の両方がヌルストリングにマッチします。
.Pp
ケース (大文字/小文字) 非依存マッチが指定された場合、
アルファベットからケースの区別がすべて消え去ったような効果があります。
ケースが複数あるアルファベットが角括弧式の外に通常の文字として現れた時、
それは事実上すべてのケースを含む角括弧式 (たとえば
.Ql x
は
.Ql [xX]
に)
に変換されます。
角括弧式の中に現れたときは、
その文字の異なるケースがその角括弧式に追加されます。
すなわち
.Ql [x]
は
.Ql [xX]
となり、また
.Ql [^x]
は
.Ql [^xX]
となります。
.Pp
正規表現の長さは特に制限は設けられていません\(dd。
プログラムに移植性を持たせたい場合は
正規表現は 256 バイトにとどめるべきでしょう。
256 バイトを越える正規表現の受理を拒否するにもかかわらず、
POSIX 準拠であるとする実装がありうるからです。
.Pp
旧式
.Pq Dq 基本
正規表現はいくつかの点で異なっています。
.Ql \&|
は通常の文字であり、
これらの機能の等価なものは存在しません。
.Ql \&+
や
.Ql ?\&
は通常の文字であり、それらの機能は
領域を用いて表されます (それぞれ
.Ql {1,}
または
.Ql {0,1} )
。
また、現代正規表現の
.Ql x+
は
.Ql xx*
と等価であることに注意して下さい。
領域の区切り文字は
.Ql \e{
と
.Ql \e}
であり、
.Ql \&{
と
.Ql \&}
は通常の文字として扱われます。
ネストしたサブ式での括弧は
.Ql \e(
と
.Ql \e)
であり、
.Ql \&(
と
.Ql \&)
は通常の文字となります。
.Ql \&^
は正規表現の先頭、もしくは\(dd
括弧で囲まれたサブ式の先頭を除いて通常の文字となり、
.Ql \&$
は正規表現の末尾、もしくは\(dd
括弧で囲まれたサブ式の末尾を除いて通常の文字となり、
.Ql \&*
はもしこれが正規表現の先頭、もしくは括弧で囲まれたサブ式の先頭
(か、先頭の
.Ql \&^
のあと) に現れると通常の文字となります。
最後にひとつ新しい型のアトム -
.Em 後方参照
があります。
.Ql \e
に 0 でない 10 進数
.Em d
が続いたものは、
.Em d
番目の括弧で囲まれたサブ式によってマッチする文字の同じ
シーケンスにマッチします
(開き括弧の位置によって左から右へサブ式に番号を付けます)。
すなわち
.Ql \e([bc]\e)\e1
は
.Ql bb
や
.Ql cc
にマッチしますが、
.Ql bc
にはマッチしません。
.Sh 関連項目
.Xr regex 3
.Rs
.%T Regular Expression Notation
.%R IEEE Std
.%N 1003.2
.%P section 2.8
.Re
.Sh バグ
正規表現が 2 種類もあるのはへまなことです。
.Pp
現在の
.St -p1003.2
仕様では
.Ql \&)
はマッチする
.Ql \&(
がない場合に
普通の文字として扱われることになっています。
これは言葉使い上の誤りの意図しない結果であり、
変更される可能性があります。
よって、この仕様に依存すべきではありません。
.Pp
後方参照はひどいへまであり、
効率的な実装をおこなう上で大きな問題を引き起こします。
さらに、それらの定義はどこかあいまいです。(
.Ql a\e(\e(b\e)*\e2\e)*d
は
.Ql abbbd
にマッチするでしょうか ?)
これらを使うのは避けてください。
.Pp
.St -p1003.2
のケース非依存マッチの仕様はあいまいです。
上記での
.Dq ひとつのケースはすべてのケースを表わす
という定義は
実装を行ったものの間では正しい解釈として現在同意されているものです。
.Pp
語の境界の構文は信じられないほど醜いものです。
.\"ZZZ: 3.0-RELEASE compliant by N. Kumagai 99-1-21
