.\" Copyright (c) 1980, 1983, 1986, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"     @(#)intro.2	8.5 (Berkeley) 2/27/95
.\" %FreeBSD: src/lib/libc/sys/intro.2,v 1.42.2.1 2005/02/28 03:32:34 brueffer Exp %
.\"
.\" $FreeBSD$
.Dd February 27, 1995
.Dt INTRO 2
.Os
.Sh 名称
.Nm intro
.Nd システムコールとエラー番号の紹介
.Sh ライブラリ
.Lb libc
.Sh 書式
.In errno.h
.Sh 解説
このセクションでは、システムコール、エラー戻り、
その他の共通な定義およびコンセプトの概要について説明します。
.\".Pp
.\".Sy System call restart
.\".Pp
.\"<more later...>
.Sh 戻り値
ほとんどすべてのシステムコールが外部識別子 errno によって参照される
エラー番号を備えています。
.In sys/errno.h
内でこの識別子は次のように定義されています。
.Pp
.Dl extern    int *       __error();
.Dl #define   errno       (* __error())
.Pp
.Va __error()
関数は、初期スレッド以外のスレッドについては、スレッドに固有な構造体の
フィールドを指すポインタを返します。
初期スレッドと非スレッドプロセスの場合、
.Va __error()
は、以前の定義と互換性のあるグローバル変数
.Va errno
を指すポインタを返します。
.Pp
システムコールは、エラーを検出すると、障害を示す整数値 (通常は -1) を返し、
それに応じて変数
.Va errno
を設定します。
<これにより、-1 を受け取ったときに障害を解釈し、
それに応じた行動をとることを可能にします。>
呼び出しが正常に完了した場合は
.Va errno
が設定されることはありません。
いったん設定されると、別のエラーが起きるまでそのままです。
これはエラーの後でだけ調べるべきです。
多くのシステムコールがこれらのエラー番号の意味を過重にしており、
意味は呼び出しのタイプと状況に従って解釈する必要があることに注意してください。
.Pp
以降に示すのはエラーの完全なリストであり、これらの名前は
.In sys/errno.h
に記載されています。
.Bl -hang -width Ds
.It Er 0 Em "Undefined error: 0" .
「未定義のエラー: 0」
未使用。
.It Er 1 EPERM Em "Operation not permitted" .
「操作が許されません」
適切な特権をもつプロセスに限定された操作、
またはファイルその他のリソースの所有者に
限定された操作を実行しようとしました。
.It Er 2 ENOENT Em "No such file or directory" .
「そのようなファイルまたはディレクトリはありません」
指定のパス名の構成要素が存在しないか、またはパス名が空の文字列でした。
.It Er 3 ESRCH Em "No such process" .
「そのようなプロセスはありません」
指定のプロセス ID に対応するプロセスが見つかりませんでした。
.It Er 4 EINTR Em "Interrupted system call" .
「関数呼び出しが割り込まれました」
割り込み可能な関数の実行中に、非同期シグナル (たとえば、
.Dv SIGINT
または
.Dv SIGQUIT )
がプロセスによって捕らえられました。
シグナルハンドラが正常に戻ると、
割り込みされたシステムコールがエラー状態を返したように見えます。
.It Er 5 EIO Em "Input/output error" .
「入出力エラーです」
何らかの物理的な入力エラーまたは出力エラーが起きました。
このエラーは、同じファイル記述子に対する操作が次に行われるまで報告されず、
後続のエラーによって失われる (上書きされる) 可能性があります。
.It Er 6 ENXIO Em "Device not configured" .
「デバイスが準備されていません」
存在しないデバイスを参照している特殊ファイルへの入出力が行われたか、
またはデバイスの制限を越えた要求が行われました。
このエラーは、テープドライブがオンラインでない場合や、
またはディスクパックがドライブにロードされていない場合などにも
発生する可能性があります。
.It Er 7 E2BIG Em "Argument list too long" .
「引数のリストが長すぎます」
新しいプロセスの引数リストと環境変数リストに使用されるバイト数が、
現在の限界である 65536 バイト
.In ( sys/param.h
内の
.Dv NCARGS )
を越えました。
.It Er 8 ENOEXEC Em "Exec format error" .
「実行形式エラーです」
実行を要求されたファイルのパーミッションは適切でしたが、
実行可能ファイルとして要求される形式ではありませんでした。
.It Er 9 EBADF Em "Bad file descriptor" .
「ファイル記述子が不良です」
ファイル記述子引数が範囲外であったか、
開いていないファイルを参照していたか、
または書込み (読取り) 専用に開かれたファイルに
読取り (書込み) 要求が行われました。
.Pp
.It Er 10 ECHILD Em "\&No child processes" .
「子プロセスがありません」
.Xr wait 2
または
.Xr waitpid 2
関数が、子プロセスが存在しないか、待機されたことのない
子プロセスを持たないプロセスによって実行されました。
.It Er 11 EDEADLK Em "Resource deadlock avoided" .
「リソースデッドロックを回避しました」
デッドロック状況になる可能性のあるシステムリソースをロックしようとしました。
.It Er 12 ENOMEM Em "Cannot allocate memory" .
「メモリの割り当てができません」
新しいプロセスイメージが、ハードウェアまたはシステムが課する
メモリ管理制約によって許容されるより多くのメモリを要求しました。
スワップ空間の不足は通常、一時的です。
しかし、コアの不足は一時的ではありません。
ソフト限界を対応するハード限界まで増加させることはできます。
.It Er 13 EACCES Em "Permission denied" .
「パーミッションが拒絶されました」
ファイルアクセスパーミッションで禁止されている方法で
ファイルにアクセスしようとしました。
.It Er 14 EFAULT Em "Bad address" .
「不正なアドレスです」
呼び出しで渡された引数を使おうとしているときに、
システムが無効なアドレスを検出しました。
.It Er 15 ENOTBLK Em "Block device required" .
「ブロックデバイスが要求されています」
ブロックデバイス操作が、非ブロックデバイスまたはファイルについて
試みられました。
.It Er 16 EBUSY Em "Device busy" .
「デバイスがビジー状態です」
その時点で使用されているシステムリソースを、
その要求と干渉するであろう方法で使おうとしました。
.It Er 17 EEXIST Em "File exists" .
「ファイルが存在します」
すでに存在するファイルが不適切なコンテキストで指定されました。
たとえば、
.Xr link 2
システムコールにおける新しいリンク名としてです。
.It Er 18 EXDEV Em "Cross-device link" .
「デバイスをまたぐリンクです」
別のファイルシステム上のファイルへのハードリンクが
試みられました。
.It Er 19 ENODEV Em "Operation not supported by device" .
「操作がデバイスによってサポートされていません」
あるデバイスに不適切な関数を適用しようしました。
たとえば、プリンタのような書込み専用デバイスを読み取ろうとしました。
.It Er 20 ENOTDIR Em "Not a directory" .
「ディレクトリではありません」
指定のパス名の構成要素は確かに存在しましたが、
ディレクトリが求められているにもかかわらず、
それがディレクトリではありませんでした。
.It Er 21 EISDIR Em "Is a directory" .
「ディレクトリです」
書込みモードを指定してディレクトリをオープンしようとしました。
.It Er 22 EINVAL Em "Invalid argument" .
「無効な引数です」
無効な引数が指定されました (たとえば、
.Xr signal 3
システムコールまたは
.Xr kill 2
システムコールに未定義のシグナルを指定する場合)。
.It Er 23 ENFILE Em "Too many open files in system" .
「システム内でオープンされているファイルが多すぎます」
システムが許容するファイル記述子の数の最大数に到達しており、少なくとも
1 つがクローズされるまで、オープンしようとする要求は満たされません。
.It Er 24 EMFILE Em "Too many open files" .
「オープンしているファイルが多すぎます」
.\" 次の .br は < が行末に来ないようにするため。
.br
<現在のリリースでは、
プロセス 1 個につきオープンできるファイル数の上限は 64 です。>
.Xr getdtablesize 2
システムコールで現在の限界を取得できます。
.It Er 25 ENOTTY Em "Inappropriate ioctl for device" .
「デバイスに不適切な ioctl です」
ファイルまたは特殊デバイスに不適切な操作を要求する制御関数
.Xr ( ioctl 2
を参照) を試みました。
.It Er 26 ETXTBSY Em "Text file busy" .
「テキストファイルがビジーです」
別のプロセスによって書込み用にオープンされた
純粋プロシージャ (共有テキスト) ファイルから新しいプロセスを作ろうとしたか、
または純粋プロシージャファイルが実行されている間に、書込みアクセスを要求する
.Xr open 2
呼び出しが実行されました。
.It Er 27 EFBIG Em "File too large" .
「ファイルが大きすぎます」
ファイルのサイズが最大値を超過しました
(約
.if t 2\u\s-231\s+2\d
.if n 2.1E9
バイト)。
.It Er 28 ENOSPC Em "No space left on device" .
「デバイスの空き領域不足です」
該当するファイルシステムで新たなディスクブロックが利用できないために、
通常ファイルへの
.Xr write 2
処理、ディレクトリの作成、シンボリックリンクの作成、
ディレクトリエントリの作成が失敗しました。
または、該当するファイルシステムで新たな inode が利用できないために、
新しく作成するファイルに対する inode の割り当てが失敗しました。
.It Er 29 ESPIPE Em "Illegal seek" .
「不正なシークです」
.Xr lseek 2
システムコールがソケット、パイプ、または
.Tn FIFO
に対して実行されました。
.It Er 30 EROFS Em "Read-only file system" .
「読取り専用ファイルシステムです」
ファイルまたはディレクトリを変更しようとする試みが、
その時点で読取り専用であるファイルシステムに対して行われました。
.It Er 31 EMLINK Em "Too many links" .
「リンクが多すぎます」
1 つのファイルについて許容されるハードリンクの最大数を超過しました
(1 ファイルにつきハードリンク数の限界は 32767 です)。
.It Er 32 EPIPE Em "Broken pipe" .
「パイプが破壊されてました」
データを読み取るプロセスのないパイプ、ソケット、または
.Tn FIFO
に対しての書込みです。
.It Er 33 EDOM Em "Numerical argument out of domain" .
「数値引数が領域外です」
数値入力引数が、数学関数の定義域の外側にありました。
.It Er 34 ERANGE Em "Result too large" .
「結果が大き過ぎます」
関数の数値結果が大きすぎて、利用できる場所に入りません
(おそらく精度を超過したのでしょう)。
.It Er 35 EAGAIN Em "Resource temporarily unavailable" .
「リソースが一時的に利用できません」
これは一時的な状況であり、後で同じルーチンを呼び出した時に
正常に完了する可能性があります。
.It Er 36 EINPROGRESS Em "Operation now in progress" .
「操作が現在進行中です」
完了するのに時間のかかる操作
.Xr ( connect 2
など) をノンブロッキングオブジェクトに対し試みました
.Xr ( fcntl 2
を参照)。
.It Er 37 EALREADY Em "Operation already in progress" .
「操作は既に進行中です」
既に操作が進行中のノンブロッキングオブジェクトに対してさらに操作を試みました。
.It Er 38 ENOTSOCK Em "Socket operation on non-socket" .
「ソケットでないものについてソケット操作を行いました」
ここに書いてあるとおりです。
.It Er 39 EDESTADDRREQ Em "Destination address required" .
「宛先アドレスが要求されています」
ソケットに関する操作に際し、必要なアドレスが抜けています。
.It Er 40 EMSGSIZE Em "Message too long" .
「メッセージが長すぎます」
内部メッセージバッファ、または何らかのネットワーク上の制限より
大きなメッセージがソケットで送信されました。
.It Er 41 EPROTOTYPE Em "Protocol wrong type for socket" .
「ソケットに対するプロトコルのタイプが間違っています」
要求されたソケットタイプではサポートされないプロトコルが指定されました。
たとえば、タイプ
.Dv SOCK_STREAM
では、
.Tn ARPA
インターネット
.Tn UDP
プロトコルを使用できません。
.It Er 42 ENOPROTOOPT Em "Protocol not available" .
「プロトコルが利用できません」
.Xr getsockopt 2
呼び出しまたは
.Xr setsockopt 2
呼び出しで、間違ったオプションまたはレベルが指定されました。
.It Er 43 EPROTONOSUPPORT Em "Protocol not supported" .
「プロトコルがサポートされていません」
指定したプロトコルがシステム内に組み込まれていないか、
またはそのプロトコルの実装が存在しません。
.It Er 44 ESOCKTNOSUPPORT Em "Socket type not supported" .
「ソケットタイプがサポートされていません」
指定したソケットタイプがシステム内に組み込まれてないか、
またはそのソケットタイプの実装が存在しません。
.It Er 45 EOPNOTSUPP Em "Operation not supported" .
「操作がサポートされていません」
引数が指すオブジェクトのタイプは、指定した操作をサポートしていません。
このエラーが起きるのは、通常は、ファイル記述子がこの操作を
サポートできないファイルまたはソケットを参照しているときです。
たとえば、データグラムソケット上で接続を
.Em accept
しようしたときです。
.It Er 46 EPFNOSUPPORT Em "Protocol family not supported" .
「プロトコルファミリがサポートされていません」
指定したプロトコルファミリがシステムに組み込まれていないか、
またはそのプロトコルファミリの実装が存在していません。
.It Er 47 EAFNOSUPPORT Em "Address family not supported by protocol family" .
「アドレスファミリがプロトコルファミリによってサポートされていません」
要求したプロトコルと互換性のないアドレスが使用されました。
たとえば、
.Tn ARPA
インターネットプロトコルで
.Tn NS
アドレスを使用できるとは必ずしも期待すべきではないでしょう。
.It Er 48 EADDRINUSE Em "Address already in use" .
「アドレスが既に使用中です」
各アドレスごとに、一度に 1 つだけを利用できます。
.Pp
.It Er 49 EADDRNOTAVAIL Em "Cannot assign requested address" .
「要求されたアドレスを割り当てできません」
通常は、このマシン上にないアドレスでソケットを作成しようとした結果です。
.It Er 50 ENETDOWN Em "Network is down" .
「ネットワークがダウンしています」
ソケット操作の結果、動作していないネットワークに遭遇しました。
.It Er 51 ENETUNREACH Em "Network is unreachable" .
「ネットワークに到達できません」
到達できないネットワークに向けてソケット操作を試みました。
.It Er 52 ENETRESET Em "Network dropped connection on reset" .
「リセットによりネットワークの接続が失われました」
接続していたホストがクラッシュして再起動されました。
.It Er 53 ECONNABORTED Em "Software caused connection abort" .
「ソフトウェアによる接続中断が生じました」
自マシン側の原因により接続中断が発生しました。
.It Er 54 ECONNRESET Em "Connection reset by peer" .
「接続が通信相手によってリセットされました」
接続が通信相手 (peer) によって強制的にクローズされました。
これはタイムアウトまたは再起動によって、
リモート側のソケットで接続が失われた結果であるのが普通です。
.It Er 55 ENOBUFS Em "\&No buffer space available" .
「バッファの空きがありません」
システムに十分なバッファがないか、待ち行列が一杯になったために、
ソケットまたはパイプについての操作が行われませんでした。
.It Er 56 EISCONN Em "Socket is already connected" .
「ソケットは既に接続されています」
既に接続されたソケットに対して
.Xr connect 2
要求を行いました。
または、接続済みのソケットに対する
.Xr sendto 2
や
.Xr sendmsg 2
要求に際し、既に接続されているのに宛先を指定しました。
.It Er 57 ENOTCONN Em "Socket is not connected" .
「ソケットは接続されていません」
ソケットが接続されておらず、しかも (データグラムソケットを送信するときに)
アドレスが指定されていなかったために、データを送信または
受信する要求が許可されませんでした。
.It Er 58 ESHUTDOWN Em "Cannot send after socket shutdown" .
「ソケットのシャットダウンの後で送信ができません」
以前に
.Xr shutdown 2
を呼び出して既にシャットダウンさせてしまったために、
ソケットに対しデータを送信する要求が許可されませんでした。
.It Er 60 ETIMEDOUT Em "Operation timed out" .
「操作がタイムアウトしました」
ある時間が経過するまでに接続相手が適切に応答しなかったために、
.Xr connect 2
要求または
.Xr send 2
要求の処理に失敗しました
(タイムアウトの期間は通信プロトコルに左右されます)。
.It Er 61 ECONNREFUSED Em "Connection refused" .
「接続が拒絶されました」
接続相手のマシンが接続を自ら拒否したので、接続を確立できませんでした。
これは、通常、相手ホストで有効でないサービスに接続しようとした結果です。
.It Er 62 ELOOP Em "Too many levels of symbolic links" .
「シンボリックリンクのレベルが多すぎます」
パス名の探索に、32
.Pq Dv MAXSYMLINKS
を越えるシンボリックリンクが含まれていました。
.It Er 63 ENAMETOOLONG Em "File name too long" .
「ファイル名が長すぎます」
パス名の構成要素が
.Brq Dv NAME_MAX
文字を越えているか、またはパス名全体が
.Brq Dv PATH_MAX
文字を越えています
.Xr ( pathconf 2
の中の
.Dv _PC_NO_TRUNC
の解説も参照して下さい)。
.It Er 64 EHOSTDOWN Em "Host is down" .
「ホストがダウンしています」
宛先ホストがダウンしているためにソケット操作が失敗しました。
.It Er 65 EHOSTUNREACH Em "No route to host" .
「ホストへの経路はありません」
到達不可能なホストにソケット操作をしようとしました。
.It Er 66 ENOTEMPTY Em "Directory not empty" .
「ディレクトリが空ではありません」
ディレクトリ削除または名前変更の呼び出しに対し、
.Ql .\&
と
.Ql ..\&
以外のエントリを含むディレクトリが指定されました。
.It Er 67 EPROCLIM Em "Too many processes" .
「プロセスが多すぎます」
.It Er 68 EUSERS Em "Too many users" .
「ユーザが多すぎます」
クォータシステムがテーブルエントリを使い切りました。
.It Er 69 EDQUOT Em "Disc quota exceeded" .
「ディスククォータが超過しました」
ユーザのディスクブロッククォータを使い尽くしたために、通常のファイルへの
.Xr write 2
、ディレクトリの作成、シンボリックリンクの作成、
ディレクトリエントリの作成が失敗しました。
もしくは、ユーザの inode クォータを使い尽くしたために、
新しく作成されたファイルのための inode の割り当てに失敗しました。
.It Er 70 ESTALE Em "Stale NFS file handle" .
「失効した NFS ファイルハンドルです」
オープンされている
.Tn ( NFS
ファイルシステム上の) ファイルに対してアクセスしようとしましたが、
指定したファイル記述子が参照するファイルは現在利用できません。
これは
.Tn NFS
サーバ上でファイルが削除されたか、
または他の破滅的な何かが起きたことを示していると思われます。
.It Er 72 EBADRPC Em "RPC struct is bad" .
「RPC 構造体が不良です」
.Tn RPC
情報の交換が不成功でした。
.It Er 73 ERPCMISMATCH Em "RPC version wrong" .
「RPC バージョンが間違っています」
通信相手の
.Tn RPC
のバージョンが、こちらのバージョンと互換性がありません。
.It Er 74 EPROGUNAVAIL Em "RPC prog. not avail" .
「RPC プログラムが利用できません」
要求したプログラムがリモートホストに登録されていません。
.It Er 75 EPROGMISMATCH Em "Program version wrong" .
「プログラムバージョンが間違っています」
要求したバージョンのプログラムが、リモートホスト
.Pq Tn RPC
上で利用できません。
.It Er 76 EPROCUNAVAIL Em "Bad procedure for program" .
「プログラムにとって間違った手続きです」
リモートプログラム内に存在しない手続きに対し
.Tn RPC
呼び出しが試みられました。
.It Er 77 ENOLCK Em "No locks available" .
「ロックが利用できません」
システムが課した、同時ファイルロック数の制限に達しました。
.It Er 78 ENOSYS Em "Function not implemented" .
「関数が実装されていません」
このシステムで利用できないシステムコールを実行しようとしました。
.It Er 79 EFTYPE Em "Inappropriate file type or format" .
「ファイルの型または形式が不適切です」
操作が誤った型のファイルに行われたか、またはデータファイルの
形式が誤っています。
.It Er 80 EAUTH Em "Authentication error" .
「認証エラーです」
.Tn NFS
ファイルシステムをマウントするために不正な
認証チケットを使おうとしました。
.It Er 81 ENEEDAUTH Em "Need authenticator" .
「認証物が必要です」
指定した
.Tn NFS
ファイルシステムをマウントするために認証チケットが必要です。
.It Er 82 EIDRM Em "Identifier removed" .
「識別子は削除されました」
IPC の識別子は、現在のプロセスがそれで待っている間に削除されました。
.It Er 83 ENOMSG Em "No message of desired type" .
「要求された型のメッセージがありません」
要求した型のメッセージが IPC メッセージキューにありません。
または、メッセージカタログは要求したメッセージを含んでいません。
.It Er 84 EOVERFLOW Em "Value too large to be stored in data type" .
「データタイプに格納するには大きすぎる値です」
関数からの数値の戻り値が、呼び出し側で用意した場所に格納するには大きすぎます。
.It Er 85 ECANCELED Em "Operation canceled" .
「処理はキャンセルされました」
予定されていた処理はキャンセルされました。
.It Er 86 EILSEQ Em "Illegal byte sequence" .
「不正なバイト列です」
多バイト文字をデコードしている際に、関数は不正または不完全なバイト列
もしくは不正なワイド文字に遭遇しました。
.It Er 87 ENOATTR Em "Attribute not found" .
指定された拡張属性は存在しません。
.It Er 88 EDOOFUS Em "Programming error" .
関数や API を、実行時にしか検知されない方法で誤用しました。
.El
.Sh 定義
.Bl -tag -width Ds
.It "プロセス ID (Process ID)"
システム内のアクティブな各プロセスは、プロセス ID と呼ばれる
負でない整数によって一意に識別されます。
この ID の範囲は 0 から 99999 までです。
.It "親プロセス ID (Parent process ID)"
新しいプロセスは、現在のアクティブなプロセスから作成されます
.Xr ( fork 2
を参照)。
プロセスの親プロセス ID は、
最初はそれを作成したプロセスのプロセス ID となっています。
そのプロセスを作成したプロセスが exit した場合、
それぞれの子プロセスの親プロセス ID は、システムプロセス
.Xr init 8
の ID に設定されます。
.It "プロセスグループ (Process Group)"
アクティブなプロセスはそれぞれがあるプロセスグループのメンバであり、
プロセスグループはプロセスグループ ID と呼ばれる
負でない整数によって識別されます。
プロセスグループ ID はそのグループのリーダのプロセス ID です。
このグループ化によって、
関連づけられたプロセスの集団にシグナルを送る
.Xr ( termios 4
を参照) ことや、
.Xr csh 1
のジョブ制御機構を可能にします。
.It "セッション (Session)"
セッションは 1 つ以上のプロセスグループの集合です。
セッションは
.Xr setsid 2
の呼び出しが成功すると作成されます。
これによって、呼び出したプロセスは、新規のセッションが
1 つだけ持つプロセスグループの唯一のメンバになります。
.It "セッションリーダ (Session leader)"
.Xr setsid 2
の呼び出しの成功によって、新しいセッションを作成したプロセスは、
セッションリーダとして知られます。
端末を自分が制御する端末
.Xr ( termios 4
を参照) として取得できるのは、セッションリーダだけです。
.It "制御プロセス (Controlling process)"
制御端末を持つセッションリーダが制御プロセスです。
.It "制御端末 (Controlling terminal)"
セッションに関連づけられている端末は、そのセッションとそのメンバに対する
制御端末として知られます。
.It "端末プロセスグループ ID (Terminal Process Group ID)"
端末は、セッションリーダによって制御端末として取得されます。
ひとたび端末がセッションに関連づけられると、
端末プロセスグループ ID をプロセスグループの ID に設定することによって、
そのセッション内のどのプロセスグループでも、
フォアグラウンドに置くことができるようになります。
この機能は、同じ端末をめぐり競合している複数のジョブの間で
調停を行うために用いられます
.Xr ( csh 1
と
.Xr tty 4
を参照)。
.It "親のないプロセスグループ (Orphaned Process Group)"
プロセスグループは、ジョブ制御を行うシェルの制御下にない場合、
.Em 親なしになった
とみなされます。
より正確に言うと、そのプロセスグループのメンバはどれも、
そのグループと同じセッションに属す親プロセスを持たず、かつ、
親プロセスが別のプロセスグループに属す場合、
そのプロセスグループは親なしになります。
なお、プロセスが終了するとき、その子プロセスの親プロセスは
.Xr init 8
となるように変更されます。
そしてこれは別個のセッションになります。
親のないプロセスグループのメンバの全てが、必ずしも
親のないプロセス (プロセスを作成したプロセスが終了した)
というわけではありません。
この定義により、セッションリーダのプロセスグループは親なしになります。
.It "実ユーザ ID と実グループID (Real User ID and Real Group ID) "
システム上の各ユーザは、実ユーザ ID と呼ばれる正の整数によって識別されます。
.Pp
各ユーザは、1 つまたは複数のグループのメンバでもあります。
これらのグループの 1 つは他のものから区別され、
アカウンティング機能を実現するのに使用されます。
この区別されたグループに対応する正の整数は、実グループ ID と呼ばれます。
.Pp
すべてのプロセスは実ユーザ ID と実グループ ID を持っています。
これらは、そのプロセスを作成したプロセスと等価な属性値を
使って初期化されます。
.It "実効ユーザ ID、実効グループ ID、グループアクセスリスト (Effective User Id, Effective Group Id, and Group Access List)"
システムリソースへのアクセスは、実効ユーザ ID とグループアクセスリストという
2 つの値を使って決定されます。
グループアクセスリストの最初のメンバは、実効グループ ID
としても知られています
(POSIX.1 では、グループアクセスリストは、補助グループ ID の
セットとして知られ、実効グループ ID がリストのメンバで
あるかどうかは未規定です)。
.Pp
実効ユーザ ID と実効グループ ID は、最初はそれぞれ、
プロセスの実ユーザ ID と実グループ ID です。
いずれも (おそらくその先祖のいずれかが) ユーザ ID 設定ファイルまたは
グループ ID 設定ファイルを実行することにより変更することができます
.Xr ( execve 2
を参照してください)。
慣習で、実効グループ ID
(グループアクセスリストの最初のメンバ) は複製されるので、
グループ ID 設定プログラムの実行の結果、もともと持っていた
(実) グループ ID が失われることはありません。
.Pp
グループアクセスリストは、リソースへのアクセスが可能かどうかを
決定するためにだけ使用されるグループ ID の集合です。
アクセスチェックは、以降の
``ファイルアクセスパーミッション''
で説明するように行われます。
.It "退避ユーザ ID と退避グループ ID (Saved Set User ID and Saved Set Group ID)"
プロセスが新しいファイルを実行するとき、ファイルがユーザ ID 設定であれば、
実効ユーザ ID はそのファイルの所有者に設定され、
ファイルがグループ ID 設定であれば、
実効グループ ID (グループアクセスリストの最初の要素) は
ファイルのグループに設定されます。
それからプロセスの実効ユーザ ID は退避ユーザ ID として記録され、
プロセスの実効ユーザ ID は退避グループ ID として記録されます。
これらの記録された値は、実 ID
.Xr ( setuid 2
を参照) に戻った後で、実効ユーザ ID または実効グループ ID をこれらの
値に回復するために利用できます。
(POSIX.1 では、退避ユーザ ID と退避グループ ID はオプションであり、
setuid および setgid の内部で使用されますが、
これはスーパユーザについて意図どおりには機能しません)。
.It "スーパユーザ (super-user)"
実効ユーザ ID が 0 の場合、そのプロセスは
.Em スーパユーザ
プロセスとして認識され、特別な権利が認められます。
.It "記述子 (Descriptor)"
.Xr open 2 ,
.Xr dup 2
によってファイルが参照されるとき、または
.Xr pipe 2 ,
.Xr socket 2 ,
.Xr socketpair 2
によってソケットが作成されるときにシステムによって割り当てられる整数です。
この整数は、指定のプロセスやその子プロセスから、
そのファイルやソケットへのアクセスパスを一意に識別します。
.It "ファイル名 (File Name)"
最高
.Brq Dv NAME_MAX
文字からなる名前であって、通常ファイル、特殊ファイル、
ディレクトリに名前を付けるのに使用されます。
.Pp
これらの文字は、
.Dv NUL
.Tn ( ASCII
0)
および
.Ql \&/
文字 (スラッシュ、
.Tn ASCII
47) を除く、
任意の 8 ビット値から選択できます。
.Pp
なお、一般に、ファイル名の一部として
.Ql \&* ,
.Ql \&? ,
.Ql \&[ ,
.Ql \&]
を使用するのは賢明ではありません。
シェルによってこれらの文字には特殊な意味がつけられるからです。
.It "パス名 (Path Name)"
パス名は、
.Dv NUL
で終端された文字列です。
スラッシュ
.Ql \&/
(省略可能) で始まり、スラッシュで区切られた 0 個以上のディレクトリ名が続き、
ファイル名 (省略可能) が続きます。
パス名の長さの合計は
.Brq Dv PATH_MAX
文字未満である必要があります
(あるシステム上では、この制限は無制限かもしれません)。
.Pp
パス名がスラッシュで始まる場合、パス検索は
.Em ルート
ディレクトリから開始します。
そうでない場合、検索は現在の作業ディレクトリから開始します。
スラッシュだけの場合、ルートディレクトリを指定します。
空のパス名は現在のディレクトリを指します。
.It "ディレクトリ (Directory)"
ディレクトリは特殊なタイプのファイルであり、他のファイルを参照する
エントリを含んでいます。
ディレクトリエントリをリンクと呼びます。
伝統的に、ディレクトリには少なくとも 2 つのリンク、
.Ql .\&
と
.Ql \&..
を含みます。
これらはそれぞれ
.Em ドット
および
.Em ドット-ドット
と呼ばれます。
ドットは、そのディレクトリ自体を指し、
ドット-ドットはその親ディレクトリを指します。
.It "ルートディレクトリと現在の作業ディレクトリ (Root Directory and Current Working Directory)"
各プロセスは、ルートディレクトリと現在の作業ディレクトリという
概念を持つとされてきました。
これらの概念はパス名検索を解決する際に用いられます。
プロセスのルートディレクトリは、
ルートファイルシステムのルートディレクトリである必要はありません。
.It "ファイルアクセスパーミッション (File Access Permission)"
ファイルシステム内の各ファイルはアクセスパーミッションの
集合を持っています。
これらのパーミッションは、プロセスがファイルについて要求された操作
(たとえば、書込み用にファイルをオープンする) を行ってもよいかどうかを
判定するのに使用されます。
アクセスパーミッションはファイルが作成されたときに設定されます。
アクセスパーミッションは
.Xr chmod 2
呼び出しを用いて後から変更することもできます。
.Pp
ファイルアクセスでは、ファイルが読取りが許されているかどうか、
書込みが許されているかどうか、実行が許されているかどうか、によって
分類されます。
ディレクトリファイルでは、ディレクトリを検索してもよいかどうかを
制御するのに実行パーミッションを使用します。
.Pp
システムがファイルアクセスパーミッションを解釈するにあたり、
ユーザの 3 つの異なるクラス (ファイルの所有者、
ファイルのグループ内のユーザ、その他) のどれに適用するかによって解釈します。
各ファイルは、これらの各クラスについて、
独立したアクセスパーミッションの集合を持っています。
アクセスチェックが行われると、システムは、
呼び出し側に適用できるアクセス情報をチェックすることによって、
パーミッションが認可されるかどうかを判定します。
.Pp
ファイルについての読取り、書込み、実行 / 検索の
各パーミッションは、次の場合にプロセスに認可されます。
.Pp
プロセスの実効ユーザ ID がスーパユーザである場合
(注: スーパユーザであっても、実行可能でないファイルを実行する
ことはできません)。
.Pp
プロセスの実効ユーザ ID がファイルの所有者のユーザ ID に一致し、
所有者のパーミッションがアクセスを許可している場合。
.Pp
プロセスの実効ユーザ ID がファイルの所有者のユーザ ID と一致せずに、
プロセスの実効グループ ID がファイルのグループ ID と一致するか
またはファイルのグループ ID がプロセスのグループアクセスリスト内に
あるかのどちらかであり、グループパーミッションがアクセスを許容している場合。
.Pp
プロセスの実効ユーザ ID も実効グループ ID もグループアクセスリストも、
ファイルの対応するユーザ ID およびグループ ID と一致しないが、
``その他のユーザ'' のパーミッションがアクセスを許容する場合。
.Pp
上記のいずれにも該当しない場合、パーミッションは拒絶されます。
.It "ソケットとアドレスファミリ (Sockets and Address Families)"
ソケットはプロセス間の通信の端点です。
各ソケットには、データ送信用および受信用の待ち行列があります。
.Pp
ソケットには、通信の性質によったタイプがあります。
これらの性質には、ソケットで送受信されるメッセージに
相手の名前が必要かどうか、通信に信頼性があるかどうか、
メッセージ受信者を名付ける際に使用される形式などが含まれます。
.Pp
実際のシステムはそれぞれ、いくつかのソケットタイプの集合をサポートしています。
利用できるタイプおよびそれらのプロパティの詳細については、
.Xr socket 2
を参照してください。
.Pp
実際のシステムはそれぞれ、いくつかの通信プロトコルの集合を
サポートしています。
プロトコルの集合はそれぞれある特定の形式のアドレスをサポートします。
アドレスファミリは、あるプロトコルのグループに対応するアドレスの集合です。
ソケットはそれぞれ、ソケットが作成されたアドレス
ファミリから選択したアドレスを持ちます。
.El
.Sh 関連項目
.Xr intro 3 ,
.Xr perror 3
