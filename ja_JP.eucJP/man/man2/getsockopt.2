.\" Copyright (c) 1983, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"     @(#)getsockopt.2	8.4 (Berkeley) 5/2/95
.\" %FreeBSD: src/lib/libc/sys/getsockopt.2,v 1.31 2004/07/02 23:52:13 ru Exp %
.\"
.\" $FreeBSD$
.Dd May 2, 1995
.Dt GETSOCKOPT 2
.Os
.Sh 名称
.Nm getsockopt ,
.Nm setsockopt
.Nd ソケットのオプションの取得と設定
.Sh ライブラリ
.Lb libc
.Sh 書式
.In sys/types.h
.In sys/socket.h
.Ft int
.Fn getsockopt "int s" "int level" "int optname" "void * restrict optval" "socklen_t * restrict optlen"
.Ft int
.Fn setsockopt "int s" "int level" "int optname" "const void *optval" "socklen_t optlen"
.Sh 解説
.Fn getsockopt
と
.Fn setsockopt
システムコールは、ソケットに対応する
.Em オプション
を操作します。
オプションは複数のプロトコルレベルに存在する可能性があります。
これらは必ず最上位の
.Dq ソケット
レベルに存在します。
.Pp
ソケットオプションを操作する際は、オプションが常駐するレベル
およびオプションの名前を指定する必要があります。
ソケットレベルでオプションを操作するには
.Fa level
を
.Dv SOL_SOCKET
として指定します。
他のレベルでオプションを操作するには、
オプションを制御している適切なプロトコルのプロトコル番号を指定します。
例えば、オプションが
.Tn TCP
プロトコルによって解釈されることを指示するには、
.Fa level
を
.Tn TCP
のプロトコル番号に設定する必要があります。
.Xr getprotoent 3
を参照してください。
.Pp
.Fa optval
と
.Fa optlen
引数は、
.Fn setsockopt
がオプション値にアクセスするために使用されます。
.Fn getsockopt
の場合、これらは要求されたオプションの値が返される
バッファを識別します。
.Fn getsockopt
の場合、
.Fa optlen
は値と結果の引数であり、初期には
.Fa optval
の指すバッファのサイズが入っており、戻り時に修正されて
返された値の実際のサイズを示すようになります。
オプション値を指定しないか、またはオプション値が返されない場合、
.Fa optval
に NULL を指定してもかまいません。
.Pp
.Fa optname
引数および指定のオプションは、解釈されずに、
解釈用の該当プロトコルモジュールに渡されます。
インクルードファイル
.In sys/socket.h
には後述するソケットレベルオプション用の定義が入っています。
他のプロトコルレベルのオプションは形式と名称がさまざまです。
マニュアルのセクション 4 の該当するエントリを参照してください。
.Pp
ほとんどのソケットレベルのオプションは
.Fa optval
用に
.Vt int
引数を使用します。
.Fn setsockopt
の場合、ブール演算を有効にするためには引数は 0 でない必要があり、
オプションを無効にする場合は 0 である必要があります。
.Dv SO_LINGER
は、
.In sys/socket.h
で定義された
.Vt "struct linger"
引数を使用します。
これは、目的の状態のオプションとリンガ間隔 (後述) を指定します。
.Dv SO_SNDTIMEO
と
.Dv SO_RCVTIMEO
は、
.In sys/time.h
で定義された
.Vt "struct timeval"
引数を使用します。
.Pp
以降のオプションがソケットレベルで認識されます。
別記した場合を除いて、各オプションが
.Fn getsockopt
で調べられ、
.Fn setsockopt
で設定されます。
.Bl -column SO_ACCEPTFILTER -offset indent
.It Dv SO_DEBUG Ta "デバッグ情報の記録を有効にします"
.It Dv SO_REUSEADDR Ta "ローカルアドレスの再使用を有効にします"
.It Dv SO_REUSEPORT Ta "重複したアドレスとポートのバインドを有効にします"
.It Dv SO_KEEPALIVE Ta "接続を保持することを有効にします"
.It Dv SO_DONTROUTE Ta "発信メッセージについて経路設定バイパスを有効にします"
.It Dv SO_LINGER  Ta "データが存在する場合はクローズで遅延します"
.It Dv SO_BROADCAST Ta "ブロードキャストメッセージを送信するパーミッションを有効にします"
.It Dv SO_OOBINLINE Ta "バンド内でのバンド外データの受信を有効にします"
.It Dv SO_SNDBUF Ta "出力用のバッファサイズを設定します"
.It Dv SO_RCVBUF Ta "入力用のバッファサイズを設定します"
.It Dv SO_SNDLOWAT Ta "出力用の最小カウントを設定します"
.It Dv SO_RCVLOWAT Ta "入力用の最小カウントを設定します"
.It Dv SO_SNDTIMEO Ta "出力についてのタイムアウト値を設定します"
.It Dv SO_RCVTIMEO Ta "入力についてのタイムアウト値を設定します"
.It Dv SO_ACCEPTFILTER Ta "待ち受けソケットでの accept フィルタを設定します"
.It Dv SO_TYPE Ta "ソケットのタイプを取得します (取得のみ)"
.It Dv SO_ERROR Ta "ソケットのエラーを取得してクリアします (取得のみ)"
.El
.Pp
.Dv SO_DEBUG
は下層のプロトコルモジュール内でデバッグを有効にします。
.Dv SO_REUSEADDR
は、
.Xr bind 2
システムコールで指定されたアドレスを検証するのに使用する規則で、
ローカルアドレスの再利用が可能であることを示します。
.Dv SO_REUSEPORT
は、ポートをバインドする前の複数のプロセスがすべて
.Dv SO_REUSEPORT
を設定している場合に、
複数のプロセスによる完全に重複したバインドが可能になるようにします。
このオプションは、プログラムの複数のインスタンスそれぞれが、
バインドされたポートを宛先とする UDP/IP マルチキャストまたは
ブロードキャストのデータグラムを受信できるようにします。
.Dv SO_KEEPALIVE
は接続されたソケット上でメッセージの周期的な送信を有効にします。
接続された一方がこれらのメッセージに応答できない場合は
接続が破壊されていると考えられ、ソケットを使用しているプロセスは
データを送信しようとするときに
.Dv SIGPIPE
シグナルによって通知を受けます。
.Dv SO_DONTROUTE
は発信メッセージが標準の経路設定機能をバイパスする必要があることを示します。
代わりに、メッセージは、宛先アドレスのネットワーク部分に従って
該当するネットワークインタフェースに転送されます。
.Pp
.Dv SO_LINGER
は送信されていないメッセージがソケットの待ち行列にあり、しかも
.Xr close 2
が実行される時に行われる処置を制御します。
ソケットがデータの信頼できる配信を確約し、しかも
.Dv SO_LINGER
が設定されている場合、
データを送信できるまで または情報を配信できない
(リンガ間隔と呼ばれるタイムアウト時間は、
.Dv SO_LINGER
が要求されるときに
.Fn setsockopt
システムコール内で秒単位で指定されます) と判定するまで、システムはプロセスを
.Xr close 2
上でブロックします。
.Dv SO_LINGER
が無効の状態で
.Xr close 2
が起動されると、システムは、プロセスが可能な限り迅速に処理を
継続できる方法でクローズ処理を行います。
.Pp
オプション
.Dv SO_BROADCAST
は、ソケット上でブロードキャストデータグラムを送信するパーミッションを
要求します。
ブロードキャストは、システムの初期バージョンでは特権操作でした。
バンド外のデータをサポートするプロトコルで、
.Dv SO_OOBINLINE
オプションは、バンド外のデータが受信された順番で通常の
データ入力待ち行列に配置されることを要求します。
そして、これは
.Dv MSG_OOB
フラグなしに
.Xr recv 2
呼び出しまたは
.Xr read 2
呼び出しでアクセスできます。
常に このオプションが設定されているかのように動作する
プロトコルもあります。
.Dv SO_SNDBUF
と
.Dv SO_RCVBUF
は、それぞれ、出力および入力用に割り当てられる通常のバッファサイズを
調整するオプションです。
バッファのサイズは、高ボリューム接続のために増加することができますし、
着信データの可能なバックログを
制限するために減少させることもできます。
システムはこれらの値について 1 つの絶対最大値を設定します。
この最大値は
.Xr sysctl 3
MIB 変数
.Dq Li kern.ipc.maxsockbuf
によってアクセスできます。
.Pp
.Dv SO_SNDLOWAT
は出力操作に最小カウントを設定するオプションです。
ほとんどの出力操作は、送信用のプロトコルにデータを配信し、
フロー制御のためにブロックしながら呼び出しによって与えられた
すべてのデータを処理します。
ノンブロッキング出力操作は、ブロックなしのフロー制御に従って
許容される限界までデータを処理しますが、フロー制御が
最低基準値または要求全体のいずれか小さい方を処理することを許容しない
場合はデータを処理しません。
ソケットへの書込み能力を試験する
.Xr select 2
操作が真で返るのは、最低基準値を処理できる場合だけです。
.Dv SO_SNDLOWAT
のデフォルト値はネットワーク効率性のために
適切なサイズ (多くの場合は 1024) に設定されます。
.Dv SO_RCVLOWAT
は入力操作の最小カウントを設定するオプションです。
一般に、受信呼び出しは、いくらかの (0 でない) データが
受信されるまでブロックしてから、利用できる量または
要求された量のいずれか少ない方とともに戻ります。
.Dv SO_RCVLOWAT
のデフォルト値は 1 です。
.Dv SO_RCVLOWAT
にもっと大きな値が設定されている場合、
受信呼び出しのブロックは通常、最低基準値または
要求された量のいずれか小さい方が受信されるまで待機します。
受信呼び出しは、エラーが発生したり、シグナルが捕らえられたり、
または受信待ち行列内の次のデータのタイプが返されたものと異なる場合は、
最低基準値より小さい値でも戻ることがあります。
.Pp
.Dv SO_SNDTIMEO
は出力操作についてタイムアウト値を設定するオプションです。
これは、出力操作完了の待機を制限するために使用される秒数、
マイクロ秒数を
.Vt "struct timeval"
引数で指定します。
送信操作が指定された時間以上ブロックされた場合、部分的なカウントで戻るか、
またはデータが送信されていない場合はエラー
.Er EWOULDBLOCK
で戻ります。
現在の実装では、このタイマは追加の各データがプロトコルに
配信されるたびに再起動され、これはサイズが出力用の最低基準値から
最高基準値の範囲に至る出力部分に適用されることを意味します。
.Dv SO_RCVTIMEO
は入力操作についてタイムアウト値を設定するオプションです。
これは入力操作完了の待機を制限するために使用される秒数、マイクロ秒数を
.Vt "struct timeval"
引数で指定します。
現在の実装では、このタイマは追加のデータがプロトコルによって
受信されるたびに再起動されるので、
制限は実際には休止期間のタイマとなります。
追加のデータを受信することなく受信操作がこれだけの時間について
ブロックされた場合、短いカウントで戻るか、
またはデータが受信されていない場合はエラー
.Er EWOULDBLOCK
で戻ります。
.Pp
.Dv SO_ACCEPTFILTER
は、ソケット上に
.Xr accept_filter 9
を置きます。
これにより、待ち受けしているストリームソケットに入ってくる接続が
.Xr accept 2
に渡される前にフィルタされることになります。
念のため繰り返します。
フィルタをソケット上にインストールする前に、ソケットに対して
.Xr listen 2
呼び出す必要があります。
そうしないと
.Fn setsockopt
システムコールが失敗します。
.Bd -literal
struct  accept_filter_arg {
        char    af_name[16];
        char    af_arg[256-16];
};
.Ed
.Pp
.Fa optval
引数は
.Fa struct accept_filter_arg
を指さなくてはなりません。
この構造体が
.Xr accept_filter 9
を選択、設定します。
.Fa af_name
引数は、アプリケーションが待ち受けソケット上に置きたいと思っている
accept フィルタの名前で埋めなくてはなりません。
オプションの引数
.Fa af_arg
は、
.Fa af_name
で指定された accept フィルタに渡すことができるものです。
これにより、ソケットに置かれる時にさらなる設定オプションを
提供します。
NULL を
.Fa optval
中で渡すと、フィルタが削除されます。
.Pp
最後に、
.Dv SO_TYPE
と
.Dv SO_ERROR
は
.Fn getsockopt
でだけ使用されるオプションです。
.Dv SO_TYPE
では
.Dv SOCK_STREAM
のようなソケットのタイプが返ります。
これはスタートアップ時にソケットを継承するようなサーバに便利です。
.Dv SO_ERROR
はソケット上で延期中のエラーを返し、エラー状態をクリアします。
これは接続されたデータグラムソケット上の非同期的エラーをチェックしたり、
その他の非同期エラーをチェックするのに使用できます。
.Sh 戻り値
.Rv -std
.Sh エラー
呼び出しは次の場合を除いて正常です:
.Bl -tag -width Er
.It Bq Er EBADF
引数
.Fa s
が有効な記述子ではありません。
.It Bq Er ENOTSOCK
引数
.Fa s
がソケットではなくファイルです。
.It Bq Er ENOPROTOOPT
指示されたレベルでオプションは存在しません。
.It Bq Er EFAULT
.Fa optval
が指すアドレスがプロセスアドレス空間の有効な部分にありません。
.Fn getsockopt
では、
.Fa optlen
がプロセスアドレス空間の有効な部分でない場合も、
このエラーが返される可能性があります。
.It Bq Er EINVAL
待ち受けていないソケットに対して
.Xr accept_filter 9
のインストールを試みました。
.El
.Sh 関連項目
.Xr ioctl 2 ,
.Xr socket 2 ,
.Xr getprotoent 3 ,
.Xr sysctl 3 ,
.Xr protocols 5 ,
.Xr sysctl 8 ,
.Xr accept_filter 9
.Sh バグ
ソケットオプションのいくつかはシステムの低いレベルで処理される必要があります。
.Sh 歴史
.Fn getsockopt
システムコールは
.Bx 4.2
ではじめて登場しました。
