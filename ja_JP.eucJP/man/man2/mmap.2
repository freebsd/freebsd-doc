.\" Copyright (c) 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"	@(#)mmap.2	8.4 (Berkeley) 5/11/95
.\" %FreeBSD: src/lib/libc/sys/mmap.2,v 1.50 2004/07/02 23:52:13 ru Exp %
.\"
.\" $FreeBSD$
.Dd November 17, 2001
.Dt MMAP 2
.Os
.Sh 名称
.Nm mmap
.Nd メモリの割り当て、またはファイルまたはデバイスのメモリへのマップ
.Sh ライブラリ
.Lb libc
.Sh 書式
.In sys/mman.h
.Ft void *
.Fn mmap "void *addr" "size_t len" "int prot" "int flags" "int fd" "off_t offset"
.Sh 解説
.Fn mmap
システムコールは、
.Fa addr
を始点として最大で
.Fa len
バイトの連続するページに、
.Fa fd
によって記述されるオブジェクトのバイトオフセット
.Fa offset
の位置から始まる部分をマップされるようにします。
.Fa len
がページサイズの倍数でない場合、
マップされた領域は指定の範囲を越えて拡張されるかもしれません。
このような拡張によってマップされたオブジェクトの末端を越えた部分は
0 で埋められます。
.Pp
.Fa addr
が 0 でない場合、これはシステムへのヒントとして使用されます
(システムの便宜のために、領域の実際のアドレスは
指定されたアドレスとは違う可能性があります)。
.Fa addr
が 0 の場合、アドレスはシステムによって選択されます。
領域の実際の開始アドレスが返されます。
.Fa mmap
が処理に成功すると、確保されたアドレス範囲の以前のマッピングは
削除されます。
.Pp
保護 (領域へのアクセス許可) は
.Fa prot
引数で、以下の値の論理和
.\".Em or Ns 'ing
.Em ( or )
を取った値で指定します:
.Pp
.Bl -tag -width PROT_WRITE -compact
.It Dv PROT_NONE
ページはアクセスできません。
.It Dv PROT_READ
ページは読取りできます。
.It Dv PROT_WRITE
ページは書込みできます。
.It Dv PROT_EXEC
ページは実行可能です。
.El
.Pp
.Fa flags
引数は、マップされたオブジェクトのタイプ、マッピングオプション、
およびマップされたページのコピーに対して行われた修正が、プロセスに
固有であるかまたは他からの参照と共有されるかを指定します。
共有、マッピングタイプ、およびオプションは、以下の値の論理和
.\".Em or Ns 'ing
.Em ( or )
を取った値で
.Fa flags
引数に指定します:
.Bl -tag -width MAP_HASSEMAPHORE
.It Dv MAP_ANON
どの特定のファイルとも対応していない匿名メモリをマップします。
.Dv MAP_ANON
を作成するのに使用されるファイル記述子は \-1 である必要があります。
.Fa offset
引数は無視されます。
.\".It Dv MAP_FILE
.\"Mapped from a regular file or character-special device memory.
.It Dv MAP_FIXED
システムが、指定されたアドレスと異なるアドレスを選択することを許容しません。
指定されたアドレスが使用できない場合、
.Fn mmap
は処理に失敗します。
.Dv MAP_FIXED
が指定されている場合、
.Fa addr
はページサイズの倍数である必要があります。
このオプションの使用はお勧めできません。
.It Dv MAP_HASSEMAPHORE
領域にセマフォが含まれている可能性があること、特殊な処理が必要な可能性が
あることをカーネルに通知します。
.It Dv MAP_INHERIT
このフラグは正式に公表されたものとして扱われたことはなく、
もはやサポートされていません。
さらなる情報は
.Xr minherit 2
を参照してください。
.It Dv MAP_NOCORE
領域はコアファイルに含まれません。
.It Dv MAP_NOSYNC
はこの VM マップを経由して汚されたデータを、無闇にではなく
(通常はページャによって) 必要な時のみ物理的なメディアに
フラッシュするようにします。
普通、このオプションにより、更新デーモンはこのマップで
汚されたページをフラッシュしないようになります。
これにより、ファイルバックアップされた共有メモリのマッピングを使用して
無関係なプロセスの間でメモリアクセスを効率的に共有することが
できるようになります。
このオプションがないと、汚された VM ページは頻繁 (通常 30-60 秒毎) に
ディスクにフラッシュされるかも知れず、そのような動作を必要としない場合
(例えば IPC のためにファイルを用いた共有 mmap 領域を用いている場合)
パフォーマンスに問題が出ることがあります。
.Dv MAP_NOSYNC
を使っているかにかかわらず、
VM/ ファイルシステムの一貫性は保たれることに注意してください。
このオプションは
.Ux
プラットフォーム間で (まだ) 移植性はありませんが、
いくつかのプラットフォームではデフォルトで同じ動作をするように
実装されているかも知れません。
.Pp
.Em 警告 !
.Xr ftruncate 2
を使いファイルを拡張してから、つまりファイルに大きな穴を空けてから、
その穴を共有
.Fn mmap
を修正して埋める場合、深刻なファイル断片化が生じる可能性があります。
この断片化を避けるために、
.Fn mmap
でその領域を修正する前に、新規に拡張した領域に 0 を
.Fn write
して、ファイルのバッキングストアを事前に割り当てておく必要があります。
ディスクへのフラッシュが全くランダムに生じるため、
断片化問題に特に敏感なのは、
.Dv MAP_NOSYNC
ページです。
.Pp
同じことが、
.Dv MAP_NOSYNC
を使いファイルベースの共有メモリストアを実装する場合にも言えます。
.Fn ftruncate
してバッキングストアを作るのではなく、0 を
.Fn write
してバッキングストアを作ることを推奨します。
たとえば、
.Dq Li dd if=filename of=/dev/null bs=32k
を使うなどして巨大なファイルをシーケンシャルに読み取りながら、
.Dq Li iostat 1
を呼び出すことで得られる KB/t (転送 1 回あたりのキロバイト数) を
観察することでファイル断片化のテストが可能です。
.Pp
.Xr fsync 2
システムコールはすべての汚染されたデータとファイルに関連づけられたメタデータ
(NOSYNC の汚れた VM データを含む) を物理的媒体にフラッシュします。
.Xr sync 8
コマンドと
.Xr sync 2
システムコールは、汚染された NOSYNC VM のデータを通常フラッシュしません。
.Xr msync 2
システムコールは
.Bx
で整合性のあるファイルシステムのバッファキャッシュが実装されたので
廃止されました。
しかしながら、汚れた VM ページとファイルシステムを結びつけ、
物理的媒体にすぐに (後程ではなく) フラッシュさせる用途に
使われることもあります。
.It Dv MAP_PRIVATE
修正はプロセス固有に行われます。
.It Dv MAP_SHARED
修正は共有されます。
.It Dv MAP_STACK
.Dv MAP_STACK
は
.Dv MAP_ANON
および 0 の
.Fa offset
指定を含みます。
.Fa fd
引数は -1 でなければならず、
.Fa prot
には少なくとも
.Dv PROT_READ
と
.Dv PROT_WRITE
が入っている必要があります。
このオプションは、スタックの先頭を開始点とし下方に伸びる、サイズが最大で
.Fa len
バイトまで伸びるメモリ領域を作成します。
スタックの先頭は、呼び出しから返された開始アドレスに
.Fa len
バイトを加えたものになります。
最も伸びた場合のスタックの下端は、
呼び出しによって返される開始アドレスになります。
.El
.Pp
.Xr close 2
システムコールはページをアンマップしません。
詳細については
.Xr munmap 2
を参照してください。
.Pp
現在の設計ではプロセスはスワップ空間の位置を指定できません。
将来は、追加のマッピングタイプ
.Dv MAP_SWAP
を定義するかもしれません。
この場合、ファイル記述子引数には
スワップを行うべきファイルまたはデバイスを指定します。
.Sh 戻り値
正常に完了すると、
.Fn mmap
は、マップされた領域を指すポインタを返します。
そうでない場合は
値
.Dv MAP_FAILED
が返され、エラーを示すために
.Va errno
が設定されます。
.Sh エラー
.Fn mmap
システムコールは次の場合に失敗します:
.Bl -tag -width Er
.It Bq Er EACCES
フラグ
.Dv PROT_READ
が
.Fa prot
引数の一部として指定されましたが、
.Fa fd
が読取り用に開かれていませんでした。
フラグ
.Dv MAP_SHARED
と
.Dv PROT_WRITE
が
.Fa flags
と
.Fa prot
引数の一部として指定されましたが、
.Fa fd
は書込み用に開かれていませんでした。
.It Bq Er EBADF
.Fa fd
引数が有効な開かれたファイルの記述子ではありません。
.It Bq Er EINVAL
.Dv MAP_FIXED
が指定されて
.Fa addr
引数がページ境界に整列されていないか、または指定の
アドレスの一部がユーザプロセスの有効なアドレス空間の外になります。
.It Bq Er EINVAL
.Fa len
引数が負でした。
.It Bq Er EINVAL
.Dv MAP_ANON
が指定されて
.Fa fd
引数が -1 ではありませんでした。
.It Bq Er EINVAL
.Dv MAP_ANON
が指定されておらず、
.Fa fd
が通常のファイルまたはキャラクタ型特殊ファイルを参照していませんでした。
.It Bq Er EINVAL
.Fa offset
引数がページ境界に整列していませんでした (後述する「
.Sx バグ
の章」を参照)。
.It Bq Er ENOMEM
.Dv MAP_FIXED
が指定されていますが、
.Fa addr
引数が与えられていません。
.Dv MAP_ANON
が指定されて利用できるメモリが不充分でした。
sysctl 値
.Va vm.nax_proc_mmap
で指定されたプロセス毎の mmap 限界に達しました。
.El
.Sh 関連項目
.Xr madvise 2 ,
.Xr mincore 2 ,
.Xr minherit 2 ,
.Xr mlock 2 ,
.Xr mprotect 2 ,
.Xr msync 2 ,
.Xr munlock 2 ,
.Xr munmap 2 ,
.Xr getpagesize 3 ,
.Xr make.conf 5
.Sh バグ
.Fa len
引数は 2GB に限定されます。
2GB をわずかに上回るマッピングは機能しませんが、
2GB, 4GB, 6GB および 8GB よりわずかに少ないファイルサイズについて
(ファイルサイズ % 2GB) のサイズのウィンドウをマップできます。
.Pp
制約は多彩な理由から生じています。
そのほとんどは、パフォーマンス上の著しいペナルティのため、
.Fx
では VM システム内で 64 ビットのオフセットを使用したくないことと
関係しています。
したがって
.Fx
は 32 ビットのページインデックスを使用しており、これによって
.Fx
では最高で 8TB までのファイルサイズを利用できます。
実際にはさらに制約が課されて使用可能サイズは 1TB までですが、
これは、ファイルシステムコード内のバグによるものです
(ブロック番号計算を行っているときの桁落ち)。
.Pp
2GB 制限のもうひとつの理由は、ファイルシステムメタデータが負のオフセットに
存在できるということです。
.Pp
0 バイトを
.Fn mmap
しようとしても何の効果もなく、単に成功します。
一方、0 バイトを
.Fn munmap
しようとすると
.Bq Er EINVAL
が返されることに注意してください。
