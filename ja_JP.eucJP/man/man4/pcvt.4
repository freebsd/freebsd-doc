.\" 
.\"  Copyright (c) 1992, 1995 Hellmuth Michaelis, Brian Dunford-Shore,
.\"                           Joerg Wunsch and Holger Veit.
.\" 
.\"  All rights reserved.
.\" 
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by Hellmuth Michaelis,
.\"	Brian Dunford-Shore, Joerg Wunsch and Holger Veit.
.\" 4. The name authors may not be used to endorse or promote products
.\"    derived from this software without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE AUTHORS ``AS IS'' AND ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
.\" OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
.\" IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT,
.\" INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
.\" NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
.\" DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
.\" THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
.\" (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
.\" THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
.\"
.\" @(#)pcvt.4, 3.20, Last Edit-Date: [Sun Apr  2 18:23:39 1995]
.\" $FreeBSD$
.\"	%Id: pcvt.4,v 1.14.2.1 1999/02/07 05:43:14 yokota Exp %
.\"
.\" Man page pcvt(4) created after pcvt_ioctl.h on 13-Jan-93
.\" by Joerg Wunsch
.\"
.\" updated for rel 2.10 (-hm)
.\" updated for rel 2.20 (-hm)
.\" updated for rel 3.00 (-jw)
.\" updated for final rel 3.00 (-hm)
.\" removed references to 386BSD (-hm)
.\"
.\" WORD: virtual screen  仮想スクリーン
.\" WORD: character set   文字集合
.Dd February 27, 1994
.Dt PCVT 4 i386
.Sh 名称
.Nm pcvt ,
.Nm vt
.Nd PC コンソール仮想スクリーンシステム
.Sh 書式
options
.Do
.Em PCVT_FREEBSD = version
|
.Em PCVT_NETBSD = version
.Dc
.br
.Op options Dq Em PCVT_NSCREENS = number
.br
.Op options Dq Em PCVT_XXXX
.Po
.Sx 設定
の項目を参照してください。
.Pc
.Pp
.Cd "device vt0 at isa? tty"
.Sh 説明
.Ss 概要
.Nm pcvt
ドライバは、伝統的なコンソールドライバには無いいくつかの
機能を持った仮想スクリーンシステムを提供します。
複数の仮想スクリーンを扱えるほか、おそらく最も重要なものは
広範囲にわたる
DEC VT-220
.if t \(tm
.if n (TM)
エミュレーションです。詳細は
.Sx 特徴
の項目を参照してください。
.Pp
.Nm pcvt
ドライバを使用するには
.Nm atkbd
キーボードドライバがカーネルで設定されていることが必要です。
.Ss 特徴
.Bl -bullet
.It
ほぼ完全な DEC VT220
.if t \(tm
.if n (TM)
の機能
.Po
VT320
.if t \(tm
.if n (TM)
へ移行中
.Pc
。
.It
MDA/HGC/CGA/EGA および VGA のための完全に独立な仮想端末。
.It
それぞれの仮想スクリーンに対する 25, 28, 35, 40, 43 あるいは 50x80
のスクリーン解像度。
.It
各国のキーボードをサポートするための、完全に再マップ可能なキーボード。
.It
すべての VT220 文字集合に加え、ISO Latin-1 と DEC technical をサポート。
.It
EGA/VGA 使用時における VT220 のダウンロード可能な文字集合の利用。
.It
それぞれの仮想端末に対する VT220 ユーザ定義キー。
.It
Hewlett-Packard のオプショナルなファンクションキーラベルのサポート。
.It
ファンクションコードの表示機能。
.It
MDA, CGA, EGA および VGA ディスプレイアダプタのサポート。
.It
VGA チップセットにおける 132 カラムのサポート。
.It
XFree86 バージョン 1.2 以上では pccons モデル、2.0 以上では syscons
モデルを用いた X ウィンドウシステムのサポート
.Po
.Em PCVT_USL_VT_COMPAT
が設定されていることが必要です
.Pc
。
.El

できないこと:
.Bl -bullet
.It
2 倍角文字は扱えません。
.It
softscroll はありません。
.It
背景の反転はできません。
.It
VT220 のプリンタ出力はサポートしません。
.It
VT52 の機能のサポートは全くありません。
.It
8 ビットコントロールは使えません。
.It
AT キーボード
.Pq 84 キー
に対しては、
.Pq 未だに
限定されたサポートしかありません。
.It
お金を稼ぐのを助けることはできません...
.El
.Ss 設定
現在
.Nm pcvt
コンソールドライバは、 Intel ベースの
BSD オペレーティングシステムである
.Tn NetBSD/i386
(リリース 0.9 以上)
および
.Tn FreeBSD
(リリース 1.0-GAMMA 以上)
で利用できます。
システムからの適切なサポートを得るために、
.Em PCVT_NETBSD
または
.Em PCVT_FREEBSD
のうちどちらかのオプションをシステムの設定ファイルで
指定しなければなりません
.Pq Xr config 8 を参照してください
。
さらに
.Tn FreeBSD
および
.Tn NetBSD
では、これらのオプションにオペレーティングシステムのバージョン番号を
設定する必要があります。
.Tn FreeBSD
では、バージョン番号を 3 桁の数字で表現しなければなりません。
例えば、1.0 release
.Pq 実際にはバージョン 1.0.2
を使っているなら、

.Em PCVT_FREEBSD = 102

のように定義しなければなりません。

.Em NetBSD
では、NetBSD 0.9 の場合、このバージョン番号は 9 と表現されなければならず、
NetBSD-current (1.0 以前) の場合は 9 より大きい任意の値になります。
NetBSD 1.0の場合は (
.Tn FreeBSD
と同様に)
100 を、NetBSD-current では 999 を使うことが推奨されます。
例えば
.Nx 1.0
release の場合、

.Em PCVT_NETBSD = 100

と定義すべきです。

.Nm pcvt
ドライバは、すべての人の要求を満足させるため、高度に設定可能であるように
設計されてきました。望ましい設定方法は、おそらくデフォルト値を
上書きするような形で、設定ファイルに適切な
.Em options
行を書き込むことです。こうすることで、それぞれ異なる振る舞いをする
ドライバを持つ別個のカーネルを 1 台のマシン上で
コンパイルすることが可能です。

利用可能な設定オプションの通覧を次のリストに示します。
詳細はカーネルソースツリーの
.Pa i386/isa/pcvt/pcvt_hdr.h
を参照してください。

ノート: すべてのブール値オプションについて、次のような約束をします。
もしあるオプションが値なしで与えられた場合、1 という値
.Pq 有効
になります。
オプション値として 0 が与えられた場合、そのオプションは
無効になります。それ以外の値では 1 になります。
オプションが省略された場合、デフォルトの動作が仮定されます。

.Bl -tag -width indent -compact

.It Em PCVT_NSCREENS
仮想スクリーンの数を定義します。
.br
デフォルト: 8

.It Em PCVT_VT220KEYB
有効にすると、DEC VT200 (TM) に似たキーボードレイアウトが生成されます。
無効状態では、VT220 と HP の混成が使われます。完全な説明は、
.Nm pcvt
のドキュメントディレクトリにある
.Pa Keyboard.VT
および
.Pa Keyboard.HP
というファイルを参照してください。
.br
デフォルト: オフ

.It Em PCVT_SCREENSAVER
内蔵スクリーンセーバの機能を有効にします。
.br
デフォルト: オン

.It Em PCVT_PRETTYSCRNS
有効状態では、星が点滅するスクリーンセーバが使われます。
無効にすると、スクリーンは単純に暗転します
.Pq これは省電力モニタに対して有用でしょう
。
.br
デフォルト: オン

.It Em PCVT_CTRL_ALT_DEL
有効にすると、
.Aq Em Ctrl
.Aq Em Alt
.Aq Em Del
というキーの組合わせで CPU をリセットします。
.br
デフォルト: オフ

.It Em PCVT_USEKBDSEC
キーボードに対するセキュリティロックをオーバライドしません。
.br
デフォルト: オン

.It Em PCVT_24LINESDEF
有効にすると、オリジナルの DEC VT220 (TM) に対して互換性を
高める目的のためだけに、デフォルトの 25 行モードから 24 行モードにします。
.Po
VT エミュレーションは 25 行で、HP エミュレーションは 28 行です
.Pc
したがって、特に変更をしなくても、それらの端末のための端末情報を利用する
ことができるでしょう。これはスタートアップオプションであることに
注意してください。
.Xr scon 1
ユーティリティで 24 行モードと 25 行モードを
切り替えることができます。
.br
デフォルト: オフ

.It Em PCVT_EMU_MOUSE
キーパッド経由で 3 ボタンマウスをエミュレートします。
ノートブックで XFree86 を使う時に便利です。後述の
.Sx マウスエミュレーション
の項目を参照してください。
.br
デフォルト: オフ

.It Em PCVT_META_ESC
有効にすると、
.Aq Em Alt
キーと共に押されたキーは、
.Aq Em esc
により構成されるシーケンスの後に、通常のキーコードを生成します。
無効状態では、通常のキーコードに
.Em 0x80
を加算したものが送られます。
.br
デフォルト: オフ

.El

主にデバッグやハードウェアの問題に対処するために、さらにオプションが
用意されています。
.Pa i386/isa/pcvt/pcvt_hdr.h
に説明があります。

.Ss 内部機能
.Nm pcvt
ドライバに関連するデバイスノード上のオープンファイル記述子をともなって
.Xr ioctl 2
システムコールを呼ぶことで、
以下に述べるような機能にアクセスすることができます。
それらを利用するためには、プログラムは次の行を含む必要があります:

.Dl #include <machine/pcvt_ioctl.h>

以下に引用されたパラメータの定義は、このファイルの中に
見つけることができるでしょう。


.Em キーボードに関連する機能

基本的なキーボードのハードウェアに関係する機能が 3 つあります。

.Bl -tag -width 20n -offset indent -compact
.It KBDRESET
キーボードをリセットし、デフォルト値を設定します。
.It KBDGTPMAT
現在のキーリピートに関する値を取得します。パラメータは
値を格納する int 型変数へのポインタです。
.It KBDSTPMAT
現在のキーリピートに関する値を設定します。
パラメータは上のコマンドと同様です。
.El

適切な定数を表すシンボル値が利用できます。
キーリピート遅延時間の初期値を指定するのは、
250 ミリ秒を表す KBD_TPD250 から、1000 ミリ秒を表す KBD_TPD1000 までの
250 ミリ秒刻みの値です。
キーリピート速度は、
毎秒 30.0 文字を表す KBD_TPM300 から、
毎秒 2.0 文字を表す KBD_TPM20 までの値があります。
中間値は、毎秒 30.0, 26.7, 24.0, 21.8, 20.0, 18.5,
17.1, 16.0, 15.0, 13.3, 12.0, 10.9, 10.0, 9.2, 8.6, 8.0,
7.5, 6.7, 6.0, 5.5, 5.0, 4.6, 4.3, 4.0, 3.7, 3.3, 3.0, 2.7,
2.5, 2.3, 2.1, 2.0 文字が指定できます。

.Bl -tag -width 20n -offset indent -compact
.It KBDGREPSW
キーリピートスイッチの値を取得します。
.It KBDSREPSW
キーリピートスイッチの値を設定します。
.El

これらも値を格納する int 型変数へのポインタをパラメータとして
受け取り、ドライバ内部のキーリピートフラグを操作します。
可能な値は KBD_REPEATOFF あるいは KBD_REPEATON です。 

.Bl -tag -width 20n -offset indent -compact
.It KBDGLEDS
LED の状態を取得します。
.It KBDSLEDS
LED の状態を設定し、キーボードのインジケータを操作します。
ただし、ドライバが保持するキーのロック状態には影響しません。
.El

引数であるポインタの指す int 型変数は
KBD_SCROLLLOCK, KBD_NUMLOCK, KBD_CAPSLOCK
という値をとり、これらは論理和の組み合わせの形で使われるでしょう。

.Bl -tag -width 20n -offset indent -compact
.It KBDGLOCK
SCROLL,NUM,CAPS の状態を取得します。
.It KBDSLOCK
SCROLL,NUM,CAPS および LED の状態を設定します。
.El

これらも、ドライバが持つ LED フラグの状態を
設定したり取得したりするのと同じ方法で使われるべきです。

.Em キーボードの再マップ

.Nm pcvt
ドライバの重要な機能の一つとして、
内蔵のキー定義を再定義できる機能があります。

.Bl -tag -width 20n -offset indent -compact
.It KBDGCKEY
現在のキーの値を取得します。
.It KBDSCKEY
新しいキー割り当て値を設定します。
.It KBDGOKEY
オリジナルのキー割り当て値を取得します。
.El

これらがその機能を構成します。これらは次に述べる
.Em struct kbd_ovlkey
へのポインタを引数として受け取ります。
加えて、次のような関数があります。

.Bl -tag -width 20n -offset indent -compact
.It KBDRMKEY
キー割り当てを解除します。対象となるキー番号を保持する int 型変数への
ポインタを受け取ります。
.It KBDDEFAULT
すべてのキー割り当てを解除します。
.El
.Bd -literal
struct kbd_ovlkey                /* キーの完全な定義 */
{
    u_short keynum;                      /* キーそのもの */
    u_short type;                        /* キーのタイプ。以下を参照。 */
    u_char  subu;                        /* サブタイプ。書き込み時には無視される。 */
    char    unshift[KBDMAXOVLKEYSIZE+1]; /* 非 shift 時に生成される文字列。 */
    u_char  subs;                        /* サブタイプ。書き込み時には無視される。 */
    char    shift[KBDMAXOVLKEYSIZE+1];   /* shift 時に生成される文字列。 */
    u_char  subc;                        /* サブタイプ。書き込み時には無視される。 */
    char    ctrl[KBDMAXOVLKEYSIZE+1];    /* control 時に生成される文字列。 */
    u_char  suba;                        /* サブタイプ。書き込み時には無視される。 */
    char    altgr[KBDMAXOVLKEYSIZE+1];   /* altgr 時に生成される文字列。 */
};
.Ed

.Em type
フィールドの適切な値は次の通りです。

.Bl -tag -width 20n -offset indent -compact
.It KBD_NONE
機能なし。キーは無効。
.It KBD_SHIFT
キーボードシフト。
.It KBD_META
オルタネートシフト。ASCII コードの 8 ビット目をセット。
.It KBD_NUM
数字シフト。数字キーパッドモードおよびアプリケーションモード。
.It KBD_CTL
コントロールコードの生成。
.It KBD_CAPS
CAPS シフト。大文字小文字を入れ替える。
.It KBD_ASCII
ASCII コードを生成するキー。
.It KBD_SCROLL
出力を停止する。
.It KBD_FUNC    
ファンクションキー。
.It KBD_KP
キーパッドキー。
.It KBD_BREAK
無視される。
.It KBD_ALTGR
AltGr 変換機能。
.It KBD_SHFTLOCK
シフトロック。
.It KBD_CURSOR
カーソルキー
.It KBD_RETURN
.Dq Return
あるいは
.Dq Enter
キー。
.El


.Em サブタイプ
フィールドは次のうちの どれか 1 つの値を保持します。

.Bl -tag -width 20n -offset indent -compact
.It KBD_SUBT_STR
キーは文字列に結び付けられています。
.It KBD_SUBT_FNC
キーは機能に結び付けられています。
.El

.Em マウスエミュレーション

マウスエミュレータは (もし設定されていれば) Mouse Systems
プロトコルを使って 3 ボタンマウスの振りをします。
仮想スクリーンによって使われていない、最初の
.Nm pcvt
デバイスノードがマウスデバイスです。
例えば、デフォルト値である 8 つの仮想スクリーンの場合、
.Pa /dev/ttyv0
から
.Pa /dev/ttyv7
までが仮想スクリーンを表わし、
.Pa /dev/ttyv8
がマウスエミュレータデバイスとなるでしょう。
マウスエミュレーションは
.Aq Em NumLock
キーを押すことによりオンになります。
マウスポインタは数字キーパッドにより、そのキーが示す方向へ動きます。
始めは 1 ステップずつ動き、調整可能な時間
.Pq デフォルトは 500 ミリ秒 
の後、約 6 倍まで加速します。
マウスボタンは 3 つの通常のキーにより
エミュレートされ、デフォルトではこれらは
.Aq Em \&F1 ,
.Aq Em \&F2 ,
および
.Aq Em \&F3
のファンクションキーに割り当てられています。
ここで 2 種類の動作が選択できます: 通常ボタンと、
.Dq stickey
ボタンです。
通常ボタンは、期待通りの振舞いをします。
.Dq stickey
ボタンは、最初の押下のときに、押されていることが
通知され、そのキーがもう一度押されるか、
他のボタンをエミュレートしているキーが押されるまで、
.Dq 押されたまま
の状態になっています。ボタンの押下と離しは、PC 内蔵スピーカにより、それぞれ
.Dq ピリッ
とか
.Dq ピロッ
という音でユーザに通知されます。

次のコマンドにより、エミュレーションを制御します。

.Bl -tag -width 20n -offset indent -compact
.It KBDMOUSEGET
現在の定義を取得します。
.It KBDMOUSESET
新しい定義を設定します。
.El

どちらも
.Li mousedefs
構造体へのポインタを ioctl 呼び出し時の 3 番目の引数として受け取ります:

.Bd -literal
struct mousedefs {
    int leftbutton;    /* "左ボタン" のキーに対応する (PC) スキャンコード */
    int middlebutton;  /* "中ボタン" のキーに対応する (PC) スキャンコード */
    int rightbutton;   /* "右ボタン" のキーに対応する (PC) スキャンコード */
    int stickybuttons; /* 真ならば "sticky" である。 */
    int acceltime;     /* マウスポインタが加速し始めるまでのマイクロ秒単位の時間 */
    /* デフォルト値: scan(F1), scan(F2), scan(F3), 偽, 500000     */
};
.Ed


.Em ダウンロード可能な文字集合のインタフェース

EGA および VGA ビデオアダプタは、ダウンロード可能なソフトウェアフォントを
扱うことができます。どの IBM 互換 PC ビデオボードの
.Sq ネイティブな文字集合
も、DEC 多国籍文字集合や ISO Latin-1
.Pq ISO 8859-1
の完全な表現は不可能なので、これは U**X 環境にとって有用です。

.Bl -tag -width 20n -offset indent -compact
.It VGASETFONTATTR
フォント属性を設定します。
.It VGAGETFONTATTR
フォント属性を取得します。
.El

これらはダウンロードフォントに関する情報を扱います。
.Em struct vgafontattr
へのポインタを引数としてとります:

.Bd -literal
struct vgafontattr {
    int character_set;          /* VGA 文字集合 */
    int font_loaded;            /* フォントがロードされているかされていないかのマーク */
    int screen_size;            /* スクリーン当たりの行数 */
    int character_scanlines;    /* 文字当たりのスキャンライン数 - 1 */
    int screen_scanlines;       /* スクリーン当たりのスキャンライン数 - 1 バイト */
};
.Ed

それぞれのフォントのそれぞれの文字は、次の関数によりダウンロードされます。

.Bl -tag -width 20n -offset indent -compact
.It VGALOADCHAR
vga 文字をロードする。
.El

.Em struct vgaloadchar
へのポインタを引数としてとります:

.Bd -literal
struct vgaloadchar {
    int character_set;       /* ロードする VGA 文字集合 */
    int character;           /* ロードする文字 */
    int character_scanlines; /* 文字のスキャンライン数 */
    u_char char_table[32];   /* VGA 文字の形のテーブル */
};
.Ed

EGA あるいは VGA において、
.Em character_set
フィールドは CH_SET0, CH_SET1, CH_SET2, CH_SET3 という値を
とります。VGA では、最大 8 つのフォントをロードして持つことが
できますので、CH_SET4, CH_SET5, CH_SET6, CH_SET7 という値も
とることができます。

フォントサイズと、表示可能なスクリーンの
.Pq 行単位の
高さの関係は、使われるビデオカードに依存することに注意してください:

.Bd -literal
スクリーンの大きさ (行の数)   EGA             VGA
フォントサイズ

8 x 8                         43              50
8 x 10                        35              40
8 x 14                        25              28
8 x 16                        利用不可        25
                               
.Ed


.Em 一般的なスクリーン操作コマンド

.Bl -tag -width 20n -offset indent -compact
.It VGACURSOR
カーソルの形を設定します。
.El

以下の構造体へのポインタを引数としてとります:
.Bd -literal
struct cursorshape {
    int screen_no; /* 設定するスクリーン番号。                          */
                   /* -1 は現在のアクティブなスクリーン。               */
    int start;     /* トップスキャンライン。0 から 文字の高さ -1 の範囲 */
    int end;       /* エンドスキャンライン。0 から 文字の高さ -1 の範囲 */
};
.Ed

.Bl -tag -width 20n -offset indent -compact
.It VGASETSCREEN
スクリーンの情報を設定します。
.It VGAGETSCREEN
スクリーンの情報を取得します。
.El

これらは、いくつかの一般的なドライバ内部変数へのインタフェースを提供します。
それらの内部変数は、スクリーンの振舞いを変更したり、
単にドライバをある一つのスクリーンへ強制的に切り替えたりするものです。
以下の構造体へのポインタを引数としてとります:

.Bd -literal
struct screeninfo {
    int adaptor_type;   /* インストールされているビデオアダプタの */
                        /* タイプ。                               */
                        /* 読み取り専用。書き込み時は (未だ!) 無  */
                        /* 視されます。                           */
    int totalfonts;     /* ダウンロード可能なフォントの数。       */
                        /* 読み取り専用。書き込み時は無視されま   */
                        /* す。                                   */
    int totalscreens;   /* 仮想スクリーンの数。                   */
                        /* 読み取り専用。書き込み時は無視されま   */
                        /* す。                                   */
    int screen_no;      /* 構造体の情報を取得したスクリーン番号。 */
                        /* 書き込み時に -1 ならば pure_vt_mode    */
                        /* または/かつ  screen_size を現在のスク  */
                        /* リーンに適用し、それ以外ならば与えられ */
                        /* た screen_no のスクリーンに適用します。*/
    int current_screen; /* 現在表示されているスクリーン番号。     */
                        /* 書き込み時に -1 ならば現在表示されてい */
                        /* るスクリーンをカレントスクリーンとし、 */
                        /* それ以外なら現在表示されているスクリー */
                        /* ンをパラメータのスクリーンに切り替えま */
                        /* す。                                   */
    int pure_vt_mode;   /* 純粋な VT モードか HP/VT モードかを表  */
                        /* すフラグ。                             */
                        /* 書き込み時に -1 ならば変更しません。   */
    int screen_size;    /* スクリーンサイズ。                     */
                        /* 書き込み時に -1 ならば変更しません。   */
    int force_24lines;  /* 純粋な VT220 のスクリーンサイズを得る  */
                        /* ために 25 ライン VT モードか、         */
                        /* 28 ライン HP モードの場合に 24 ライン  */
                        /* を強制します。                         */
                        /* 書き込み時に -1 ならば変更ません。     */
    int vga_family;     /* adaptor_type が VGA ならば、読み取り後 */
                        /* チップセットファミリを反映しています。 */
                        /* 書き込み時には何も起こりません...      */
    int vga_type;       /* adaptor_type が VGA ならば、読み取り後 */
                        /* チップセットを反映しています。         */
                        /* 書き込み時には何も起こりません...      */
    int vga_132;        /* ドライバが 132 カラムをサポートしてい  */
                        /* る場合、1 が設定されます。             */
                        /* 現在、書き込み時には無視されます。     */
};
.Ed

.Em pure_vt_mode
フィールドは、ファンクションキーラベルとステータスラインを伴う
VTxxx と HP Mode の混成に対しては M_HPVT という値を取り、
ラベルを伴わない VTxxx シーケンスのみが認識されるものに対しては
M_PUREVT を取ります。

.Bl -tag -width 20n -offset indent -compact
.It VGASETCOLMS
現在のスクリーンに対してカラムの数を設定します。
.El

これのパラメータは、80 あるいは 132 のどちらかの値を保持する
int 型変数へのポインタです。
カラム数 132 がサポートされるのは VGA アダプタ使用時のみです。
サポートされないカラム数では ioctl は失敗し、
.Em errno
.Pq Xr intro 2 を参照
に
.Em EINVAL
が設定されます。

.Em VGA カラーパレットインタフェース

VGA アダプタにおいてのみ、出力にカラーパレットレジスタが存在します。
256 種類の内部カラーコードのそれぞれに対する 赤、緑、青の出力電圧を
保持し、0 から 63 までの値を取ります (63 はベースカラーについて
もっとも明くなる値です)。
すなわち、これらのアダプタはそれぞれのカラーコードを、
262144 色の中から取り出した
.Dq パレット
の色へマップします。

.Bl -tag -width 20n -offset indent -compact
.It VGAREADPEL
VGA パレットエントリを読み取ります。
.It VGAWRITEPEL
VGA パレットエントリに書き込みます。
.El

これらのコマンドは、パレットレジスタに対するインタフェースを
確立します。引数は以下の構造体へのポインタです:

.Bd -literal
struct vgapel {
    unsigned idx;      /* パレットへのインデックス。0 から 255 が有効。 */
    unsigned r, g, b;  /* RGB の値。VGA_PMASK (63) でマスクされる。   */
};
.Ed


.Em ドライバの判別

.Bl -tag -width 20n -offset indent -compact
.It VGAPCVTID
現在ドライバの中にコンパイルされているのが pcvt であるかどうかの
情報と、そのメジャーリビジョンおよびマイナリビジョン番号を
返します。引数として以下の構造体へのポインタをとります:
.El

.Bd -literal
struct pcvtid {
#define PCVTIDNAMELN  16        /* ドライバ ID - 文字列の長さ  */
    char name[PCVTIDNAMELN];    /* ドライバの名前 == PCVTIDSTR */
#define PCVTIDNAME    "pcvt"    /* ドライバ ID - 文字列        */
    int rmajor;	                /* メジャーリビジョン番号      */
#define PCVTIDMAJOR   3
    int rminor;                 /* マイナリビジョン番号      */
#define PCVTIDMINOR   00	
};
.Ed


.Bl -tag -width 20n -offset indent -compact
.It VGAPCVTINFO
現在ドライバの中にコンパイルされているのが pcvt であるかどうかの
情報と、そのコンパイル時オプションを返します。
引数として以下の構造体へのポインタをとります:
.El

.Bd -literal
struct pcvtinfo {
    u_int opsys;            /* PCVT_xxx(x)BSD */
#define CONF_UNKNOWNOPSYS	0
#define CONF_386BSD     1   /* サポートされていません !!! */
#define CONF_NETBSD     2
#define CONF_FREEBSD    3
    u_int opsysrel;         /* NetBSD/FreeBSD に対するリリース */
    u_int nscreens;         /* PCVT_NSCREENS */
    u_int scanset;          /* PCVT_SCANSET */
    u_int updatefast;       /* PCVT_UPDATEFAST */
    u_int updateslow;       /* PCVT_UPDATESLOW */
    u_int sysbeepf;         /* PCVT_SYSBEEPF */
    u_int pcburst;          /* PCVT_PCBURST */
    u_int kbd_fifo_sz;      /* PCVT_KBD_FIFO_SZ */

/* 設定ブール値 */

    u_long compile_opts;		/* PCVT_xxxxxxxxxxxxxxx */
};
.Ed


.Em スクリーンセーバ

.Nm pcvt
の設定によっては、シンプルなスクリーンセーバが利用できるかもしれません。
これは次のコマンドにより制御します。

.Bl -tag -width 20n -offset indent -compact
.It VGASCREENSAVER
スクリーンセーバのタイムアウトを秒単位で設定します。
0 はスクリーンセーバをオフにします。
.El

これは整数へのポインタを引数としてとります。コマンドの名前とは関係なく、
.Xr config 8
の
.Dq PCVT_SCREENSAVER
オプションにより設定されていれば、
.Em どのような
種類のアダプタでも利用できます。

.Em USL スタイル VT のための互換コマンド

この
.Nm pcvt
ドライバのリリース 3.00 では、仮想端末インタフェースを制御するのに使われる
USL スタイルのコマンドのサブセットをサポートします。
この機能は、主に
.Em XFree86
のリリース 2.0 以降で、X サーバが動いている時でも
仮想スクリーンを切り替えることができるようにと意図されています。
それらは、暗黙のセマンティクスに関して醜く
.Pq つまり、Berkeley セマンティクスを破っています
、したがって一般的な利用については推奨されません。
それらのドキュメンテーションについては、
.Pa i386/include/pcvt_ioctl.h
を参照してください。

.Sh ファイル
.Bl -tag -width /usr/include/machine/pcvt_ioctl.h
.It Pa /usr/include/machine/pcvt_ioctl.h
.Xr ioctl 2
ファンクションコールのための定義。
.It Pa /dev/ttyv?
.It Pa /dev/console
.Nm pcvt
ドライバへアクセスするためのデバイスノード。
.It Pa i386/isa/pcvt/pcvt_hdr.h
.Pq カーネルソースツリーに対する相対パス
.Nm pcvt
を仕立てるための様々なコンパイル時オプションについて書かれています。
.Sh 歴史
.Nm pcvt
ドライバは 386BSD リリース 0.1 のために開発され、提供されてきました。
リリース 3.00 から、NetBSD 0.9 に対する明示的なサポートが
提供されています。リリース 3.00 以降は、pcvt において 386BSD 0.1 向けの
さらなる開発はないと予想され、実際、リリース 3.20 では
386BSD のサポートは打ち切られました。
.Sh 作者
.An Brian Dunford-Shore Aq brian@morpheus.wustl.edu
および
.br
.if n Joerg Wunsch
.if t J\(:org Wunsch
.Aq joerg_wunsch@uriah.sax.de
らの協力の下、
.br
.An Hellmuth Michaelis Aq hm@hcshh.hcs.de
によって書かれました。
.br
このドライバは数人によってなされた成果を元にしています。
特に、
.An William Jolitz'
と
.An Don Ahn's Aq ljolitz@cardio.ucsf.edu
による歴史的な
.Xr pccons 4
の実装、および
.An Holger Veit Aq veit@first.gmd.de
によるキーボードマップのコードによっています。
.Sh 関連項目
.Xr intro 2 ,
.Xr ioctl 2 ,
.Xr atkbd 4 ,
.Xr keyboard 4 ,
.Xr screen 4 ,
.Xr config 8 ,
.Xr ispcvt 8
.Sh バグ
もちろん存在します。最新のバグリストは、ドキュメントディレクトリの
.Pa BugList
ファイルを参照してください。

.Ss 検証済みのビデオボード
.Bd -literal
製造者                          チップセット            モニタ

2theMax (?)                     ET4000                  VGA Color
Video7 Inc.                     Video 7                 VGA Color
Diamond Stealth VRAM            S3                      NEC 3FGx
Trident                         TVGA 8800CS             NEC 3D
Data General                    C&T P82C604             VGA Color
NoName Hercules                 W86855AF                Mono
Kyocera (Mainboard)		WD90C11			Sony Color
unknown				ET3000			NEC 3D
.Ed

.Ss 検証済みのキーボード
.Bd -literal
製造者                          タイプ                  レイアウト

Cherry                          MF II                   US
Cherry/Tandon                   MF II                   German
Hewlett-Packard                 MF II                   US
Hewlett-Packard                 MF II                   German
Tatung                          AT                      German
.Ed

古い PC キーボードは全くサポートされておりません
.Pq それらは 83 個のキーがあります
。

F9 から F12 までは機能の制御のためにエミュレータが必要としているので、
AT キーボード
.Pq 84 個のキーとそれとは別の数字キーパッドがあり、F11 と F12 はありません
に対するサポートは制限されています。
また現在のキーボードドライバの設計のゆえに
ALtGr キーを持たない各国のキーボードに対する
.Pq 完全な
サポートはありません。

MF キーボードは、101 キーおよび 102 キーのバージョンに
ついて完全にサポートされております。
