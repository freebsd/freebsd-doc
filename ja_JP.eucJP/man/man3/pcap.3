.\" Copyright (c) 1994, 1996, 1997
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that: (1) source code distributions
.\" retain the above copyright notice and this paragraph in its entirety, (2)
.\" distributions including binary code include the above copyright notice and
.\" this paragraph in its entirety in the documentation or other materials
.\" provided with the distribution, and (3) all advertising materials mentioning
.\" features or use of this software display the following acknowledgement:
.\" ``This product includes software developed by the University of California,
.\" Lawrence Berkeley Laboratory and its contributors.'' Neither the name of
.\" the University nor the names of its contributors may be used to endorse
.\" or promote products derived from this software without specific prior
.\" written permission.
.\" THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR IMPLIED
.\" WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF
.\" MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
.\"
.\" $Id: pcap.3,v 1.3 2006-03-08 07:43:48 metal Exp $
.\"
.\" $FreeBSD$
.TH PCAP 3  "24 June 1998"
.SH 名称
pcap \- Packet Capture ライブラリ
.SH 書式
.nf
.ft B
#include <pcap.h>
.ft
.LP
.ft B
pcap_t *pcap_open_live(char *device, int snaplen,
.ti +8
int promisc, int to_ms, char *ebuf)
pcap_t *pcap_open_offline(char *fname, char *ebuf)
pcap_dumper_t *pcap_dump_open(pcap_t *p, char *fname)
.ft
.LP
.ft B
char errbuf[PCAP_ERRBUF_SIZE];
char *pcap_lookupdev(char *errbuf)
int pcap_lookupnet(char *device, bpf_u_int32 *netp,
.ti +8
bpf_u_int32 *maskp, char *errbuf)
.ft
.LP
.ft B
int pcap_dispatch(pcap_t *p, int cnt,
.ti +8
pcap_handler callback, u_char *user)
int pcap_loop(pcap_t *p, int cnt,
.ti +8
pcap_handler callback, u_char *user)
void pcap_dump(u_char *user, struct pcap_pkthdr *h,
.ti +8
u_char *sp)
.ft
.LP
.ft B
int pcap_compile(pcap_t *p, struct bpf_program *fp,
.ti +8
char *str, int optimize, bpf_u_int32 netmask)
int pcap_setfilter(pcap_t *p, struct bpf_program *fp)
.ft
.LP
.ft B
u_char *pcap_next(pcap_t *p, struct pcap_pkthdr *h)
.ft
.LP
.ft B
int pcap_datalink(pcap_t *p)
int pcap_snapshot(pcap_t *p)
int pcap_is_swapped(pcap_t *p)
int pcap_major_version(pcap_t *p)
int pcap_minor_version(pcap_t *p)
int pcap_stats(pcap_t *p, struct pcap_stat *ps)
FILE *pcap_file(pcap_t *p)
int pcap_fileno(pcap_t *p)
void pcap_perror(pcap_t *p, char *prefix)
char *pcap_geterr(pcap_t *p)
char *pcap_strerror(int error)
.ft
.LP
.ft B
void pcap_close(pcap_t *p)
void pcap_dump_close(pcap_dumper_t *p)
.ft
.fi
.SH 解説
Packet Capture ライブラリは、パケット獲得システムの高レベルなインタフェー
スを提供します。このメカニズムでは、ネットワークのすべてのパケットに、
その他のホスト用であってもアクセスできます。 
.SH ルーチン
.B pcap_open_live()
は、ネットワークのパケットを調べるためのパケット獲得記述子を取得するた
めに用います。 
.I device
は、開くネットワークデバイスを指定するストリングです。
.I snaplen
は、獲得する最大バイト数を指定します。
.I promisc
は、インタフェースを無差別モードにするかどうかを指定します(このパラメー
タが偽である場合でも、その他の理由でインタフェースが無差別モードになる
ことがあります)。
.I to_ms
は、読込みタイムアウトをミリ秒単位で指定します。
.I ebuf
は、エラーテキストを戻すために使用するもので、
.B pcap_open_live()
がエラーになり、
.BR NULL
が戻された場合に設定されます。
.PP
.B pcap_open_offline()
は、読込み用の「保存ファイル」を開くために呼び出します。
.I fname
は、開くファイルの名前を指定します。このファイルは、
.B tcpdump(1)
と
.B tcpslice(1)
で使用するファイルと同じフォーマットになっています。エラーテキストが戻
される場合、
.BR stdin
.I ebuf 
stdin.ebuf
のシノニムで名前「-」が使用されます。これは、
.B pcap_open_offline()
がエラーになり、
.BR NULL
が戻される場合に設定されます。
.PP
.B pcap_dump_open()
は、書込み用の「保存ファイル」を開くために呼び出します。エラーが発生し
た場合は、
.BR stdout
.B NULL
のシノニムで名前「-」が戻されます。
.I p
は、
.B pcap_open_offline()
か
.B pcap_open_live()
が戻す
.I pcap
構造体です。
.I fname
は、開くファイルの名前を指定します。
.B NULL
が戻された場合は、
.B pcap_geterr()
を使用してエラーテキストを入手できます。
.PP
.B pcap_lookupdev()
は、
.B pcap_open_live()
と
.B pcap_lookupnet()
での使用に適したネットワークデバイスのポインタを戻します。エラーが発生
した場合は
.B NULL
が戻され、
.I errbuf
に適切なエラーメッセージが入ります。
.PP
.B pcap_lookupnet()
は、ネットワークデバイス
.BR device
に関連するネットワーク番号とマスクを決めます。
.I netp
と
.I maskp
は、
.I bpf_u_int32
ポインタです。エラーが発生した場合は \-1 が戻されます。この場合は
.I errbuf
に適切な
エラーメッセージが入ります。
.PP
.B pcap_dispatch()
は、パケットの収集と処理に使用します。
.I cnt
は、戻る前に処理するパケットの最大数を指定します。
.I cnt
を \-1 にすると、1つのバッファで受け取ったすべてのパケットが処理されま
す。 
.I cnt
を 0にすると、エラーが発生するか、
.B EOF
に達するか、読込みタイムアウトになる(ライブ読込みを行ない、0以外の読込
みタイムアウトを指定している場合)までパケットが処理されます。
.I callback
は、呼び出すルーチンを指定します。このルーチンの呼び出しに使用する引数
は、 
.BR pcap_dispatch()
から渡される
.I u_char
ポインタ、
.I pcap_pkthdr
構造体のポインタ(実際のネットワークヘッダとデータの前に置かれる)、パケッ
トデータの 
.I u_char
ポインタです。戻り値は、読み込まれたパケットの数です。「保存ファイル」
で 
.B EOF
に達するとゼロが戻されます。エラーが発生した場合は \-1 が戻されます。
.B pcap_perror()
か
.BR pcap_geterr()
を使用してエラーテキストを表示してください。
.PP
.B pcap_dump()
は、
.BR pcap_dump_open()
で開いた「保存ファイル」にパケットを出力します。呼び出し引数が、
.BR pcap_dispatch()
での使用に適していることに注意してください。
.PP
.B pcap_compile()
は、ストリング
.I str
をフィルタプログラムにコンパイルします。
.I program
は、
.I bpf_program
構造体のポインタで、
.BR pcap_compile()
によって値が入力されます。
.I optimize
は、作成されたコードで最適化を実行するかどうかを制御します。
.I netmask
は、ローカルネットのネットマスクを指定します。
.PP
.B pcap_setfilter()
は、フィルタプログラムを指定します。
.I fp
は
.I bpf_program
構造体の配列を指すポインタで、一般的には
.BR pcap_compile()
を呼び
出した結果になっています。エラーが発生した場合は \-1 が戻され、エラー
が発生しなかった場合は 0が戻されます。
.PP
.B pcap_loop()
は、
.I cnt
パケットが処理されるかエラーが発生するまでパケットの読込みが続くことを
除いて、 
.B pcap_dispatch()
と同じです。ライブ読込みタイムアウトが発生しても戻りません。
.B pcap_open_live()
に 0以外の読込みタイムアウトを指定して
.B pcap_dispatch()
を呼び出すと、タイムアウトが発生した場合に届いたパケットの受信と処理が
できます。 
.I cnt
に負の値を指定すると、
.B pcap_loop()
は無限にループします(最低でもエラーが発生するまでループします)。
.PP
.B pcap_next()
は、次のパケットの
.I u_char
ポインタを戻します。
.PP
.B pcap_datalink()
は、
.BR DLT_EN10MB
などのリンクレイヤタイプを戻します。
.PP
.B pcap_snapshot()
は、
.B pcap_open_live
を呼び出した場合に指定されるスナップショットの長さを戻します。
.PP
.B pcap_is_swapped()
は、現在の「保存ファイル」が、現在のシステムとは異なるバイトオーダを使
用している場合に真を戻します。 
.PP
.B pcap_major_version()
は、保存ファイルの書込みに使用した pcap のメジャーバージョン番号を戻します。 
.PP
.B pcap_minor_version()
は、保存ファイルの書込みに使用した pcap のマイナバージョン番号を戻します。 
.PP
.B pcap_file()
は「保存ファイル」の名前を戻します。
.PP
.B int pcap_stats()
は 0を戻し、
.B pcap_stat
構造体にデータを入力します。値は、実行の開始から呼び出しまでのパケット
統計を表します。エラーが発生した場合、または基礎となるパケット獲得でパ
ケット統計がサポートされていない場合は \-1 が戻されます。
.B pcap_perror()
か
.B pcap_geterr()
でエラーテキストを入手してください。
.PP
.B pcap_fileno()
は、「保存ファイル」のファイル記述子番号を戻します。
.PP
.B pcap_perror()
は、最後の pcap ライブラリエラーのテキストを
.IR prefix
に続けて
.BR stderr
に出力します。
.PP
.B pcap_geterr()
は、最後の pcap ライブラリエラーに関するエラーテキストを戻します。 
.PP
.B pcap_strerror()
は、
.BR strerror(1)
が使用できない場合に使用できます。
.PP
.B pcap_close()
は、
.I p
に関連するファイルを閉じ、リソースの割り振りを解除します。
.PP
.B pcap_dump_close()
は「保存ファイル」を閉じます。
.SH 関連項目
tcpdump(1),
tcpslice(1)
.SH 作者
カリフォルニア大学バークレー校、Lawrence Berkeley National Laboratory 
の Van Jacobson、Craig Leres、Steven McCanne
.LP
現行バージョンは、以下の匿名 ftp で使用できます。
.LP
.RS
.I ftp://ftp.ee.lbl.gov/libpcap.tar.Z
.RE
.SH バグ
バグを発見した場合は、libpcap@ee.lbl.gov に報告してください。
