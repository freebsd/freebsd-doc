.\" Copyright (c) 1990, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" This code is derived from software contributed to Berkeley by
.\" Chris Torek and the American National Standards Committee X3,
.\" on Information Processing Systems.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"     @(#)printf.3	8.1 (Berkeley) 6/4/93
.\" %FreeBSD: src/lib/libc/stdio/printf.3,v 1.17.2.10 2001/12/14 18:33:57 ru Exp %
.\" $FreeBSD$
.\"
.Dd June 4, 1993
.Dt PRINTF 3
.Os
.Sh 名称
.Nm printf , fprintf , sprintf , snprintf , asprintf ,
.Nm vprintf , vfprintf, vsprintf , vsnprintf , vasprintf
.Nd 書式に変換して出力
.Sh ライブラリ
.Lb libc
.Sh 書式
.In stdio.h
.Ft int
.Fn printf "const char *format" ...
.Ft int
.Fn fprintf "FILE *stream" "const char *format" ...
.Ft int
.Fn sprintf "char *str" "const char *format" ...
.Ft int
.Fn snprintf "char *str" "size_t size" "const char *format" ...
.Ft int
.Fn asprintf "char **ret" "const char *format" ...
.In stdarg.h
.Ft int
.Fn vprintf "const char *format" "va_list ap"
.Ft int
.Fn vfprintf "FILE *stream" "const char *format" "va_list ap"
.Ft int
.Fn vsprintf "char *str" "const char *format" "va_list ap"
.Ft int
.Fn vsnprintf "char *str" "size_t size" "const char *format" "va_list ap"
.Ft int
.Fn vasprintf "char **ret" "const char *format" "va_list ap"
.Sh 解説
.Fn printf
ファミリの関数は、以下で説明する
.Fa format
に従って出力を行います。
.Fn printf
と
.Fn vprintf
は、標準出力
.Pa stdout
に出力を行います。
.Fn fprintf
と
.Fn vfprintf
は、指定された出力
.Fa stream
に出力を行います。
.Fn sprintf ,
.Fn snprintf ,
.Fn vsprintf ,
.Fn vsnprintf
は、キャラクタ文字列
.Fa str
に出力を行います。
.Fn asprintf
と
.Fn vasprintf
は、
.Xr malloc 3
で新しい文字列を動的に割り当てます。
.Pp
これらの関数は、
.Fa format
文字列による制御に従って出力を行います。
この文字列は、その後の引数
(または
.Xr stdarg 3
の可変長引数機能でアクセスできる引数)
を出力用に変換する方法を指定します。
.Pp
この関数は、出力された文字数
(文字列への出力を終了する、最後の
.Ql \e0
は含まない) を返します。
.Fn snprintf
と
.Fn vsnprintf
の場合のみ、
.Fa size
の制限が無かったとしたら
出力されたであろう文字数
(同様に文字列の最後の
.Ql \e0
は含まない) を返します。
.Pp
.Fn asprintf
と
.Fn vasprintf
は、整形された文字列を格納するのに十分な大きさのバッファを指すポインタを
.Fa *ret
に設定します。
割り当てられた領域が不要になった場合は、このポインタを
.Xr free 3
に渡して解放してください。
十分な領域を割り当てられない場合、
.Fn asprintf
と
.Fn vasprintf
は -1 を戻し、
.Fa ret
を
.Dv NULL
ポインタに設定します。
.Pp
.Fn snprintf
と
.Fn vsnprintf
は、最大で
.Fa size Ns \-1
文字だけ出力文字列に書き込みます
(
.Fa size
番目の文字は終端の
.Ql \e0
になります)。
戻り値が
.Fa size
引数以上である場合は、文字列を格納するには短かすぎたため、
出力された文字の一部が破棄されたことになります。
.Pp
.Fn sprintf
と
.Fn vsprintf
は、
.Fa size
が無限であると仮定します。
.Pp
整形文字列は、0 以上の命令から構成されています。
この命令には、出力ストリームに変更されずにコピーされる
通常文字
.Cm ( % 
以外)、および 0 以上の後続の引数を取り出す変換指定があります。
それぞれの変換指定は、
.Cm %
文字から始まります。引数は、
(型拡張の後に) 変換指示子に適切に対応する必要があります。
.Cm %
の後には、以下が順番に現れます。
.Bl -bullet
.It
後に
.Cm $
が続く 10 進数文字列から構成され、
次にアクセスする引数を指定する任意のフィールド。
このフィールドを指定しないと、最後にアクセスされた
引数に続く引数が使用されます。引数には
.Cm 1
から始まる番号が付きます。
書式指定文字列で、
アクセスできない引数がアクセスできる引数に点在する場合、
結果は不定になります。
.It
0 個以上の以下のフラグ
.Bl -hyphen
.It
値を 
.Dq 代替形式
に変換することを指定する
.Cm #
文字。
.Cm c , d , i , n , p , s ,
および
.Cm u
変換の場合、このオプションは効果を発揮しません。
.Cm o
変換の場合は、数値の精度が上がり、
出力文字列の最初の文字が 0 になります
(明確な精度の 0 で 0 が出力される場合を除く)。
.Cm x
変換と
.Cm X
変換の場合は、0 以外の結果の前に文字列
.Ql 0x
.Cm ( X
変換の場合は
.Ql 0X )
が付きます。
.Cm e , E , f , g ,
および
.Cm G
変換の場合は、小数点以下がなくても小数点が結果に常に含まれます
(通常の場合、小数点以下がある場合にかぎり、
変換結果に小数点が付きます)。
.Cm g
および
.Cm G
変換の場合は、後続の 0 が通常の場合のように結果から削除されません。
.It
.Cm 0
(ゼロ) 文字のパディングを指定する。
.Cm n
変換を除くすべての変換では、
変換値の左に空白ではなく 0 が付きます。数値変換
.Cm ( d , i , o , u , i , x ,
および
.Cm X )
で精度が指定されている場合、
.Cm 0
フラグは無視されます。
.It
負のフィールド幅を示す
.Cm \-
フラグは変換された値がフィールド境界の左で揃えられる事を示します。
.Cm n
変換以外では、変換値の左に空白か 0 が付くのではなく、
変換値の右に空白が付きます。
.Cm \-
と
.Cm \&0
を両方とも指定した場合は
.Cm \&0
が無効になります。
.It
空白。符号付き変換
.Cm ( d , e , E , f , g , G ,
および
.Cm i )
で作成される正の数値の前に空白が残ります。
.It
.Cm +
文字。符号付き変換で作成される数値の前に常に符号が付きます。
.Cm +
と空白を両方とも指定した場合は空白が無効になります。
.El
.It
任意の 10 進数文字列。最低フィールド幅を指定します。
変換値の文字数がフィールドの幅より少ない場合は、左に空白が付いて
(左揃えフラグを指定した場合は右に空白が付いて)
フィールドの幅に合わせられます。
.It
ピリオド
.Cm .\&
の次に任意の数字文字列が続く形式の精度。
数字文字列を省略した場合、精度は 0 になります。
.Cm d , i , o , u , x ,
および
.Cm X
変換では、この精度の最低桁数が出力されます。
.Cm e , E ,
および
.Cm f
変換では、小数点以下にこの精度の桁数が出力されます。
.Cm g
および
.Cm G
変換では、この精度の最大有効桁数が出力されます。
.Cm s
変換では、この精度の最大文字数が文字列から出力されます。
.It
オプション文字
.Cm h
。後の
.Cm d , i , o , u , x ,
および
.Cm X
変換が
.Vt short int
引数か
.Vt unsigned short int
引数に対応すること、または後の
.Cm n
変換が
.Vt short int
引数のポインタに対応することを指定します。
.It
オプション文字
.Cm l
(小文字の L)。後の
.Cm d , i , o , u , x ,
および
.Cm X
変換が
.Vt long int
引数か
.Vt unsigned long int
引数のポインタに適用されること、または後の
.Cm n
変換が
.Vt long int
引数のポインタに対応することを指定します。
.It
オプション文字
.Cm ll
(小文字の L が 2 つ)。後の
.Cm d , i , o , u , x ,
および
.Cm X
変換が
.Vt long long int
引数か
.Vt unsigned long long int
引数に対応すること、または後の
.Cm n
変換が
.Vt long long int
引数のポインタに対応することを指定します。
.It
オプション文字
.Cm q ,
。後の
.Cm d , i , o , u , x ,
および
.Cm X
変換が
.Vt quad int
引数か
.Vt unsigned quad int
引数に対応すること、または後の
.Cm n
変換が
.Vt quad int
引数のポインタに対応することを指定します。
.It
オプション文字
.Cm L
。後の
.Cm e , E , f , g ,
および
.Cm G
変換が
.Vt long double
引数に対応することを指定します。
.It
適用する変換の型を指定する文字。
.El
.Pp
フィールド幅か精度、またはその両方は、アスタリスク
.Ql *
、または数字文字列の代わりに 1 つ以上の 10 進数と
.Ql $
が続くアスタリスクで指定できます。この場合、
.Vt int
引数はフィールド幅か精度を提供します。
負のフィールド幅は、
正のフィールド幅が続く左揃えフラグとして扱われます。
負の精度は、欠落しているものとして扱われます。
1 つの書式命令に位置引数 (nn$)
と位置以外の引数が混在している場合、
結果は未定義になります。
.Pp
変換指示子とその意味は次のとおりです。
.Pp
.Bl -tag -width "diouxX"
.It Cm diouxX
.Vt int
引数 (または適切な可変引数) が、符号付き 10 進
.Cm ( d
と
.Cm i )
、符号なし 8 進
.Pq Cm o
、符号なし 10 進
.Pq Cm u
、符号なし 16 進
.Cm ( x
と
.Cm X )
に変換されます。
.Cm x
変換には文字
.Cm abcdef
、
.Cm X
変換には文字
.Cm ABCDEF
が使用されます。
精度は、出力する最低桁数を指定します。
変換値で少ない桁しか必要ない場合は、
左に 0 が付きます。
.It Cm DOU
.Vt long int
引数が、符号付き 10 進、符号なし 8 進、符号なし 10 進に、
それぞれの形式が
.Cm ld , lo ,
および
.Cm lu
であるかのように変換されます。
この変換文字には問題があるので、最終的には出力されません。
.It Cm eE
.Vt double
引数が丸められ、
.Oo \- Oc Ns d Ns Cm \&. Ns ddd Ns Cm e Ns \\*[Pm]dd
のスタイルに変換されます。
小数点以上は 1 桁で、小数点以下の桁数は精度と等しくなります。
精度が指定されていない場合は 6 が仮定されます。
精度が 0 である場合、小数点は出力されません。
.Cm E
変換では、文字
.Cm E
.Cm ( e
ではない) が使用されて指数が導入されます。
指数には、最低 2 桁が常に含まれます。
値が 0 である場合、指数は 00 になります。
.It Cm f
.Vt double
引数が丸められ、
.Oo \- Oc Ns ddd Ns Cm \&. Ns ddd ,
のスタイルで 10 進に変換されます。
小数点以下の桁数は、精度指定に等しくなります。
精度が指定されていない場合は 6 が仮定されます。
精度が 0 である場合、小数点は出力されません。
小数点が出力される場合は、小数点以上に最低 1 桁が出力されます。
.It Cm gG
.Vt double
引数が、スタイル
.Cm f
か
.Cm e
.Cm ( G
変換の場合は
.Cm E )
で変換されます。精度は有効桁数を指定します。
精度が指定されていない場合は 6 が仮定されます。
精度が 0 である場合は 1 として扱われます。
変換後の指数が -4 より小さいか精度以上である場合は、スタイル
.Cm e
が使用されます。
後続の 0 は、結果の小数部から削除されます。
小数点は、小数点以下に最低でも 1 桁ある場合に出力されます。
.It Cm c
.Vt int
引数が
.Vt unsigned char
に変換され、変換された文字が出力されます。
.It Cm s
.Vt char *
引数が、文字型の配列を指すポインタ
(文字列へのポインタ) とみなされます。
配列の文字は、最後のヌル文字まで出力されます
(
.Dv NULL
文字は出力されません)。
精度が指定されている場合、指定された数以上は出力されないので、
.Dv NULL
文字は必要ありません。
精度が指定されていない場合、
または精度が配列のサイズ以上である場合、
配列の最後にはヌル文字が必要です。
.It Cm p
.Vt void *
ポインタ引数が、16 進で
.Ql ( %#x
か
.Ql %#lx
でのように) 出力されます。
.It Cm n
これまでに出力された文字数が、
.Vt int *
ポインタ引数 (または可変ポインタ引数)
が指定する整数に保存されます。
引数は変換されません。
.It Cm %
.Ql %
が出力されます。変換される引数はありません。
完全な変換指定は
.Ql %%
です。
.El
.Pp
フィールド幅が存在しない場合、またはフィールド幅が小さい場合でも、
フィールドは切り捨てられません。変換結果がフィールド幅より大きい場合、
フィールドは変換結果を収容できるようになるまで拡張されます。
.Sh 例
.Fa weekday
と
.Fa month
が文字列へのポインタである場合に
.Dq Li "Sunday, July 3, 10:02"
という形式で日付と時刻を出力する場合:
.Bd -literal -offset indent
#include <stdio.h>
fprintf(stdout, "%s, %s %d, %.2d:%.2d\en",
	weekday, month, day, hour, min);
.Ed
.Pp
\*(Pi を小数第 5 位まで出力する場合:
.Bd -literal -offset indent
#include <math.h>
#include <stdio.h>
fprintf(stdout, "pi = %.5f\en", 4 * atan(1.0));
.Ed
.Pp
128 バイトの文字列を割り振り、そこに出力する場合:
.Bd -literal -offset indent
#include <stdio.h>
#include <stdlib.h>
#include <stdarg.h>
char *newfmt(const char *fmt, ...)
{
		char *p;
		va_list ap;
		if ((p = malloc(128)) == NULL)
			return (NULL);
		va_start(ap, fmt);
		(void) vsnprintf(p, 128, fmt, ap);
		va_end(ap);
		return (p);
}
.Ed
.Sh 関連項目
.Xr printf 1 ,
.Xr scanf 3
.Sh 規格
.Fn fprintf ,
.Fn printf ,
.Fn sprintf ,
.Fn vprintf ,
.Fn vfprintf ,
および
.Fn vsprintf
関数は、
.St -isoC
に適合しています。
.Sh 歴史
.Fn asprintf
関数と
.Fn vasprintf
関数は、
.Tn GNU C
ライブラリに追加されました。これは、
.Fx 2.2
で
.An Peter Wemm Aq peter@FreeBSD.org
によって実装されましたが、
.Ox 2.3
では後に
.An Todd C. Miller Aq Todd.Miller@courtesan.com
のシステムで置き換えられました。
.Sh バグ
変換形式
.Cm \&%D , \&%O ,
および
.Cm %U
は標準的ではなく、下位互換性を保つために提供されています。
.Cm %p
形式に (
.Cm 0
フラグか精度を指定することで) 0 をパディングすること、
.Cm %n
変換と
.Cm %p
変換で
.Cm #
フラグを指定すること、
.Cm %Ld
のような無意味な組み合わせは標準的でありません。
このような組み合わせは避けてください。
.Pp
.Fn sprintf
と
.Fn vsprintf
では無限に長い文字列が仮定されるので、
呼び出し側では実際の空間を
オーバフローしないように注意する必要があります。
オーバフローしないことを保証することは困難です。
安全のため、代わりに
.Fn snprintf
インタフェースを使用してください。
残念ながら、このインタフェースは移植できません。
