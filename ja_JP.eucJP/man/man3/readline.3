.\"
.\" MAN PAGE COMMENTS to
.\"
.\"	Chet Ramey
.\"	Information Network Services
.\"	Case Western Reserve University
.\"	chet@ins.CWRU.Edu
.\"
.\"	Last Change: Thu Feb 19 10:26:47 EST 1998
.\"
.\" $FreeBSD$
.TH READLINE 3 "1998 Feb 19" GNU
.\"
.\" File Name macro.  This used to be `.PN', for Path Name,
.\" but Sun doesn't seem to like that very much.
.\"
.de FN
\fI\|\\$1\|\fP
..
.SH 名称
readline \- ユーザから編集機能付きで一行を受け取る
.SH 書式
.LP
.nf
.ft B
#include <readline/readline.h>
#include <readline/history.h>
.ft
.fi
.LP
.nf
.ft B
char *readline (prompt)
char *prompt;
.ft
.fi
.SH COPYRIGHT
.if n Readline is Copyright (C) 1989, 1991, 1993, 1995, 1996 by the Free Software Foundation, Inc.
.if t Readline is Copyright \(co 1989, 1991, 1993, 1995, 1996 by the Free Software Foundation, Inc.
.SH 解説
.LP
.B readline
は、プロンプトとして
.B prompt
を使用し、端末から一行を読み込み、その値を返します。
.B prompt
が
.B NULL
である場合、プロンプトは出力されません。
返された行には
.IR malloc (3)
を使ってメモリが割り当てられているので、
呼び出し側は終了時にメモリを解放しなければなりません。
返された行では末尾の改行は削除されており、
行のうちのテキストのみが残ります。
.LP
.B readline
は、ユーザが行を入力している間の編集機能を提供します。
デフォルトでは、行編集コマンドは、
.B emacs
のそれに似ています。
.B vi
スタイルの
編集インタフェースも使用できます。
.SH 戻り値
.LP
.B readline
は、読み込んだ行のテキストを返します。
空行は空の文字列を返します。
.B EOF
が行を読込んでいるときに現れ、かつ、その行が空のときは、
.B NULL
を返します。
行が空でないときに
.B EOF
が読み込まれたときは、
これは改行として扱われます。
.SH 表記法
.LP
キーストロークの表記では
.B emacs
スタイルの表記法が使用されます。
コントロールキーは、 C\-\fIkey\fR と表記します。
たとえば C\-n は、 Control\-N を表します。
メタキーは、 M\-\fIx\fR と表記します。
つまり M\-x は、Meta\-X を表します。
( メタキーがないキーボードの場合、
M\-\fIx\fP は ESC \fIx\fP を表します。
つまりエスケープキーを押してから
.I x
キーを押すことを表します。
これは ESC をメタ・プレフィックスとします。
複合操作の M\-C\-\fIx\fP は、ESC\-Control\-\fIx\fP を表します。
つまり、エスケープキーを押し、次にコントロールキーを押しながら
.I x
キーを押すことを表します。 )
.PP
readline コマンドは、数値引数を取ることがあります。
通常の場合、この引数は繰り返しの回数として動作します。
しかし、場合によっては、重要な意味を持ちます。
前方に向かって作用するコマンド
(\fBkill\-line\fP など )
に負の引数を渡すと、
このコマンドは後方に向かって作用します。
引数を与えられたときのふるまいが
これとは異なるコマンドには説明が付けられています。
.PP
コマンドがテキストを「削除」 (\fIkill\fP) するとして記述されている場合、
消去されたテキストは、後で取り戻せるように保存 ( ヤンク \fIyank\fP ) されます。
削除されたテキストは、削除リング (\fIkill ring\fP) に保存されます。
連続して削除した場合は、テキストは 1 つのユニットに蓄積され、
1 度に全部をヤンクできるようになります。
テキストを削除しないコマンドは、
削除リング (kill ring) 上のテキストの塊の区切りとなります。
.SH 初期化ファイル
.LP
readline は、初期化ファイル (\fIinputrc\fP)
にコマンドを置くすることでカスタマイズされます。
このファイルの名前は、環境変数
.B INPUTRC
の値から取られます。
この環境変数が設定されていない場合は、デフォルトの
.IR ~/.inputrc
が使用されます。
readline ライブラリを使用しているプログラムを起動すると、
初期化ファイルが読み込まれてキーバインディングと変数が設定されます。
readline 初期化ファイルでは、
ほんの 2,3 の基本的な構造構文のみが許可されています。
空白行は無視されます。
\fB#\fP で始まる行はコメントとみなされます。
\fB$\fP で始まる行は条件文とみなされます。
その他の行はキーバインディングと変数の設定を表します。
このライブラリを使用している各プログラムは、
独自のコマンドとバインディングを追加することができます。
.PP
以下の例を参照してください。
.RS
.PP
M\-Control\-u: universal\-argument
.RE
や
.RS
C\-Meta\-u: universal\-argument
.RE
を
.I inputrc
に置くと、 M\-C\-u で
readline のコマンド universal\-argument が実行されます。
.PP
キーのバインディングを行なっているときは、
次のシンボリックキャラクタ名
.IR RUBOUT ,
.IR DEL ,
.IR ESC ,
.IR LFD ,
.IR NEWLINE ,
.IR RET ,
.IR RETURN ,
.IR SPC ,
.IR SPACE ,
.IR TAB
が認識されます。
さらにコマンド名に加え、
readline はキーを押したときに文字列が挿入されるように
キーにバインドするようにもできます。 ( マクロ ) 
.PP
.SS キーバインド
.I inputrc
ファイルの中でキーバインドを制御する文法は単純です。
必要なものは、コマンドの名前かマクロのテキスト、
そしてそれにバインドするキーシーケンスのみです。
名前は 2 つの方法のどちらかで指定できます。
1 つは、シンボリックなキーの名前で指定する方法、これは
場合によっては \fIMeta\-\fP や \fIControl\-\fP プレフィックスがつきます。
もう 1 つは、キーシーケンスを指定する方法です。
\fBkeyname\fP:\^\fIfunction-name\fP または、
\fBkeyname\fP:\^\fImacro\fP という形式を使用した場合、
.I keyname
は英語で綴られたキーの名前になります。
例えば、
.sp
.RS
Control\-u: universal\-argument
.br
Meta\-Rubout: backward\-kill\-word
.br
Control\-o: ">&output"
.RE
.LP
上の例では、
.I C\-u
が
.BR univesal\-argument
にバインドされ、
.I M-DEL
が
.BR backward\-kill\-word
にバインドされ、
.I C\-o
が右辺に記述されているマクロ
( ここではテキスト
.I >&output
をその行に挿入する )
の実行にバインドされます。
.PP
2 番目の、
\fB"keyseq"\fP:\^\fIfunction\-name\fP 
または
\fB"keyseq"\fP:\^\fImacro\fP
という形式では、
キーシーケンス (
.B keyseq
) は、
キーシーケンス全体を表す文字列を二重引用符で囲んで指定するという
点で前出のキー名 (
.B keyname
) とは異なります。
以下の例のように、 GNU Emacs のスタイルのキーエスケープが使用できます。
.sp
.RS
"\eC\-u": universal\-argument
.br
"\eC\-x\eC\-r": re\-read\-init\-file
.br
"\ee[11~": "Function Key 1"
.RE
.PP
この例では、
.I C-u
は再び
.BR universal\-argument
にバインドされ、
.I "C-x  C-r"
は
.BR re\-read\-init\-file
にバインドされ、
.I "ESC [ 1 1 ~"
はテキスト
.BR "Function Key 1"
の挿入にバインドされています。
GNU Emacs スタイルのエスケープシーケンスの一覧を以下に示します。
.RS
.PD 0
.TP
.B \eC\-
コントロールプレフィックス
.TP
.B \eM\-
メタプレフィックス
.TP
.B \ee
エスケープキャラクタ
.TP
.B \e\e
バックスラッシュ
.TP
.B \e"
文字「"」
.TP
.B \e'
文字「'」
.RE
.PD
.PP
GNU Emacs スタイルのエスケープシーケンスの他に、
以下のようなバックスラッシュによるエスケープも使用できます。
.RS
.PD 0
.TP
.B \ea
警告 ( ベル )
.TP
.B \eb
後退 (backspace)
.TP
.B \ed
消去 (delete)
.TP
.B \ef
改ページ (form feed)
.TP
.B \en
改行 (newline)
.TP
.B \er
復帰 (carriage return)
.TP
.B \et
水平タブ
.TP
.B \ev
垂直タブ
.TP
.B \e\fInnn\fP
ASCII コードが 8 進値 \fInnn\fP ( 1 桁 から 3 桁 ) である文字
.TP
.B \ex\fInnn\fP
ASCII コードが 16 進値 \fInnn\fP ( 1 桁 から 3 桁 ) である文字
.RE
.PD
.PP
マクロのテキストを入力する場合は、
一重引用符か二重引用符を使用してマクロ定義を表してください。
引用符で囲まれていないテキストは機能名とみなされます。
マクロ本体では、
上記のバックスラッシュによるエスケープが展開されます。
バックスラッシュは、「"」と「'」も含め、
マクロテキストのどのキャラクタをもクォートします。
.PP
.B bash
では、現在の
.B readline
のキーバインディングを
.B bind
組み込みコマンドを用いて
表示したり修正したりすることができます。
編集モードは、
.B \-o
オプションを
.B set
組み込みコマンドに使用することで、
対話形式で使用しながら切り替えることもできます。
このライブラリを使用している他のプログラムは、同様の機構を提供します。
新しいバインディングを組み入れるための他の手段を、
プログラムが提供していない場合であっても
.I inputrc
ファイルを編集して再読込みすることもできます。
.PP
.SS 変数
readline には、動作をさらにカスタマイズするための変数があります。
変数は、以下の書式で
.I inputrc
ファイルの中で設定できます。
.RS
.PP
\fBset\fP \fIvariable\-name\fP \fIvalue\fP
.RE
.PP
特に断らない限り、 readline の変数は
.B On
か
.B Off
の値を取ります。
変数とそのデフォルト値は以下のとおりです。
.PP
.PD 0
.TP
.B bell\-style (audible)
readline で端末ベルを鳴らそうとするときの処理方法を制御します。
\fBnone\fP に設定すると、 readline はベルを鳴らしません。
\fBvisible\fP に設定すると、 readline は可能ならば
可視化ベル (visible bell) を使用します。
\fBaudible\fP に設定すると、 readline は端末のベルを鳴らそうとします。
.TP
.B comment\-begin (``#'')
.B insert\-comment
コマンドを実行したときに \fBvi\fP モードで挿入される文字列です。
このコマンドは、 emacs モードでは
.B M\-#
に、
vi コマンドモードでは
.B #
にバインドされています。
.TP
.B completion\-ignore\-case (Off)
\fBOn\fP に設定すると、 readline は、
大文字と小文字を区別せずに (case\-insensitive)
ファイル名のマッチと補完を行います。
.TP
.B completion\-query\-items (100)
\fBpossible\-completions\fP コマンドが生成した補完候補を
表示するかどうかをユーザに問い合わせるときの個数です。
これはゼロ以上の整数値に設定してください。
補完候補の数がこの変数の値以上になると、
ユーザに補完候補を表示するかどうかを問い合わせます。
それ以外のときは単純に候補の一覧を端末に表示します。
.TP
.B convert\-meta (On)
\fBOn\fP に設定すると、 readline は
8 番目のビットがセットされている文字を、
8 番目のビットを取り去って (strip)
エスケープキャラクタを前につけるやり方で、
ASCII のキーの並びに変換します。
( メタプレフィックスとしてエスケープキーを使用しているようになります )
.TP
.B disable\-completion (Off)
\fBOn\fP に設定すると、 readline は単語の補完を抑制するようになります。
補完文字 (completion character) は
\fBself-insert\fP にマップされたかのように
行に挿入されるようになります。
.TP
.B editing\-mode (emacs)
readline を \fIemacs\fP と同様のキーバインディングで始めるか、
\fIvi\fP と同様のキーバインディングで始めるかを制御します。
.B editing\-mode
は、
.B emacs
か
.B vi
に設定できます。
.TP
.B enable\-keypad (Off)
\fBOn\fP に設定すると、 readline は呼び出されたときに
アプリケーションキーパッドを使えるようにしようとします。
一部のシステムでは、矢印キーを使えるようにするために
この設定が必要です。
.TP
.B expand\-tilde (Off)
\fBon\fP に設定すると、 readline が単語を補完しようとしたときに
チルダの展開が行なわれます。
.TP
.B horizontal\-scroll\-mode (Off)
\fBOn\fP に設定すると、 readline は表示に 1 行しか使用しなくなります。
入力が画面の幅より長くなった場合は、
新しい行に折り返すのではなく、
画面の 1 行で水平に入力をスクロールします。
.TP
.B keymap (emacs)
現在の
.B readline
キーマップを設定します。
適切なキーマップ名は、
\fIemacs, emacs-standard, emacs-meta, emacs-ctlx,
vi, vi-move, vi-command, vi-insert\fP
です。
\fIvi\fP は \fIvi-command\fP と同じで、
\fIemacs\fP は \fIemacs-standard\fP と同じです。
デフォルト値は
.IR emacs
です。
.B editing\-mode
の値もデフォルトキーマップに影響します。
.TP
.B mark\-directories (On)
\fBOn\fP に設定すると、 補完されたディレクトリ名に
スラッシュが付けられます。
.TP
.B mark\-modified\-lines (Off)
\fBOn\fP に設定すると、修正された履歴行 (history line) は、
アスタリスク (\fB*\fP) を先頭につけて表示されます。
.TP
.B meta\-flag (Off)
\fBOn\fP に設定すると、 readline は、
端末がこれをサポートできるかどうかに関わらず、
8 ビット入力を可能にします。
( つまり、読み込んだ文字から上位ビットを取り去りません。)
.TP
.B output\-meta (Off)
\fBOn\fP に設定すると、 readline は、
8 番目のビットがセットされた文字を、
メタプレフィックスエスケープシーケンスとしてではなく、
直接表示するようになります。
.TP
.B print\-completions\-horizontally (Off)
\fBOn\fP に設定すると、 readline は
マッチした補完候補の一覧を、
画面の垂直方向ではなく水平方向に、
アルファベット順でソートして
表示するようになります。
.TP
.B show\-all\-if\-ambiguous (Off)
補完機能のデフォルトの動作を変更します。
\fBOn\fP に設定すると、
補完候補の語が 1 よりも多いとき、
ベルを鳴らさずに即座にマッチしたものを一覧表示します。
.TP
.B visible\-stats (Off)
\fBOn\fP に設定すると、補完候補の一覧を表示するときに
\fBstat\fP(2) が報告するファイルタイプを表すキャラクタが
ファイル名に付け加えられます。
.PD
.PP
.SS 条件コンストラクト
readline は、
C プリプロセッサの条件コンパイル機能と
根本的に同様の機能を実現しています。
これはキーバインドと変数設定を
条件判定の結果に従って実行することを可能にします。
ここでは、4 つの命令が使用できます。
.IP \fB$if\fP
.B $if
コンストラクトは、
編集モード、使用している端末、readline を使用しているアプリケーションに
関連づけてバインドすることを可能にします。
条件判定のテキストはその行の最後まで続きます。
区分するための文字はありません。
.RS
.IP \fBmode\fP   
\fB$if\fP
ディレクティブの
\fBmode=\fP
という形式は
readline が emacs モードになっているか vi モードになっているかを
判定するのに用いられます。
これは \fBset keymap\fP コマンドとともに使用されることでしょう。
例えば、readline が emacs モードで起動している場合に限って、
\fIemacs-standard\fP キーマップと \fIemacs-ctlx\fP キーマップに
バインディングを設定する、というようにです。
.IP \fBterm\fP
\fBterm=\fP という形式は、
端末のファンクションキーを押すとキーの並びを出力するようにバインドする、
というように、
端末に固有なキーバインドを含めるために用いられることでしょう。
.B =
の右側のワードは、端末のフルネームと、
最初の \fB\-\fP の前までの端末名の一部とに対して判定されます。
たとえば
.I sun
は
.I sun
と
.IR sun\-cmd
の両方とに一致します。
.IP \fBapplication\fP
\fBapplication\fP コンストラクトは
アプリケーションに固有な設定を含めるために用いられます。
readline ライブラリを使用している各プログラムは
\fIapplication name\fP を設定し、
初期化ファイルはその値を判定することができます。

これを使用すると、特定のプログラムにとって便利な機能に
キーシーケンスをバインドする、といったことが可能です。
たとえば以下のコマンドは、
bash の現在の語か前の語を引用符でくくるキーシーケンスを追加します。
.sp 1
.RS
.nf
\fB$if\fP bash
# Quote the current or previous word
"\eC-xq": "\eeb\e"\eef\e""
\fB$endif\fP
.fi
.RE
.RE
.IP \fB$endif\fP
上の例に出てくるこのコマンドは、\fB$if\fP コマンドを終了するものです。
.PP
.IP \fB$else\fP
\fB$if\fP ディレクティブの分岐の中で出てくるこのコマンドは、
判定が偽のときに実行されます。
.IP \fB$include\fP
このディレクティブは 1 つのファイル名を引数として取り、
そのファイルからコマンドとバインディングを読み込みます。
たとえば以下のディレクティブでは、
\fI/etc/inputrc\fP が読み込まれます。
.sp 1
.RS
.nf
\fB$include\fP \^ \fI/etc/inputrc\fP
.fi
.RE
.SH 検索
.PP
readline には、コマンド履歴から特定の文字列を含む行を検索する
コマンドがあります。
検索モードには、増分 (
.I incremental
) と非増分 (
.IR non-incremental
) の 2 つのモードがあります。
.PP
増分検索は、ユーザが検索文字列を入力し終わる前に開始します。
検索文字列の各文字が入力されるたびに、
readline は、それまでに入力された文字列と一致した履歴の、
次のエントリを表示します。
増分検索では、目的の履歴エントリの検索に必要となる最低限の文字のみが
必要となります。
エスケープ文字を使用すると増分検索を終了できます。
Control-J も検索を終了できます。
Control-G は増分検索を中断 (abort) し、元の行に戻します。
検索が終了すると、検索文字列を含む履歴エントリが現在の行となります。
履歴リストの中の、一致する他のエントリを探すには、
Control-S か Control-R を必要なだけ入力します。
これは
それまでに入力した検索文字列と一致するような次の行を探して
履歴を後方や前方に検索します。
readline コマンドにバインドされた他のキーシーケンスが使用されると、
検索を終了してそのコマンドを実行します。
たとえば、 \fInewline\fP が使用されると
検索を終了してその行を受け付けるので、
その履歴リストにあった該当するコマンドが実行されます。
.PP
非増分検索は、検索文字列全体を読み込んでから検索を開始し、
一致する履歴行を探します。
検索文字列は、ユーザが入力したものであったり、
現在の行の内容の一部であったりします。
.SH 編集コマンド
以下は、コマンド名と、
バインドされているデフォルトのキーシーケンスの一覧です。
キーシーケンスが記載されていないコマンドには、
デフォルトではバインドされていません。
.SS 移動コマンド
.PP
.PD 0
.TP
.B beginning\-of\-line (C\-a)
現在行の先頭に移動します。
.TP
.B end\-of\-line (C\-e)
その行の末尾に移動します。
.TP
.B forward\-char (C\-f)
1 文字進みます。
.TP
.B backward\-char (C\-b)
1 文字戻ります。
.TP
.B forward\-word (M\-f)
次の語の末尾に進みます。
単語は、英数字 ( 英文字と数字 ) で構成されています。
.TP
.B backward\-word (-b)
現在の語の先頭か前の語に戻ります。
単語は、英数字 ( 英文字と数字 ) で構成されています。
.TP
.B clear\-screen (C\-l)
現在の行を画面の最上位に残して画面をクリアします。
引数がある場合は、画面をクリアせずに現在の行をリフレッシュします。
.TP
.B redraw\-current\-line
現在の行をリフレッシュします。
.PD
.SS 履歴操作コマンド
.PP
.PD 0
.TP
.B accept\-line (Newline, Return)
カーソルの位置に関わらずに行を受け付けます。
この行が空でない場合は、履歴リストに追加します。
この行が履歴行を修正したものである場合は、
該当する履歴行を元の状態に戻します。
.TP
.B previous\-history (C\-p)
履歴リストを戻り、リストから前のコマンドを取り出します。
.TP
.B next\-history (C\-n)
履歴リストを進め、リストから次のコマンドを取り出します。
.TP
.B beginning\-of\-history (M\-<)
履歴の最初の行に移動します。
.TP
.B end\-of\-history (M->)
入力履歴の最後に移動します。たとえば現在入力している行です。
.TP
.B reverse\-search\-history (C\-r)
現在の行から必要なだけ履歴を「上へ」移動しながら後方検索します。
これは増分検索です。
.TP
.B forward\-search\-history (C\-s)
現在の行から必要なだけ履歴を「下へ」移動しながら前方検索します。
これは増分検索です。
.TP
.B non\-incremental\-reverse\-search\-history (M\-p)
非増分検索でユーザが指定した文字列を探し、
現在の行から履歴を後方に検索します。
.TP
.B non\-incremental\-forward\-search\-history (M-n)
非増分検索でユーザが指定した文字列を前方に検索します。
.TP
.B history\-search\-forward
現在行の先頭と
カーソルの現在位置 (ポイント \fIpoint\fP) の間にある文字列を探し、
履歴を前方に検索します。
これは非増分検索です。
.TP
.B history\-search\-backward
現在行の先頭とポイントの間にある文字列を探し、
履歴を前方に検索します。
これは非増分検索です。
.TP
.B yank\-nth\-arg (M\-C\-y)
前のコマンドの 1 番目の引数 ( 通常は前の行の 2 番目の語 ) を
ポイント ( カーソルの現在位置 ) に挿入します。
引数
.IR n
がある場合は、
前のコマンドの
\fIn\fP 番目の語 ( 前のコマンドの語は 0 番目から始まります )
を挿入します。
引数が負のときは、
前のコマンドの末尾から
\fIn\fP 番目の語を挿入します。
.TP
.B yank\-last\-arg (M\-.\^, M\-_\^)
前のコマンドの最後の引数 ( 前の履歴エントリの最後の語 )
を挿入します。
引数があるときは、\fByank\-nth\-arg\fP とまったく同じようにふるまいます。
\fByank\-last\-arg\fP を連続して呼び出すと、
各行の最後の引数を挿入しながら履歴リストを戻ります。
.PD
.SS テキスト変更コマンド
.PP
.PD 0
.TP
.B delete\-char (C\-d)
カーソルの下の文字を消去します。
ポイントが行の先頭にあり、
その行に文字がなく、
最後に入力した文字が \fBdelete\-char\fP にバインドされていない場合は
.SM
.BR EOF
を返します。
.TP
.B backward\-delete\-char (Rubout)
カーソルの前にある文字を消去します。
数値引数があるときは、
消去されたテキストを削除リングに保存します。
.TP
.B quoted\-insert (C\-q, C\-v)
次に入力された文字をそのまま行に追加します。
これは、 \fBC\-q\fP のような文字を挿入する方法です。
.TP
.B tab\-insert (M\-TAB)
タブ文字を挿入します。
.TP
.B self\-insert (a,\ b,\ A,\ 1,\ !,\ ...)
入力された文字を挿入します。
.TP
.B transpose\-chars (C\-t)
ポイントの前の文字をポイントの文字の後にドラッグします。
ポイントも後ろに移動します。
ポイントが行末にある場合は、
ポイントの前の 2 つの文字を入れ替えます。
負の引数は動作しません。
.TP
.B transpose\-words (M\-t)
カーソルの前の語をカーソルの後ろの語にドラッグ
します。カーソルもその語の上に移動します。
.TP
.B upcase\-word (M\-u)
現在の語 ( またはその後の語 ) を大文字にします。
負の引数があるときは
前の語が大文字になりますが、ポイントは移動しません。
.TP
.B downcase\-word (M\-l)
現在の語 ( またはその後の語 ) を小文字にします。
負の引数があるときは
前の語が小文字になりますが、ポイントは移動しません。
.TP
.B capitalize\-word (M\-c)
現在の語 ( またはその後の語 ) の頭文字を大文字にします。
負の引数があるときは
前の語の頭文字を大文字にしますが、ポイントは移動しません。
.PD
.SS 削除 (kill) とヤンク
.PP
.PD 0
.TP
.B kill\-line (C\-k)
現在のカーソルの位置から行末までのテキストを削除 (kill) します。
.TP
.B backward\-kill\-line (C\-x Rubout)
行頭まで後方に削除します。
.TP
.B unix\-line\-discard (C\-u)
ポイントから行頭まで後方に削除します。
削除されたテキストは削除リングに保存されます。
.\" backward-kill-line と実質的な違いはありません。
.TP
.B kill\-whole\-line
カーソル位置に関わらず、現行ラインのすべてのキャラクタを
消去します。
.TP
.B kill\-word (M\-d)
カーソルから現在の語の末尾まで、
単語間の場合は次の語の末尾までを消去します。
単語境界は、 \fBforward\-word\fP で使用するものと同じです。
.TP
.B backward\-kill\-word (M\-Rubout)
カーソルの後ろの語を消去します。
単語境界は、 \fBbackward\-word\fP で使用するものと同じです。
.TP
.B unix\-word\-rubout (C\-w)
空白を単語境界として使用し、カーソルの前のワードを削除します。
単語境界は
.BR backward\-kill\-word
とは異なります。
.TP
.B delete\-horizontal\-space (M\-\e)
ポイント周囲のすべての空白とタブを消去します。
.TP
.B kill\-region
ポイントとマーク ( 保存されたカーソル位置 ) の間のテキストを
削除します。
このテキストは、リージョン (\fIregion\fP) として参照されます。
.TP
.B copy\-region\-as\-kill
リージョンのテキストを削除バッファにコピーします。
.TP
.B copy\-backward\-word
ポイントの前の語を削除バッファにコピーします。
単語境界は \fBbackward\-word\fP と同じです。
.TP
.B copy\-forward\-word
ポイントの次の語を削除バッファにコピーします。
単語境界は \fBforward\-word\fP と同じです。
.TP
.B yank (C\-y)
削除リングの最上位をカーソル位置のバッファにヤンクします。
.TP
.B yank\-pop (M\-y)
削除リングを回転し、新しく最上位になったものをヤンクします。
.B yank
か
.BR yank\-pop
の後でしか動作しません。
.PD
.SS 数値引数
.PD 0
.TP
.B digit\-argument (M\-0, M\-1, ..., M\-\-)
すでに蓄積されている引数にこの数字を追加するか、
新しい引数を開始します。
M\-\- は、負の引数を開始します。
.TP
.B universal\-argument
引数を指定する別の方法です。
このコマンドに 1 つ以上の数字が続く場合、
もしくはマイナス記号の後に 1 つ以上の数字が続く場合
はこの数字が引数になります。
このコマンドに数字が続く場合、
.B universal\-argument
を再度実行することで数値引数は終わりますが、それ以外の場合は無視されます。
特別な場合として、
このコマンドの直後に数字やマイナス記号以外の文字が続くときは、
次のコマンドの引数の数値は 4 倍されます。
初期状態での引数の数値は 1 なので、
この機能を最初に実行すると引数の数値は 4 になり、
2 回実行すると引数の数値は 16 になる、というようになります。
.PD
.SS 補完 (completion)
.PP
.PD 0
.TP
.B complete (TAB)
ポイントの前のテキストで補完 (completion) を実行します。
実際の補完はアプリケーションに固有です。
たとえば、
.BR bash
は、それぞれ、
変数 ( テキストが \fB$\fP で始まる場合 ) 、
ユーザ名 ( テキストが \fB~\fP で始まる場合 ) 、
ホスト名 ( テキストが \fB@\fP で始まる場合 ) 、
コマンド ( エイリアスと関数を含む場合 )
としてテキストを扱い、補完を実行します。
これらに当てはまらない場合は
ファイル名の補完が実行されます。
一方、
.BR gdb
ではプログラムの関数と変数の補完が認められており、
特定の状況でのみファイル名補完が試みられます。
.TP
.B possible\-completions (M\-?)
ポイントの前のテキストについての補完候補一覧を表示します。
.TP
.B insert\-completions (M\-*)
ポイントの前のテキストについて、
\fBpossble\-completions\fP によって生成された
全ての補完候補を挿入します。
.TP
.B menu\-complete
\fBcomplete\fP に似ていますが、
補完候補の一覧のうちの一つを用いて補完し、語を置き換えます。
\fBmenu\-complete\fP を繰り返し実行すると、
一致するものを順番に挿入しながら、
補完候補の一覧を一つずつ進みます。
補完候補一覧の末尾に達するとベルが鳴り、
元のテキストが復元されます。
引数 \fIn\fP は、補完候補一覧を \fIn\fP だけ進みます。
負の引数はリストを戻ります。
このコマンドは、 \fBTAB\fP にバインドされることを想定していますが、
デフォルトではバインドされていません。
.PD
.SS キーボードマクロ
.PP
.PD 0
.TP
.B start\-kbd\-macro (C\-x (\^)
キーボードから入力された文字の、
現在のキーボードマクロへの保存を開始します。
.TP
.B end\-kbd\-macro (C\-x )\^)
キーボードから入力された文字の、
現在のキーボードマクロへの保存を停止します。
.TP
.B call\-last\-kbd\-macro (C\-x e)
キーボードから入力されたかのように、
マクロ中のキャラクタを表示し、
最後に定義されたキーボードマクロを再実行します。
.PD
.SS その他
.PP
.PD 0
.TP
.B re\-read\-init\-file (C\-x C\-r)
\fIinputrc\fP ファイルの内容を読み込み、
そのファイルで見つかったバインドや変数割当てを組み込みます。
.TP
.B abort (C\-g)
現在の編集コマンドを中断し、端末ベルを鳴らします。
(
.BR bell\-style
の設定に従います )
.TP
.B do\-uppercase\-version (M\-a, M\-b, M\-\fIx\fP, ...)
メタ化 (metafy) された文字 \fIx\fP が小文字である場合、
相当する大文字にバインドされたコマンドを実行します。
.TP
.B prefix\-meta (ESC)
次に入力された文字をメタ化します。
.SM
.B ESC
.B f
は
.BR Meta\-f
と同等です。
.TP
.B undo (C\-_, C\-x C\-u)
各行で個別に記憶される、増分取り消し (incremental undo)です。
.TP
.B revert\-line (M\-r)
この行に行なわれた変更の全てを取り消します。
これは
.B undo
コマンドをこの行で必要なだけ繰り返し、
初期状態に戻すことに似ています。
.TP
.B tilde\-expand (M\-~)
現在の語にチルダ展開を実行します。
.TP
.B set\-mark (C\-@, M-<space>)
現在のポイントにマークします。
数値引数を指定すると、マークはその場所に設定されます。
.TP
.B exchange\-point\-and\-mark (C\-x C\-x)
マークとポイントを入れ換えます。
カーソルの現在位置は保存された位置に設定され、
古いカーソル位置はマークとして保存されます。
.TP
.B character\-search (C\-])
文字が読み込まれ、その文字と次に一致する場所へポイントが移動します。
負の数を使用すると、前の方で一致するものが検索されます。
.TP
.B character\-search\-backward (M\-C\-])
文字が読み込まれ、前の方でその文字と一致する場所へポイントが移動します。
負の数を使用すると、後の方で一致するものが検索されます。
.TP
.B insert\-comment (M\-#)
readline の
.B comment\-begin
変数の値が現在行の先頭に挿入され、
改行が入力されたかのようにその行が受け付けられます。
これにより、現在行がシェルのコメントになります。
.TP
.B dump\-functions
すべての機能名とそのキーバインドを
readline の出力ストリームに印字します。
数値引数を指定すると、出力は
\fIinputrc\fP ファイルの一部にできるようにフォーマットされます。
.TP
.B dump\-variables
すべての設定可能な変数とその値を
readline の出力ストリームに印字します。
数値引数を指定すると、出力は
\fIinputrc\fP ファイルの一部にできるようにフォーマットされます。
.TP
.B dump\-macros
マクロにバインドされたすべての readline キーシーケンス、
およびそれが出力するストリングを印字します。
数値引数を指定すると、出力は
\fIinputrc\fP ファイルの一部にできるようにフォーマットされます。
.TP
.B emacs\-editing\-mode (C\-e)
.B vi
編集モードになっている場合に、
.B emacs
編集モードに切り替えます。
.TP
.B vi\-editing\-mode (M\-C\-j)
.B emacs
編集モードになっている場合に、
.B vi
編集モードに切り替えます。
.PD
.SH デフォルトのキーバインド
.LP
以下は、デフォルトの emacs バインドと vi バインドのリストです。
第 8 ビットがセットされている文字は、 M\-<character> と表記します。
これは、メタ化された文字を表します。
emacs 標準バインドのリストに載っていない、
印字可能な ASCII 文字は、
.I self\-insert
機能に結び付けられています。
この機能は、与えられた文字を入力行に挿入します。
vi 挿入モードの場合、
特筆していないすべての文字は
.I self\-insert
にバインドされています。
C-Z や C-C のような、
.IR stty(1)
や端末ドライバでシグナルの生成に割り当てられている文字は、
その機能を保持します。
メタ化された大文字と小文字の文字は、
emacs モードのメタキーマップと同じ機能にバインドされています。
残りの文字はバインドされておらず、
そういった文字を使用すると、
readline は (
.B bell\-style
変数の設定に従って ) ベルを鳴らします。
.SS Emacs モード
.RS +.6i
.nf
.ta 2.5i
.sp
emacs 標準バインド
.sp
"C-@"  set-mark
"C-A"  beginning-of-line
"C-B"  backward-char
"C-D"  delete-char
"C-E"  end-of-line
"C-F"  forward-char
"C-G"  abort
"C-H"  backward-delete-char
"C-I"  complete
"C-J"  accept-line
"C-K"  kill-line
"C-L"  clear-screen
"C-M"  accept-line
"C-N"  next-history
"C-P"  previous-history
"C-Q"  quoted-insert
"C-R"  reverse-search-history
"C-S"  forward-search-history
"C-T"  transpose-chars
"C-U"  unix-line-discard
"C-V"  quoted-insert
"C-W"  unix-word-rubout
"C-Y"  yank
"C-]"  character-search
"C-_"  undo
"\^ " to "/"  self-insert
"0"  to "9"  self-insert
":"  to "~"  self-insert
"C-?"  backward-delete-char
.PP
emacs メタキーバインド
.sp
"M-C-G"  abort
"M-C-H"  backward-kill-word
"M-C-I"  tab-insert
"M-C-J"  vi-editing-mode
"M-C-M"  vi-editing-mode
"M-C-R"  revert-line
"M-C-Y"  yank-nth-arg
"M-C-["  complete
"M-C-]"  character-search-backward
"M-space"  set-mark
"M-#"  insert-comment
"M-&"  tilde-expand
"M-*"  insert-completions
"M--"  digit-argument
"M-."  yank-last-arg
"M-0"  digit-argument
"M-1"  digit-argument
"M-2"  digit-argument
"M-3"  digit-argument
"M-4"  digit-argument
"M-5"  digit-argument
"M-6"  digit-argument
"M-7"  digit-argument
"M-8"  digit-argument
"M-9"  digit-argument
"M-<"  beginning-of-history
"M-="  possible-completions
"M->"  end-of-history
"M-?"  possible-completions
"M-B"  backward-word
"M-C"  capitalize-word
"M-D"  kill-word
"M-F"  forward-word
"M-L"  downcase-word
"M-N"  non-incremental-forward-search-history
"M-P"  non-incremental-reverse-search-history
"M-R"  revert-line
"M-T"  transpose-words
"M-U"  upcase-word
"M-Y"  yank-pop
"M-\e"  delete-horizontal-space
"M-~"  tilde-expand
"M-C-?"  backward-delete-word
"M-_"  yank-last-arg
.PP
emacs コントロールキーバインド
.sp
"C-XC-G"  abort
"C-XC-R"  re-read-init-file
"C-XC-U"  undo
"C-XC-X"  exchange-point-and-mark
"C-X("  start-kbd-macro
"C-X)"  end-kbd-macro
"C-XE"  call-last-kbd-macro
"C-XC-?"  backward-kill-line
.sp
.RE
.SS VI モードバインド
.RS +.6i
.nf
.ta 2.5i
.sp
.PP
VI 挿入モード機能名
.sp
"C-D"  vi-eof-maybe
"C-H"  backward-delete-char
"C-I"  complete
"C-J"  accept-line
"C-M"  accept-line
"C-R"  reverse-search-history
"C-S"  forward-search-history
"C-T"  transpose-chars
"C-U"  unix-line-discard
"C-V"  quoted-insert
"C-W"  unix-word-rubout
"C-Y"  yank
"C-["  vi-movement-mode
"C-_"  undo
"\^ " to "~"  self-insert
"C-?"  backward-delete-char
.PP
VI コマンドモード機能名
.sp
"C-D"  vi-eof-maybe
"C-E"  emacs-editing-mode
"C-G"  abort
"C-H"  backward-char
"C-J"  accept-line
"C-K"  kill-line
"C-L"  clear-screen
"C-M"  accept-line
"C-N"  next-history
"C-P"  previous-history
"C-Q"  quoted-insert
"C-R"  reverse-search-history
"C-S"  forward-search-history
"C-T"  transpose-chars
"C-U"  unix-line-discard
"C-V"  quoted-insert
"C-W"  unix-word-rubout
"C-Y"  yank
"\^ "  forward-char
"#"  insert-comment
"$"  end-of-line
"%"  vi-match
"&"  vi-tilde-expand
"*"  vi-complete
"+"  next-history
","  vi-char-search
"-"  previous-history
"."  vi-redo
"/"  vi-search
"0"  beginning-of-line
"1" to "9"  vi-arg-digit
";"  vi-char-search
"="  vi-complete
"?"  vi-search
"A"  vi-append-eol
"B"  vi-prev-word
"C"  vi-change-to
"D"  vi-delete-to
"E"  vi-end-word
"F"  vi-char-search
"G"  vi-fetch-history
"I"  vi-insert-beg
"N"  vi-search-again
"P"  vi-put
"R"  vi-replace
"S"  vi-subst
"T"  vi-char-search
"U"  revert-line
"W"  vi-next-word
"X"  backward-delete-char
"Y"  vi-yank-to
"\e"  vi-complete
"^"  vi-first-print
"_"  vi-yank-arg
"`"  vi-goto-mark
"a"  vi-append-mode
"b"  vi-prev-word
"c"  vi-change-to
"d"  vi-delete-to
"e"  vi-end-word
"f"  vi-char-search
"h"  backward-char
"i"  vi-insertion-mode
"j"  next-history
"k"  prev-history
"l"  forward-char
"m"  vi-set-mark
"n"  vi-search-again
"p"  vi-put
"r"  vi-change-char
"s"  vi-subst
"t"  vi-char-search
"u"  undo
"w"  vi-next-word
"x"  vi-delete
"y"  vi-yank-to
"|"  vi-column
"~"  vi-change-case
.RE
.SH 関連項目
.PD 0
.TP
\fIThe Gnu Readline Library\fP, Brian Fox and Chet Ramey
.TP
\fIThe Gnu History Library\fP, Brian Fox and Chet Ramey
.TP
\fIbash\fP(1)
.PD
.SH 関連ファイル
.PD 0
.TP
.FN ~/.inputrc
それぞれの \fBreadline\fP 初期化ファイル
.PD
.SH 作者
Brian Fox, Free Software Foundation (主要作者)
.br
bfox@ai.MIT.Edu
.PP
Chet Ramey, Case Western Reserve University
.br
chet@ins.CWRU.Edu
.SH バグレポート
.B readline
のバグを見つけた場合は報告してください。
しかし、まず本当にバグであるかどうかを確認し、
.B readline
ライブラリの最新バージョンにそのバグが現れることを確認してください。
.PP
バグが本当に存在することが確認できたら、
バグレポートを \fIbug\-readline\fP@\fIgnu.org\fP に送信してください。
バグの修正がある場合はメールで送信してください歓迎します。
提案や「哲学的な」バグレポートは、
\fIbug\-read\-line\fP@\fIgnu.org\fP にメールで送信するか、
Usenet ニュースグループ
.BR gnu.bash.bug
に投稿してください。
.PP
このマニュアルページに関するコメントやバグレポートは、
.IR chet@ins.CWRU.Edu
に送信してください。
.SH バグ
.PP
大きすぎること、そして遅過ぎること。
