.\" Copyright (c) 1992, 1993, 1994 Henry Spencer.
.\" Copyright (c) 1992, 1993, 1994
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" This code is derived from software contributed to Berkeley by
.\" Henry Spencer.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"	@(#)regex.3	8.4 (Berkeley) 3/20/94
.\"
.\" $FreeBSD$
.TH REGEX 3 "March 20, 1994"
.de ZR
.\" one other place knows this name:  the SEE ALSO section
.IR re_format (7) \\$1
..
.SH 名称
regcomp, regexec, regerror, regfree \- 正規表現ライブラリ
.SH 書式
.ft B
.\".na
#include <sys/types.h>
.br
#include <regex.h>
.HP 10
int regcomp(regex_t\ *preg, const\ char\ *pattern, int\ cflags);
.HP
int\ regexec(const\ regex_t\ *preg, const\ char\ *string,
size_t\ nmatch, regmatch_t\ pmatch[], int\ eflags);
.HP
size_t\ regerror(int\ errcode, const\ regex_t\ *preg,
char\ *errbuf, size_t\ errbuf_size);
.HP
void\ regfree(regex_t\ *preg);
.\".ad
.ft
.SH 解説
このルーチンは、POSIX 1003.2 正規表現(``RE'')を実現しています。
.ZR 
を参照してください。
.I regcomp
は、内部フォームにストリングとして書き込まれた RE をコンパイルします。
.I regexec
は、その内部フォームをストリングと突き合わせて結果を報告します。
.I regerror
は、エラーコードを人が判読できるメッセージに変換します。
.I regfree
は、RE の内部フォームで使用される、
ダイナミックに割り振られた記憶域を解放します。
.PP
ヘッダ
.I <regex.h>
は、コンパイルされた内部フォーム用の
.I regex_t,
および突き合わせの報告用の
.I regmatch_t
という、2 つの構造体タイプを宣言します。4 つの関数、タイプ
.I regoff_t,
名前が ``REG_'' で始まる定数の数も宣言します。
.PP
.I Regcomp
は、
.IR cflags
のフラグに従って、
.I pattern
ストリングに含まれる正規表現をコンパイルし、
.IR preg
が指す
.I regex_t
構造体に結果を配置します。
.I cflags
は、ゼロ個以上の以下のフラグでビットワイズ論理和を取ったものです。
.IP REG_EXTENDED \w'REG_EXTENDED'u+2n
デフォルトの古い ( ``基本'' ) RE の代わりに、新しい ( ``拡張'' ) RE を
コンパイルします。
.IP REG_BASIC
0 のシノニムです。
REG_EXTENDED に対して提供されたもので、読みやすさを改善します。
.IP  REG_NOSPEC
すべての特殊文字が無効になっていることを認識して
コンパイルします。すべてのキャラクタは通常文字とみなされるので、
``RE'' はリテラルストリングになります。これは、POSIX 1003.2 と
互換性があるが指定されていないエクステンションです。
他のシステムに移植することを目的としたソフトウェアでは
注意して使用してください。REG_EXTENDED と REG_NOSPEC は、
.I regcomp
の呼び出しで同時には使用できません。
.IP REG_ICASE
大文字と小文字を区別しないマッチング用にコンパイルします。
.ZR
を参照してください。
.IP REG_NOSUB
一致したものではなく、問題の有無のレポートのみが必要な
マッチング用にコンパイルします。
.IP  REG_NEWLINE
改行を考慮するマッチング用にコンパイルします。
デフォルトの場合、改行は、RE とストリングで特殊な意味がない、完全な
通常文字です。このフラグを使用すると、ブランケット `[^' と `.' は改行と
一致しなくなります。アンカ `^' は、通常関数に加え、ストリングの改行の
後ろにある NULL ストリングと一致するようになります。アンカ `$' は、
通常関数に加え、ストリングの改行の前にある NULL ストリングと
一致するようになります。
.IP REG_PEND
最初の NULL ではなく、
.IR preg
が指す構造体の
.I re_endp
メンバが指すキャラクタの直前で正規表現が終わるようになります。
.I re_endp
メンバのタイプは
.IR const\ char\ *
です。このフラグは、RE に NULL が含まれることを許可します。
この NULL は、通常文字とみなされます。これは、POSIX 1003.2 と
互換性があるが指定されていないエクステンションです。他のシステムへの移植を
目的としたソフトウェアでは注意して使用してください。
.PP
問題がない場合、
.I regcomp
は 0 を戻し、
.I preg
が指す構造体にデータを入れます。
この構造体の 1 つのメンバ ( 
.IR re_endp
以外 ) は公表されます。
.IR size_t
タイプの
.IR re_nsub
には、RE の括弧で囲まれたサブ表現の数が入ります ( REG_NOSUB フラグを
使用した場合、このメンバの値は不定になります ) 。
.I regcomp
でエラーが発生すると、ゼロ以外のエラーコードが戻されます。診断を
参照してください。
.PP
.I regexec
は、
.I eflags
のフラグに従って、
.I preg
が指すコンパイル済み RE を
.IR string
と突き合わせ、
.IR nmatch,
.IR pmatch,
戻り値を使用して結果を報告します。RE は、これ以前に
.IR regcomp
を呼び出してコンパイルしておく必要があります。
コンパイルされたフォームは、
.IR regexec
を実行しても変更されないので、1 つのコンパイル済み RE を
複数のスレッドで同時に使用できます。
.PP
デフォルトの場合、
.I string
が指す、NULL で終了するストリングは、
ライン全体から最後の改行を除いたテキストとみなされます。
.I eflags
引数は、ゼロ個以上の以下のフラグでビットワイズ論理和を取ったものです。
.IP REG_NOTBOL \w'REG_STARTEND'u+2n
ストリングの最初のキャラクタがラインの最初ではないので、`^' アンカが
その前で一致する必要はありません。REG_NEWLINE の改行の動作は影響されません。
.IP REG_NOTEOL
ストリングを終了する NULL がラインを終了しないので、`$' アンカが
その前で一致する必要はありません。REG_NEWLINE の改行の動作は影響されません。
.IP REG_STARTEND
.IR nmatch
の値に関係なく、ストリングが
\fIstring\fR\ + \fIpmatch\fR[0].\fIrm_so\fR
で始まり、最後の NULL が
\fIstring\fR\ + \fIpmatch\fR[0].\fIrm_eo\fR
に配置されている ( その場所に NULL が実際に存在する必要はない ) と
みなされます。
.IR pmatch
と
.IR nmatch
の定義については、下記を参照してください。
これは、POSIX 1003.2 と互換性があるが指定されていないエクステンションです。
他のシステムへの移植を目的としたソフトウェアでは注意して使用してください。
\fIrm_so\fRがゼロ以外であっても、 REG_NOTBOL が暗示されることはありません。
REG_STARTEND はストリングの位置のみに影響し、マッチング方法には
影響しません。
.PP
RE かその一部が
.IR string
のサブストリングと一致する状況で一致するものについては、
.ZR
を参照してください。
.PP
通常の場合、
.I regexec
は問題がないと 0 を戻し、問題があるとゼロ以外のコード REG_NOMATCH を
戻します。例外的な状況では、ゼロではない、これ以外の
エラーコードが戻されることがあります。診断を参照してください。
.PP
RE のコンパイルで REG_NOSUB を指定した場合、または
.I nmatch
が 0 である場合、
.I regexec
は
.I pmatch
引数を無視します ( REG_STARTEND を指定した場合については下記参照 ) 。
その他の場合、
.I pmatch
は
.IR regmatch_t
タイプの
.I nmatch
構造体の配列を指します。このような構造体には、
サブストリングの第 1 キャラクタのオフセットを含む
.I rm_so
、およびサブストリングの最後の後ろにある第 1 キャラクタのオフセットを含む
.IR rm_eo
というメンバが最低でも必要です。
どちらもタイプは
.I regoff_t
( 最低でもサイズが
.I off_t
と
.IR ssize_t
である、符号付き算術タイプ ) です。オフセットは、
.IR regexec
に指定した
.I string
引数の最初から計測されます。空のサブストリングは、空のサブストリングに続く
キャラクタを示す、等しいオフセットで表現されます。
.PP
.I pmatch
配列の 0 番目のメンバには、RE 全体で一致した、
.I string
のサブストリングが入ります。残りのメンバは、RE の括弧で囲まれたサブ表現で
一致したサブストリングを報告します。メンバ
.I i
は、RE の左括弧の次数を左から右に 1 から数えたサブ表現で、サブ表現
.IR i
を報告します。突き合わせにまったく関係しなかったサブ表現か RE に存在しない
サブ表現 ( つまり、\fIi\fR\ > \fIpreg\fR\->\fIre_nsub\fR) に対応する、
配列の未使用エントリでは、
.I rm_so
と
.I rm_eo
の
両方が \-1 に設定されています。サブ表現が突き合わせに複数回関係した場合は、
一致した最後のサブストリングが報告されます ( RE `(b*)+' が `bbb' と
一致する場合、括弧に囲まれたサブ表現は、3 つそれぞれの `b' 、
および最後の `b' に続く無限の空ストリングと一致するため、
報告されるサブストリングは空のうちの 1 つになります ) .
.PP
REG_STARTEND を指定した場合、
.I pmatch
は最低でも 1 つの
.I regmatch_t
を指し ( 
.I nmatch
が 0 であるか、REG_NOSUB を指定した場合でも )、
REG_STARTEND の入力オフセットを保持する必要があります。出力での使用は、
.IR nmatch
で完全に制御されます。
.I nmatch
が 0 である場合、または REG_NOSUB を指定した場合、
.IR pmatch [0]
の値は、
.IR regexec
で問題が発生しなければ変更されません。
.PP
.I regerror
は、
.I regcomp
か
.I regexec
のゼロでない
.I errcode
を人間が判読可能で出力できるメッセージにマップします。
.I preg
が NULL 以外である場合、エラーコードは、
.IR preg
が指す
.I regex_t
の使用から発生します。エラーコードが
.IR regcomp
からのものである場合、エラーコードは、その
.IR regex_t
を使用して
最近実行した
.I regcomp
の結果となります
.IR ( regerror
は、
.I regex_t
の情報を使用してより詳細なメッセージを提供することがあります ) 。
.I  regerror
は、NULL で終わるメッセージを
.IR errbuf
が指すバッファに配置します。NULL を含めたメッセージの長さは、最大で
.I errbuf_size
バイトに制限されます。
メッセージ全体が収まらない場合は、最後の NULL の前で収まる部分までが
提供されます。どのような場合でも、戻り値は、最後の NULL も含めた、
メッセージ全体を保持するのに必要なバッファサイズになります。
.I errbuf_size
が 0 である場合、
.I errbuf
は無視されますが、戻り値は正確です。
.PP
.I regerror
に与えられた
.I errcode
と REG_ITOA の論理和を最初に取ると、作成される ``メッセージ'' は、
エラーコードの説明ではなく、``REG_NOMATCH'' など、
エラーコードの出力可能な名前になります。
.I errcode
が REG_ATOI である場合、
.I preg
は NULL 以外で、これが指す構造体の
.I re_endp
メンバは、エラーコードの出力可能な名前を指す必要があります。この場合、
.I errbuf
の結果は、エラーコードの数値の十進数になります ( 名前が
認識されない場合は 0 ) 。
REG_ITOA と REG_ATOI は、主にデバッグを目的としたものです。
これは、POSIX 1003.2 と互換性があるが指定されていない
エクステンションです。他のシステムへの移植を目的としたソフトウェアでは
注意して使用してください。また試験的なものとみなされているので、
変更されることがあることにも注意してください。
.PP
.I regfree
は、
.IR preg
が指すコンパイル済み RE に関連する、ダイナミックに
割り振られた記憶域を解放します。残った
.I regex_t
は有効なコンパイル済み RE ではないので、
.I regexec
か
.I regerror
でこれを使用しても結果は不定になります。
.PP
このすべての関数は、目次を除くグローバル変数を参照しません。引数が
安全である場合、複数のスレッドで使用しても安全です。
.SH 実装における選択
1003.2 には、``未定義'' と明言する形で、または RE の文法で
禁止されているという形で、システム設計者にゆだねている未決定事項が
数多くあります。このシステムでは、この未決定事項を以下のように
扱っています。
.PP
大文字と小文字を区別するマッチングの定義については、
.ZR
を参照してください。
.PP
メモリの制限を除けば、RE の長さに制限はありません。メモリの使用量は
RE のサイズにだいたい比例しており、制限付きの反復を除いて、RE の複雑さに
大きく左右されることはありません。ほとんどのシステムでメモリが不足する、
反復を使用した短い RE については、バグを参照してください。
.PP
1003.2 で特別な意味 ( このような特別な意味は、
古い [``basic''] RE のみにあります ) が与えられているもの
以外のバックスラッシュキャラクタは、通常文字とみなされます。
.PP
一致しない [ は REG_EBRACK エラーです。
.PP
等価クラスは、括弧で囲まれた表現の範囲を始めたり
終了したりできません。ある範囲の終了点が、他の範囲の
開始点になることはありません。
.PP
制限付き反復の反復数の制限である RE_DUP_MAX は 255 です。
.PP
反復演算子 (?, *, +, 制限) に別の反復演算子を
続けることはできません。反復演算子で表現やサブ表現を始めたり、
`^' か `|' の後に反復演算子を続けたりすることはできません。
.PP
表現やサブ表現の最初か最後に `|' を使用したり、`|' の後に
別の `|' を使用したりすることはできません。たとえば、`|' のオペランドを
空のサブ表現にすることはできません。括弧で囲まれた空のサブ表現 `()' は
許可されており、空のストリングかサブストリングと一致します。空のストリング
は、適切な RE ではありません。
.PP
後に数字が続く `{' は、制限付き反復の制限の始まりとみなされます。
この場合は、制限のシンタックスに従う必要があります。後に数字が
\fI 続かない\fR  `{' は、通常文字とみなされます。
.PP
古い ( ``基本'' ) RE のサブ表現の開始と終了を表す `^' と `$' はアンカ
であり、通常文字ではありません。
.SH 関連項目
grep(1), re_format(7)
POSIX  1003.2,  sections 2.8 (Regular Expression Notation)
および
B.5 (C Binding for Regular Expression Matching)
.SH 診断
以下は、
.I regcomp
と
.I regexec
のゼロでないエラーコードです。
.PP
.nf
.ta \w'REG_ECOLLATE'u+3n
REG_NOMATCH	regexec() の一致でエラーが発生
REG_BADPAT	正規表現が正しくない
REG_ECOLLATE	照合するエレメントが正しくない
REG_ECTYPE	キャラクタクラスが正しくない
REG_EESCAPE	エスケープ以外のキャラクタに \e が付いている
REG_ESUBREG	バックリファレンス番号が正しくない
REG_EBRACK	括弧 [ ] の数が合わない
REG_EPAREN	括弧 ( ) の数が合わない
REG_EBRACE	括弧 { } の数が合わない
REG_BADBR	{ } の反復数が正しくない
REG_ERANGE      [ ] のキャラクタ範囲が正しくない
REG_ESPACE	メモリ不足
REG_BADRPT      ?, *, + オペランドが正しくない
REG_EMPTY	空の表現かサブ表現
REG_ASSERT	``ありえない''、つまりバグ
REG_INVARG	引数が正しくない ( 負の長さのストリングなど )
.fi
.SH 歴史
最初の作者は Henry Spencer です。
.BA 4.4 
の配布に含めるために変更されました。
.SH バグ
アルファリリースであるため、欠陥のあることが知られています。
問題がある場合は報告してください。
.PP
機能的なバグとして知られているものに、国際化のシステムが
不完全であるということがあります。 1003.2 のデフォルトロケールが常に
仮定されるので、そのロケールの照合エレメントなどしか使用できません。
.PP
バックリファレンスコードは微妙で、複雑な場合はその正確さに疑問が
残ります。
.PP
.I regexec
のパフォーマンスは低くなっています。後のリリースでは
改善されますが、
.I nmatch
が 0 を越えるとコストがかかり、 1 を越えると状況はさらに悪化します。
.I regexec
は、バックリファレンスに多くのコストがかかる場合を除き、
RE の複雑さには大きく影響されません。問題は RE の長さで、
特殊文字を 2 倍として計算し、RE の長さを約 30 キャラクタに
収めると、処理は速くなります。
.PP
.I regcomp
は、マクロ拡張で制限付き反復を実現しています。制限付き反復には、
数が大きい場合、または制限付き反復がネストされている場合、長い
時間と多くのスペースが必要です。たとえば
`((((a{1,100}){1,100}){1,100}){1,100}){1,100}'
のような RE では、最終的にほとんどのマシンでスワップスペースが不足します。
.PP
はっきりとしないエラー条件へのリスポンスにも問題があるようです。
非常に大きな RE か複雑にネストした制限付き反復で引き起こされる、特定の内部
オーバフローは、適切に処理されないことがあります。
.PP
1003.2 の誤りにより、一致しない `(' が前にある場合にのみ `)' が
特殊文字になるので、`a)b' のようなものが正しい RE になってしまいます。
この問題は、仕様が修正されるまで修正されません。
.PP
バックリファレンスに関する、標準の定義は曖昧になっています。
たとえば
`a\e(\e(b\e)*\e2\e)*d' が `abbbd' と一致してしまうのです。標準が
明確になるまで、このような場合の動作は信頼すべきではありません。
.PP
ワード境界マッチングのシステムは多少あいまいで、ワード境界マッチング
とアンカの組み合わせにはバグが潜んでいる可能性があります。
