.\" Copyright (c) 1996 The NetBSD Foundation, Inc.
.\" All rights reserved.
.\"
.\" This code is derived from software contributed to The NetBSD Foundation
.\" by Paul Kranenburg.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"        This product includes software developed by the NetBSD
.\"        Foundation, Inc. and its contributors.
.\" 4. Neither the name of The NetBSD Foundation nor the names of its
.\"    contributors may be used to endorse or promote products derived
.\"    from this software without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
.\" ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
.\" TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
.\" PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE
.\" LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
.\" CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
.\" SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
.\" INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
.\" CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
.\" ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
.\" POSSIBILITY OF SUCH DAMAGE.
.\"
.\" $NetBSD: malloc.9,v 1.3 1996/11/11 00:05:11 lukem Exp $
.\" %FreeBSD: src/share/man/man9/malloc.9,v 1.40 2004/06/21 14:11:45 mpp Exp %
.\" $FreeBSD$
.\"
.Dd June 12, 2003
.Dt MALLOC 9
.Os
.Sh 名称
.Nm malloc ,
.Nm MALLOC ,
.Nm free ,
.Nm FREE ,
.Nm realloc ,
.Nm reallocf ,
.Nm MALLOC_DEFINE ,
.Nm MALLOC_DECLARE
.Nd カーネルメモリマネージメントルーチン
.Sh 書式
.In sys/types.h
.In sys/malloc.h
.Ft void *
.Fn malloc "unsigned long size" "struct malloc_type *type" "int flags"
.Fn MALLOC space cast "unsigned long size" "struct malloc_type *type" "int flags"
.Ft void
.Fn free "void *addr" "struct malloc_type *type"
.Fn FREE "void *addr" "struct malloc_type *type"
.Ft void *
.Fn realloc "void *addr" "unsigned long size" "struct malloc_type *type" "int flags"
.Ft void *
.Fn reallocf "void *addr" "unsigned long size" "struct malloc_type *type" "int flags"
.Fn MALLOC_DECLARE type
.In sys/param.h
.In sys/malloc.h
.In sys/kernel.h
.Fn MALLOC_DEFINE type shortdesc longdesc
.Sh 解説
.Fn malloc
関数はカーネルアドレス空間の初期化されていないメモリを
.Fa size
で指定された大きさの 1 つのオブジェクトとして割り当てます。
.Pp
.Fn free
関数は
.Fn malloc
で先に割り当てられていた
.Fa addr
のアドレスのメモリを再使用するために解放します。
メモリは 0 にクリアされません。
.Fa addr
が
.Dv NULL
の場合、
.Fn free
は何もしません。
.Pp
.Fn realloc
関数は、以前に割り当てられて
.Fa addr
で参照されるメモリの大きさを
.Fa size
バイトに変更します。
メモリの内容は、新サイズと旧サイズの小さい方までは、無変更となります。
戻り値は
.Fa addr
と違うかもしれないことに注意してください。
要求されたメモリが割り当て不能の場合、
.Dv NULL
が返され、
.Fa addr
で参照されるメモリは正当で無変更のままとなります。
.Fa addr
が
.Dv NULL
の場合、
.Fn realloc
関数は指定された大きさの
.Fn malloc
と同等に振舞います。
.Pp
.Fn reallocf
関数は
.Fn realloc
とまったく同じですが、
要求されたメモリを割り当て不能の場合に
渡されたポインタのメモリを解放する点が違います。
.Pp
マクロ版の
.Fn MALLOC
は機能的には
.Bd -literal -offset indent
(space) = (cast)malloc((u_long)(size), type, flags)
.Ed
.Pp
と同等で、
マクロ版
.Fn FREE
は
.Bd -literal -offset indent
free((addr), type)
.Ed
.Pp
と同等です。
標準Cライブラリの同義関数
.Pq Xr malloc 3
とは異なり、カーネルバージョンは更に 2 つの引数をとります。
引数
.Fa flags
は
.Fn malloc
の操作上の特性を以下のようにみなします。
.Bl -tag -width indent
.It Dv M_ZERO
割り当てられたメモリが全て 0 で満たされるようにします。
.It Dv M_NOWAIT
リソースの不足のため直ちに要求を満たすことができない場合は、
.Fn malloc ,
.Fn realloc ,
および
.Fn reallocf
が
.Dv NULL
を返すようにします。
割り込みコンテキストでの動作時には
.Dv M_NOWAIT
が要求されることに注意してください。
.It Dv M_WAITOK
はリソースを待つことが OK であることを示します。
この要求がすぐに満たされることが出来ない場合には、現在のプロセスは、
他のプロセスによってリソースが開放されることを待つために、
スリープ状態に置かれます。
.Dv M_WAITOK
が指定されると
.Fn malloc ,
.Fn realloc ,
.Fn reallocf
関数は
.Dv NULL
を返すことが出来ません。
.It Dv M_USE_RESERVE
要求されたメモリを獲得するために、
システムがリザーブ領域を使ってよいことを示します。
このオプションは以前は
.Dv M_KERNEL
と呼ばれていましたが、
より明示的に改名されました。
このオプションは軽視されていて、カーネルから徐々に削除されています。
そのため、新たなプログラミングでは使用されない様にするべきです。
.El
.Pp
厳密に
.Dv M_WAITOK
または
.Dv M_NOWAIT
のどちらかが指定されなければなりません。
.Pp
引数
.Fa type
はメモリの利用方法の統計をとるためと、
簡単なサニティチェックのために使われています。
これは複数の割り当てを識別するために使用することが可能です。
この統計は
.Sq vmstat -m
で調べることが出来ます。
.Pp
.Fa type
は
.Fn MALLOC_DECLARE
と
.Fn MALLOC_DEFINE
マクロを通じて
.Vt "struct malloc_type"
typedef を使用して定義されます。
.Bd -literal -offset indent
/* sys/something/foo_extern.h */

MALLOC_DECLARE(M_FOOBUF);

/* sys/something/foo_main.c */

MALLOC_DEFINE(M_FOOBUF, "foobuffers",
              "Buffers to foo data into the ether");

/* sys/something/foo_subr.c */

\&...

MALLOC(buf, struct foo_buf *, sizeof *buf, M_FOOBUF, M_NOWAIT);
.Ed
.Pp
.Fn MALLOC_DEFINE
を使用するためには、
.In sys/param.h
.In ( sys/types.h
の代わりに) および
.In sys/kernel.h
をインクルードしなければなりません。
.Sh 戻り値
.Fn malloc ,
.Fn realloc ,
.Fn reallocf
関数はすべてのタイプのオブジェクトの格納に適切なように整列された
カーネル仮想アドレスを返すか、
または要求が満足できず (すなわち
.Dv M_NOWAIT
がセットされていることを意味します) に
.Dv NULL
を返します。
.Sh 実装に関する注
1 ページまでの要求に対し、
メモリアロケータは、2 の累乗の大きさの量を割り当てます。
より大きな要求に対しては、1 個以上のページが割り当てられます。
この動作に依存してはなりませんが、
この情報がメモリ使用効率の最適化に有用かもしれません。
.Pp
プログラマは malloc フラグの
.Dv M_NOWAIT
および
.Dv M_WAITOK
と、
.Xr mbuf 9
フラグの
.Dv M_DONTWAIT
および
.Dv M_TRYWAIT
を混乱しないように注意するべきです。
.Sh コンテキスト
.Fn malloc ,
.Fn realloc
および
.Fn reallocf
は高速割り込みハンドラから呼び出されることは出来ません。
スレッド化された割り込みから呼び出される時には、
.Fa flag
は
.Dv M_NOWAIT
を含んでいなければなりません。
.Pp
.Va Giant
ではない mutex が保持されている間は、
.Fn malloc ,
.Fn realloc
および
.Fn reallocf
は
.Dv M_WAITOK
付きで呼び出したときにはスリープするかもしれません。
.Fn free
は決してスリープしません。
.Pp
.Xr vnode 9
インタロックを保持している時の
.Fn malloc
.Dv ( M_NOWAIT
付であっても) または
.Fn free
への全ての呼出しは、VM オブジェクトと vnode の相互のからみ合いのために、
LOR (ロック順序の逆転) を引き起こします。
.Sh 関連項目
.Xr vmstat 8 ,
.Xr contigmalloc 9 ,
.Xr vnode 9
.Sh 診断
.Dv INVARIANTS
コンフィギュレーションオプションを付けてコンパイルされたカーネルは、
割り当てられた領域以外への書き込みや
.Fn malloc
関数と
.Fn free
関数の不均衡な呼び出しなどにより生じたメモリ不正の検出を試みます。
一貫性チェックの失敗はパニックまたはシステムコンソールメッセージを出力します。
