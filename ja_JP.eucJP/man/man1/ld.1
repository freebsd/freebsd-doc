.\" $FreeBSD$
.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.14
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "LD 1"
.TH LD 1 "2004-05-17" "binutils-2.15" "GNU Development Tools"
.SH "名称"
ld \- GNU リンカ LD の使い方
.SH "書式"
.IX Header "書式"
ld [\fBoptions\fR] \fIobjfile\fR ...
.SH "解説"
.IX Header "解説"
\&\fBld\fR は、いくつかのオブジェクトファイルとアーカイブファイルを
結合し、そのデータを再配置し、シンボルの参照を結びつけます。
通常、プログラムのコンパイルの最終段階が、\fBld\fR を実行することです。
.PP
\&\fBld\fR は、リンク処理を明示的かつ統合的に制御するために、
\&\s-1AT&T\s0 のリンクエディタコマンド言語の文法の上位互換セットで
記述されたリンカコマンド言語のファイルを受け付けます。
.PP
このマニュアルページではコマンド言語についてふれません。
コマンド言語の詳細と \s-1GNU\s0 リンカの別の側面からの詳細については
\&\f(CW\*(C`info\*(C'\fR の \fBld\fR の項、またはマニュアル
ld: the \s-1GNU\s0 linker を参照してください。
.PP
このバージョンの \fBld\fR は、オブジェクトファイルの操作に汎用の
\&\s-1BFD\s0 ライブラリを使用します。
これによって \fBld\fR は、多くの異なった形式 \-\-\- 例えば
\&\s-1COFF\s0 や \f(CW\*(C`a.out\*(C'\fR のようなオブジェクトファイル
\&\-\-\- の読み込み、結合、書き込みが出来るようになっています。
異なる形式のファイルを一緒にリンクして、
任意の利用可能なオブジェクトファイルを生成できます。
.PP
その柔軟性の他にも、\s-1GNU\s0 リンカは、診断情報の提供という点で
他のリンカよりも役に立ちます。
多くのリンカは、エラーを起こした時点で即座に実行を中断してしまいますが、
\&\fBld\fR は可能な限り実行を続けるので、他のエラーも突き止めることが
できます。
(また、場合によっては、エラーにもかかわらず出力ファイルを生成します)。
.PP
\&\s-1GNU\s0 リンカ \fBld\fR は、広い範囲の各種状況に対応すること、
そして他のリンカとの互換性をできるだけ維持することを目指しています。
そのため、その動作を制御するための多くの選択肢があります。
.SH "オプション"
.IX Header "オプション"
このリンカは、おびただしい量のコマンドラインオプションを備えていますが、
実際には、いかなる局面においても使用されるオプションは、少ししかありません。
例えば、\fBld\fR がよく使われるのは、Unix の標準のオブジェクトファイルを、
\&\fBld\fR がサポートする標準の Unix システム上でリンクする場合です。
そのようなシステム上では、\f(CW\*(C`hello.o\*(C'\fR というファイルを
リンクするためには以下のようにします:
.PP
.Vb 1
\&        ld -o <output> /lib/crt0.o hello.o -lc
.Ve
.PP
これは、\f(CW\*(C`/lib/crt0.o\*(C'\fR と \f(CW\*(C`hello.o\*(C'\fR、そして
標準で検索されるディレクトリにあるライブラリ \f(CW\*(C`libc.a\*(C'\fR を
リンクして、\fIoutput\fR という名前のファイルを生成することを \fBld\fR に
対して指示しています。
.PP
\&\fBld\fR に対するいくつかのコマンドラインオプションは、コマンドラインの
どこででも指定できます。
しかし、ファイルを参照する \fB\-l\fR や \fB\-T\fR のようなオプションは、
オブジェクトファイルやその他のファイルオプションに関連しており、
コマンドライン中にオプションが現れた時点でファイルを読みます。
ファイルを取らないオプションを異なる引数を指定して繰返しても、
それ以上影響がないか、もしくは (コマンドライン上で左にある)
それまでの指定を上書きします。
2 回以上指定しても意味のあるオプションは、以下の説明の中で記述されています。
.PP
オプション引数ではないものは、一緒にリンクされるオブジェクトファイルか
アーカイブです。
それらは、オプションとそのオプションの引数の間に入らない限り、
コマンドラインオプションの前に置いても、後ろに置いても、
混ぜて指定しても構いません。
.PP
通常、リンカは少なくとも 1 つのオブジェクトファイルを指定して
起動されますが、\fB\-l\fR や \fB\-R\fR を用いて、または
スクリプトコマンド言語使って、他のバイナリ形式の入力ファイルを
指定することができます。
バイナリ入力ファイルが全く指定されなかった場合、
リンカは何も出力をせず、\fBNo input files\fR というメッセージを出します。
.PP
リンカがオブジェクトファイルの形式を認識できなかった時は、
それをリンカスクリプトと仮定します。
このように指定されたスクリプトは、リンクに使われる主リンカスクリプト
(デフォルトのリンカスクリプト、もしくは \fB\-T\fR で指定されたスクリプト) に
追加されます。
この機能により、一見オブジェクトファイルもしくはアーカイブに見えるが、
実際は単にシンボル値を定義しているだけだったり、
\&\f(CW\*(C`INPUT\*(C'\fR や \f(CW\*(C`GROUP\*(C'\fR を使って
他のオブジェクトを読み込んでるだけのファイルをリンクすることができます。
このように指定されたスクリプトは、主リンカスクリプトに
単に追加されるだけということに注意してください。
デフォルトのリンカスクリプトを完全に置き換える場合は、
\&\fB\-T\fR オプションを使ってください。
.PP
1 文字の名前を持つオプションの引数は、間に空白が入らずに
オプション文字に続くか、その引数が必要なオプションのすぐ後に、
独立した引数として与えられるかしなければなりません。
.PP
複数文字の名前を持つオプションは、 1 つ、または 2 つのダッシュの
どちらの後に続いても構いません。
例えば、\fB\-trace\-symbol\fR と \fB\-\-trace\-symbol\fR は等価です。
このルールには 1 つだけ例外があることに注意してください。
小文字の 'o' で始まる複数文字のオプションは、
2 つのダッシュの後にしか続きません。
これは、\fB\-o\fR オプションとの混乱を少なくするためです。
ですから、例えば \fB\-omagic\fR は出力ファイル名を
\&\fBmagic\fR とするのに対して、\fB\-\-omagic\fR は出力に
\&\s-1NMAGIC\s0 フラグを設定します。
.PP
複数文字のオプションへの引数は、等号記号がオプションとの間に入るか、
その引数を必要とするオプションのすぐ後に、
独立した引数として与えられるかしなければなりません。
例えば、\fB\-\-trace\-symbol foo\fR と \fB\-\-trace\-symbol=foo\fR は
等価です。
複数文字のオプションを、一意に定まるように省略しても、受け付けられます。
.PP
リンカがコンパイラドライバ (例えば \fBgcc\fR) によって間接的に
起動される場合、すべてのリンカのコマンドラインオプションは、
\&\fB\-Wl,\fR (もしくは特定のコンパイラドライバの適切なオプション)
に続いて以下のように指定されなければなりません:
.PP
.Vb 1
\&          gcc -Wl,--startgroup foo.o bar.o -Wl,--endgroup
.Ve
.PP
これは重要です。
というのも、このようにしないと、コンパイラドライバプログラムは
何も言わずにリンカオプションを落してしまい、リンクが正しく
行われなくなってしまうからです。
.PP
以下は、\s-1GNU\s0 リンカが受け入れる一般的なコマンドラインスイッチの
一覧です:
.IP "\fB\-a\fR\fIkeyword\fR" 4
.IX Item "-akeyword"
このオプションは、\s-1HP/UX\s0 との互換性のためにサポートされています。
\&\fIkeyword\fR 引数は、文字列 \fBarchive\fR, \fBshared\fR または
\&\fBdefault\fR のどれかでなければなりません。
\&\fB\-aarchive\fR は、機能的には \fB\-Bstatic\fR と等価であり、
残りの 2 つの keyword は、機能的に \fB\-Bdynamic\fR と等価です。
このオプションは何度でも使うことができます。
.IP "\fB\-A\fR\fIarchitecture\fR" 4
.IX Item "-Aarchitecture"
.PD 0
.IP "\fB\-\-architecture=\fR\fIarchitecture\fR" 4
.IX Item "--architecture=architecture"
.PD
現在リリースされている \fBld\fR では、このオプションは
Intel 960 ファミリのアーキテクチャでのみ使われます。
そのような \fBld\fR の構成では、\fIarchitecture\fR 引数は、
960 ファミリの特定のアーキテクチャを指定し、いくつかの保護手段を有効にし、
アーカイブライブラリの検索パスを修正します。
.Sp
将来の \fBld\fR のリリースでは、他のアーキテクチャファミリでも
同様の機能をサポートするかもしれません。
.IP "\fB\-b\fR \fIinput-format\fR" 4
.IX Item "-b input-format"
.PD 0
.IP "\fB\-\-format=\fR\fIinput-format\fR" 4
.IX Item "--format=input-format"
.PD
\&\fBld\fR は、1 種類以上のオブジェクトファイルをサポートするように
構成することができます。
もし \fBld\fR がそのように構成されているなら、\fB\-b\fR オプションで
入力するオブジェクトファイルのバイナリ形式を指定することができます。
その入力ファイルは、コマンドライン上でこのオプションに続けて指定します。
たとえ \fBld\fR が、他のオブジェクト形式をサポートするように
設定されていても、通常このオプションを指定する必要はありません。
というのも、\fBld\fR は、それぞれマシン上で最も一般的な形式が
デフォルトの入力形式であると期待するよう設定されているからです。
\&\fIinput-format\fR はテキスト文字列で、\s-1BFD\s0 ライブラリで
サポートされている特定の形式名です
(\fBobjdump \-i\fR で、使用可能なバイナリ形式名のリストが得られます)。
.Sp
ファイルを通常でないバイナリ形式とリンクしたい場合に、
このオプションを使うことができます。
(異なる形式のオブジェクトファイルとリンクする時に) 同様に
\&\fB\-b\fR で明示的に形式を切り替えられます。
その場合は \fB\-b\fR \fIinput-format\fR を特定の形式の
オブジェクトファイルの各グループの前で指定します。
.Sp
デフォルトの形式は、環境変数 \f(CW\*(C`GNUTARGET\*(C'\fR から
取得されます。
.Sp
スクリプトから入力形式を指定する事もでき、
その場合はコマンド \f(CW\*(C`TARGET\*(C'\fR を使います。
.IP "\fB\-c\fR \fIMRI-commandfile\fR" 4
.IX Item "-c MRI-commandfile"
.PD 0
.IP "\fB\-\-mri\-script=\fR\fIMRI-commandfile\fR" 4
.IX Item "--mri-script=MRI-commandfile"
.PD
\&\s-1MRI\s0 製のリンカとの互換性のため、\fBld\fR は、
\&\s-1GNU\s0 ld ドキュメントの \s-1MRI\s0 互換スクリプトファイルの章に
記述されているもう一つの制限されたコマンド言語で書かれた
スクリプトファイルを受け付けます。
オプション \fB\-c\fR で \s-1MRI\s0 スクリプトファイルを導入した場合は、
\&\fB\-T\fR オプションを用いることで、汎用目的の \fBld\fR スクリプト言語で
書かれたリンカスクリプトを走らせることができます。
\&\fIMRI-commandfile\fR がなかった場合、\fBld\fR は、\fB\-L\fR で指定された
すべてのディレクトリを探します。
.IP "\fB\-d\fR" 4
.IX Item "-d"
.PD 0
.IP "\fB\-dc\fR" 4
.IX Item "-dc"
.IP "\fB\-dp\fR" 4
.IX Item "-dp"
.PD
これらの 3 つのオプションは等価です。
他のリンカとの互換性のために複数の形式がサポートされています。
再配置可能なファイルを出力するように (\fB\-r\fR によって)
指定された場合でも、コモンシンボルに空間を割り当てます。
スクリプトコマンドの \f(CW\*(C`FORCE_COMMON_ALLOCATION\*(C'\fR も
同じ効果を持ちます。
.IP "\fB\-e\fR \fIentry\fR" 4
.IX Item "-e entry"
.PD 0
.IP "\fB\-\-entry=\fR\fIentry\fR" 4
.IX Item "--entry=entry"
.PD
プログラムの実行開始点を示す明示的なシンボルとして、
デフォルトのエントリポイントの代わりに \fIentry\fR を使用します。
シンボル \fIentry\fR がなかった場合、リンカは \fIentry\fR を
数字として解釈しようと試み、それを開始番地として使います
(数字は基数を 10 として解釈されます。
先頭についた \fB0x\fR は
16 を基数とすることを表し、\fB0\fR は 8 を基数とすることを表します)。
.IP "\fB\-E\fR" 4
.IX Item "-E"
.PD 0
.IP "\fB\-\-export\-dynamic\fR" 4
.IX Item "--export-dynamic"
.PD
動的にリンクされた実行ファイルを作成する時に、すべてのシンボルを
動的シンボルテーブルに加えます。
動的シンボルテーブルは、実行時に動的オブジェクトから見えるシンボルの
テーブルです。
.Sp
もしこのオプションを使用しなかった場合、通常、
動的シンボルテーブルには、リンク中に指定されたいくつかの
動的オブジェクトから参照されるシンボルのみが含まれます。
.Sp
他の動的オブジェクトではなく、そのプログラムで定義されているシンボルを
参照し返す必要のある動的オブジェクトを \f(CW\*(C`dlopen\*(C'\fR で
ロードする場合は、おそらくプログラム自身をリンクする時にこのオプションを
使う必要があるでしょう。
.Sp
出力形式がサポートしていた場合、バージョンスクリプトを使って、
どのシンボルを動的シンボルテーブルに追加すべきかを制御できます。
\&\f(CW@ref\fR{\s-1VERSION\s0} 中の \fB\-\-version\-script\fR の記述を
参照してください。
.IP "\fB\-EB\fR" 4
.IX Item "-EB"
ビッグエンディアンのオブジェクトをリンクします。
これはデフォルトの出力形式に影響します。
.IP "\fB\-EL\fR" 4
.IX Item "-EL"
リトルエンディアンのオブジェクトをリンクします。
これはデフォルトの出力形式に影響します。
.IP "\fB\-f\fR" 4
.IX Item "-f"
.PD 0
.IP "\fB\-\-auxiliary\fR \fIname\fR" 4
.IX Item "--auxiliary name"
.PD
\&\s-1ELF\s0 の共有オブジェクトを生成する際に、内部の \s-1DT_AUXILIARY\s0
フィールドに、指定した name を設定します。
これは、共有オブジェクトのシンボルテーブルを、共有オブジェクト
\&\fIname\fR のシンボルテーブルに適用する補助のフィルタとして使う事を、
動的リンカに対して指示します。
.Sp
後からこのフィルタオブジェクトに対してプログラムをリンクした場合、
そのプログラムを実行した時に、動的リンカは
\&\s-1DT_AUXILIARY\s0 フィールドを見ます。
動的リンカがフィルタオブジェクトからのシンボルを解決する場合は、
共有オブジェクト \fIname\fR の中に定義があるかどうかをまずチェックします。
もしそれがあった場合は、フィルタオブジェクト中の定義の代わりに使用されます。
共有オブジェクト \fIname\fR は、存在しなくても構いません。
このようにして共有オブジェクト \fIname\fR は、おそらくデバッギングや
マシン特有のパフォーマンスといったある機能の別の実装を提供するために
使用できます。
.Sp
このオプションは 2 回以上指定されても構いません。
\&\s-1DT_AUXILIARY\s0 エントリは、コマンドラインに現れた順番に生成されます。
.IP "\fB\-F\fR \fIname\fR" 4
.IX Item "-F name"
.PD 0
.IP "\fB\-\-filter\fR \fIname\fR" 4
.IX Item "--filter name"
.PD
\&\s-1ELF\s0 の共有オブジェクトを生成する際に、内部の \s-1DT_FILTER\s0
フィールドに、指定した name を設定します。
これは、共有オブジェクトのシンボルテーブルを、共有オブジェクト
\&\fIname\fR のシンボルテーブルに適用するフィルタとして使う事を、
動的リンカに対して指示します。
.Sp
後からこのフィルタオブジェクトに対してプログラムをリンクした場合、
そのプログラムを実行した時に、動的リンカは
\&\s-1DT_FILTER\s0 フィールドを見ます。
動的リンカは、通常のようにフィルタオブジェクトのシンボルテーブルに従って
シンボルを解決しますが、実際には共有オブジェクト \fIname\fR 中に見つかった
定義にリンクします。
このようにしてフィルタオブジェクトは、オブジェクト \fIname\fR によって
提供されたシンボルのサブセットを選択するのに使用できます。
.Sp
いくつかの古いリンカは、コンパイルツールチェーンを通して、
\&\fB\-F\fR オプションを、入力および出力オブジェクトファイル両方の形式を
指定するために使っていました。
\&\s-1GNU\s0 リンカは、この目的に別のメカニズムを用いています。
それは \fB\-b\fR, \fB\-\-format\fR, \fB\-\-oformat\fR オプションや、
リンカスクリプト中の \f(CW\*(C`TARGET\*(C'\fR コマンド、
そして \f(CW\*(C`GNUTARGET\*(C'\fR 環境変数です。
\&\s-1GNU\s0 リンカは、\s-1ELF\s0 共有オブジェクトを作らない時には、
\&\fB\-F\fR オプションを無視します。
.IP "\fB\-fini\fR \fIname\fR" 4
.IX Item "-fini name"
\&\s-1ELF\s0 の実行形式もしくは共有オブジェクトを生成する際、
関数のアドレスに \s-1DT_FINI\s0 を設定することにより、
実行形式もしくは共有オブジェクトがアンロードされる時に \s-1NAME\s0 を呼びます。
デフォルトでは、リンカは \f(CW\*(C`_fini\*(C'\fR を、呼ぶべき関数として
使用します。
.IP "\fB\-g\fR" 4
.IX Item "-g"
無視されます。
これは他のツールとの互換性のために提供されています。
.IP "\fB\-G\fR\fIvalue\fR" 4
.IX Item "-Gvalue"
.PD 0
.IP "\fB\-\-gpsize=\fR\fIvalue\fR" 4
.IX Item "--gpsize=value"
.PD
\&\s-1GP\s0 レジスタを使用して最適化されるオブジェクトの最大サイズを
\&\fIsize\fR に設定します。
これは、大きいオブジェクトと小さいオブジェクトを異なるセクションに
配置することをサポートしている \s-1MIPS\s0 \s-1ECOFF\s0 のような
オブジェクトファイル形式の場合のみ意味を持ちます。
他のオブジェクトファイル形式の場合は無視されます。
.IP "\fB\-h\fR\fIname\fR" 4
.IX Item "-hname"
.PD 0
.IP "\fB\-soname=\fR\fIname\fR" 4
.IX Item "-soname=name"
.PD
\&\s-1ELF\s0 の共有オブジェクトを生成する際に、内部の \s-1DT_SONAME\s0
フィールドに、指定した name を設定します。
実行形式が \s-1DT_SONAME\s0 フィールドを持つ共有オブジェクトと
リンクされると、実行形式が実行される時に、動的リンカは
リンカに与えられたファイル名を使う代わりに DT_SONAME フィールドで
指定された共有オブジェクトをロードしようとします。
.IP "\fB\-i\fR" 4
.IX Item "-i"
インクリメンタルリンクを行います
(オプション \fB\-r\fR と同じです)。
.IP "\fB\-init\fR \fIname\fR" 4
.IX Item "-init name"
\&\s-1ELF\s0 の実行形式もしくは共有オブジェクトを生成する際、
関数のアドレスに \s-1DT_INIT\s0 を設定することにより、
実行形式もしくは共有オブジェクトがロードされる時に \s-1NAME\s0 を呼びます。
デフォルトでは、リンカは \f(CW\*(C`_init\*(C'\fR を、呼ぶべき関数として
使用します。
.IP "\fB\-l\fR\fIarchive\fR" 4
.IX Item "-larchive"
.PD 0
.IP "\fB\-\-library=\fR\fIarchive\fR" 4
.IX Item "--library=archive"
.PD
アーカイブファイル \fIarchive\fR を、リンクすべきファイルのリストに
追加します。
このオプションは、何度指定しても構いません。
\&\fBld\fR は、\fIarchive\fR が指定されるたびに
\&\f(CW\*(C`lib\f(CIarchive\f(CW.a\*(C'\fR を自身のパスリストから探します。
.Sp
共有ライブラリをサポートするシステムでは、\fBld\fR は、\f(CW\*(C`.a\*(C'\fR
以外のサフィックスを持つライブラリも探すことがあります。
特に \s-1ELF\s0 や SunOS システムでは、\fBld\fR は、\f(CW\*(C`.a\*(C'\fR
というサフィックスを持つライブラリを探す前に、\f(CW\*(C`.so\*(C'\fR という
サフィックスを持つライブラリをディレクトリから探します。
慣習により、\f(CW\*(C`.so\*(C'\fR サフィックスは共有ライブラリを示します。
.Sp
リンカは、コマンドラインで指定されたその場所でのみ、
1 回だけアーカイブを検索します。
もしそのアーカイブが、それまでにコマンドラインに現れたオブジェクトでは
定義していないシンボルを定義していた時は、リンカは、そのアーカイブから
適切なファイルを取り込みます。
しかし、コマンドラインに後から現れたオブジェクトに含まれる
未定義シンボルによって、リンカがアーカイブを再度検索することはありません。
.Sp
アーカイブを複数回検索するようリンカに強制する方法は、
\&\fB\-(\fR オプションを参照してください。
.Sp
同じアーカイブをコマンドライン上に複数回指定しても構いません。
.Sp
この種のアーカイブ検索は、Unix のリンカでは普通です。
しかし \s-1AIX\s0 上で \fBld\fR を使用する場合、\s-1AIX\s0 リンカとは
異なった動作をするので注意が必要です。
.IP "\fB\-L\fR\fIsearchdir\fR" 4
.IX Item "-Lsearchdir"
.PD 0
.IP "\fB\-\-library\-path=\fR\fIsearchdir\fR" 4
.IX Item "--library-path=searchdir"
.PD
パス \fIsearchdir\fR を、\fBld\fR がアーカイブライブラリや \fBld\fR の
制御スクリプトを検索するのに使用するパスのリストに追加します。
このオプションは、何度指定しても構いません。
ディレクトリは、コマンドライン上で指定された順に検索されます。
コマンドライン上で指定されたディレクトリは、デフォルトのディレクトリの
前に検索されます。
すべての \fB\-L\fR オプションは、オプションの出現した順番によらず、
すべての \fB\-l\fR オプションに適用されます。
.Sp
\&\fIsearchdir\fR が \f(CW\*(C`=\*(C'\fR で始まる場合、
\&\f(CW\*(C`=\*(C'\fR は \fIsysroot prefix\fR 
(リンカが構成された際に指定されたパス) により置き換えられます。
.Sp
(\fB\-L\fR で指定されない) デフォルトの検索パスの組は、
\&\fBld\fR がどのエミュレーションモードを使っているか、
そして場合によってはどのように構成されたかに依存します。
.Sp
パスは、リンクスクリプト中で \f(CW\*(C`SEARCH_DIR\*(C'\fR
コマンドを用いても指定できます。
この方法で指定されたディレクトリは、コマンドライン上でリンカスクリプトが
現れた時点で検索されます。
.IP "\fB\-m\fR\fIemulation\fR" 4
.IX Item "-memulation"
\&\fIemulation\fR リンカをエミュレートします。
\&\fB\-\-verbose\fR や \fB\-V\fR オプションで、利用可能なエミュレーションを
リストできます。
.Sp
\&\fB\-m\fR オプションが指定されていない場合、エミュレーションは、
\&\f(CW\*(C`LDEMULATION\*(C'\fR 環境変数が定義されていれば
そこから取得されます。
.Sp
それ以外の場合、デフォルトのエミュレーションは、リンカがどのように
構成されたかに依存します。
.IP "\fB\-M\fR" 4
.IX Item "-M"
.PD 0
.IP "\fB\-\-print\-map\fR" 4
.IX Item "--print-map"
.PD
リンクマップを標準出力に表示します。
リンクマップは、以下を含むリンクの情報を提供します:
.RS 4
.IP "*" 4
オブジェクトファイルとシンボルが、メモリのどこにマップされるか。
.IP "*" 4
コモンシンボルがどのように割り当てられたか。
.IP "*" 4
リンクに含まれるすべてのアーカイブメンバ、および
そのアーカイブメンバを取り込むきっかけとなったシンボル。
.RE
.RS 4
.RE
.IP "\fB\-n\fR" 4
.IX Item "-n"
.PD 0
.IP "\fB\-\-nmagic\fR" 4
.IX Item "--nmagic"
.PD
セクションのページアラインメントを無効にし、可能であれば
出力に \f(CW\*(C`NMAGIC\*(C'\fR と印を付けます。
.IP "\fB\-N\fR" 4
.IX Item "-N"
.PD 0
.IP "\fB\-\-omagic\fR" 4
.IX Item "--omagic"
.PD
テキストセクションとデータセクションを読み書き可能に設定します。
また、データセグメントのページアラインメントも行いません。
共有ライブラリとのリンクもできなくなります。
出力形式が Unix 形式のマジックナンバをサポートしている場合、
出力に \f(CW\*(C`OMAGIC\*(C'\fR と印を付けます。
注意: PE-COFF ターゲットに対して、書き込み可能なテキストセクションは
許されていますが、これは Microsoft が発行している形式仕様には
適合していません。
.IP "\fB\-\-no\-omagic\fR" 4
.IX Item "--no-omagic"
このオプションは、\fB\-N\fR オプションの持つ効果のほとんどを否定します。
テキストセグメントを読み込み専用とし、データセグメントを強制的に
ページアラインメントします。
このオプションは共有ライブラリとのリンクを
有効にしないことに注意して下さい。
共有ライブラリとのリンクのためには、
\&\fB\-Bdynamic\fR を使用して下さい。
.IP "\fB\-o\fR \fIoutput\fR" 4
.IX Item "-o output"
.PD 0
.IP "\fB\-\-output=\fR\fIoutput\fR" 4
.IX Item "--output=output"
.PD
\&\fIoutput\fR を、\fBld\fR によって生成されるプログラムの
名前として使用します。
このオプションが指定されなかった場合、\fIa.out\fR という名前が
デフォルトで使用されます。
スクリプトコマンドの \f(CW\*(C`OUTPUT\*(C'\fR によっても、
出力ファイル名を指定することができます。
.IP "\fB\-O\fR \fIlevel\fR" 4
.IX Item "-O level"
\&\fIlevel\fR が 0 より大きい数値であった場合、
\&\fBld\fR は出力を最適化します。
これにはとても長い時間がかかりますので、最終的なバイナリの作成時のみ
有効にするべきでしょう。
.IP "\fB\-q\fR" 4
.IX Item "-q"
.PD 0
.IP "\fB\-\-emit\-relocs\fR" 4
.IX Item "--emit-relocs"
.PD
最終的にリンクされた実行形式中に、再配置セクションと内容を残します。
これらの情報は、リンク後の分析・最適化ツールが実行形式を正しく変更するのに
必要となるでしょう。
これは、より大きな実行形式を生成します。
.Sp
このオプションは、現在 \s-1ELF\s0 プラットフォームでしか
サポートされていません。
.IP "\fB\-r\fR" 4
.IX Item "-r"
.PD 0
.IP "\fB\-\-relocatable\fR" 4
.IX Item "--relocatable"
.PD
再配置可能な出力を生成します。
つまり、\fBld\fR への入力として利用できる出力ファイルを生成します。
これはよく \fI部分リンク\fR と呼ばれます。
この副作用として、Unix の標準のマジックナンバをサポートする環境では、
このオプションは出力ファイルのマジックナンバを
\&\f(CW\*(C`OMAGIC\*(C'\fR に設定します。
このオプションが指定されなかった場合は、
絶対アドレス値を用いたファイルが生成されます。
\&\*(C+ プログラムをリンクする場合、
このオプションはコンストラクタへの参照を解決しません。
そのような場合は \fB\-Ur\fR を使用してください。
.Sp
入力ファイルが出力ファイルと同じ形式ではない場合、
部分リンクは、入力ファイルが再配置セクションを全く持たない時のみ
サポートされます。
異なった出力形式は、さらなる制限を持つことがあります。
例えば、ある \f(CW\*(C`a.out\*(C'\fR\ ベースの形式は、
入力ファイルが異なった形式であった時には、部分リンクを全くサポートしません。
.Sp
このオプションは、\fB\-i\fR と同じです。
.IP "\fB\-R\fR \fIfilename\fR" 4
.IX Item "-R filename"
.PD 0
.IP "\fB\-\-just\-symbols=\fR\fIfilename\fR" 4
.IX Item "--just-symbols=filename"
.PD
シンボル名やそのアドレスを \fIfilename\fR から読み込みますが、
それを再配置したり出力に含めることはしません。
これにより、出力ファイルが他のプログラムで定義されたメモリの絶対位置を
シンボルで参照できるようになります。
このオプションは 2 回以上使って構いません。
.Sp
他の \s-1ELF\s0 リンカとの互換性のため、\fB\-R\fR オプションの後に
ファイル名ではなくディレクトリ名が続いた場合、
\&\fB\-rpath\fR オプションとして扱われます。
.IP "\fB\-s\fR" 4
.IX Item "-s"
.PD 0
.IP "\fB\-\-strip\-all\fR" 4
.IX Item "--strip-all"
.PD
すべてのシンボル情報を出力ファイルから削除します。
.IP "\fB\-S\fR" 4
.IX Item "-S"
.PD 0
.IP "\fB\-\-strip\-debug\fR" 4
.IX Item "--strip-debug"
.PD
(すべてのシンボルではなく) すべてのデバッグ用シンボル情報を
出力ファイルから削除します。
.IP "\fB\-t\fR" 4
.IX Item "-t"
.PD 0
.IP "\fB\-\-trace\fR" 4
.IX Item "--trace"
.PD
\&\fBld\fR が入力ファイルを処理するたびに、入力ファイル名を表示します。
.IP "\fB\-T\fR \fIscriptfile\fR" 4
.IX Item "-T scriptfile"
.PD 0
.IP "\fB\-\-script=\fR\fIscriptfile\fR" 4
.IX Item "--script=scriptfile"
.PD
\&\fIscriptfile\fR をリンカスクリプトとして使用します。
このスクリプトは、(追加されるのではなく) \fBld\fR のデフォルトの
リンカスクリプトを置き換えます。
したがって、\fIscriptfile\fR には、出力ファイルを記述するのに必要な
すべてのことを指定しなければなりません。
\&\fIscriptfile\fR がカレントディレクトリに存在しない場合、
\&\f(CW\*(C`ld\*(C'\fR は、すべての \fB\-L\fR オプションに続いて
指定されたディレクトリを検索します。
複数の \fB\-T\fR オプションは、一つにまとめられます。
.IP "\fB\-u\fR \fIsymbol\fR" 4
.IX Item "-u symbol"
.PD 0
.IP "\fB\-\-undefined=\fR\fIsymbol\fR" 4
.IX Item "--undefined=symbol"
.PD
強制的に \fIsymbol\fR を未定義シンボルとして出力ファイルに含めます。
こうすることによって、例えば標準ライブラリからさらにモジュールを
リンクする引き金とすることができます。
異なるオプション引数を持つことで \fB\-u\fR を繰返し指定することができ、
未定義シンボルを追加します。
このオプションは、\f(CW\*(C`EXTERN\*(C'\fR リンカスクリプトコマンドと
同じです。
.IP "\fB\-Ur\fR" 4
.IX Item "-Ur"
\&\*(C+ プログラム以外に対しては、このオプションは \fB\-r\fR と同じです。
再配置可能な出力、つまり \fBld\fR に再度入力可能な出力ファイルを
生成します。
\&\*(C+ プログラムをリンクする場合、\fB\-r\fR とは異なり、
\&\fB\-Ur\fR はコンストラクタへの参照を解決します。
\&\fB\-Ur\fR を使用してリンクされたファイルに対しては、
\&\fB\-Ur\fR を使用できません。
コンストラクタのテーブルが一度生成されると、追加することができないのです。
\&\fB\-Ur\fR は、最後の部分リンクのみに使用するようにして、
その他の場合は \fB\-r\fR を使用してください。
.IP "\fB\-\-unique[=\fR\fI\s-1SECTION\s0\fR\fB]\fR" 4
.IX Item "--unique[=SECTION]"
\&\fI\s-1SECTION\s0\fR に一致した入力セクションごとに、
個別の出力セクションを生成します。
オプションのワイルドカード \fI\s-1SECTION\s0\fR 引数がない場合は、
親なし入力セクションごとに、個別の出力セクションを生成します。
親なしセクションとは、リンカスクリプト中に
明示的に記述されていないセクションです。
このオプションは、コマンドライン上で複数回使用できます。
これによって、通常の同名の入力セクションのマージを行わないようにします。
これは、リンカスクリプト中での出力セクションの割り当てを上書きします。
.IP "\fB\-v\fR" 4
.IX Item "-v"
.PD 0
.IP "\fB\-\-version\fR" 4
.IX Item "--version"
.IP "\fB\-V\fR" 4
.IX Item "-V"
.PD
\&\fBld\fR のバージョン番号を表示します。
\&\fB\-V\fR オプションは、サポートしているエミュレータの一覧も表示します。
.IP "\fB\-x\fR" 4
.IX Item "-x"
.PD 0
.IP "\fB\-\-discard\-all\fR" 4
.IX Item "--discard-all"
.PD
すべてのローカルシンボルを削除します。
.IP "\fB\-X\fR" 4
.IX Item "-X"
.PD 0
.IP "\fB\-\-discard\-locals\fR" 4
.IX Item "--discard-locals"
.PD
すべての一時的なローカルシンボルを削除します。
ほとんどのターゲットにおいて、それは名前が \fBL\fR で始まる
すべてのローカルシンボルです。
.IP "\fB\-y\fR \fIsymbol\fR" 4
.IX Item "-y symbol"
.PD 0
.IP "\fB\-\-trace\-symbol=\fR\fIsymbol\fR" 4
.IX Item "--trace-symbol=symbol"
.PD
リンクされたファイルのうち、\fIsymbol\fR が現れるファイル名を表示します。
このオプションは何度でも指定できます。
多くのシステム上では、シンボル名の前にアンダスコアを
つける必要があるでしょう。
.Sp
このオプションは、リンク中に未定義シンボルが発見されたが、
それがどこから参照されているのかがわからない場合に役に立ちます。
.IP "\fB\-Y\fR \fIpath\fR" 4
.IX Item "-Y path"
デフォルトのライブラリ検索パスに \fIpath\fR を追加します。
このオプションは、Solaris との互換性のために存在します。
.IP "\fB\-z\fR \fIkeyword\fR" 4
.IX Item "-z keyword"
認識されるキーワードは次のとおりです。
.RS 4
.IP "\fBcombreloc\fR" 4
.IX Item "combreloc"
複数の再配置セクションを結合し、動的シンボル検索キャッシュ処理を
可能にします。
.IP "\fBdefs\fR" 4
.IX Item "defs"
オブジェクトファイル中の未定義シンボルを許しません。
共有ライブラリ中の未定義シンボルは許されます。
.IP "\fBinitfirst\fR" 4
.IX Item "initfirst"
このオプションは共有オブジェクトを構築しているときにのみ意味があります。
オブジェクトに印を付け、そのオブジェクトの実行時初期化処理が、
他のすべてのオブジェクトがプロセスに導入されるより前に、
同時に生じるようにします。
同様に、そのオブジェクトの実行時終了処理が、
他のすべてのオブジェクトの実行時終了処理が終った後に
生じるようにします。
.IP "\fBinterpose\fR" 4
.IX Item "interpose"
シンボルテーブルが主実行形式以外のすべてのシンボルの前に挿入されるように、
オブジェクトに印を付けます。
.IP "\fBloadfltr\fR" 4
.IX Item "loadfltr"
フィルタが実行時に直ちに処理されるように、オブジェクトに印を付けます。
.IP "\fBmuldefs\fR" 4
.IX Item "muldefs"
複数回の定義を許可します。
.IP "\fBnocombreloc\fR" 4
.IX Item "nocombreloc"
複数の再配置セクションの結合を無効にします。
.IP "\fBnocopyreloc\fR" 4
.IX Item "nocopyreloc"
再配置セクションの複製生成を無効にします。
.IP "\fBnodefaultlib\fR" 4
.IX Item "nodefaultlib"
依存関係検索の際に、デフォルトライブラリ検索パスを
無視するように、オブジェクトに印を付けます。
.IP "\fBnodelete\fR" 4
.IX Item "nodelete"
実行時にロード解除 (unload) されないように、
オブジェクトに印を付けます。
.IP "\fBnodlopen\fR" 4
.IX Item "nodlopen"
\&\f(CW\*(C`dlopen\*(C'\fR が適用できなくなるように、
オブジェクトに印を付けます。
.IP "\fBnodump\fR" 4
.IX Item "nodump"
\&\f(CW\*(C`dldump\*(C'\fR によりダンプできなくなるように、
オブジェクトに印を付けます。
.IP "\fBnow\fR" 4
.IX Item "now"
実行可能ライブラリまたは共有ライブラリを生成するときに、
関数が最初に呼び出されるまで関数呼び出し解決を遅らせるのではなく、
プログラムの実行開始時または、
共有ライブラリが dlopen を使いリンクする際に
すべてのシンボルを解決するように動的リンカに教えるために、
ライブラリに印を付けます。
.IP "\fBorigin\fR" 4
.IX Item "origin"
\&\f(CW$ORIGIN\fR を含むかもしれないオブジェクトに印を付けます。
.RE
.RS 4
.Sp
他のキーワードは、Solaris との互換性のために無視されます。
.RE
.IP "\fB\-(\fR \fIarchives\fR \fB\-)\fR" 4
.IX Item "-( archives -)"
.PD 0
.IP "\fB\-\-start\-group\fR \fIarchives\fR \fB\-\-end\-group\fR" 4
.IX Item "--start-group archives --end-group"
.PD
\&\fIarchives\fR は、アーカイブファイルのリストを指定します。
これらはファイル名そのものでも、\fB\-l\fR オプションでも構いません。
.Sp
指定されたアーカイブは、新たな未定義参照がなくなるまで繰返し検索されます。
通常、アーカイブは、コマンドラインで指定された順番で 1 回だけ検索されます。
そのアーカイブ中のシンボルが、コマンドライン上の後ろに現れた
アーカイブ中のオブジェクトが参照する未定義シンボルを
解決するのに必要な場合、リンカはその参照を解決することができません。
アーカイブをグループ化すると、すべての可能な参照が解決されるまで、
それらのすべてのアーカイブは繰返し検索されます。
.Sp
このオプションを使用すると、パフォーマンスが大きく落ちます。
これを使うのは、2 つ以上のアーカイブ中で、参照の循環が避けられない
場合のみに使用するのがよいでしょう。
.IP "\fB\-\-accept\-unknown\-input\-arch\fR" 4
.IX Item "--accept-unknown-input-arch"
.PD 0
.IP "\fB\-\-no\-accept\-unknown\-input\-arch\fR" 4
.IX Item "--no-accept-unknown-input-arch"
.PD
リンカに対し、アーキテクチャを識別できない入力ファイルを
受け付けるように指示します。
これは、ユーザが自分が何をしているかを理解していて、それでも
未知の入力ファイルをリンクしようとしている場合を想定しています。
リリース 2.14 より前には、こちらの方がリンカのデフォルトの動作でした。
リリース 2.14 以後、これらの入力ファイルが拒否されるようになり、
かつての動作に戻すために、\fB\-\-accept\-unknown\-input\-arch\fR 
オプションが追加されました。
.IP "\fB\-\-as\-needed\fR" 4
.IX Item "--as-needed"
.PD 0
.IP "\fB\-\-no\-as\-needed\fR" 4
.IX Item "--no-as-needed"
.PD
このオプションは、コマンド行で指定した動的ライブラリで
\&\fB\-\-as\-needed\fR オプションより後のものの
\&\s-1ELF\s0 \s-1DT_NEEDED\s0 タグに影響を与えます。
通常、リンカは コマンドラインで指定した動的ライブラリそれぞれに対し
それらが実際に必要かどうかに無関係に \s-1DT_NEEDED\s0 タグを
追加します。
\&\fB\-\-as\-needed\fR により、通常オブジェクトから何らかの参照を
満たすライブラリにのみ \s-1DT_NEEDED\s0 タグを付けるようになります。
\&\fB\-\-no\-as\-needed\fR によりデフォルトの動作に戻ります。
.IP "\fB\-assert\fR \fIkeyword\fR" 4
.IX Item "-assert keyword"
このオプションは、SunOS との互換性のために無視されます。
.IP "\fB\-Bdynamic\fR" 4
.IX Item "-Bdynamic"
.PD 0
.IP "\fB\-dy\fR" 4
.IX Item "-dy"
.IP "\fB\-call_shared\fR" 4
.IX Item "-call_shared"
.PD
動的ライブラリとリンクします。
これは、共有ライブラリをサポートするプラットフォーム上でのみ
意味を持ちます。
このオプションは、そのようなプラットフォーム上では、
普通デフォルトとなっています。
このオプションに異なる形式があるのは、様々なシステムとの互換性のためです。
このオプションは、コマンド上で何度でも使用することができます。
これは後に続く \fB\-l\fR オプションのライブラリ検索に影響します。
.IP "\fB\-Bgroup\fR" 4
.IX Item "-Bgroup"
動的セクション中の \f(CW\*(C`DT_FLAGS_1\*(C'\fR エントリの
\&\f(CW\*(C`DF_1_GROUP\*(C'\fR フラグを設定します。
これによって、動的リンカがこのオブジェクトとその依存関係の検索を
グループ内でのみ実行するようになります。
\&\fB\-\-no\-unresolved-symbols=report-all\fR が暗黙に指定されます。
このオプションは、共有ライブラリをサポートする
\&\s-1ELF\s0 プラットホーム上でのみ意味を持ちます。
.IP "\fB\-Bstatic\fR" 4
.IX Item "-Bstatic"
.PD 0
.IP "\fB\-dn\fR" 4
.IX Item "-dn"
.IP "\fB\-non_shared\fR" 4
.IX Item "-non_shared"
.IP "\fB\-static\fR" 4
.IX Item "-static"
.PD
共有ライブラリをリンクしません。
これは、共有ライブラリをサポートするプラットフォーム上でのみ
意味を持ちます。
このオプションに異なる形式があるのは、様々なシステムとの互換性のためです。
このオプションは、コマンドライン上で何度でも使用することができます。
これは後に続く \fB\-l\fR オプションのライブラリ検索に影響します。
このオプションは \fB\-\-unresolved\-symbols=report\-all\fR も
暗黙のうちに含みます。
.IP "\fB\-Bsymbolic\fR" 4
.IX Item "-Bsymbolic"
共有ライブラリを生成する際に、その共有ライブラリ中に定義があれば、
グローバルシンボルへの参照をその定義に結びつけます。
通常、共有ライブラリをリンクしたプログラムは、
その共有ライブラリ中の定義を上書きできます。
このオプションは、共有ライブラリをサポートする
\&\s-1ELF\s0 プラットホーム上でのみ意味を持ちます。
.IP "\fB\-\-check\-sections\fR" 4
.IX Item "--check-sections"
.PD 0
.IP "\fB\-\-no\-check\-sections\fR" 4
.IX Item "--no-check-sections"
.PD
セクションアドレスが割り当てられた後、それらのアドレスが重なって
いないかどうかのチェックをしないようリンカに指示します。
通常、リンカはチェックを行い、重なりを発見した時は
適切なエラーメッセージを出力します。
リンカは、オーバレイセクションのことを知っており、
それを生成することを許可します。
コマンドラインスイッチ \fB\-\-check\-sections\fR を使用することで、
デフォルトの動作に戻せます。
.IP "\fB\-\-cref\fR" 4
.IX Item "--cref"
相互参照テーブルを出力します。
リンカマップファイルが生成される場合、
相互参照テーブルはマップファイルに出力されます。
それ以外の場合、標準出力に出力されます。
.Sp
テーブル形式は、意図的に簡単にしているので、
必要な場合はスクリプトで簡単に処理することができます。
シンボルは、名前でソートされて出力されます。
それぞれのシンボルごとに、ファイル名がリストされます。
シンボルが定義されている場合は、リストの最初のファイルに
その定義が含まれています。
残りのファイルは、そのシンボルへの参照を含んでいます。
.IP "\fB\-\-no\-define\-common\fR" 4
.IX Item "--no-define-common"
このオプションは、コモンシンボルへのアドレス割り当てを抑制します。
スクリプトコマンド \f(CW\*(C`INHIBIT_COMMON_ALLOCATION\*(C'\fR は、
同じ効果を持ちます。
.Sp
\&\fB\-\-no\-define\-common\fR オプションは、コモンシンボルへアドレスを
割り当てる判断を、出力ファイルのタイプの選択から切り離します。
このオプションを指定しない場合は、再配置不可の出力タイプによって、
アドレスは強制的にコモンシンボルへ割り当てられます。
\&\fB\-\-no\-define\-common\fR を使用することにより、共有ライブラリから
参照されるコモンシンボルは、主プログラムのアドレスのみに割り当てられます。
このオプションは、共有ライブラリ中の重複した未使用領域を削除します。
また、動的シンボル解決するために特殊な検索パスを持つたくさんの
動的モジュールがある場合、間違った重複を解決する際に起こり得る混乱を
防ぎます。
.IP "\fB\-\-defsym\fR \fIsymbol\fR\fB=\fR\fIexpression\fR" 4
.IX Item "--defsym symbol=expression"
\&\fIexpression\fR で指定される絶対アドレスを含んだ
グローバルシンボルを、出力ファイルに生成します。
複数のシンボルを定義するために、コマンドライン上で必要な回数だけ
このオプションを使用できます。
\&\fIexpression\fR には、限定された形式の算術演算がサポートされてます。
16 進定数や存在するシンボル名が使用でき、
16 進定数やシンボルの加減算に \f(CW\*(C`+\*(C'\fR や \f(CW\*(C`\-\*(C'\fR を
使用できます。
もっと複雑な式が必要であれば、スクリプトからリンカのコマンド言語を
使用することを検討してください。
\&\fI注意:\fR \fIsymbol\fR や等号 (``\fB=\fR'')、\fIexpression\fR の間に
空白を入れてはいけません。
.IP "\fB\-\-demangle[=\fR\fIstyle\fR\fB]\fR" 4
.IX Item "--demangle[=style]"
.PD 0
.IP "\fB\-\-no\-demangle\fR" 4
.IX Item "--no-demangle"
.PD
これらのオプションは、エラーメッセージやその他の出力に含まれる
シンボル名をデマングルするかどうかを制御します。
デマングルする場合、リンカはシンボル名を読みやすい形式で
表現しようと試みます。
つまりリンカは、先頭のアンダスコアがオブジェクトファイル形式で
使用されていた場合、それを取り除き、\*(C+ のマングルされたシンボル名を
ユーザが読みやすい名前に変換します。
コンパイラによってマングル形式は異なります。
デマングル形式引数を指定することにより、使用しているコンパイラに対応した
デマングル形式を選択できます。
リンカは、環境変数 \fB\s-1COLLECT_NO_DEMANGLE\s0\fR が設定されていない限り、
デフォルトでデマングルします。
これらのオプションによって、デフォルトを上書きできます。
.IP "\fB\-\-dynamic\-linker\fR \fIfile\fR" 4
.IX Item "--dynamic-linker file"
動的リンカの名前を設定します。
これは、動的にリンクされる \s-1ELF\s0 実行形式を生成する時のみ
意味があります。
通常は、デフォルトの動的リンカで正しいはずです。
自分が何をしようとしているのかがわかってる場合以外は、
使用しないでください。
.IP "\fB\-\-embedded\-relocs\fR" 4
.IX Item "--embedded-relocs"
このオプションは、\s-1GNU\s0 コンパイラとアセンブラに \-membedded\-pic
オプションを指定して生成した \s-1MIPS\s0 の埋め込み \s-1PIC\s0 コードを
リンクする時のみ意味があります。
これを指定すると、リンカはあるテーブルを生成します。
このテーブルは、ポインタの値に静的に初期化されているすべてのデータを、
実行時に再配置するために使われます。
詳細は、testsuite/ld\-empic のコードを参照してください。
.IP "\fB\-\-fatal\-warnings\fR" 4
.IX Item "--fatal-warnings"
すべての警告を、エラーとして扱います。
.IP "\fB\-\-force\-exe\-suffix\fR" 4
.IX Item "--force-exe-suffix"
出力ファイルのサフィックスが .exe となるようにします。
.Sp
このオプションを指定すると、無事に生成され完全にリンクされた
出力ファイルに \f(CW\*(C`.exe\*(C'\fR や \f(CW\*(C`.dll\*(C'\fR という
サフィックスがついていなかった場合、リンカは出力ファイルを、同じ名前に
\&\f(CW\*(C`.exe\*(C'\fR サフィックスをつけたファイルにコピーします。
このオプションは、Microsoft Windows ホスト上で、
未修正の Unix 用の makefile を使用する場合に便利です。
というのも、Windows のいくつかのバージョンでは、
\&\f(CW\*(C`.exe\*(C'\fR サフィックスがついていないイメージを
実行できないからです。
.IP "\fB\-\-no\-gc\-sections\fR" 4
.IX Item "--no-gc-sections"
.PD 0
.IP "\fB\-\-gc\-sections\fR" 4
.IX Item "--gc-sections"
.PD
未使用の入力セクションのガーベージコレクションを有効にします。
このオプションをサポートしていないターゲット上では無視されます。
このオプションは、\fB\-r\fR とは互換性がありませんし、
動的リンクと一緒に使うべきでもありません。
デフォルトの動作 (ガーベージコレクションを実行しない) に戻すには、
コマンドラインで \fB\-\-no\-gc\-sections\fR を指定してください。
.IP "\fB\-\-help\fR" 4
.IX Item "--help"
コマンドラインオプションの概要を標準出力に表示し、終了します。
.IP "\fB\-\-target\-help\fR" 4
.IX Item "--target-help"
ターゲット固有のオプションの要約を標準出力に表示し、終了します。
.IP "\fB\-Map\fR \fImapfile\fR" 4
.IX Item "-Map mapfile"
リンクマップをファイル \fImapfile\fR へ出力します。
前出の \fB\-M\fR オプションの記述を参照してください。
.IP "\fB\-\-no\-keep\-memory\fR" 4
.IX Item "--no-keep-memory"
通常 \fBld\fR は、入力ファイルのシンボルテーブルをメモリに
キャッシュすることで、メモリ使用量よりも速度を優先します。
このオプションを指定すると、\fBld\fR は、必要に応じて
シンボルテーブルを読むことで、メモリ使用量を最小にします。
これは、大きな実行形式をリンクする際に、\fBld\fR が
メモリ空間を使い果たしてしまうような場合に必要となります。
.IP "\fB\-\-no\-undefined\fR" 4
.IX Item "--no-undefined"
.PD 0
.IP "\fB\-z defs\fR" 4
.IX Item "-z defs"
.PD
通常オブジェクトファイルからの未解決シンボルの参照を報告します。
非シンボル共有ライブラリを生成している場合にもこの報告がなされます。
リンクされている共有ライブラリにおける未解決参照の報告動作の
制御は、スイッチ \fB\-\-[no\-]allow\-shlib\-undefined\fR です。
.IP "\fB\-\-allow\-multiple\-definition\fR" 4
.IX Item "--allow-multiple-definition"
.PD 0
.IP "\fB\-z muldefs\fR" 4
.IX Item "-z muldefs"
.PD
通常、シンボルが複数回定義されると、リンカは致命的なエラーを報告します。
これらのオプションは複数回の定義を許し、最初の定義を使用するようになります。
.IP "\fB\-\-allow\-shlib\-undefined\fR" 4
.IX Item "--allow-shlib-undefined"
.PD 0
.IP "\fB\-\-no\-allow\-shlib\-undefined\fR" 4
.IX Item "--no-allow-shlib-undefined"
.PD
共有ライブラリ中の未定義シンボルを許可 (デフォルト) もしくは
不許可にします。
このスイッチは、未定義シンボルが通常オブジェクトファイルではなく
共有ライブラリに存在する場合の挙動を決定するところを除けば
\&\fB\-\-no\-undefined\fR と同様です。
このスイッチは、通常オブジェクトファイルに置ける未定義シンボルの
扱いには影響しません。
.Sp
デフォルトが \fB\-\-allow\-shlib\-undefined\fR となっている理由は、
シンボルが実際にはロード時に解決可能となる場合があり、
リンク時に指定されている共有ライブラリが実行時の共有ライブラリと
同じものとは限らないということにあります。
それに加えて、(BeOS のように) 共有ライブラリ中の未定義シンボルが
正常であるシステムの存在があります
(カーネルは未定義シンボルを含む
共有ライブラリにロード時にパッチを当て、現在のアーキテクチャで
最適な関数を選択します。
これは例えば適切な memset 関数を
動的に選択するといったことです)。
\&\s-1HPPA\s0 の共有ライブラリもまた、未定義シンボルを持つことは
正常なのは明らかです。
.IP "\fB\-\-no\-undefined\-version\fR" 4
.IX Item "--no-undefined-version"
通常は、シンボルが未定義バージョンを持つ場合、リンカはこれを無視します。
このオプションは、未定義バージョンのシンボルを許さず、
代りに致命的なエラーを報告します。
.IP "\fB\-\-no\-warn\-mismatch\fR" 4
.IX Item "--no-warn-mismatch"
通常 \fBld\fR は、不適当な入力ファイルをリンクしようとした場合、
エラーを発します。
例えば、異なるプロセッサ向け、もしくは異なるエンディアン向けに
コンパイルされたものであるという場合です。
このオプションを指定すると、\fBld\fR は、このような起き得るエラーを
だまって許可します。
このオプションは、リンカのエラーが適切でないと分かっている
特殊なことした時のみ使用し、使用の際には注意しなくてはなりません。
.IP "\fB\-\-no\-whole\-archive\fR" 4
.IX Item "--no-whole-archive"
以後に続くアーカイブファイルに対して、
\&\fB\-\-whole\-archive\fR オプションの効果を無効にします。
.IP "\fB\-\-noinhibit\-exec\fR" 4
.IX Item "--noinhibit-exec"
利用可能ならいつも、実行形式の出力ファイルを残しておきます。
普通リンカは、リンク処理中にエラーが発生した場合、
出力ファイルを生成しません。
どんなエラーが発生しても、出力ファイルを書かずに終了します。
.IP "\fB\-nostdlib\fR" 4
.IX Item "-nostdlib"
コマンドライン上で明示的に指定されたライブラリディレクトリのみを検索します。
リンカスクリプト中で指定されたライブラリディレクトリは、
(コマンドライン上で指定されたリンカスクリプトであっても) 無視されます。
.IP "\fB\-\-oformat\fR \fIoutput-format\fR" 4
.IX Item "--oformat output-format"
\&\fBld\fR は、2 種類以上のオブジェクトファイルをサポートするように
構成することができます。
\&\fBld\fR がそのように構成されていた場合、\fB\-\-oformat\fR オプションを
用いて、出力ファイルのバイナリ形式を指定することができます。
しかし \fBld\fR が別のオブジェクト形式をサポートするよう
構成されていたとしても、通常はこのオプションを指定する必要はありません。
というのも、\fBld\fR は、それぞれのマシン上で最もありふれた形式を
デフォルトの出力形式とするよう構成されているはずだからです。
\&\fIoutput-format\fR はテキスト文字列で、\s-1BFD\s0 ライブラリによって
サポートされている特定の形式の名前です
(\fBobjdump \-i\fR を用いて、利用可能なバイナリ形式をリストできます)。
スクリプトコマンド \f(CW\*(C`OUTPUT_FORMAT\*(C'\fR でも、出力形式を
指定することができますが、このオプションによって上書きされます。
.IP "\fB\-pie\fR" 4
.IX Item "-pie"
.PD 0
.IP "\fB\-\-pic\-executable\fR" 4
.IX Item "--pic-executable"
.PD
位置独立実行形式を生成します。
現在のところ、これは \s-1ELF\s0
プラットフォームでのみサポートされています。
位置独立実行形式は、共有ライブラリと同様に、
\s-1OS\s0 が選択した仮想アドレス (呼び出しごとに異なる) に
動的リンカにより再配置されます。
動的リンクされた通常の実行形式のように、位置独立実行形式は実行可能ですが、
実行形式中で定義されるシンボルは共有ライブラリにより上書きできません。
.IP "\fB\-qmagic\fR" 4
.IX Item "-qmagic"
このオプションは、Linux 互換性のために無視されます。
.IP "\fB\-Qy\fR" 4
.IX Item "-Qy"
このオプションは、\s-1SVR4\s0 互換性のために無視されます。
.IP "\fB\-\-relax\fR" 4
.IX Item "--relax"
マシン依存の効果を持つオプションです。
このオプションをサポートしているターゲットは、少数です。
.Sp
いくつかのプラットホームでは、\fB\-\-relax\fR オプションは、
リンカがプログラム中のアドレッシングを解決できる場合に可能となる
大域的な最適化を実行します。
これは、出力オブジェクトファイル中のアドレスモードの緩和や、
新規命令の合成などです。
.Sp
いくつかのプラットホーム上では、このようなリンク時の大域的な最適化によって、
生成された実行形式のシンボリックデバッグが不可能となる場合があります。
不可能になることが知られているのは、松下の \s-1MN10200\s0 や
\&\s-1MN10300\s0 プロセッサファミリです。
.Sp
これがサポートされていないプラットホームでは、
\&\fB\-\-relax\fR は受け付けられますが、無視されます。
.IP "\fB\-\-retain\-symbols\-file\fR \fIfilename\fR" 4
.IX Item "--retain-symbols-file filename"
ファイル \fIfilename\fR 中にリストされたシンボルのみを残し、
他のシンボルをすべて破棄します。
\&\fIfilename\fR は、1 行ごとに 1 つのシンボル名が書いてある
単なる平坦なファイルです。
このオプションは特に、実行時のメモリを節約するために、
1 つの大きい大域的なシンボルテーブルが徐々に増えていく
(VxWorks のような) 環境で役にたちます。
.Sp
\&\fB\-\-retain\-symbols\-file\fR は、未定義シンボルや
再配置に必要なシンボルは廃棄しません。
.Sp
\&\fB\-\-retain\-symbols\-file\fR は、
コマンドライン上で 1 回しか指定することができません。
これは、\fB\-s\fR や \fB\-S\fR を無効にします。
.IP "\fB\-rpath\fR \fIdir\fR" 4
.IX Item "-rpath dir"
実行時ライブラリ検索パスへディレクトリを追加します。
これは、\s-1ELF\s0 実行形式を共有オブジェクトとリンクする時に
使用されます。
すべての \fB\-rpath\fR の引数は結合され、動的リンカに渡されます。
動的リンカは、これらを用いて実行時に共有オブジェクトを検索します。
\&\fB\-rpath\fR オプションは、明示的にリンクされる共有オブジェクトによって
必要とされる共有オブジェクトを検索するのにも使用されます。
これについては、\fB\-rpath\-link\fR オプションの記述を参照してください。
\&\s-1ELF\s0 実行形式をリンクする時に \fB\-rpath\fR が使用されてない場合、
環境変数 \f(CW\*(C`LD_RUN_PATH\*(C'\fR の内容が定義されていれば、
それが使われます。
.Sp
\&\fB\-rpath\fR オプションは、SunOS 上でも使用されます。
SunOS 上ではデフォルトで、リンカは指定されたすべての
\&\fB\-L\fR オプションから実行時検索パスを作成します。
\&\fB\-rpath\fR オプションが指定された場合、実行時検索パスは \fB\-L\fR
オプションを無視し、\fB\-rpath\fR オプションのみを用いて作成されます。
このオプションは、gcc を使用する時に役に立ちます。
というのは、gcc は沢山の \fB\-L\fR オプションを追加し、それは
\&\s-1NFS\s0 マウントされたファイルシステム上にあるかもしれないからです。
.Sp
他の \s-1ELF\s0 リンカとの互換性のために、\fB\-R\fR オプションの後に
ファイル名ではなくディレクトリ名が続いた場合、
\&\fB\-rpath\fR オプションとして扱われます。
.IP "\fB\-rpath\-link\fR \fI\s-1DIR\s0\fR" 4
.IX Item "-rpath-link DIR"
\&\s-1ELF\s0 もしくは SunOS を使用した場合、ある共有ライブラリが
もう 1 つ別の共有ライブラリを要求することがあります。
これは、\f(CW\*(C`ld \-shared\*(C'\fR としてリンクした時、
入力ファイルの 1 つに共有ライブラリが含まれている場合に起こります。
.Sp
非共有、再配置不可のリンクを行う時にリンカがそのような依存性に出合うと、
それが明示的にリンクされてない場合、リンカは要求された共有ライブラリを
自動的に探し、リンクに含めようとします。
そのような場合、\fB\-rpath\-link\fR オプションは、検索する最初の
ディレクトリの組を指定します。
\&\fB\-rpath\-link\fR オプションで一連のディレクトリ名を指定するには、
コロン区切りの名前のリストで指定してもいいですし、
複数回オプションを指定しても構いません。
.Sp
このオプションは注意深く使用しなければなりません。
というのも、これはコンパイル時に共有ライブラリに埋め込まれた
検索パスを上書きしてしまうからです。
そのような場合、動的リンカが使用するのとは違った検索パスが、
意図せずに使用されてしまうことがあります。
.Sp
リンカは、要求された共有ライブラリを探す際に以下の検索パスを使用します。
.RS 4
.IP "1." 4
\&\fB\-rpath\-link\fR オプションによって指定されたすべてのディレクトリ。
.IP "2." 4
\&\fB\-rpath\fR オプションで指定されたすべてのディレクトリ。
\&\fB\-rpath\fR と \fB\-rpath\-link\fR の違いは、\fB\-rpath\fR オプションで
指定されたディレクトリは、実行形式に含められ実行時に使用されますが、
\&\fB\-rpath\-link\fR オプションは、リンク時にのみ影響します。
これは、ネイティブのリンカ専用です。
.IP "3." 4
\&\s-1ELF\s0 システム上で \fB\-rpath\fR もしくは
\&\f(CW\*(C`rpath\-link\*(C'\fR オプションが使われなかった場合、
環境変数 \f(CW\*(C`LD_RUN_PATH\*(C'\fR の内容が検索されます。
これは、ネイティブのリンカ専用です。
.IP "4." 4
SunOS 上で \fB\-rpath\fR が使われなかった場合、
\&\fB\-L\fR オプションで指定されたすべてのディレクトリが検索されます。
.IP "5." 4
ネイティブのリンカの場合、環境変数 \f(CW\*(C`LD_LIBRARY_PATH\*(C'\fR
の内容。
.IP "6." 4
ネイティブの \s-1ELF\s0 リンカの場合、共有ライブラリの
\&\f(CW\*(C`DT_RUNPATH\*(C'\fR もしくは \f(CW\*(C`DT_RPATH\*(C'\fR 中の
ディレクトリが、必要とされる共有ライブラリの検索に使用されます。
\&\f(CW\*(C`DT_RUNPATH\*(C'\fR エントリが存在した場合、
\&\f(CW\*(C`DT_RPATH\*(C'\fR エントリは無視されます。
.IP "7." 4
デフォルトのディレクトリ。
通常、\fI/lib\fR と \fI/usr/lib\fR です。
.IP "8." 4
\&\s-1ELF\s0 システム上のネイティブなリンカの場合、
ファイル \fI/etc/ld.so.conf\fR が存在していたら、
そのファイル中のディレクトリのリスト。
.RE
.RS 4
.Sp
要求された共有ライブラリが見つからない場合、
リンカは警告を出しリンクを継続します。
.RE
.IP "\fB\-shared\fR" 4
.IX Item "-shared"
.PD 0
.IP "\fB\-Bshareable\fR" 4
.IX Item "-Bshareable"
.PD
共有ライブラリを作成します。
現在これは、\s-1ELF\s0, \s-1XCOFF\s0, SunOS 上のみでサポートされています。
SunOS 上では、\fB\-e\fR オプションが使用されておらず、リンク時に
未定義シンボルが存在していれば、リンカは自動的に共有ライブラリを作成します。
.IP "\fB\-\-sort\-common\fR" 4
.IX Item "--sort-common"
このオプションを指定すると、\fBld\fR は、コモンシンボルを
適切な出力セクションに配置する際にサイズでソートします。
最初にすべての 1 バイトのシンボルが配置され、次にすべての 2 バイトのシンボル、
そしてすべての 4 バイトのシンボル、そしてその他のシンボルが配置されます。
このようにするのは、アラインメントの制約によってシンボルの間に
隙間が生じるのを防ぐためです。
.IP "\fB\-\-split\-by\-file [\fR\fIsize\fR\fB]\fR" 4
.IX Item "--split-by-file [size]"
\&\fB\-\-split\-by\-reloc\fR と同じですが、各々の入力ファイルに対し、
\&\fIsize\fR に達するたびに新しい出力セクションを作成します。
\&\fIsize\fR が指定されなかった場合、デフォルトのサイズは 1 です。
.IP "\fB\-\-split\-by\-reloc [\fR\fIcount\fR\fB]\fR" 4
.IX Item "--split-by-reloc [count]"
ファイル中の 1 つの出力セクションが、\fIcount\fR より多い再配置情報を
含まないよう、出力ファイル中に余分なセクションを作成しようとします。
これは、\s-1COFF\s0 オブジェクト形式のリアルタイムカーネルに
ダウンロードするための巨大な再配置可能ファイルを作成する時に役に立ちます。
というのも、\s-1COFF\s0 では 1 つのセクションは 65535 を越える
再配置情報を表現することができないからです。
このオプションは、任意のセクションをサポートしていない
オブジェクトファイル形式では、うまくいかないことに注意してください。
リンカは、分配し直す際に個々の入力セクションを分割しないので、
1 つの入力セクションが \fIcount\fR を越える再配置情報を含んでいる場合、
1 つの出力セクションには、それだけの数の再配置情報を含むことになります。
\&\fIcount\fR のデフォルト値は 32768 です。
.IP "\fB\-\-stats\fR" 4
.IX Item "--stats"
実行時間やメモリ使用量などといったリンカの処理に関する統計情報を、
計算し出力します。
.IP "\fB\-\-traditional\-format\fR" 4
.IX Item "--traditional-format"
ターゲットによっては、\fBld\fR の出力が既存のリンカの出力と
いくつかの点で異なることがあります。
このスイッチを指定すると、 \fBld\fR は既存のリンカの形式を使います。
.Sp
例えば SunOS 上では、\fBld\fR はシンボル文字列テーブル内の
重複したエントリを 1 つにします。
これによって、完全なデバッグ情報を持つ出力ファイルのサイズが、
30% 以上も小さくなります。
残念なことに、SunOS の \f(CW\*(C`dbx\*(C'\fR プログラムは、
生成されたファイルを読み込むことができません
(\f(CW\*(C`gdb\*(C'\fR では問題ありません)。
\&\fB\-\-traditional\-format\fR スイッチを指定すると、
重複したエントリを 1 つにまとめません。
.IP "\fB\-\-section\-start\fR \fIsectionname\fR\fB=\fR\fIorg\fR" 4
.IX Item "--section-start sectionname=org"
出力ファイル中のセクションを、\fIorg\fR で指定された絶対アドレスに
配置します。
複数のセクションを配置させる場合、このオプションは、
必要に応じてコマンドライン中に何度でも指定することができます。
\&\fIorg\fR は、単独の 16 進数でなければなりません。
他のリンカとの互換性のために、16 進数の先頭に通常つける \fB0x\fR を
省略することができます。
\&\fIsectionname\fR と等号 (``\fB=\fR'')、\fIorg\fR の間には
空白をはさむことができないことに注意してください。
.IP "\fB\-Tbss\fR \fIorg\fR" 4
.IX Item "-Tbss org"
.PD 0
.IP "\fB\-Tdata\fR \fIorg\fR" 4
.IX Item "-Tdata org"
.IP "\fB\-Ttext\fR \fIorg\fR" 4
.IX Item "-Ttext org"
.PD
\&\-\-section\-start と同じです。
それぞれ \f(CW\*(C`.bss\*(C'\fR, 
\&\f(CW\*(C`.data\*(C'\fR,
\&\f(CW\*(C`.text\*(C'\fR を \fIsectionname\fR とします。
.IP "\fB\-\-unresolved\-symbols=\fR\fImethod\fR" 4
.IX Item "--unresolved-symbols=method"
未解決のシンボルをどのように扱うかを決定します。
\&\fBmethod\fR が取り得る値は 4 種類あります。
.RS 4
.IP "\fBignore-all\fR" 4
.IX Item "ignore-all"
未解決シンボルを一切報告しません。
.IP "\fBreport-all\fR" 4
.IX Item "report-all"
未解決シンボルのすべてを報告します。
これがデフォルトです。
.IP "\fBignore-in-object-files\fR" 4
.IX Item "ignore-in-object-files"
共有ライブラリが含む未解決シンボルを報告しますが、
通常オブジェクトファイルに由来する場合は無視します。
.IP "\fBignore-in-shared-libs\fR" 4
.IX Item "ignore-in-shared-libs"
通常オブジェクトファイルに由来する未解決シンボルを報告しますが、
共有ライブラリに由来する場合は無視します。
動的バイナリを生成する場合に有益な場合があり、その場合、
動的バイナリが参照すべき共有ライブラリすべてをリンカのコマンド行に
含めておく必要があることが知られています。
.RE
.RS 4
.Sp
共有ライブラリそれ自身に対する動作は
\&\fB\-\-[no\-]allow\-shlib\-undefined\fR オプションを
使うことでもまた制御できます。
.Sp
通常、リンカは、
未解決シンボルの報告それぞれにたいしてエラーメッセージを生成しますが、
オプション \fB\-\-warn\-unresolved\-symbols\fR により、
エラーを警告に変更することができます。
.RE
.IP "\fB\-\-dll\-verbose\fR" 4
.IX Item "--dll-verbose"
.PD 0
.IP "\fB\-\-verbose\fR" 4
.IX Item "--verbose"
.PD
\&\fBld\fR のバージョン番号と、サポートしているリンカエミュレーションの
一覧を表示します。
また、どの入力ファイルがオープンできて、
どの入力ファイルがオープンできないのかも表示します。
さらに、使用されるリンカスクリプトも表示します。
.IP "\fB\-\-version\-script=\fR\fIversion-scriptfile\fR" 4
.IX Item "--version-script=version-scriptfile"
リンカに、バージョンスクリプト名を指定します。
これは通常、共有ライブラリを生成する際に使われ、生成するライブラリの
バージョン階層についての付加的な情報を指定します。
このオプションは、共有ライブラリをサポートする \s-1ELF\s0
プラットフォーム上でのみ意味があります。
.IP "\fB\-\-warn\-common\fR" 4
.IX Item "--warn-common"
コモンシンボルが、別の共有シンボルやシンボル定義と結びつけられた時に
警告を出します。
Unix のリンカは、このちょっといい加減な慣習を許していますが、
他のオペレーティングシステム上のリンカは、許していません。
このオプションを指定すると、グローバルシンボルが結びつけられることから来る
潜在的な問題を発見することができます。
残念なことに、C ライブラリの中にはこの慣習を使用しているものがあり、
プログラム中だけでなくライブラリ中のシンボルに対しても、
この警告が出されることがあります。
.Sp
グローバルシンボルには 3 種類あります。
以下で C 言語の例を使って説明します。
.RS 4
.IP "\fBint i = 1;\fR" 4
.IX Item "int i = 1;"
定義です。
出力ファイル中の初期化済みデータセクションに置かれます。
.IP "\fBextern int i;\fR" 4
.IX Item "extern int i;"
未定義参照です。
メモリは割り当てられません。
この変数に対する定義かコモンシンボルが、どこかになくてはなりません。
.IP "\fBint i;\fR" 4
.IX Item "int i;"
コモンシンボルです。
変数に対して、(1 つもしくは複数の) コモンシンボルしかない場合、
出力ファイルの非初期化データ領域に置かれます。
リンカは、同じ変数に対する複数のコモンシンボルを、1 つのコモンシンボルへと
まとめます。
それらのサイズか異なっていた場合、最も大きなサイズの領域が取られます。
同じ変数に対して定義があった場合、リンカは共有シンボルを宣言に変換します。
.RE
.RS 4
.Sp
\&\fB\-\-warn\-common\fR オプションを指定すると、
リンカは 5 種類の警告を出します。
それぞれの警告は、2 行からなっています。
最初の行は、今出会ったシンボルを説明しており、
次の行は、以前に同じ名前で出会ったシンボルを説明します。
2 つのシンボルの片方、もしくは両方は、コモンシンボルです。
.IP "1." 4
シンボルに対する定義が既に存在するため、
コモンシンボルを参照に変換します。
.Sp
.Vb 3
\&        <file>(<section>): warning: common of `<symbol>'
\&           overridden by definition
\&        <file>(<section>): warning: defined here
.Ve
.IP "2." 4
シンボルに対する定義が後から現れたため、
コモンシンボルを参照に変換します。
これは上記のケースと同様ですが、シンボルの現れた順番が違います。
.Sp
.Vb 3
\&        <file>(<section>): warning: definition of `<symbol>'
\&           overriding common
\&        <file>(<section>): warning: common is here
.Ve
.IP "3." 4
コモンシンボルを、既出の同じサイズのコモンシンボルにマージします。
.Sp
.Vb 3
\&        <file>(<section>): warning: multiple common
\&           of `<symbol>'
\&        <file>(<section>): warning: previous common is here
.Ve
.IP "4." 4
コモンシンボルを、既出の、より大きいコモンシンボルにマージします。
.Sp
.Vb 3
\&        <file>(<section>): warning: common of `<symbol>'
\&           overridden by larger common
\&        <file>(<section>): warning: larger common is here
.Ve
.IP "5." 4
コモンシンボルを、既出の、より小さいコモンシンボルにマージします。
これは上記のケースと同様ですが、シンボルの現れた順番が違います。
.Sp
.Vb 3
\&        <file>(<section>): warning: common of `<symbol>'
\&           overriding smaller common
\&        <file>(<section>): warning: smaller common is here
.Ve
.RE
.RS 4
.RE
.IP "\fB\-\-warn\-constructors\fR" 4
.IX Item "--warn-constructors"
グローバルコンストラクタが 1 つでも使われていた場合、警告を出します。
これが役に立つファイル形式はわずかです。
\&\s-1COFF\s0 や \s-1ELF\s0 のような形式では、
リンカはグローバルコンストラクタが使用されていることを検知できません。
.IP "\fB\-\-warn\-multiple\-gp\fR" 4
.IX Item "--warn-multiple-gp"
複数のグローバルポインタ値が出力ファイル中で必要とされる場合、
警告を出します。
このオプションは、Alpha などの特定のプロセッサでのみ意味があります。
具体的に言うと、プロセッサの中には特別なセクション中に
大きな値の定数を置くものがあります。
ある特殊なレジスタ (グローバルポインタ) がこのセクションの中央を
指しており、ベースレジスタ相対のアドレッシングモードを使用して、
定数を効率的に読み込むことができます。
ベースレジスタ相対モードのオフセットが、固定で比較的小さい
(例えば 16bit) ため、これによって定数領域の最大サイズが
制限されてしまいます。
従って、大きなプログラムでは、すべての定数を参照するために
複数のグローバルポインタ値を使うことがしばしば必要となります。
このオプションを指定すると、このようなケースが起きた時に警告を出します。
.IP "\fB\-\-warn\-once\fR" 4
.IX Item "--warn-once"
それぞれの未定義シンボルに対して、それを参照しているモジュールごとに
警告を出すのではなく、ただ 1 度だけ警告を出します。
.IP "\fB\-\-warn\-section\-align\fR" 4
.IX Item "--warn-section-align"
アラインメントによって出力セクションのアドレスが変更された場合、
警告を出します。
一般的には、アラインメントはインプットセクションにより設定されます。
アドレスが変更されるのは、それが明示的に指定されなかった場合だけです。
すなわち、\f(CW\*(C`SECTIONS\*(C'\fR コマンドが、そのセクションの
開始アドレスを指定しなかった場合です。
.IP "\fB\-\-warn\-unresolved\-symbols\fR" 4
.IX Item "--warn-unresolved-symbols"
リンカが未解決シンボルを報告しようとするとき (オプション
\&\fB\-\-unresolved\-symbols\fR を参照)、普通はエラーを生成します。
このオプションは、エラーの代わりに警告を生成します。
.IP "\fB\-\-error\-unresolved\-symbols\fR" 4
.IX Item "--error-unresolved-symbols"
これはリンカのデフォルトの動作で、未解決シンボルを報告しようと
するときエラーを生成します。
.IP "\fB\-\-whole\-archive\fR" 4
.IX Item "--whole-archive"
コマンドライン上で \fB\-\-whole\-archive\fR オプションの後に
指定された各アーカイブに対して、そのアーカイブファイルの中の必要な
オブジェクトファイルだけを検索するのではなく、アーカイブ中の
すべてのオブジェクトをリンクに含めます。
これはアーカイブを共有ライブラリに変換する時に普通使用され、
生成する共有ライブラリ中にすべてのオブジェクトを強制的に取り込みます。
このオプションは、2 回以上使用しても構いません。
.Sp
このオプションを gcc から使用する際に、2 つ注意することがあります。
1 つめは、gcc はこのオプションを知りません。
ですから、\fB\-Wl,\-whole\-archive\fR と指定しなければなりません。
2 つめは、アーカイブをリストした後 \fB\-Wl,\-no\-whole\-archive\fR を
使うことを忘れないようにしてください。
というのは、gcc は自分でアーカイブのリストをリンクに追加することが
あるので、これによる影響を受けないようにする必要があるからです。
.IP "\fB\-\-wrap\fR \fIsymbol\fR" 4
.IX Item "--wrap symbol"
\&\fIsymbol\fR に対して、ラッパ関数を使用します。
すべての \fIsymbol\fR への未定義参照は、
\&\f(CW\*(C`_\|_wrap_\f(CIsymbol\f(CW\*(C'\fR へと解決されます。
すべての \f(CW\*(C`_\|_real_\f(CIsymbol\f(CW\*(C'\fR への
未定義参照は、\fIsymbol\fR へと解決されます。
.Sp
これによって、システム関数に対するラッパを用意できます。
ラッパ関数は、\f(CW\*(C`_\|_wrap_\f(CIsymbol\f(CW\*(C'\fR という
名前にする必要があります。
ラッパ関数がシステム関数を呼びたい時には、
\&\f(CW\*(C`_\|_real_\f(CIsymbol\f(CW\*(C'\fR を呼び出すようにします。
.Sp
以下に簡単な例を示します:
.Sp
.Vb 6
\&        void *
\&        __wrap_malloc (size_t c)
\&        {
\&          printf ("malloc called with %zd\en", c);
\&          return __real_malloc (c);
\&        }
.Ve
.Sp
\&\fB\-\-wrap malloc\fR を使用して、このファイルと一緒に他のコードを
リンクした場合、すべての \f(CW\*(C`malloc\*(C'\fR 呼び出しは、
関数 \f(CW\*(C`_\|_wrap_malloc\*(C'\fR を代わりに呼び出します。
\&\f(CW\*(C`_\|_wrap_malloc\*(C'\fR 中の \f(CW\*(C`_\|_real_malloc\*(C'\fR が、
本当の \f(CW\*(C`malloc\*(C'\fR 関数を呼び出します。
.Sp
同様にして \f(CW\*(C`_\|_real_malloc\*(C'\fR 関数も用意しておくと、
\&\fB\-\-wrap\fR オプションが指定されなかった場合にもリンクは成功します。
その場合には、\f(CW\*(C`_\|_real_malloc\*(C'\fR の定義を
\&\f(CW\*(C`_\|_wrap_malloc\*(C'\fR と同じファイルにおいてはいけません。
このようにすると、リンカがそれを \f(CW\*(C`malloc\*(C'\fR へと
ラップする前に、アセンブラがこの呼び出しを解決してしまうかもしれません。
.IP "\fB\-\-enable\-new\-dtags\fR" 4
.IX Item "--enable-new-dtags"
.PD 0
.IP "\fB\-\-disable\-new\-dtags\fR" 4
.IX Item "--disable-new-dtags"
.PD
このリンカは、\s-1ELF\s0 システムの新しい動的タグを生成することができます。
しかし古い \s-1ELF\s0 システムは、それらを理解できない場合があります。
\&\fB\-\-enable\-new\-dtags\fR を指定した場合、
動的タグは必要に応じて作成されます。
\&\fB\-\-disable\-new\-dtags\fR を指定した場合は、
新しい動的タグは作成されません。
デフォルトでは、新しい動的タグは作成されません。
これらのオプションは、\s-1ELF\s0 システム上でのみ利用可能であることに
注意してください。
.PP
i386 \s-1PE\s0 リンカは、\fB\-shared\fR オプションをサポートしています。
これを指定すると、通常の実行形式ではなく
動的リンクライブラリ (\s-1DLL\s0) を出力します。
このオプションを使用した時には、名前を \f(CW\*(C`*.dll\*(C'\fR と
する必要があります。
それに加え、リンカは標準の \f(CW\*(C`*.def\*(C'\fR ファイルを完全に
サポートしており、オブジェクトファイルと同様にリンカのコマンドライン上で
指定できます
(実際、シンボルをエクスポートしているアーカイブの前に置いて、通常の
オブジェクトファイルと同様にリンクされることを保証する必要があります)。
.PP
すべてのターゲットに共通のオプションに加え、i386 \s-1PE\s0 のリンカは、
i386 \s-1PE\s0 ターゲットに固有のコマンドラインオプションを
追加でサポートしています。
値を取るオプションは、1 つの空白か等号で値との間を区切ります。
.IP "\fB\-\-add\-stdcall\-alias\fR" 4
.IX Item "--add-stdcall-alias"
このオプションが指定された場合、stdcall サフィックス (@\fInn\fR) を持つ
シンボルを、そのままサフィックスを取ってエクスポートします。
[このオプションは i386 \s-1PE\s0 ターゲット用移植版リンカに
特有のものです]
.IP "\fB\-\-base\-file\fR \fIfile\fR" 4
.IX Item "--base-file file"
\&\fIdlltool\fR を使用して DLL を生成するのに必要なすべての再配置情報の
ベースアドレスをセーブするファイル名を \fIfile\fR とします。
[このオプションは i386 \s-1PE\s0 特有です]
.IP "\fB\-\-dll\fR" 4
.IX Item "--dll"
通常の実行形式の代わりに \s-1DLL\s0 を生成します。
\&\fB\-shared\fR を使用することもできますし、指定した
\&\f(CW\*(C`.def\*(C'\fR ファイル中で \f(CW\*(C`LIBRARY\*(C'\fR を
使用することもできます。
[このオプションは i386 \s-1PE\s0 ターゲット用移植版リンカに
特有のものです]
.IP "\fB\-\-enable\-stdcall\-fixup\fR" 4
.IX Item "--enable-stdcall-fixup"
.PD 0
.IP "\fB\-\-disable\-stdcall\-fixup\fR" 4
.IX Item "--disable-stdcall-fixup"
.PD
解決不能なシンボルを見つけると、リンカは「曖昧リンク」を試みます。
これは、シンボル名の形式 (cdecl 対 stdcall) だけが異なる別の定義済みの
シンボルを探し、一致したものへとリンクすることでシンボルを解決します。
例えば、未定義シンボル \f(CW\*(C`_foo\*(C'\fR は、関数
\&\f(CW\*(C`_foo@12\*(C'\fR へとリンクされ、未定義シンボル
\&\f(CW\*(C`_bar@16\*(C'\fR は、関数 \f(CW\*(C`_bar\*(C'\fR へと
リンクされるかも知れません。
リンカがこれを行う際に、警告を表示します。
というのは、通常はリンクに失敗するべきであるからです。
しかし、サードパーティの DLL から生成されたインポートライブラリを
使用するのに、この機能が時々必要となることがあります。
\&\fB\-\-enable\-stdcall\-fixup\fR を指定した場合、この機能は
完全に有効化され、警告は出力されません。
\&\fB\-\-disable\-stdcall\-fixup\fR を指定した場合、この機能は
無効化され、そのような不一致はエラーとみなされます。
[このオプションは i386 \s-1PE\s0 ターゲット用移植版リンカに
特有のものです]
.IP "\fB\-\-export\-all\-symbols\fR" 4
.IX Item "--export-all-symbols"
このオプションが指定されると、\s-1DLL\s0 を構築するのに使われる
オブジェクト中のすべてのグローバルシンボルが、\s-1DLL\s0 によって
エクスポートされます。
これは、こうしなければエクスポートされるシンボルが全くない場合、
デフォルトとなることに注意してください。
シンボルが \s-1DEF\s0 ファイルによって明示的にエクスポートされる場合や
関数属性によって暗黙にエクスポートされる場合は、このオプションが
指定されない限り、デフォルトでは他には何もエクスポートされません。
シンボル \f(CW\*(C`DllMain@12\*(C'\fR, \f(CW\*(C`DllEntryPoint@0\*(C'\fR,
\&\f(CW\*(C`DllMainCRTStartup@12\*(C'\fR, \f(CW\*(C`impure_ptr\*(C'\fR は、
自動的にはエクスポートされません。
他の DLL からインポートされたシンボルも、再びエクスポートされませんし、
\&\f(CW\*(C`_head_\*(C'\fR で始まったり \f(CW\*(C`_iname\*(C'\fR で
終るような、DLL の内部レイアウトを指定するシンボルもエクスポートされません。
さらに、\f(CW\*(C`libgcc\*(C'\fR, \f(CW\*(C`libstd++\*(C'\fR, 
\&\f(CW\*(C`libmingw32\*(C'\fR, \f(CW\*(C`crtX.o\*(C'\fR からの
シンボルもエクスポートされません。
\&\f(CW\*(C`_\|_rtti_\*(C'\fR や \f(CW\*(C`_\|_builtin_\*(C'\fR で
始まる名前のシンボルも、\*(C+ DLL のためにエクスポートされません。
最後に、エクスポートされない Cygwin の非公開シンボルの
拡張されたリストもあります
(明らかに、これは Cygwin ターゲット用の DLL を構築する時に適用されます)。
これら Cygwin の除外されるシンボルは以下の通りです。
\&\f(CW\*(C`_cygwin_dll_entry@12\*(C'\fR, 
\&\f(CW\*(C`_cygwin_crt0_common@8\*(C'\fR,
\&\f(CW\*(C`_cygwin_noncygwin_dll_entry@12\*(C'\fR,
\&\f(CW\*(C`_fmode\*(C'\fR, \f(CW\*(C`_impure_ptr\*(C'\fR,
\&\f(CW\*(C`cygwin_attach_dll\*(C'\fR, \f(CW\*(C`cygwin_premain0\*(C'\fR,
\&\f(CW\*(C`cygwin_premain1\*(C'\fR, \f(CW\*(C`cygwin_premain2\*(C'\fR,
\&\f(CW\*(C`cygwin_premain3\*(C'\fR そして \f(CW\*(C`environ\*(C'\fR です。
[このオプションは i386 \s-1PE\s0 ターゲット用移植版リンカに
特有のものです]
.IP "\fB\-\-exclude\-symbols\fR \fIsymbol\fR\fB,\fR\fIsymbol\fR\fB,...\fR" 4
.IX Item "--exclude-symbols symbol,symbol,..."
自動的にエクスポートすべきではないシンボルのリストを指定します。
それらのシンボル名は、コンマもしくはコロンで区切られます。
[このオプションは i386 \s-1PE\s0 ターゲット用移植版リンカに
特有のものです]
.IP "\fB\-\-exclude\-libs\fR \fIlib\fR\fB,\fR\fIlib\fR\fB,...\fR" 4
.IX Item "--exclude-libs lib,lib,..."
シンボルを自動的にエクスポートしないアーカイブライブラリのリストを指定します。
ライブラリ名はコンマかコロンで区切ります。
\&\f(CW\*(C`\-\-exclude\-libs ALL\*(C'\fR と指定すると、
自動エクスポートのすべてのアーカイブライブラリからシンボルを除去します。
明示的に .def ファイルにリストされたシンボルは、本オプションにかかわらず、
依然としてエクスポートされます。
[このオプションは i386 \s-1PE\s0 ターゲット用移植版リンカに
特有のものです]
.IP "\fB\-\-file\-alignment\fR" 4
.IX Item "--file-alignment"
ファイルのアラインメントを指定します。
ファイル中のセクションは、常にこの倍数のファイルオフセットから
始まります。
デフォルトは 512 です。
[このオプションは i386 \s-1PE\s0 ターゲット用移植版リンカに
特有のものです]
.IP "\fB\-\-heap\fR \fIreserve\fR" 4
.IX Item "--heap reserve"
.PD 0
.IP "\fB\-\-heap\fR \fIreserve\fR\fB,\fR\fIcommit\fR" 4
.IX Item "--heap reserve,commit"
.PD
このプログラムのヒープ領域に使うために予約する (オプションでコミットする)
メモリ量を指定します。
デフォルトでは 1Mb が予約され、4K がコミットされます。
[このオプションは i386 \s-1PE\s0 ターゲット用移植版リンカに
特有のものです]
.IP "\fB\-\-image\-base\fR \fIvalue\fR" 4
.IX Item "--image-base value"
プログラムもしくは DLL のベースアドレスとして、\fIvalue\fR を使用します。
これは、プログラムもしくは DLL がロードされた時に使われる、
最も低位のメモリ位置となります。
再配置する必要性を軽減し、DLL の性能を向上させるため、各 DLL は
一意なベースアドレスを持ち、他の DLL と重ならないようにすべきです。
デフォルトでは、実行形式は 0x400000 で、DLL は 0x10000000 です。
[このオプションは i386 \s-1PE\s0 ターゲット用移植版リンカに
特有のものです]
.IP "\fB\-\-kill\-at\fR" 4
.IX Item "--kill-at"
このオプションが指定されると、stdcall のサフィックス (@\fInn\fR) は、
エクスポートされる前にシンボルから取り除かれます。
[このオプションは i386 \s-1PE\s0 ターゲット用移植版リンカに
特有のものです]
.IP "\fB\-\-major\-image\-version\fR \fIvalue\fR" 4
.IX Item "--major-image-version value"
「イメージバージョン」のメジャーナンバを設定します。
デフォルトは 1 です。
[このオプションは i386 \s-1PE\s0 ターゲット用移植版リンカに
特有のものです]
.IP "\fB\-\-major\-os\-version\fR \fIvalue\fR" 4
.IX Item "--major-os-version value"
「OS バージョン」のメジャーナンバを設定します。
デフォルトは 4 です。
[このオプションは i386 \s-1PE\s0 ターゲット用移植版リンカに
特有のものです]
.IP "\fB\-\-major\-subsystem\-version\fR \fIvalue\fR" 4
.IX Item "--major-subsystem-version value"
「サブシステムバージョン」のメジャーナンバを設定します。
デフォルトは 4 です。
[このオプションは i386 \s-1PE\s0 ターゲット用移植版リンカに
特有のものです]
.IP "\fB\-\-minor\-image\-version\fR \fIvalue\fR" 4
.IX Item "--minor-image-version value"
「イメージバージョン」のマイナナンバを設定します。
デフォルトは 0 です。
[このオプションは i386 \s-1PE\s0 ターゲット用移植版リンカに
特有のものです]
.IP "\fB\-\-minor\-os\-version\fR \fIvalue\fR" 4
.IX Item "--minor-os-version value"
「OS バージョン」のマイナナンバを設定します。
デフォルトは 0 です。
[このオプションは i386 \s-1PE\s0 ターゲット用移植版リンカに
特有のものです]
.IP "\fB\-\-minor\-subsystem\-version\fR \fIvalue\fR" 4
.IX Item "--minor-subsystem-version value"
「サブシステムバージョン」のマイナナンバを設定します。
デフォルトは 0 です。
[このオプションは i386 \s-1PE\s0 ターゲット用移植版リンカに
特有のものです]
.IP "\fB\-\-output\-def\fR \fIfile\fR" 4
.IX Item "--output-def file"
リンカは、生成する \s-1DLL\s0 に対応した \s-1DEF\s0 ファイルを含む
ファイル \fIfile\fR を作成します。
この \s-1DEF\s0 ファイル (\f(CW\*(C`*.def\*(C'\fR と呼ばれます) は、
\&\f(CW\*(C`dlltool\*(C'\fR を使ってインポートライブラリの作成に
使用されたり、自動的にもしくは暗黙にエクスポートされるシンボルへの
参照として使用されたりします。
[このオプションは i386 \s-1PE\s0 ターゲット用移植版リンカに
特有のものです]
.IP "\fB\-\-out\-implib\fR \fIfile\fR" 4
.IX Item "--out-implib file"
リンカは、生成する \s-1DLL\s0 に対応したインポートライブラリを含む
ファイル \fIfile\fR を作成します。
このインポートライブラリ (\f(CW\*(C`*.dll.a\*(C'\fR
もしくは \f(CW\*(C`*.a\*(C'\fR と呼ばれます) は、
生成された \s-1DLL\s0 をクライアントにリンクするのに使われます。
この動作によって、別に行う \f(CW\*(C`dlltool\*(C'\fR の
インポートライブラリ作成ステップを飛ばすことができます。
[このオプションは i386 \s-1PE\s0 ターゲット用移植版リンカに
特有のものです]
.IP "\fB\-\-enable\-auto\-image\-base\fR" 4
.IX Item "--enable-auto-image-base"
\&\f(CW\*(C`\-\-image\-base\*(C'\fR 引数によって指定されなかった DLL の
イメージベースを自動的に選択します。
DLL 名から生成されるハッシュ値を使うことにより、各 \s-1DLL\s0 に対して
一意のイメージベースが作成され、プログラムの実行を遅延させる
メモリ内での衝突と再配置を回避することができます。
[このオプションは i386 \s-1PE\s0 ターゲット用移植版リンカに
特有のものです]
.IP "\fB\-\-disable\-auto\-image\-base\fR" 4
.IX Item "--disable-auto-image-base"
一意なイメージベースを自動的に作成しません。
ユーザから指定されたイメージベース (\f(CW\*(C`\-\-image\-base\*(C'\fR) が
ない場合、プラットフォームのデフォルトを使用します。
[このオプションは i386 \s-1PE\s0 ターゲット用移植版リンカに
特有のものです]
.IP "\fB\-\-dll\-search\-prefix\fR \fIstring\fR" 4
.IX Item "--dll-search-prefix string"
インポートライブラリを使わずに DLL を動的にリンクする際に、
\&\f(CW\*(C`lib<basename>.dll\*(C'\fR よりも
\&\f(CW\*(C`<string><basename>.dll\*(C'\fR を先に検索します。
この動作によって、様々な \*(L"subplatforms\*(R" 用に作られた
native, cygwin, uwin, pw などの DLL を、容易に区別することができます。
例えば、一般的に Cygwin の DLL は、
\&\f(CW\*(C`\-\-dll\-search\-prefix=cyg\*(C'\fR を使用します。
[このオプションは i386 \s-1PE\s0 ターゲット用移植版リンカに
特有のものです]
.IP "\fB\-\-enable\-auto\-import\fR" 4
.IX Item "--enable-auto-import"
DLL からインポートするデータに対して、\f(CW\*(C`_symbol\*(C'\fR を
\&\f(CW\*(C`_\|_imp_\|_symbol\*(C'\fR へと手の込んだリンクをし、
それらの \s-1DATA\s0 エクスポートを持つインポートライブラリの
構築に際して、
必要に応じてサンク (thunk) したシンボルを作成します。
注意: 'auto\-import' 拡張機能の使用はイメージファイルの
テキストセクションを書き込み可能にしてしまいます。
これは Microsoft が発行している PE-COFF 形式仕様に適合しません。
.Sp
一般的に、\&'auto\-import' の使用は、単にうまくいきます。
\&\*(-- しかし、以下のようなメッセージが出ることがあります。
.Sp
"variable '<var>' can't be auto\-imported. Please read the 
documentation for ld's \f(CW\*(C`\-\-enable\-auto\-import\*(C'\fR for details."
.Sp
このメッセージは、最終的に 2 つの定数の和によって指定されるアドレスに
アクセスする(サブ)式がある場合に発生します
(Win32 インポートテーブルは、1 つのみしか許していません)。
これが起こり得る場合というのは、\s-1DLL\s0 からインポートされた構造体変数の
フィールドメンバへアクセスする場合や、 \s-1DLL\s0 からインポートされた
配列変数に対して定数のインデックスを使用する場合などがあります。
すべての複数ワードの変数 (配列、構造体、long long など) は、
このエラー条件を引き起こすことがあります。
しかし、このエクスポートされた目障りな変数が、実際どんなデータタイプで
あっても、ld は 常にこれを検知し、警告を発し、停止します。
.Sp
エクスポートされた変数のデータタイプが何であろうと、
この問題を解消する方法がいくつかあります。
.Sp
1 つの方法は、\-\-enable\-runtime\-pseudo\-reloc スイッチを
使用することです。
これは実行環境のクライアントコードに参照の調整という仕事を
残してしまうことになるので、この方法が使えるのは、
実行環境がこの機能をサポートしている場合に限られます。
.Sp
2 番目の解決策は、定数の 1 つを強制的に変数としてしまうことです。
\&\*(-- つまり、コンパイル時に不明で最適化不可とすることです。
配列に対しては、2 つの方法が考えられます。
a) インデックスされる側 (配列のアドレス) を変数とします。
もしくは、b) 定数インデックスを変数とします。
従って以下のようになります:
.Sp
.Vb 3
\&        extern type extern_array[];
\&        extern_array[1] --> 
\&           { volatile type *t=extern_array; t[1] }
.Ve
.Sp
もしくは
.Sp
.Vb 3
\&        extern type extern_array[];
\&        extern_array[1] --> 
\&           { volatile int t=1; extern_array[t] }
.Ve
.Sp
構造体 (や、他のほとんどの複数ワードデータタイプ) に対しては、
構造体そのもの (もしくは long long など) を変数とするのが、
唯一の方法です。
.Sp
.Vb 3
\&        extern struct s extern_struct;
\&        extern_struct.field --> 
\&           { volatile struct s *t=&extern_struct; t->field }
.Ve
.Sp
もしくは
.Sp
.Vb 3
\&        extern long long extern_ll;
\&        extern_ll -->
\&          { volatile long long * local_ll=&extern_ll; *local_ll }
.Ve
.Sp
この問題を扱う 3 番目の方法は、目障りなシンボルを「自動インポート」するのを
止めて、\f(CW\*(C`_\|_declspec(dllimport)\*(C'\fR と印を付けることです。
しかし実際にこれをするには、コンパイル時に #define を使い、
\&\s-1DLL\s0 を構築しようとしているのか、もしくは \s-1DLL\s0 とリンクする
クライアントコードを構築しようとしているのか、または単に静的ライブラリを
構築/リンクしようとしているのかを示さなければなりません。
「定数オフセットを用いた直接アドレス」問題を解決するいくつかの方法を
選択する際に、一般的な現実世界での使用方法を考えなければなりません:
.Sp
元のコード:
.Sp
.Vb 7
\&        --foo.h
\&        extern int arr[];
\&        --foo.c
\&        #include "foo.h"
\&        void main(int argc, char **argv){
\&          printf("%d\en",arr[1]);
\&        }
.Ve
.Sp
解決策 1:
.Sp
.Vb 9
\&        --foo.h
\&        extern int arr[];
\&        --foo.c
\&        #include "foo.h"
\&        void main(int argc, char **argv){
\&          /* This workaround is for win32 and cygwin; do not "optimize" */
\&          volatile int *parr = arr;
\&          printf("%d\en",parr[1]);
\&        }
.Ve
.Sp
解決策 2:
.Sp
.Vb 14
\&        --foo.h
\&        /* Note: auto-export is assumed (no __declspec(dllexport)) */
\&        #if (defined(_WIN32) || defined(__CYGWIN__)) && \e
\&          !(defined(FOO_BUILD_DLL) || defined(FOO_STATIC))
\&        #define FOO_IMPORT __declspec(dllimport)
\&        #else
\&        #define FOO_IMPORT
\&        #endif
\&        extern FOO_IMPORT int arr[];
\&        --foo.c
\&        #include "foo.h"
\&        void main(int argc, char **argv){
\&          printf("%d\en",arr[1]);
\&        }
.Ve
.Sp
この問題を回避する 4 番目の方法は、目障りな変数に対するアクセスを、
データを直接使うインタフェースではなく、関数のインタフェースを使うよう
ライブラリを書き換えることです
(例えば \fIset_foo()\fR と \fIget_foo()\fR アクセス関数を使います)。
[このオプションは i386 \s-1PE\s0 ターゲット用移植版リンカに
特有のものです]
.IP "\fB\-\-disable\-auto\-import\fR" 4
.IX Item "--disable-auto-import"
DLL からインポートしたデータに対して、\f(CW\*(C`_symbol\*(C'\fR を
\&\f(CW\*(C`_\|_imp_\|_symbol\*(C'\fR へと、手の込んだリンクを
しないようにします。
[このオプションは i386 \s-1PE\s0 ターゲット用移植版リンカに
特有のものです]
.IP "\fB\-\-enable\-runtime\-pseudo\-reloc\fR" 4
.IX Item "--enable-runtime-pseudo-reloc"
コードが \-\-enable\-auto\-import セクションで記述した表現を含む場合、
すなわち、 \s-1DATA\s0 が \s-1DLL\s0 から非ゼロオフセットを付けて
インポートしている場合、このスイッチは '実行時疑似再配置
(runtime pseudo relocation)' ベクタを生成します。
このベクタは実行環境がクライアントコードの中でそれらデータの参照を
調整するために使用することができます。
[このオプションは i386 \s-1PE\s0 ターゲット用移植版リンカに
特有のものです]
.IP "\fB\-\-disable\-runtime\-pseudo\-reloc\fR" 4
.IX Item "--disable-runtime-pseudo-reloc"
DLL からの、非ゼロオフセットの \s-1DATA\s0 インポートに対する
疑似再配置情報を生成しないようにします。
これはデフォルトです。
[このオプションは i386 \s-1PE\s0 ターゲット用移植版リンカに
特有のものです]
.IP "\fB\-\-enable\-extra\-pe\-debug\fR" 4
.IX Item "--enable-extra-pe-debug"
自動インポートしたシンボルのサンクに関して、付加的なデバッグ情報を示します。
[このオプションは i386 \s-1PE\s0 ターゲット用移植版リンカに
特有のものです]
.IP "\fB\-\-section\-alignment\fR" 4
.IX Item "--section-alignment"
セクションのアラインメントを設定します。
メモリ中のセクションは、常にこの倍数のアドレスから始まります。
デフォルトは 0x1000 です。
[このオプションは i386 \s-1PE\s0 ターゲット用移植版リンカに
特有のものです]
.IP "\fB\-\-stack\fR \fIreserve\fR" 4
.IX Item "--stack reserve"
.PD 0
.IP "\fB\-\-stack\fR \fIreserve\fR\fB,\fR\fIcommit\fR" 4
.IX Item "--stack reserve,commit"
.PD
プログラムのスタックに使うために予約する (オプションでコミットする)
メモリ量を指定します。
デフォルトでは 2Mb が予約され、4K がコミットされます。
[このオプションは i386 \s-1PE\s0 ターゲット用移植版リンカに
特有のものです]
.IP "\fB\-\-subsystem\fR \fIwhich\fR" 4
.IX Item "--subsystem which"
.PD 0
.IP "\fB\-\-subsystem\fR \fIwhich\fR\fB:\fR\fImajor\fR" 4
.IX Item "--subsystem which:major"
.IP "\fB\-\-subsystem\fR \fIwhich\fR\fB:\fR\fImajor\fR\fB.\fR\fIminor\fR" 4
.IX Item "--subsystem which:major.minor"
.PD
プログラムが実行されるサブシステムを指定します。
\&\fIwhich\fR の値で有効なのは、\f(CW\*(C`native\*(C'\fR,
\&\f(CW\*(C`windows\*(C'\fR, \f(CW\*(C`console\*(C'\fR そして
\&\f(CW\*(C`posix\*(C'\fR です。
オプションで、サブシステムのバージョンも指定することもできます。
[このオプションは i386 \s-1PE\s0 ターゲット用移植版リンカに
特有のものです]
.SH "環境変数"
.IX Header "環境変数"
環境変数 \f(CW\*(C`GNUTARGET\*(C'\fR, \f(CW\*(C`LDEMULATION\*(C'\fR,
\&\f(CW\*(C`COLLECT_NO_DEMANGLE\*(C'\fR を用いて、\fBld\fR の
動作を変更することができます。
.PP
\&\f(CW\*(C`GNUTARGET\*(C'\fR は、\fB\-b\fR
(もしくはその別名の \fB\-\-format\fR) が指定されなかった場合、
入力ファイルのオブジェクト形式を決定するのに使用されます。
その値は、入力形式に対する \s-1BFD\s0 名の 1 つでなくてはなりません。
環境変数 \f(CW\*(C`GNUTARGET\*(C'\fR が定義されていない場合、
\&\fBld\fR は、そのターゲットに最も自然な形式を使用します。
\&\f(CW\*(C`GNUTARGET\*(C'\fR が \f(CW\*(C`default\*(C'\fR に
設定されていた場合、\s-1BFD\s0 は、バイナリ入力ファイルを検査して
インプット形式を決定しようとします。
この方法は大抵の場合成功しますが、潜在的な曖昧さが残ります。
というのは、オブジェクトファイルの形式を指定するのに使われる
マジックナンバが一意であることを保証する方法がないからです。
しかし、それぞれのシステム上での \s-1BFD\s0 の構成過程において、
そのシステムの慣習的なフォーマットが検索リストの先頭に置かれるので、
この曖昧さは慣習的なものに有利になるように解決されます。
.PP
\&\f(CW\*(C`LDEMULATION\*(C'\fR は、\fB\-m\fR オプションが
指定されなかった場合、デフォルトのエミュレーションを決定するのに
使用されます。
エミュレーションは、リンカの動作の様々な面、特にデフォルトの
リンカスクリプトに影響を与えます。
利用可能なエミュレーションの一覧は、\fB\-\-verbose\fR もしくは
\&\fB\-V\fR オプションを指定することで表示できます。
\&\fB\-m\fR オプションが使用されず、\f(CW\*(C`LDEMULATION\*(C'\fR 環境変数も
定義されていなかった場合、デフォルトのエミュレーションは、リンカが
どのように構成されたかに依存します。
.PP
通常、リンカはデフォルトでシンボルをデマングルします。
しかし、\f(CW\*(C`COLLECT_NO_DEMANGLE\*(C'\fR 環境変数が設定された場合は、
デフォルトでシンボルをデマングルしません。
この環境変数は、gcc のリンカラッパプログラムでも同様に使用されています。
デフォルトは、\fB\-\-demangle\fR と \fB\-\-no\-demangle\fR オプションで
上書きすることができます。
.SH "関連項目"
.IX Header "関連項目"
\&\fIar\fR\|(1), \fInm\fR\|(1), \fIobjcopy\fR\|(1), \fIobjdump\fR\|(1),
\&\fIreadelf\fR\|(1) そして Info の \fIbinutils\fR と \fIld\fR 項。
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 1991, 92, 93, 94, 95, 96, 97, 98, 99, 2000, 2001,
2002, 2003, 2004 Free Software Foundation, Inc.
.PP
Permission is granted to copy, distribute and/or modify this document
under the terms of the \s-1GNU\s0 Free Documentation License, Version 1.1
or any later version published by the Free Software Foundation;
with no Invariant Sections, with no Front-Cover Texts, and with no
Back-Cover Texts.  A copy of the license is included in the
section entitled \*(L"\s-1GNU\s0 Free Documentation License\*(R".
.SH "謝辞"
.IX Header "謝辞"
この日本語訳の作成にあたり、SRA の矢吹氏 (yabuki@sra.co.jp) の訳を
参考にさせていただきました。
