.\" %FreeBSD: src/contrib/cvs/man/cvs.1,v 1.21 2004/04/15 01:17:26 peter Exp %
.\" $FreeBSD$
.de Id
.ds Rv \\$3
.ds Dt \\$4
..
.TH CVS 1 "\*(Dt"
.\" Full space in nroff; half space in troff
.de SP
.if n .sp
.if t .sp .5
..
.\" quoted command
.de `
.RB ` "\|\\$1\|" '\\$2
..
.SH "名称"
cvs \- コンカレントバージョンシステム
.SH "書式"
.TP
\fBcvs\fP [ \fIcvs_options\fP ]
.I cvs_command
[
.I command_options
] [
.I command_args
]
.SH "注"
このマニュアルページは
.B cvs
の機能のまとめですが、最新ではないかもしれません。
より新規で詳細な文書に関しては (
.B info cvs
コマンドか、無い場合にはこのマニュアルページの関連項目の節に記述してあるように)
Cederqvist 著のマニュアルを参照して下さい。
.SH "解説"
.IX "revision control system" "\fLcvs\fR"
.IX  cvs  ""  "\fLcvs\fP \- concurrent versions system"
.IX  "concurrent versions system \- \fLcvs\fP"
.IX  "release control system"  "cvs command"  ""  "\fLcvs\fP \- concurrent versions system"
.IX  "source control system"  "cvs command"  ""  "\fLcvs\fP \- concurrent versions system"
.IX  revisions  "cvs command"  ""  "\fLcvs\fP \- source control"
CVS はバージョン制御システムであり、RCS や SCCS のように、
ファイル (通常はソースコード) の古いバージョンの保持と
誰が何時何故変更を施したかなどの記録の保持を可能にします。
同様のシステムとは異なり、
CVS は一時に 1 ファイルや 1 ディレクトリのみを操作対象とするのではなく、
バージョン管理されたファイルを持つディレクトリ集合からなる階層を
操作対象とします。
CVS は、リリース管理を助け、
また複数の作者による並行的なソースファイル編集を助けます。
CVS は、
様々な操作を有効にしたり記録したり制御したりするためにトリガを使用可能であり、
広域ネットワークでうまく動作します。
.SP
.B cvs
はマスタソースの単一のコピーを保持します。
このコピーはソースの``リポジトリ''と呼ばれます。 これは、以前の
ソフトウェアリリースをいつでもシンボリックなリビジョンタグか、
または過去の日付のいずれかに基づいて取り出せるようにするための
全ての情報を含みます。
.SH "不可欠なコマンド"
.B cvs
はバラエティに富んだコマンドを提供します (書式説明における \fIcvs_command\fP)。
また分散環境での多様なソース管理要求を満たすために、
これらのコマンドの多くにはいくつものオプションが用意されています。
しかしながら、
.BR cvs で便利に仕事をするためにそれぞれの細部に渡ってマスタする
必要はありません。
実際、ソースリポジトリを使う (そしてそれに貢献する) には 5 つの
コマンドで充分です。
.TP
\fBcvs checkout\fP \fImodules\fP\|.\|.\|.
大部分の \fBcvs\fP での作業のために必要な準備: \fImodules\fP
(名前をつけたソースの集合。 ここにはソースリポジトリへの相対パスを
使うこともできます) のソースの私的なコピーを作成します。
他人の作業に邪魔されることなく このコピーで作業することができます。
少なくとも 1 レベルのサブディレクトリが必ず作成されます。
.TP
.B cvs update
他の開発者がリポジトリのソースに行った変更を あなたのコピーに
取り込みたいと思ったときに、あなたの私的なソースのディレクトリの
\fI中で\fP このコマンドを実行して下さい。
.TP
\fBcvs add\fP \fIfile\fP\|.\|.\|.
あなたの作業ディレクトリの \fBcvs\fP のレコードに新しいファイルを
載せるには、このコマンドを使います。そのファイルは次にあなたが
.` "cvs commit" を実行した時にリポジトリに追加されます。
注意:
新しいソースをソースリポジトリに登録するには
.` "cvs import"
コマンドを使って下さい。
.` "cvs add"
はすでにチェックアウトされているモジュールに新しいファイルを
追加するときにのみ使います。
.TP
\fBcvs remove\fP \fIfile\fP\|.\|.\|.
(指定するファイルを消した後に) リポジトリからファイルを
消したいことを宣言する場合に、このコマンドを使います。
.` "cvs commit" を実行するまで削除は他へは影響しません。
.TP
\fBcvs commit\fP \fIfile\fP\|.\|.\|.
あなたの変更をソースリポジトリに取り込むことで、他の開発者へ
変更結果を ``公開'' したいときに、このコマンドを使います。
.SH "オプション"
.B cvs
のコマンドラインには
.IR cvs_options を含めることができ、
これは
.B cvs
プログラム全体に適用されます。 ひとつの
.IR cvs_command がソースリポジトリへの特定の動作を
指定します。 そして
.I cvs_command
の動作を完全に指定するために
.I command_options
と
.I command_arguments
とを含めることができます。
.SP
.I 警告:
.IR cvs_command とオプションの相対的な位置関係に正確さを
期さなければなりません。
なぜなら同じオプションが
.I cvs_options
の位置 (
.B cvs
コマンドの左側) と
.I command_options
の位置 (
.B cvs
コマンドの右側) のいずれに置かれるかで異なる意味を持つ可能性が
あるためです。
.SP
.IR cvs_command を省略できる状況が 2 つだけあります:
.` "cvs \-H"
または
.` "cvs --help"
は利用可能なコマンドの一覧を引き出します、そして
.` "cvs \-v"
または
.` "cvs --version"
は \fBcvs\fP それ自身のバージョン情報を表示します。
.SP
.SH "CVS OPTIONS"
リリース 1.6 現在、
.B cvs
は、短いオプションと共に
.SM GNU
スタイルの長いオプションもサポートします。
現在はまだ 2, 3 の長いオプションしかサポートされておらず、
それらは同じ意味を持つ短いオプションの後ろにかぎ括弧で囲んで
示されています。
.SP
以下のオプションは
.B cvs
プログラムの全体的な制御に使います:
.TP
.B \-H [ --help ]
指定された
.I cvs_command
の用法を表示します (が、コマンドの実行は行いません)。コマンド名を
指定しないと
.` "cvs \-H"
は利用可能な全コマンドの要約を表示します。
.TP
.B \-Q
はコマンドを
.I 真に
寡黙にします。コマンドは深刻な問題についてのみ出力を行います。
.TP
.B \-q
はコマンドをいくぶん静かにします。サブディレクトリを再帰的に
移動する際の報告のような通知的なメッセージが抑制されます。
.TP
\fB\-b\fP \fIbindir\fP
.SM RCS
プログラムが置かれているディレクトリとして
.I bindir
を使います (CVS 1.9 およびそれ以前)。
環境変数
.SM RCSBIN
の設定より優先されます。
これは絶対パス名で指定しなければなりません。
.TP
\fB\-d\fP \fICVS_root_directory\fP
マスタとなる
ソースリポジトリのルートディレクトリへのパス名として
.I CVS_root_directory
を使います。
環境変数
.SM CVSROOT
の設定より優先されます。
これは絶対パスで指定しなければなりません。
.TP
\fB\-e\fP \fIeditor\fP
ログ情報の入力においてエディタとして
.I editor
を使います。
環境変数
.SM CVSEDITOR\c
,
.SM VISUAL\c
,
.SM EDITOR
の設定より優先されます。
.TP
.B \-f
.B cvs
スタートアップファイル (\fI~/.cvsrc\fP) を読み込みません。
.TP
.B \-n
いかなるファイルも変更しません。
.IR cvs_command を実行しようとしますが、
経過報告のみを行います。ファイルへの削除、更新やマージのいずれも
行いませんし、新しいファイルも作成しません。
.TP
.B \-t
プログラムの実行をトレースします。
.B cvs
の動作のステップを示すメッセージを表示します。
不慣れなコマンドの影響の可能性を調べるのに
.B \-n
との組み合わせで特に有用です。
.TP
.B \-r
新しい作業ファイルを読み出し専用にします。
環境変数
.SM CVSREAD
がセットされている場合と同じ効果を持ちます。
.TP
.B \-R
読み出し専用リポジトリモードをオンにします。
これにより、
anoncvs サーバ上などの読み出し専用リポジトリからのチェックアウトや、
CDROM 上のリポジトリからのチェックアウトが可能になります。
環境変数
.SM CVSREADONLYFS
がセットされている場合と同じ効果を持ちます。
また、
.B \-R
を使用すると NFS を介したチェックアウトが高速になります。
.TP
.B \-v [ --version ]
.BR cvs
のバージョンと著作権情報を表示します。
.TP
.B \-w
新しい作業ファイルを読み書き可能にします (デフォルトです)。
環境変数
.SM CVSREAD
がセットされていても無視します。
.TP
.B \-g
強制的に、グループ書き込み権限を作業ファイルに付加します。
典型的には、
単一のチェックアウトされたソースツリーを複数ユーザで共有する場合に
このオプションを使用し、
各ユーザがより安全な umask でシェルを使用できるようにします。
この機能を使用するためには、
チェックアウトするソースツリーを格納するディレクトリを作成し、
本ディレクトリのグループをプライベートグループに設定し、
本ディレクトリ下のファイルがディレクトリのグループ ID を継承するようにします。
FreeBSD では自動的に、ファイルはディレクトリのグループ ID を継承します。
SysV では、典型的には SGID ビットをディレクトリに設定する必要があります。
チェックアウトしたツリーを共有するユーザは、
このグループに含まれる必要があります。
単一のチェックアウトされたソースツリーを共有するということは、
共通の CVS リポジトリに複数ユーザのアクセスを許すこととまったく異なることに
注意してください。
共通の CVS リポジトリへのアクセスは、
共有グループ書き込み権限によって既に実現されており、
本オプションを必要としません。

本オプションを透過的に使用するためには、
単に 'cvs -g' という行を ~/.cvsrc ファイルに置くだけで良いです。
プライベートグループもしくはプライベートモード 0700 のディレクトリに
全ソースをチェックアウトしたものをファイアウォールで防御しているのでない限り、
本オプションの使用は勧められません。
.TP
.B \-x
クライアントとサーバの間の通信を全て暗号化します。
現在では、Kerberos コネクション使用時のみ使用可能です。
.TP
\fB\-z\fP \fIcompression\-level\fP
ファイルをネットワーク経由でやりとりする際、
圧縮レベル \fIcompression\-level\fP で
.B gzip
を使い、やりとりするデータの圧縮と伸長を行います。リンクの両端で
.SM GNU
.B gzip
プログラムがその時点でのサーチパス中に存在する必要があります。
.SH "使用法"
.` "cvs \-H" で全般のヘルプを要求する場合を除き、
行いたい特定のリリース制御機能を選択するために、
.B cvs
に対して一つの
.I cvs_command
を指定しなければなりません。
各
.B cvs
コマンドはそれ自身のオプションと引数の集まりを受け付けます。
しかしながら、多くのオプションが複数のコマンドに渡って利用可能です。
.B \-H
オプションをコマンドと共に指定することで、
各コマンドの使用法のまとめを表示することができます。
.SH "CVS のスタートアップファイル"
通常、CVS は起動時にユーザのホームディレクトリから
.I .cvsrc
というファイルを読み込みます。この起動時の手続きは
.B \-f
フラグで止めることができます。
.SP
.I .cvsrc
ファイルには CVS コマンドに引数リストを付けて、1 行に 1 つの
コマンドを並べます。例えば \fI.cvsrc\fP に以下のように書くと:
.SP
diff \-c
.SP
.` "cvs diff"
コマンドには常にコマンドラインで指定されたオプションに加えて
\-c オプションが渡されるという意味になります (この場合
.` "cvs diff"
を実行すると 全てにおいて context diff 形式が生成されるという
効果を持ちます)。
.SP
大域的なオプションは、\fBcvs\fP キーワードを使用して指定します。
例えば次の
.SP
cvs \-q
.SP
は、大域的オプション \-q が指定されたかのように全
.` "cvs"
コマンドが動作することを意味します。
.SH "CVS COMMAND のまとめ"
以下は全
.B cvs
コマンドの解説を要約したものです:
.TP
.B add
新しいファイルまたはディレクトリをリポジトリに追加します。
ファイルについては追加を同ファイルに対する
.` "cvs commit"
が行われるまで待ちます。
以前に
.` "cvs checkout"
を行うことで作成されたソースの中からのみ実行可能です。
新しいソース階層の全体を
.B cvs
の制御下に置くには
.` "cvs import"
を使って下さい。
(リポジトリを直接に変更するものではありません。
作業ディレクトリを変更します。)
.TP
.B admin
ソースリポジトリに対して
制御コマンドを実行します。(リポジトリを直接に変更します。
作業ディレクトリを使用しますが変更は行いません。)
.TP
.B checkout
編集作業のためのソースファイルの作業ディレクトリを作成します。
(作業ディレクトリを生成または変更します。)
.TP
.B commit
作業ディレクトリでの変更、追加、削除部分をソースリポジトリに
反映します。(リポジトリを変更します。)
.TP
.B diff
作業ディレクトリのファイルとソースリポジトリ、または
ソースリポジトリ中の 2 つのリビジョン間の差分を表示します。
(リポジトリ、作業ディレクトリのいずれも変更しません。)
.TP
.B export
サイトからの出荷のための一揃いのソースファイルのコピーを用意します。
.` "cvs checkout"
と違い
.B cvs
管理のためのディレクトリが作られず (そしてそのため
.` "cvs export" で作成されたディレクトリから
.` "cvs commit" を行うことはできません)、
シンボリックタグが指定されなければなりません
(リポジトリを変更しません。 作業ディレクトリに似たディレクトリを
作成します)。
.TP
.B history
ソースリポジトリの特定のファイルまたはディレクトリにあなたや
他の人が実行した
.B cvs
コマンドを表示します。(リポジトリも作業ディレクトリも変更しません。)
ヒストリログは
.` "$CVSROOT/CVSROOT/history"
ファイルが作成されることで有効になった場合にのみ記録されます。
.BR cvs ( 5 )
を参照して下さい。
.TP
.B import
外部で行われた更新内容を ``ベンダブランチ'' としてソースリポジトリに
取り込みます。(リポジトリを変更します。)
.TP
.B init
CVSROOT サブディレクトリとデフォルトの制御ファイルを追加することで、
リポジトリを初期化します。
リポジトリを使用する前に、
本コマンドを使用するか、他の方法でリポジトリを初期化する必要があります。
.TP
.B log
ログ情報を表示します。
(リポジトリも作業ディレクトリも変更しません。)
.TP
.B rdiff
リポジトリの中の 2 つのリリースの間の差分の集合をパッチファイルとして
用意します。(リポジトリも作業ディレクトリも変更しません。)
.TP
.B release
.` "cvs checkout" をキャンセルし、
全ての変更を捨て去ります。
(作業ディレクトリを削除できます。 リポジトリは変更しません。)
.TP
.B remove
ソースリポジトリからファイルを削除します、そのファイルに
.` "cvs commit"
が実行されるまで保留されます。(直接リポジトリには影響しません。
作業ディレクトリを変更します。)
.TP
.B rtag
ソースリポジトリの特定のリビジョンのファイルに明示的に
シンボリックタグを指定します。
.` "cvs tag" も参照して下さい。
(リポジトリを直接変更します。作業ディレクトリは必要なくまた
変更もしません。)
.TP
.B status
現在のファイルの状態を表示します: 最新バージョン、作業ディレクトリの
ファイルのバージョン、作業バージョンが編集されたかどうか、オプションで
.SM RCS
ファイル中のシンボリックタグ。(リポジトリ、作業ディレクトリとも
変更しません。)
.TP
.B tag
リポジトリ中のファイルにシンボリックタグを指定します。
デフォルトでは、作業ディレクトリと最後に同期を取ったリビジョンに
タグをつけます。
(直接リポジトリを変更します。作業ディレクトリを使いますが
変更はしません。)
.TP
.B update
リポジトリから変更を取り出して作業ディレクトリを最新状態にします。
可能であればマージが自動で行われます。
変更点が衝突しているために手動で解決しなければならない場合は、
警告が表示されます。(作業ディレクトリを変更します。
リポジトリは変更しません。)
.SH "共通の COMMAND OPTIONS"
この節では
複数の
.B cvs
コマンドで使用できる
.I command_options
について説明します。必ずしも全てのコマンドがこれら全てのオプションを
サポートしているわけではありません。 コマンドの各オプションは、それが
意味を成すコマンドでのみサポートされます。しかしながら、
コマンドがそれらのオプションのひとつを持つとき、
他のコマンドでもそのオプションが同じ意味を持つと考えて差し支えありません。
(個々のコマンドと共に列挙してある別のオプションは
ある
.B cvs
コマンドと別のコマンドで異なる意味を持つかもしれません。)
.I "注意:"
.B history
コマンドは例外です。
このコマンドは、これら標準のオプションとも衝突するたくさんの
オプションをサポートしています。
.TP
\fB\-D\fP \fIdate_spec\fP
\fIdate_spec\fP 以前のものの中で最も最近のリビジョンを使います (単独の
引数で、日時の表記は過去の日時を指定します)。
多種多様な日時のフォーマットが、
特に ISO ("1972-09-24 20:05") または Internet ("24 Sep 1972 20:05") が
サポートされます。
特定のタイムゾーンが指定されていなければ、\fIdate_spec\fP は
ローカルタイムゾーンで解釈されます。
ソースファイルの個人的なコピーを作るときに使うと、指定は ``sticky'' と
なります。 つまり、\fB\-D\fP を使って作業ファイルを取り出すと、
\fBcvs\fP は指定された日時を記録します。
これは同じディレクトリでのその後の update で同じ日時を使うように
するためです (これを明示的に無効にするよう指定していない場合に限ります。
\fBupdate\fP コマンドの説明を参照して下さい)。
.B \-D
は
.BR checkout ", " diff ", " history ", " export ", "
.BR rdiff ", " rtag ", "
.B update
コマンドで有効です。
有効な日時指定には以下のようなものがあります:
.in +1i
.ft B
.nf
1 month ago
2 hours ago
400000 seconds ago
last year
last Monday
yesterday
a fortnight ago
3/31/92 10:00:07 PST
January 23, 1987 10:05pm
22:00 GMT
.fi
.ft P
.in -1i
.TP
.B \-f
\fBcvs\fP コマンドに特定の日時かタグを指定した場合、
通常は指定したタグを含まない (または指定した日時に存在しなかった)
ファイルを無視します。一致するタグまたは日時が存在しなくても
ファイルを取り出したいときは \fB\-f\fP オプションを使います。
(その場合、最も新しいバージョンが使われます。)
.B \-f
は以下のコマンドで使用できます:
.BR checkout ", " export ", "
.BR rdiff ", " rtag ", " update
.TP
\fB\-k\fP \fIkflag\fP
デフォルトの
キーワード処理を変更します。
\fB\-k\fP オプションは
.BR add ", " checkout ", " diff ", " export ", "
.BR rdiff ", " update
コマンドで使用できます。
ソースファイルの個人的なコピーを作成するときに使うと
\fIkflag\fP の指定は ``sticky'' になります。 つまり、このオプションを
\fBcheckout\fP か \fBupdate\fP コマンドで指定すると、
\fBcvs\fP は指定した \fIkflag\fP をファイルに関連付け、
他のものを指定するまで、以降の \fBupdate\fP コマンドでそれを使い続けます。
.SP
より有用な \fIkflag\fP としては \-ko と \-kb (バイナリファイル用)
と \-kv があります。\-kv は
.B export
の際、どこか別のサイトで後に
.B import
されてもキーワード情報が残るようにしたい場合に有用です。
.TP
.B \-l
ローカル; サブディレクトリを再帰的に処理するのではなく、
現ディレクトリでのみ実行します。
以下のコマンドで使用できます:
.BR checkout ", " commit ", " diff ", "
.BR export ", " remove ", " rdiff ", " rtag ", "
.BR status ", " tag ", " update
.TP
.B \-n
.BR checkout / commit / tag / update
のいずれのプログラムも
.I 実行しません。
(プログラムはそれぞれの動作中にモジュールデータベースで
実行することを指定される可能性があり、このオプションはこれを
バイパスします。)
.BR checkout ", " commit ", " export ", "
.B rtag
コマンドで利用できます。
.I 警告:
これは
.B cvs
コマンドの
.I 左側
に指定できる、全体に作用する
.` "cvs \-n"
オプションと同じではありません。
.TP
.B \-P
.BR checkout " か " update
によって更新されたことで空になった余分なディレクトリを
取り除きます (すなわち削除します)。
通常は、空のディレクトリ (リビジョン管理されたファイルを
含まないもの) は残されます。
.B \-P
を指定すると、チェックアウトしたソースからそういったディレクトリを
黙って削除します。
これはリポジトリからはディレクトリを削除しません。あなたが
チェックアウトしたコピーから削除するだけです。
このオプションは
.B \-r
か
.B \-D
オプションが
.BR checkout " と " export で指定された場合に暗黙のうちに
指定されることに注意して下さい。
.TP
.B \-T
(ローカル) リポジトリからのコピーにより、CVS/Template を作成/更新します。
本オプションは、ローカルの cvs リポジトリを管理し、
リモートのリポジトリへコミットする開発者にとって有用です。
CVS/Template を維持することにより、
リモートコミットにおいても依然として、
適切なテンプレートをコミットエディタセッションに立ち上げ可能となります。
.BR checkout " と " update で利用可能です。
.TP
.B \-p
リポジトリから取り出されたファイルを、カレントディレクトリに
書き込むのではなく、標準出力へパイプします。
.BR checkout " と " update
コマンドで使用できます。
.TP
\fB\-r\fP \fItag\fP
デフォルトの ``head'' リビジョンの代わりに引数
.I tag
で指定されたリビジョンを使います。
\fBtag\fP と \fBrtag\fP コマンドで
付けられた任意のタグと共に、常に 2 つの特別なタグが使用できます:
.` "HEAD"
はリポジトリ中で最も新しい有効なバージョンを指し、
そして
.` "BASE"
はカレントの作業ディレクトリに最後にチェックアウトした
リビジョンを指します。
.SP
このオプションを
.` "cvs checkout"
か
.` "cvs update"
でファイルのコピーを作成するときに使うと、
\fItag\fP の指定は ``sticky'' です: \fBcvs\fP は
\fItag\fP を記憶して以降の \fBupdate\fP コマンドでも、他のものを
指定するまで、それを使い続けます。
.I tag
としては
シンボリックまたは番号によるものが使用できます。
.SM RCS
ファイルが指定されたタグを含んでいないときに警告メッセージを抑止するため
全体に作用する
.B \-q
オプションをコマンドオプション
.B \-r
と一緒に指定すると便利な場合が多くあります。
.B \-r
は
.BR checkout ", " commit ", " diff ", "
.BR history ", " export ", "
.BR rdiff ", " rtag ", " update
コマンドで使用できます。
.I 警告:
これは
.B cvs
コマンドの
.I 左側
に指定し、全体に作用する
.` "cvs \-r"
オプションと同じではありません。
.SH "CVS COMMANDS"
以下が (最終的な) 全
.B cvs
コマンドの詳細とそれぞれが受け付けるオプションです。
各コマンドの最初のサマリ行の説明は 3 種類の事柄をまとめています:
.TP 1i
\ \ \ \ コマンドのオプションと引数
特別なオプションが以下で説明されます。共通のコマンドオプションは
サマリ行にしか現れないかもしれません。
.TP 1i
\ \ \ \ 作業ディレクトリかリポジトリか?
いくつかの \fBcvs\fP コマンドは実行に作業ディレクトリが必要です。
いくつかはリポジトリが必要です。同様に、いくつかのコマンドは
リポジトリを \fI変更し\fP、いくつかは作業ディレクトリを変更し、
いくつかは何の変更も行いません。
.TP 1i
\ \ \ \ 同義語
多くのコマンドには同義語があります。
同義語は正式な名前よりも覚えやすい (あるいはタイプしやすい) と
感じることでしょう。
.PP
.TP
\fBadd\fP [\fB\-k\fP \fIkflag\fP] [\fB\-m '\fP\fImessage\fP\fB'\fP] \fIfiles.\|.\|.\fP
.I 以下が必要:
リポジトリ、作業ディレクトリ。
.br
.I 以下を変更:
作業ディレクトリ。
.br
.I 同義語:
.B new
.br
.B add
コマンドを使って
ソースリポジトリに新しいファイルまたはディレクトリを作成します。
.B add
で指定されるファイルまたはディレクトリは、すでに
カレントディレクトリ (
.B checkout
コマンドで作成されたディレクトリでなければなりません) に
存在しなければなりません。
新しいディレクトリ階層の全体をソースリポジトリに追加する
(例えば、サードパーティのベンダから受け取ったファイル群のような) には、
代わりに
.` "cvs import"
コマンドを使います。
.SP
.` "cvs add"
の引数が直下のサブディレクトリを指しているなら、そのディレクトリが
ソースリポジトリの現位置に作成され、必要な
.B cvs
管理ファイルが作業ディレクトリに作成されます。
ディレクトリがすでにソースリポジトリに存在した場合でも、
.` "cvs add"
はあなたのバージョンのディレクトリに管理ファイルを作成します。
これによって、あなたがソースを
.B checkout
した後に誰か他の人がディレクトリを作っていても
.` "cvs add"
でそのディレクトリをあなたの私的なソースに作成することが
可能になります。以下のようにすることができます:
.SP
.in +1i
.ft B
.nf
example% mkdir new_directory
example% cvs add new_directory
example% cvs update new_directory
.fi
.ft P
.in -1i
.SP
.` "cvs update"
を使った別のアプローチもあります:
.SP
.in +1i
.ft B
.nf
example% cvs update -d new_directory
.fi
.ft P
.in -1i
.SP
(新しく \fIできた\fP ディレクトリをあなたの作業ディレクトリに
追加するには、おそらく
.` "cvs checkout"
か
.` "cvs update -d" を使用する方が簡単でしょう。)
.SP
.` "cvs commit"
で変更が恒久的なものとされるまで、追加されたファイルは
ソースリポジトリには置かれません。
.` "cvs remove"
コマンドで削除されたファイルに対して
.` "cvs add"
を行うと、間で
.` "cvs commit"
コマンドが実行されていなければファイルが復活します。
.SP
新しいファイルを
.` "cvs commit"
で恒久的なものにするときに、いつものように、ログメッセージを指定する
機会があります。もしファイルの
.I 作成
と対応するもう一つのログメッセージを指定したいならば
(例えば、ファイルの目的を説明するなど)、
.B add
コマンドの
.` "\-m \fImessage\fP"
オプションで指定することができます。
.SP
.` "-k kflag"
オプションで このファイルがチェックアウトされるときの
デフォルトを指定できます。
引数
.` "kflag"
は
.SM RCS
ファイルに記録されて
.` "cvs admin"
で変更することができます。
展開された
キーワードを持たないであろうバイナリをチェックインする場合には
.` "-ko"
を指定すると便利です。
.TP
\fBadmin\fP [\fIrcs-options\fP] \fIfiles.\|.\|.\fP
.I 以下が必要:
リポジトリ、作業ディレクトリ。
.br
.I 以下を変更:
リポジトリ。
.br
.I 同義語:
.B rcs
.br
これは
.BR rcs ( 1 )
に似た管理機構と対応する
.B cvs
のインタフェースです。
なんのフィルタや変換も行いません。
しかしながら、このコマンドは再帰的に働きます。よって使用には
特別な注意を払わなければいけません。
.TP
\fBcheckout\fP [\fBoptions\fP] \fImodules\fP.\|.\|.
.I 以下が必要:
リポジトリ。
.br
.I 以下を変更:
作業ディレクトリ。
.br
.I 同義語:
.BR co ", " get
.br
.IR modules で指定されたソースファイルのコピーを持つ
作業ディレクトリを作成します。他の大部分の
.B cvs
コマンドは作業ディレクトリに作用するものなので、これらを使う前に
.` "cvs checkout"
を実行しなくてはなりません。
.SP
\fImodules\fP はいくつかのソースディレクトリとファイルを
集めたものに対するシンボル名 (それ自体は
.` "modules"
というモジュールとしてソースリポジトリに定義されています。
.BR cvs ( 5 )
参照) か、あるいはリポジトリ中でのディレクトリまたはファイルへのパス名です。
.SP
指定した
.I modules
に応じて、
.B checkout
は再帰的にディレクトリを作成して適切なソースファイルで満たします。
その後はいつでも、(他のソフトウェア開発者達がソースの彼らの分のコピーを
編集しているかどうかを気にすることなく) これらのソースファイルを編集したり、
他の人によってソースリポジトリに行われた新しい変更を取り込むために
これらを更新 (update) したり、
あなたの作業を恒久的な変更としてリポジトリに
登録 (commit) することができます。
.SP
.B checkout
はディレクトリの作成に使われることに注意して下さい。
作成されるディレクトリのトップレベルは常に
.B checkout
が起動されたディレクトリに追加され、そして通常、指定された
.IR module と同じ名前を持ちます。
.I module
がエイリアスの場合は、作成されたサブディレクトリは違う名前を持つかも
しれませんが、それがサブディレクトリであること、そして
.B checkout
はファイルが私的な作業領域に取り出される際に各ファイルへの
相対パスを表示すること (全体に作用する
.B \-Q
オプションを指定していなければ) は当てにできます。
.SP
すでに以前の
.B checkout
で作成されているディレクトリで
.` "cvs checkout"
を実行することも許されています。これは
以下で説明する
.B update
コマンドに
.B \-d
オプションを指定するのと同じ効果を持ちます。
.SP
.` "cvs checkout"
で使える
.I options
は以下の標準のコマンドオプションです。
.BR \-P ", " \-f ", "
.BI \-k " kflag"
\&,
.BR \-l ", " \-n ", " \-p ", "
.BR \-r
.IR tag ", "
.BI \-D " date"\c
.SP
これらに加えて、以下の特別のコマンドオプションを
.BR checkout
で使うことができます:
.SP
.B \-A
オプションで sticky なタグ、日付または
.B \-k
オプションをリセットできます。(作業ファイルを
\fB\-r\fP, \fB\-D\fP, \fB\-k\fP オプションのいずれかを使って取り出すと、
\fBcvs\fP は対応するタグ、日付、\fIkflag\fP を記録して以降の
更新 (update) でそれを使い続けます。 \fB\-A\fP オプションを使って \fBcvs\fP に
それらの指定を忘れさせ、ファイルの ``head'' バージョンを取り出します)。
.SP
.BI \-j " branch"
オプションはベースとなったリビジョンと、そこから変更された結果の
リビジョンとの差分をマージします (例えば、もしタグがブランチを
指しているときは、
.B cvs
は、そのブランチで行われた全ての変更を作業ファイルにマージします)。
.SP
2 つの \fB-j\fP オプションを指定すると、
.B cvs
は 2 つの各々のリビジョン間での変更をマージします。
これは特定の差分を作業ファイルから ``削除'' するために使うことが
できます。
.SP
加えて、各 \fB-j\fP オプションをブランチで使う場合に必要であれば
日時指定を加えることができ、選択するリビジョンを指定した日時以内に
制限できます。
日時を加える場合はタグにコロン (:) を付けて指定します。
例としては
.` "cvs import"
でローカルな変更と衝突する部分のあるソースを import するときに
実行するように指示されるコマンドがあります:
.SP
.in +1i
.ft B
.nf
example% cvs checkout -jTAG:yesterday -jTAG module
.fi
.ft P
.in -1i
.SP
.B \-N
オプションと
.` "\-d \fIdir\fP"
を指定することで作業ディレクトリでモジュールのパスが短縮されるのを
防げます。(通常、明示的に対象ディレクトリを指定すると \fBcvs\fP は
なるべくパスが短くなるようにします。)
.SP
.B \-c
オプションで、作業ディレクトリのファイルやディレクトリに作成や変更を
行う代わりに、モジュールファイルをソートしたものを標準出力にコピー
します。
.SP
.BI \-d " dir"
オプションで、モジュール名ではなく、
.I dir
で指定した名前のディレクトリを作業ファイルのために作成します。
\fB\-N\fP を一緒に指定しない場合は、\fIdir\fP の下に作成されるパスは
可能な限り短くなります。
.SP
.B \-s
オプションを使って
.B \-s
オプションでモジュールファイルに格納されたモジュール単位の
ステータス情報を表示します。
.TP
\fBcommit\fP [\fB\-lnR\fP] [\fB\-m\fP '\fIlog_message\fP' | \fB\-F\fP \fIfile\fP] [\fB\-r\fP \fIrevision\fP] [\fIfiles.\|.\|.\fP]
.I 以下が必要:
作業ディレクトリ、リポジトリ。
.br
.I 以下を変更:
リポジトリ。
.br
.I 同義語:
.B ci
.br
作業ディレクトリでの変更を共有のソースリポジトリに組み込むにときには
.` "cvs commit"
を使います。
.SP
コミットする対象となる \fIfiles\fP を指定しない場合、現在の
作業ディレクトリ中の全ファイルが調べられます。
.B commit
はあなたが本当に変更したファイルだけを慎重にリポジトリで変更します。
デフォルトでは (または明示的に
.B \-R
オプションを指定した場合)、サブディレクトリのファイルも
調べられ、もし変更されていればコミットされます。
.B \-l
オプションで現ディレクトリのみ
.B コミット
するように制限できます。
変更されていなくても強制的にファイルをコミットしたい場合があるかも
しれません。 これは
.B \-f
フラグで可能で、これは同時に再帰も抑止します (もちろん
.B \-R
で再帰するようにできます)。
.SP
.B commit
は選択されたファイルがソースリポジトリの現リビジョンに対して
最新であることを確認します。 もし選択されたファイルのいずれかが
まず
.` "cvs update"
で最新にされなければならないなら、そこで通知してコミットせずに終ります。
.B commit
は
.B update
コマンドを呼び出しません。update すべきときであるかどうかの判断は
ユーザにゆだねられます。
.SP
全てがうまくいくと、ログメッセージを入力するためにエディタが
呼び出されます。ログメッセージは一つかそれ以上のログを取る
プログラムに書き込まれて
ソースリポジトリのファイルに置かれます。
代わりにコマンドラインで
.B \-m
オプションと共にログメッセージを指定し、
エディタの呼び出しを抑制することができます。また
.B \-F
オプションで引数の \fIfile\fP にログメッセージが含まれていることを
指示することもできます。
.SP
.B \-r
オプションで特定のシンボリックまたは番号で指定される
リビジョンとしてコミットできます。
例えば、全ファイルを
リビジョン ``3.0'' に上げる (変更されていないものも含めて)
には、以下のようにします:
.SP
.in +1i
.ft B
.nf
example% cvs commit -r3.0
.fi
.ft P
.in -1i
.SP
.B cvs
はメインの幹上のリビジョン (ドットが 1 つのリビジョン) へのコミットのみ
許します。
しかしながら、
.B \-r
オプションでブランチ上のリビジョン (偶数個のドットをもつリビジョン) へ
コミットすることもできます。
ブランチとなるリビジョンを作成するには、通常
.BR rtag " または " tag
コマンドの
.B \-b
オプションを使います。
その後、
.BR checkout " または " update
のいずれかでソースのベースを新しく作成したブランチにすることができます。
それ以降、それらの作業ファイルで行われた全ての
.B commit
される変更点は自動的にブランチのリビジョンに追加され、
それによって主たる開発ラインが混乱させられることはありません。
例をあげると、製品のバージョン 1.2 へのパッチを作成しなければ
ならなくなったとすると、バージョン 2.0 がすでに開発中だったとしても、
以下のようにできます:
.SP
.in +1i
.ft B
.nf
example% cvs rtag -b -rFCS1_2 FCS1_2_Patch product_module
example% cvs checkout -rFCS1_2_Patch product_module
example% cd product_module
[[ hack away ]]
example% cvs commit
.fi
.ft P
.in -1i
.SP
極めて実験的なソフトウェアを開発しているとして、
前の週にチェックアウトしたなんらかのリビジョンをベースにしていると
します。
あなたのグループの別の人がこのソフトウェアであなたと一緒に作業したいが、
主たる開発ラインの邪魔はしたくないと考えたなら、あなたはあなたの
変更点を新しいブランチにコミットすると良いでしょう。
すると別の人はあなたの実験的な変更をチェックアウトして
.B cvs
の衝突解決機能を最大限に利用することができます。
シナリオは以下のようになります:
.SP
.in +1i
.ft B
.nf
example% cvs tag -b EXPR1
example% cvs update -rEXPR1
[[ hack away ]]
example% cvs commit
.fi
.ft P
.in -1i
.SP
別の人は単純に
.` "cvs checkout -rEXPR1 whatever_module"
とすれば実験的な変更を採り入れてあなたと作業できるようになります。
.TP
\fBdiff\fP [\fB\-kl\fP] [\fIformat_options\fP] [[\fB\-r\fP \fIrev1\fP | \fB\-D\fP \fIdate1\fP | \fB\-j\fP \fIrev1:date1\fP] [\fB\-r\fP \fIrev2\fP | \fB\-D\fP \fIdate2\fP | \fB\-j\fP \fIrev2:date2\fP]] [\fIfiles.\|.\|.\fP]
.I 以下が必要:
作業ディレクトリ、リポジトリ。
.br
.I 以下を変更:
なにも変更しません。
.br
作業ディレクトリのファイルとソースリポジトリのリビジョンを
.` "cvs diff"
コマンドで比較できます。もし特定のリビジョンを指定しなければ、
ベースにしたリビジョンと比較されます。
標準の
.B cvs
コマンドのオプション
.B \-r
で比較の対象となるリビジョンを指定することもできます。
最後に、
.B \-r
を 2 回 使うと、リポジトリの 2 つのリビジョン間の差分を取ることができます。
(head ブランチの) 過去のリビジョンとの差分を取るために
.B \-D
オプションを指定することもできます。
また、過去のブランチタグ間の差分を取るために
.B \-j
オプションを指定することもできます。
.B \-r
と
.B \-D
と
.B \-j
オプションは常に指定された中で 2 つまでを組み合わせられます。
.SP
サポートされている
.IR format_options
のリストは
.` "cvs --help diff"
を参照して下さい。
.SP
ファイルを何も指定しないと、
.B diff
は現ディレクトリ
(そして、標準オプション
.BR \-l を指定していなければ
そのサブディレクトリ) の全てのファイルについて、
ソースリポジトリの対応するリビジョンと異なっているもの
(つまり
.I あなたが
変更したファイル) または指定されたリビジョンと
異なっているものについて、その差分を表示します
.TP
\fBexport\fP [\-\fBf\|lNnQq\fP] \fB\-r\fP \fIrev\fP\||\|\fB\-D\fP \fIdate\fP [\fB\-d\fP \fIdir\fP] [\fB\-k\fP \fIkflag\fP] \fImodule\fP.\|.\|.
.I 以下が必要:
リポジトリ。
.br
.I 以下を変更:
現ディレクトリ。
.br
このコマンドは
.` "cvs checkout" の一種です。
\fBcvs\fP の管理ディレクトリを持たない
\fImodule\fP のソースのコピーが必要なときに使います。
例えば、サイト外にソースを出す準備をするために
.` "cvs export"
を使うことができます。
このコマンドでは日付またはタグを指定することが \fI必要\fP です。
(\fB\-D\fP または \fB\-r\fP によって)。それによって出荷したソースを
確実に再構成できるようになります。
.SP
標準でないオプションは
.` "\-d \fIdir\fP"
(ソースをディレクトリ \fIdir\fP に書き込みます) と
.` "\-N"
(モジュールパスを短縮しません) のみです。
これらは
.` "cvs checkout" の同名のオプションと同じ意味を持ちます。
.SP
.B export
が使われるときは
.B \-kv
オプションが有用です。
これによって
キーワードが、どこか別のサイトで
.B import
が行われたときにリビジョン情報が失われないような形に展開されるように
なります。
他の \fIkflag\fP を
.` "cvs export"
で使用することもできます。その説明は
.BR co ( 1 )
にあります。
.TP
\fBhistory\fP [\fB\-\fP\fIreport\fP] [\fB\-\fP\fIflags\fP] [\fB\-\fP\fIoptions args\fP] [\fIfiles\fP.\|.\|.]
.I 以下が必要:
.` "$CVSROOT/CVSROOT/history" ファイル。
.br
.I 以下を変更:
何も変更しません。
.br
\fBcvs\fP はヒストリファイルを管理しており、各
\fBcheckout\fP, \fBcommit\fP, \fBrtag\fP, \fBupdate\fP, \fBrelease\fP
コマンドの使用を記録します。
.` "cvs history"
を使って、この情報を色々なフォーマットで表示することができます。
.SP
.I 警告:
.` "cvs history"
は
.` "\-f",
.` "\-l",
.` "\-n",
.` "\-p"
を
.SM
共通の COMMAND OPTIONS\c
\&での説明とは異なる意味に使用します。
.SP
いくつかのオプション (上で \fB\-\fP\fIreport\fP となっている部分) は
どんな種類のレポートを生成するかを制御します:
.TP 1i
.B \ \ \ \ \ \ \-c
今までの各 \fBcommit\fP (つまりリポジトリの変更) についてレポートします。
.TP 1i
\fB\ \ \ \ \ \ \-m\fP \fImodule\fP
特定の \fImodule\fP についてレポートします。(コマンドラインで複数の
\fB\-m\fP を指定できます。)
.TP 1i
.B \ \ \ \ \ \ \-o
チェックアウトされたモジュールについてレポートします。
.TP 1i
.B \ \ \ \ \ \ \-T
全てのタグについてレポートします。
.TP 1i
\fB\ \ \ \ \ \ \-x\fP \fItype\fP
特定のレコードタイプ \fIX\fP のセットを \fBcvs\fP ヒストリから
取り出します。タイプは 1文字で表され、組み合わせて指定できます。
以下のコマンドは単一のレコードタイプを持ちます: \fBcheckout\fP
(タイプ `O')、
\fBrelease\fP (タイプ `F')、\fBrtag\fP (タイプ `T')。
\fBupdate\fP は 4 つのレコードタイプのうちの 1 つになります: `W' は
作業用のファイルのコピーが update で (それがリポジトリから無くなって
いたために) 削除された場合です; `U' は作業ファイルがリポジトリから
コピーされた場合です; `G' は必要なマージが無事に終った場合です; 'C' は
マージが必要だが衝突が検出された場合 (手動でのマージが必要な場合) です。
また、\fBcommit\fP では 3つのレコードタイプのうちの 1つになります:
`M' はファイルが変更された場合; `A' はファイルが最初に追加された場合;
`R' はファイルが削除された場合です。
.TP 1i
.B \ \ \ \ \ \ \-e
全て (全レコードタイプ); 以下を指定するのと等価です。
.` "\-xMACFROGWUT"
.TP 1i
\fB\ \ \ \ \ \ \-z\fP \fIzone\fP
ヒストリレコードを出力する際に
.I zone
で指定されたタイムゾーンを使います。
.B LT
というゾーン名はローカルタイムの意味になります。
数値によるオフセットは時分での UTC との時差を意味します。
例えば、
.B +0530
は 5 時間と 30 分だけ UTC より前 (つまり東側) の意味になります。
.PP
.RS .5i
\fB\-\fP\fIflags\fP と書かれた部分のオプションは、レポートする範囲を絞ります。
引数の指定はありません。
.RE
.TP 1i
.B \ \ \ \ \ \ \-a
全てのユーザのデータを表示します (デフォルトでは
.` "cvs history" を実行しているユーザのみのデータを表示します)。
.TP 1i
.B \ \ \ \ \ \ \-l
最後の変更のみ表示します。
.TP 1i
.B \ \ \ \ \ \ \-w
.` "cvs history"
が実行されているのと同じ作業ディレクトリから行われた変更に関する
レコードのみを表示します。
.PP
.RS .5i
\fB\-\fP\fIoptions args\fP と書かれた部分のオプションは引数に
基づいてレポート範囲を絞ります:
.RE
.TP 1i
\fB\ \ \ \ \ \ \-b\fP \fIstr\fP
文字列 \fIstr\fP をモジュール名、ファイル名、リポジトリパスの
いずれかに含むレコードに戻って表示します。
.TP 1i
\fB\ \ \ \ \ \ \-D\fP \fIdate\fP
\fIdate\fP 以降のデータを表示します。
.TP 1i
\fB\ \ \ \ \ \ \-p\fP \fIrepository\fP
特定のソースリポジトリのデータを表示します (複数の
\fB\-p\fP オプションを同じコマンド行で指定できます)。
.TP 1i
\fB\ \ \ \ \ \ \-r\fP \fIrev\fP
個々の RCS ファイルに現れるリビジョンが
\fIrev\fP で指定されたリビジョンまたはタグ以降であるレコードを表示します。
各
.SM RCS
ファイルについてリビジョンまたはタグが検索されます。
.TP 1i
\fB\ \ \ \ \ \ \-t\fP \fItag\fP
\fItag\fP で指定されるタグがヒストリファイルに最後に
追加されてからのレコードを表示します。
このオプションは、
.SM RCS
ファイルではなくヒストリファイルのみ参照する点で
上記の \fB-r\fP フラグと異なり、
より高速です。
.TP 1i
\fB\ \ \ \ \ \ \-u\fP \fIname\fP
\fIname\fP で指定されるユーザのレコードを表示します。
.PP
.TP
\fBimport\fP [\fB\-\fP\fIoptions\fP] \fIrepository vendortag releasetag\fP.\|.\|.
.I 以下が必要:
リポジトリ、ソース配布物のディレクトリ。
.br
.I 以下を変更:
リポジトリ。
.br
.` "cvs import"
を使うことで外部の供給元 (例えばソースベンダ) からのソース配布物
全体をあなたのソースリポジトリのディレクトリへ取り込めます。
最初のリポジトリの作成と、外部の供給元からのモジュールへの
大規模な更新の両方にこのコマンドを使うことができます。
.SP
引数 \fIrepository\fP で CVS ルートディレクトリ下のリポジトリ用
ディレクトリ名 (またはディレクトリへのパス) を与えます。
もしディレクトリが存在しないなら、\fBimport\fP が作成します。
.SP
あなたのソースリポジトリで (前回の \fBimport\fP から) 変更された
ソースへの更新に \fBimport\fP を使った場合、開発の 2 本のブランチで
衝突しているファイルについて警告します。
\fBimport\fP が指示するように、
.` "cvs checkout -j"
を使って差分を調整できます。
.SP
デフォルトでは、ある種のファイル名が
.` "cvs import" で無視されます:
.SM CVS
管理、または他の一般的なソース管理システムに関連する名前;
パッチファイル、オブジェクトファイル、アーカイブファイル、
エディタのバックアップファイルのための一般的な名前;
そして雑多なユーティリティの加工品であることを示すその他の名前。
無視されるファイルのリストの最新については、
(このマニュアルページの関連項目の節に記述してあるように)
Cederqvist 著のマニュアルを参照して下さい。
.SP
外部からのソースは第一レベルの
ブランチ、デフォルトでは
.` "1.1.1" に保存されます。
以降の更新は このブランチのリーフになります。
例えば、最初に import したソース集合からのファイルはリビジョン
.` "1.1.1.1" になり、
次の import による更新でファイルはリビジョン
.` "1.1.1.2" になり、以下同様に続きます。
.SP
最低で 3 つの引数が必要です。ソースの集合を識別するために
\fIrepository\fP が必要です。\fIvendortag\fP はブランチ全体を示す
タグになります (例えば
.` "1.1.1" と対応します)。
.` "cvs import" を実行する度にリーフとしてできるファイルを
識別するために少なくとも一つの \fIreleasetag\fP も指定しなければ
なりません。
.SP
.B cvs
の標準のコマンドオプションのうちの 1 つ \fB\-m\fP が利用可能です:
ログメッセージを
\fB\-m\fP で指定しないと、(\fBcommit\fP でのように) メッセージを
入力できるようにエディタが起動されます。
.SP
さらに 3 つの特別なオプションがあります。
.SP
.` "\-d"
を使って、各ファイルの最終更新日時がチェックインの日付と時刻として
使われるよう指示できます。
.SP
.` "\-b \fIbranch\fP"
を使って第一レベルのブランチを
.` "1.1.1" 以外に指定できます。
.SP
.` "\-I \fIname\fP"
を使って \fBimport\fP 中に無視されるべきファイル名を指定できます。
このオプションは繰り返して指定できます。
いかなるファイルも無視されない (デフォルトで無視されるものでも)
ようにするには、
.` "\-I !" と指定します。
.TP
\fBlog\fP [\fB\-l\fP] \fIrlog-options [files\fP\|.\|.\|.]
.I 以下が必要:
リポジトリ、作業ディレクトリ。
.br
.I 以下を変更:
何も変更しません。
.br
.I 同義語:
.B rlog
.br
\fIfiles\fP のログ情報を表示します。
\fBrlog\fP のオプションの中でも有用なものとしては、次のものがあります:
ヘッダ (タグの定義を含むが、ログの大部分は省略される) のみ表示する
\fB\-h\fP ; 特定のリビジョンまたはリビジョンの範囲でログを選択する
\fB\-r\fP; そして特定の日時または時刻の範囲を選択する \fB\-d\fP が
あります。完全な説明は
.BR rlog ( 1 )
を参照して下さい。
このコマンドは
.B \-l
オプションが指定されていなければ、デフォルトで再帰的に働きます。
.TP
\fBrdiff\fP [\fB\-\fP\fIflags\fP] [\fB\-V\fP \fIvn\fP] [\fB\-r\fP \fIt\fP|\fB\-D\fP \fId\fP [\fB\-r\fP \fIt2\fP|\fB\-D\fP \fId2\fP]] \fImodules\|.\|.\|.\fP
.I 以下が必要:
リポジトリ。
.br
.I 以下を変更:
何も変更しません。
.br
.I 同義語:
.B patch
.br
2 つのリリース間の
.BR patch ( 1 )
ファイルを Larry Wall 氏のフォーマットで作成します。それは直接
.B patch
プログラムに入力できるもので、古いリリースを新しいリリースに更新する
ために使えます。
(これは直接リポジトリを参照するため、これに先立って
.BR checkout
する必要のない、数少ない \fBcvs\fP コマンドのうちの 1 つです。)
差分出力は標準出力デバイスに送られます。
(標準の \fB\-r\fP と \fB\-D\fP オプションを
使って) 1 つまたは 2 つのリビジョンまたは日時の任意の組み合わせを指定できます。
もしリビジョンまたは日時が 1 つしか指定されないと、
そのリビジョンまたは日時とその時点での
.SM RCS
ファイルの ``head'' リビジョンの差分がパッチファイルに反映されます。
.SP
もしソフトウェアリリースへの影響が複数ディレクトリにわたるなら、
古いソースにパッチを当てる際、
.B patch
が他のディレクトリに置かれたファイルを見つけられるように、
.B \-p
オプションを
.B patch
コマンドに指定する必要があるかもしれません。
.SP
標準オプションの \fIflags\fP \fB\-f\fP、\fB\-l\fP が
このコマンドで利用可能です。他にもいくつかの
特別なオプションフラグがあります:
.SP
.B \-s
オプションを指定すると、パッチ出力が作られません。
代わりに、2 つのリリース間で変更または追加されたファイルの要約が
標準出力デバイスに送られます。
これは、例えば、2 つの日付またはリビジョンの間で、どのファイルが
変更されたかを調べるのに便利です。
.SP
.B \-t
オプションを指定すると、新しい方から 2 つのリビジョンの差分が
標準出力デバイスに送られます。これはファイルへの最後の変更が
何であったかを知るのに最適です。
.SP
.B \-u
オプションを指定すると、パッチ出力として新しい
``unidiff'' フォーマットを使って文脈差分とします。
.SP
希望するなら、
.B \-c
を使って明示的に
.` "diff \-c"
形式の文脈差分を指定できます (こちらがデフォルトです)。
.TP
\fBrelease\fP [\fB\-dQq\fP] \fImodules\fP\|.\|.\|.
.I 以下が必要:
作業ディレクトリ。
.br
.I 以下を変更:
作業ディレクトリ、ヒストリログ。
.br
このコマンドは
.` "cvs checkout"
の効果を安全にキャンセルすることになっています。
.B cvs
はファイルをロックしないので、厳密にはこのコマンドを使用する必要は
ありません。
単に作業ディレクトリを削除しても構いません。
しかし忘れているかも知れない変更を失う危険があり、そして
.B cvs
ヒストリファイルには捨ててしまったチェックアウトの記録は残りません。
.SP
.` "cvs release"
を使うとこれらの問題を回避できます。
このコマンドは以下の点をチェックします:
コミットされていない変更が存在しないこと、
\fBcvs\fP の作業ディレクトリの直上または内部から実行していること、
ファイルが記録されたリポジトリがモジュールデータベースに
定義されたリポジトリと同じであること、です。
.SP
これらの条件が全て真なら
.` "cvs release"
は その実行記録 (意図的にチェックアウトを削除した証拠) を
.B cvs
のヒストリログに残します。
.SP
\fB\-d\fP フラグを使ってソースの作業用コピーを \fBrelease\fP が
成功したら削除するように指示できます。
.TP
\fBremove\fP [\fB\-lR\fP] [\fIfiles\|.\|.\|.\fP]
.I 以下が必要:
作業ディレクトリ。
.br
.I 以下を変更:
作業ディレクトリ。
.br
.I 同義語:
.BR rm ", " delete
.br
このコマンドを使って、\fIfiles\fP をソースリポジトリから削除する
つもりであることを宣言できます。大部分の
.B cvs
コマンドがそうであるように、
.` "cvs remove"
は作業ディレクトリのファイルに作用し、リポジトリには直接には
作用しません。安全機構として、まず指定するファイルを作業ディレクトリ
から削除することも必要になっています。
.SP
リポジトリに
.BR commit
で変更を反映するまで、ファイルは実際には削除されません。
commit した時点で、ソースリポジトリの対応する
.SM RCS
ファイルが
.` "Attic"
ディレクトリ (これもソースリポジトリの中です) に
.I 移動
されます。
.SP
このコマンドはデフォルトで再帰的になっており、
物理的に削除された全てのファイルが次の
.BR commit
での削除されるようにスケジュールします。
.B \-l
オプションを使うか、または実際に削除したいファイルのみを
指定することで、この再帰を抑制できます。
.TP
\fBrtag\fP [\fB\-f\|alnRQq\fP] [\fB\-b\fP] [\fB\-d\fP] [\fB\-r\fP \fItag\fP | \fB\-D\fP \fIdate\fP] \fIsymbolic_tag\fP \fImodules\|.\|.\|.\fP
.I 以下が必要:
リポジトリ。
.br
.I 以下を変更:
リポジトリ。
.br
.I 同義語:
.B rfreeze
.br
このコマンドを使って、リポジトリ中の特定の、明示的に
指定されたソースバージョンにシンボリックタグを割り当てられます。
.` "cvs rtag"
はリポジトリの内容に直接に作用します (これに先立って
.BR checkout
する必要はありません)。
作業ディレクトリの内容に基づいて
タグを付けるバージョンを選択するには、代わりに
.` "cvs tag"
を使います。
.SP
一般に、タグ (しばしばソフトウェア配布物のシンボリックな
名前でもある) は削除されるべきではありません。
しかし完全に廃れてしまったシンボリックな名前を削除する場合 (例えば、
アルファリリースの場合など) の手段として、
.B \-d
オプションが用意されています。
.SP
.` "cvs rtag"
はすでに存在するタグを移動しません。
しかしながら、\fB\-F\fP オプションが指定されると
.` "cvs rtag"
はそのファイルに既に存在する \fIsymbolic_tag\fP のインスタンスを
新しいリポジトリのバージョンへ移動します。
\fB\-F\fP オプションが無い場合、
.` "cvs rtag"
を使ってすでにそのファイルに存在するタグを付けようとすると、
エラーメッセージが出力されます。
.SP
\fB-b\fP オプションはタグを ``ブランチ'' タグにし、並行の、
独立した開発を可能にします。
これは以前にリリースしたソフトウェア配布物へのパッチを作成するのに
最も有用です。
.SP
標準の \fB\-r\fP と \fB\-D\fP オプションを使って、すでに特定の
タグを含んでいるファイルのみにタグを付けることができます。
この方法はタグの名前を変えるのに使えるでしょう:
古いタグで指定されるファイルにのみタグを付け、
それから古いタグを削除すれば、確実に同じファイルで古いタグを
新しいタグで置き換えることができます。
.SP
.B rtag
はデフォルトで再帰的に実行し、引数で指定した
\fImodules\fP の全てのサブディレクトリにタグをつけます。 この動作を
トップレベルのディレクトリに制限するには標準の \fB\-l\fP オプションを
指定します。 また明示的に再帰を指定するには \fB\-R\fP を指定します。
.SP
モジュールデータベースではタグが指定されたときに必ず実行される
プログラムを指定できます。よくある使い方は、興味を持っている
グループに電子メールを送るというものです。もしそのプログラムを
バイパスしたい場合は、標準の \fB\-n\fP オプションを使います。
.SP
.B \-a
オプションを使うと
.` "Attic"
の中の指定されたタグを含む削除されたファイルを
.B rtag
の対象にできます。
タグはそれらのファイルから削除され、開発の進展につれての
シンボリックタグの再利用に便利になります (そしてファイルは以降の
配布物から削除されます)。
.TP
\fBstatus\fP [\fB\-lRqQ\fP] [\fB\-v\fP] [\fIfiles\fP\|.\|.\|.]
.I 以下が必要:
作業ディレクトリ、リポジトリ。
.br
.I 以下を変更:
何も変更しません。
.br
\fIfiles\fP の現在の状態について、``sticky'' なタグ、
日付、\fB\-k\fP オプションを含む、ソースリポジトリに関する
簡潔なレポートを表示します。(``sticky'' オプションはリセットするまで
.` "cvs update"
がどう働くかを規定します。
.` "cvs update \-A\|.\|.\|." の説明を参照して下さい。)
.SP
このコマンドを用いて、作業用ソースディレクトリでの
.` "cvs update"
による潜在的な影響を予測することもできます。
もし \fIfiles\fP を明示的に指定しないと、\fBcvs\fP が
作業ディレクトリに置いた全てのファイルについてレポートが
表示されます。
この検索の範囲を (そのサブディレクトリではなく) カレントディレクトリ
だけに制限するには、標準の \fB\-l\fP オプションフラグを使います。
\fB\-R\fP オプションによって、明示的に再帰的なステータスレポートを
指定することもできます。
.SP
.B \-v
オプションを指定すると
.SM RCS
ファイルのシンボリックタグも表示されるようになります。
.TP
\fBtag\fP [\fB\-lQqR\fP] [\fB\-F\fP] [\fB\-b\fP] [\fB\-d\fP] [\fB\-r\fP \fItag\fP | \fB\-D\fP \fIdate\fP] [\fB\-f\fP] \fIsymbolic_tag\fP [\fIfiles\fP\|.\|.\|.\|]
.I 以下が必要:
作業ディレクトリ、リポジトリ。
.br
.I 以下を変更:
リポジトリ。
.br
.I 同義語:
.B freeze
.br
このコマンドは、作業ディレクトリに最も近いリポジトリのバージョンに
シンボリックタグをつけるために使います。\fBrtag\fP を
使ったときのように、タグはリポジトリに直接つけられます。
.SP
\fBcvs tag\fP がリポジトリを直接操作するという事実に関し、
潜在的に驚いてしまうことがあります。
それは、チェックインバージョンに対してタグ付けするということであり、
これは作業ディレクトリにおいてローカルに修正したファイルとは
違ってもかまわないということです。
誤ってこのようなことをしたくない場合、
\fB-c\fP オプションを \fBcvs tag\fP へ指定してください。
ローカルに修正されたファイルがある場合、ファイルにタグ付けする前に、
CVS はエラーで中断します。
.SP
タグの使い方の一つは、プロジェクトのソフトウェア凍結日が
やってきたときに開発中のソースの ``snapshot'' を記録するというものです。
凍結した日の後でバグが修正されたら、それらの変更されたリリースの
一部となるソースのみに再度タグをつける必要があります。
.SP
シンボリックタグはどのファイルのどのリビジョンがソフトウェア配布物を
作成する際に使われたかを恒久的に記録する意味があります。
.BR checkout ,
.B export
および
.B update
コマンドは、タグをつけたリリースと全く同じものを、リリースのタグが
つけられて以降にファイルが変更、追加、削除されたかどうかを気にする
ことなく、将来のいつでも取り出すことを可能にします。
.SP
標準の \fB\-r\fP と \fB\-D\fP オプションを使って、すでに特定の
タグを含んでいるファイルのみにタグを付けることができます。
この方法はタグの名前を変えるのに使えます。
すなわち、
古いタグで指定されるファイルにのみタグを付け、
それから古いタグを削除すれば、確実に同じファイルで古いタグを
新しいタグで置き換えることができます。
.SP
\fB\-r\fP または \fB\-D\fP フラグに加えて \fB\-f\fP フラグを
指定すると、コマンドラインで指定したファイルで古いタグを
持っていないか指定された日時に存在しなかったものにもタグを
付けます。
.SP
デフォルト (\fB\-r\fP または \fB\-D\fP フラグが無い場合) では、
バージョンは明示的に指定されるのではなく、暗黙のうちに作業ファイルの
ヒストリの \fBcvs\fP レコードから取られます。
.SP
.` "cvs tag \-d \fIsymbolic_tag\fP\|.\|.\|."
とすると、指定したシンボリックタグが追加されるのではなく
.I 削除
されます。\fI警告\fP: タグを削除する前にその根拠をしっかり確認して下さい。
これは効率的に一部の履歴情報を捨てますが、後になってその情報が重要だったと
判明するかも知れないからです。
.SP
.` "cvs tag"
はすでに存在するタグを移動しません。
しかしながら、\fB\-F\fP オプションが指定されると
.` "cvs tag"
はそのファイルに既に存在する \fIsymbolic_tag\fP のインスタンスを
新しいリポジトリのバージョンへ移動します。
\fB\-F\fP オプションが無い場合、
.` "cvs tag"
を使って すでにそのファイルに存在するタグを付けようとすると
エラーメッセージが出力されます。
.SP
\fB-b\fP オプションはタグを ``ブランチ'' タグにし、並行して、
独立した開発を可能にします。
これは以前にリリースしたソフトウェア配布物へのパッチを作成するために
最も有効です。
.SP
通常、
.B tag
はサブディレクトリに渡って再帰的に実行します。これは
標準の \fB\-l\fP オプションを使って抑制できます。
明示的に再帰を指定するには \fB\-R\fP を使います。
.TP
\fBupdate\fP [\fB\-ACdf\|lPpQqR\fP] [\fB\-d\fP] [\fB\-r\fP \fItag\fP|\fB\-D\fP \fIdate\fP] \fIfiles\|.\|.\|.\fP
.I 以下が必要:
リポジトリ、作業ディレクトリ。
.br
.I 以下を変更:
作業ディレクトリ。
.br
あなたが共有のリポジトリから私的なソースのコピーを作成するために
.B checkout
を実行した後も、別の開発者は共有のソースへの変更を続けるでしょう。
時々、開発過程で都合のいいときに、作業ディレクトリ内から
.B update
コマンドを使うことで、
最後に
.B checkout
または
.BR update
してからソースリポジトリに登録された変更を、あなたの変更と
融合させることができます。
.SP
.B update
は進行状況をファイルごとに 1 行表示することで知らせ続けます。
各行の先頭には以下の
.` "U P A R M C ?"
のいずれか 1 文字があり、ファイルの状態を示しています:
.TP 1i
\fBU\fP \fIfile\fP
file はリポジトリに関して \fI最新に\fP なりました。
これはリポジトリには存在するがあなたのソースには無いもの、
およびあなたは変更していないけれどもリポジトリの
最新リビジョンでは無いものに関して行われます。
.TP 1i
\fBP\fP \fIfile\fP
\fBU\fP と似ていますが、CVS サーバは全ファイルの代りにパッチを送りました。
\fBU\fP と同じことを、低バンド幅で実行しました。
.TP 1i
\fBA\fP \fIfile\fP
file はソースのあなたの私的なコピーに \fI追加\fP されたもので、
file に対して
.` "cvs commit"
を実行したときに
ソースリポジトリに追加されます。
これは当該ファイルを commit する必要があるという助言です。
.TP 1i
\fBR\fP \fIfile\fP
これはソースのあなたの私的なコピーから file が \fI削除\fP されており、
file に対して
.` "cvs commit"
を実行すると
ソースリポジトリから削除されることを示します。
これは当該ファイルを commit する必要があるという助言です。
.TP 1i
\fBM\fP \fIfile\fP
あなたの作業ディレクトリの file は \fI変更\fP されています。
.` "M"
は作業中のファイルについて 2 つの状態のうちの 1 つを示します:
リポジトリ中の対応するファイルは変更されておらず、あなたのファイルは
最後に見たときのままになっている。 または、あなたのコピー同様
リポジトリのものも変更されているが、それらの変更は
衝突することなく無事にあなたの作業ディレクトリに
\fI融合 (merge)\fP されました。
.TP 1i
\fBC\fP \fIfile\fP
\fIfile\fP へのあなたの変更とソースリポジトリからの変更との
融合を試みる間に \fI衝突 (conflict)\fP が検出されました。
現在 \fIfile\fP (あなたの作業ディレクトリのコピー) は
2 つのバージョンをマージした結果になっています。
変更されていない あなたのファイルのコピーも作業ディレクトリに、
`\fB.#\fP\fIfile\fP\fB.\fP\fIversion\fP' という名前で置かれます。
ここで
.I version
は あなたの変更したファイルの出発点となった
リビジョンです。
(ある種のシステムでは、
\&
.` ".#"
で始まるファイルは何日かアクセスされないと自動的に削除されるので
注意して下さい。もし元のファイルのコピーを取っておくつもりなら、
名前を変えておくのが良いでしょう。)
.TP 1i
\fB?\fP \fIfile\fP
\fIfile\fP が あなたの作業ディレクトリにありますが、
ソースリポジトリのどれとも対応しておらず、
\fBcvs\fP が無視するファイルのリストにもありません
(\fB\-I\fP オプションの説明を参照して下さい)。
.PP
.RS .5i
.SP
.B \-A
オプションを用いて sticky なタグ、日付、
.B \-k
オプションをリセットできます。(\fB\-r\fP, \fB\-D\fP, \fB\-k\fP オプションの
いずれかを使って作業ファイルのコピーを得ると、
\fBcvs\fP は対応するタグ、日付、\fIkflag\fP を記憶し、
以降の update で それを使い続けます。\fB\-A\fP オプションを使って
\fBcvs\fP にそれらの指定を忘れさせることで、ファイルの
``head'' バージョンを取り出します)。
.SP
\fB\-j\fP\fIbranch\fP オプションは、変更結果のリビジョンと
ベースにしたリビジョンの間での変更をマージします
(例えば、もしタグがブランチを指しているなら、
.B cvs
は、そのブランチで行われた全ての変更をあなたの作業ファイルにマージします)。
.SP
2 つの \fB-j\fP オプションを指定すると、
.B cvs
は 2 つの それぞれのリビジョン間での変更をマージします。
これは特定の変更を作業ファイルから ``削除'' するのに使えます。
例えば、ファイル foo.c がリビジョン 1.6 をベースにしていて、
1.3 と 1.5 の間で行われた変更を削除したいなら、次のようにします:
.SP
.in +1i
.ft B
.nf
example% cvs update -j1.5 -j1.3 foo.c	# 順番に注意...
.fi
.ft P
.in -1i
.SP
加えて、各 \fB-j\fP オプションにはオプションで、ブランチと使う場合に、
日付指定を含めることが可能で、選択するリビジョンを指定した
日付の範囲内に制限できます。
オプションの日付はコロン (:) をタグに付けることで指定します。
.SP
.in +1i
.ft B
.nf
-jSymbolic_Tag:Date_Specifier
.fi
.ft P
.in -1i
.SP
.B \-d
オプションを使うと、もし作業ディレクトリに無いディレクトリが
リポジトリにあれば作成します。(通常、update は作業ディレクトリに
すでに登録されているディレクトリとファイルのみに働きます。)
これは最初の \fBcheckout\fP 以降に作成されたディレクトリを
更新するのに有用です。しかし不幸にも副作用があります。
もし作業ディレクトリを作る際に慎重にリポジトリ中の特定の
ディレクトリを除いた (モジュール名を使ったか明示的に必要な
ファイルとディレクトリをコマンドラインで指定したかのいずれかで)
とすると、
.B \-d
で更新するとそれらの不要かも知れないディレクトリができてしまいます。
.SP
\fB\-I\fP \fIname\fP を使うと、update の際、名前が \fIname\fP に符合する
(作業ディレクトリの) ファイルを無視します。
コマンドラインで \fB\-I\fP を 2 回以上指定することで、
複数の無視するファイルを指定できます。
デフォルトで、\fBupdate\fP はあるパターンに名前がマッチするファイルを
無視します;
無視されるファイル名の最新リストについては、
(このマニュアルページの関連項目の節に記述してあるように)
Cederqvist 著のマニュアルを参照して下さい。
.SP
いずれのファイルも無視しないようにするには
.` "\-I !"
を使います。
.SP
ローカルで修正したファイルを、
リポジトリ上のクリーンなファイルで上書きするには、
.` "\-C"
を使います (修正されたファイルは
`\fB.#\fP\fIfile\fP\fB.\fP\fIrevision\fP' に保存されます)。
.SP
標準の \fBcvs\fP コマンドオプション \fB\-f\fP, \fB\-k\fP,
\fB\-l\fP, \fB\-P\fP, \fB\-p\fP, \fB\-r\fP
も \fBupdate\fP で使用可能です。
.RE
.SH "関連ファイル"
より詳細な
.B cvs
サポートファイルの情報については
.BR cvs ( 5 )
を参照して下さい。
.LP
.I
ホームディレクトリのファイル:
.TP
\&.cvsrc
.B cvs
の初期化ファイル。このファイルの行は各
.B cvs
コマンドのデフォルトのオプションの指定に使えます。例えば
.` "diff \-c"
と言う行は
.` "cvs diff"
に対して、コマンドラインで渡されたオプションに、常に
.B \-c
オプションが加えられて渡されることを指定します。
.TP
\&.cvswrappers
リポジトリのファイル CVSROOT/cvswrappers で指定されている
ものに加えて使用されるラッパを指定します。
.LP
.I
作業ディレクトリのファイル:
.TP
CVS
\fBcvs\fP 管理ファイルのディレクトリ。
.I
削除してはいけません。
.TP
CVS/Entries
作業ディレクトリのファイルのリストと状態。
.TP
CVS/Entries.Backup
.` "CVS/Entries" のバックアップ。
.TP
CVS/Entries.Static
フラグ:
.` "cvs update"
でそれ以上エントリを追加しません。
.TP
CVS/Root
チェックアウトしたときのリポジトリ (
.SM CVSROOT
) 位置へのパス名。
.SM CVSROOT
環境変数が設定されていない場合、このファイルが代わりに使用されます。
このファイルの内容と
.SM CVSROOT
環境変数が異なっていると警告メッセージが出されます。
.SM CVS_IGNORE_REMOTE_ROOT
環境変数が設定されていると、このファイルは上書きされることがあります。
.TP
CVS/Repository
ソースリポジトリ中の対応するディレクトリへのパス名。
.TP
CVS/Tag
ディレクトリ毎の ``sticky'' なタグまたは日付情報を保持しています。
このファイルは
.B \-r
か
.B \-D
を
.B checkout
または
.B update
コマンドに指定して、ファイルが指定されなかったときに作成/更新されます。
.TP
CVS/Checkin.prog
.` "cvs commit" 時に実行するプログラム名。
.TP
CVS/Update.prog
.` "cvs update" 時に実行するプログラム名。
.LP
.I
ソースリポジトリ中のファイル:
.TP
$CVSROOT/CVSROOT
リポジトリ全体の管理ファイルのディレクトリ。
.TP
CVSROOT/commitinfo,v
.` "cvs commit"
のリクエストを選別するプログラムを登録します。
.TP
CVSROOT/cvswrappers,v
ファイルをリポジトリにチェックインそしてリポジトリから
チェックアウトするときに使用される
.B cvs
ラッパコマンドを登録します。
ラッパはファイルまたはディレクトリが CVS で入出力される際に
処理を行うことを可能にします。使い道はいろいろありますが、
その一つとして、C のファイルをチェックインする前に再フォーマットして、
リポジトリ中のコードの見た目を揃えるというものがあります。
.TP
CVSROOT/editinfo,v
.` "cvs commit"
のログエントリの編集/確認用プログラムを登録します。
.TP
CVSROOT/history
\fBcvs\fP 処理のログファイル。
.TP
CVSROOT/loginfo,v
.` "cvs commit"
のログエントリをパイプで渡すプログラムを登録します。
.TP
CVSROOT/modules,v
このリポジトリ中のモジュールを定義します。
.TP
CVSROOT/rcsinfo,v
.` "cvs commit"
操作中に使用するテンプレートへのパス名を登録します。
.TP
CVSROOT/taginfo,v
.` "cvs tag"
と
.` "cvs rtag"
での確認/ログ採集のためのプログラムを登録します。
.TP
MODULE/Attic
削除されたソースファイルのためのディレクトリ。
.TP
#cvs.lock
ソースリポジトリに微妙な変更を行っているときに
.B cvs
が作成するロックディレクトリ。
.TP
#cvs.tfl.\fIpid\fP
リポジトリの一時的なロックファイル。
.TP
#cvs.rfl.\fIpid\fP
読み出しロック。
.TP
#cvs.wfl.\fIpid\fP
書き込みロック。
.SH "環境変数"
.TP
.SM CVSROOT
.B cvs
ソースリポジトリのルートへのフルパス名 (
.SM RCS
ファイルが保存されている場所) を指定します。
この情報は大部分のコマンドの実行で
\fBcvs\fP から参照できなければなりません。 もし
.SM CVSROOT
が設定されていないか、それを上書き指定したい場合は、
コマンドライン上で与えることができます:
.` "cvs \-d \fIcvsroot cvs_command\fP\|.\|.\|."
もし \fBcvs\fP バイナリのコンパイル時に正しいパスが指定されているなら
.SM CVSROOT
を設定しなくて構いません。
.TP
.SM CVSREAD
これがセットされていると、
.B checkout
と
.B update
は作業ディレクトリのファイルを読み出し専用にするべく努力します。
これがセットされていないときは、デフォルトでは作業ファイルの
変更が許可されます。
.TP
.SM CVSREADONLYFS
これがセットされていると、
.B \-R
オプションが仮定され、
.B cvs
の動作が読み出し専用リポジトリモードになります。
.TP
.SM RCSBIN
.BR co ( 1 )
や
.BR ci ( 1 )
といった
.SM RCS
のプログラムが置かれている場所へのフルパス名を指定します
(CVS 1.9 またはそれ以前)。
.TP
.SM CVSEDITOR
.BR commit
中にログメッセージの記録に使われるプログラムを指定します。
設定されていないと、
.SM VISUAL
と
.SM EDITOR
の環境変数が (この順序で) 試されます。
どちら
も設定されていないなら、システム依存のデフォルトエディタ (例えば
.BR vi )
が使用されます。
.TP
.SM CVS_CLIENT_PORT
この変数がセットされていると
.B cvs
はデフォルトポート (cvspserver 2401) の代りにこのポートを
\fIpserver モード\fP
で使用します。
.TP
.SM CVS_IGNORE_REMOTE_ROOT
この変数がセットされていると
.B cvs
は CVS/Root ファイル中のリモートのリポジトリへの参照を全て
無視します。
.TP
.SM CVS_OPTIONS
.B cvs
のデフォルトオプションを指定します。
これらのオプションは、
スタートアップファイル (\fI~/.cvsrc\fP) の読み込み前に解釈されます。
また、コマンドラインパラメータにより明示的に上書き可能です。
.TP
.SM CVS_RSH
.B cvs
サーバを開始するときに使用するリモートシェルコマンドの
名前を決定します。
この変数が設定されていない場合は
.` "ssh"
が使用されます。
.TP
.SM CVS_SERVER
.B cvs
サーバコマンドの名前を指定します。
この変数が設定されていない場合は
.` "cvs"
が使用されます。
.TP
.SM CVSWRAPPERS
.` "cvswrappers"
スクリプトは、
リポジトリの
.SM CVSROOT/cvswrappers
とユーザのホームディレクトリの ~/.cvswrappers に
含まれるデフォルトのラッパに加え、
変数
.SM CVSWRAPPERS
を参照して、ラッパファイルの名前を決定します。
.SH "作者"
.TP
Dick Grune
.B comp.sources.unix
にポストされ、1986 年 12 月のリリース volume6 に収められたオリジナルの
.B cvs
シェルスクリプト版の作者。
.B cvs
の衝突を解決するアルゴリズムの大部分を作成しました。
.TP
Brian Berliner
.B cvs
プログラム自身のコーディングとデザインを
1989 年 4 月に、Dick によるオリジナルをベースにして行いました。
.TP
Jeff Polk
Brian を助けて
.B cvs
のモジュールとベンダブランチのサポートをデザインしました。
そして
.BR checkin ( 1 )
シェルスクリプト (
.` "cvs import" の祖先)
の作者でもあります。
.TP
ここに書くには多くの人が他にもいます。
.SH "関連項目"
CVS の最も包括的なマニュアルは
Per Cederqvist らによる Version Management with CVS です。
システムによっては、
.B info cvs
コマンドで閲覧できたり、
cvs.ps (postscript), cvs.texinfo (texinfo のソース), cvs.html が
利用可能かもしれません。
.SP
CVS の更新、ドキュメントに関するさらなる情報、
CVS 関連のソフトウェア、CVS の開発等については、下記をご覧ください:
.in +1i
.B http://cvshome.org
.B http://www.loria.fr/~molli/cvs-index.html
.in -1i
.SP
.BR ci ( 1 ),
.BR co ( 1 ),
.BR cvs ( 5 ),
.BR cvsbug ( 8 ),
.BR diff ( 1 ),
.BR grep ( 1 ),
.BR patch ( 1 ),
.BR rcs ( 1 ),
.BR rcsdiff ( 1 ),
.BR rcsmerge ( 1 ),
.BR rlog ( 1 ).
.SH 日本語訳
野首 寛高(h-nokubi@nmit.mt.nec.co.jp): FreeBSD 用に翻訳
.br
酒井 淳嗣(sakai@jp.freebsd.org): FreeBSD 版の校正
