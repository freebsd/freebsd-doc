.\" %FreeBSD: src/bin/ed/ed.1,v 1.34 2004/07/03 02:03:43 tjr Exp %
.\"
.\" $FreeBSD$
.Dd July 3, 2004
.Dt ED 1
.Os
.Sh 名称
.Nm ed ,
.Nm red
.Nd 行指向のテキストエディタ
.Sh 書式
.Nm ed
.Op Fl
.Op Fl sx
.Op Fl p Ar string
.Op Ar file
.Nm red
.Op Fl
.Op Fl sx
.Op Fl p Ar string
.Op Ar file
.Sh 解説
.Nm
ユーティリティは、行指向のテキストエディタです。
本コマンドを用いることで、テキストファイルの生成、表示、変更その他の操作を
行なうことができます。
.Nm red
として起動された場合、エディタは
.Qq 制限
モードで動作します。
唯一の違いは、
.Ql \&!
.Nm ( ed
がシェルコマンドと解釈) で開始または
.Ql \&/
を含むファイル名の使用を制限することです。
カレントディレクトリ外の編集を妨げるのは、
ユーザがカレントディレクトリに対して書き込み権限が無い場合だけです。
ユーザがカレントディレクトリに対して書き込み権限がある場合、
カレントディレクトリにシンボリックリンクを作成可能であり、
シンボリックリンクが指すファイルをユーザが編集することを
.Nm red
は妨げません。
.Pp
.Ar file
引数を指定して本コマンドを起動すると、ファイル
.Ar file
のコピーをエディタのバッファに読み込みます。
以後の変更はそのコピーに対して行なわれ、
.Ar file
で指定したファイル自身が直接変更されることはありません。
.Nm
コマンドを終了する際、
.Em w
コマンドで明示的にセーブしなかった変更点はすべて失われます。
.Pp
編集は、
.Em コマンド
モードと
.Em 入力
モードの 2 つの異なるモードを使い分けて行ないます。
.Nm
を起動したら、まずコマンドモードに入ります。
本モードでは、標準入力からコマンドを読み込み、それを実行することで
エディタバッファの内容操作を行ないます。
典型的なコマンドは、以下のようなものです。
.Pp
.Sm off
.Cm ,s No / Em old Xo
.No / Em new
.No / Cm g
.Xc
.Sm on
.Pp
これは、編集しているテキストファイル中に
.Em old
という文字列があったら、これらをすべて文字列
.Em new
に置き換えるコマンドです。
.Pp
.Em a
(append)、
.Em i
(insert)、あるいは
.Em c
(change) といった入力コマンドが入力された場合、
.Nm
は入力モードに移行します。
これが、ファイルにテキストを追加する主たる方法です。
このモードでは、コマンドを実行することはできません。
そのかわり、標準入力から入力されたデータは、
直接エディタバッファへと書き込まれます。
行は、改行キャラクタまでのテキストデータおよび、最後の
.Em 改行
キャラクタを含むデータから構成されます。
ピリオド 1 つだけ
.Pq Em .\&
の行を入力すると、入力モードを終了します。
.Pp
すべての
.Nm
コマンドは、全ての行もしくは指定した範囲の行の操作が可能です。
例えば、
.Em d
コマンドは指定した行を削除し、
.Em m
コマンドは指定した行を移動します。
上に示した例のように、置換によってある行の一部分のみを変更することは
可能ですが、
.Em s
コマンドは、一度に全部の行にわたって変更を行なうことも可能です。
.Pp
一般的には、
.Nm
コマンドは、0 個以上の行番号および、それに連なる 1 文字コマンドから
成り立ちます。
場合によっては追加のパラメータをもつこともあります。
いうなれば、コマンドは以下の構造を持ちます。
.Pp
.Sm off
.Xo
.Op Ar address Op , Ar address
.Ar command Op Ar parameters
.Xc
.Sm on
.Pp
行番号はコマンドの操作対象行あるいは対象行範囲を示します。
行番号の指定個数が、コマンドが受け付け可能な個数よりも少ない場合には、
デフォルトの行番号が採用されます。
.Sh オプション
以下のオプションが使用できます。
.Bl -tag -width indent
.It Fl s
診断メッセージを抑制します。
本オプションは、
.Nm
の入力がスクリプトによって行なわれる場合に有効です。
.It Fl x
続く読み書きの際に行なわれる暗号化に用いる鍵の入力を促します
.Em ( x
コマンドを参照して下さい)。
.It Fl p Ar string
コマンドプロンプトとして表示する文字列を指定します。
コマンドプロンプトは、コマンドモードで
.Em p
コマンドを実行することで、表示する/しないを切り替えることが可能です。
.It Ar file
編集対象のファイルを指定します。
.Ar file
名の先頭に感嘆符 (!) が付加されていた場合、そのファイル名はシェルコマンドと
して解釈されます。
この場合、編集対象として読み込まれるテキストは、
.Xr sh 1
が
.Ar file
で指定したコマンドを実行した結果、標準出力に出力されるデータです。
先頭が感嘆符で始まるファイルを編集する場合には、ファイル名の先頭に
バックスラッシュ (\\) を付加して下さい。
感嘆符以外の文字で始まるファイル名については、編集対象のファイル名は
.Ar file
となります。
.El
.Sh 行指定
行は、バッファ内の行番号で表現されます。
.Nm
ユーティリティは
.Em 現在行
を管理しており、
コマンドに行番号が指定されない場合は、
現在行がデフォルト行として用いられます。
ファイルが最初に読み出された直後は、現在行はファイルの最後の行となります。
一般的に、現在行はコマンドが操作した最後の行となります。
.Pp
行番号は、以下の一覧のうち 1 つおよび、補助的に付加される
相対行番号 (オフセット) から構成されます。
相対行番号は、任意の数字の組み合わせと演算子、そして空白文字を含みます
(例えば
.Em + ,
.Em -
や
.Em ^
が演算子に含まれます)。
行番号は、左から右に解釈され、それらの演算子を含む値は、現在行からの相対行番
号と解釈されます。
.Pp
行番号の表現に関して上記の規則が適用される中で、行番号
.Em 0
(ゼロ) に関しては、例外的な扱いがされます。
これは「最初の行より前」を意味し、
それが正しい意味を持つ場合は常に利用可能です。
.Pp
行範囲は、コンマもしくはセミコロンで区切られた 2 つのアドレスで示されます。
最初に指定される行番号は、2 番目に指定される行番号を超える値を指定して
はいけません。
行範囲指定で行番号が 1 つしか指定されなかった場合には、2 番目に
指定されるアドレスとして最初に指定されたアドレスが設定されます。
ここで 3 個以上の行番号が指定されると、最後の 2 つの行番号で
決定される範囲がコマンド実行対象になります。
行番号の指定を 1 つだけしか
想定していないコマンドの場合、最後の 1 つの行番号の行がコマンド実行対象
となります。
.Pp
コンマで区切られた各行番号は、現在行からの相対行を指し示します。
セミコロンで区切られている場合は、範囲の始めの行は現在行が設定され、
範囲の終りは始めの行からの相対行で表わされます。
.Pp
行番号の指定には、以下のシンボルが使用可能です。
.Bl -tag -width indent
.It .
バッファ中の現在行を表します。
.It $
バッファ中の最終行を表します。
.It n
バッファ内の
.Em n
番目の行を表します。
.Em n
は、
.Em [0,$]
の間です。
.It - or ^
1 行前の行です。
相対行指定
.Em -1
と同等であり、複数指定することで効果を累積することが可能です。
.\" --- という指定をすることで、2 行前を示すことができます。
.\" ↑原文中に無いのでコメントアウト  sakai@jp.freebsd.org (Jun 9,1997)
.It -n or ^n
.Em n
行前の行を表します。
.Em n
は、負でない整数です。
.It +
次の行を表します。
これは、
.Em +1
と同様であり、
.Em -
と同様の累積的指定が可能です。
.It +n
.Em n
行後ろの行を表します。
.Em n
は、負でない整数です。
.It , or %
バッファの最初から最後までを表します。
これは、
.Em 1,$
と指定した場合と同等です。
.It ;
バッファ中の現在行から最後の行までを表します。
これは、
.Em .,$
と指定した場合と同等です。
.It /re/
指定された正規表現
.Em re
を含む、(現在行よりも後ろの) 次の行を表します。
必要であれば、文字列検索はテキスト先頭に折り返し、
現在行に達するまで検索を行ないます。
// は、最後に行なった検索を繰り返します。
.It ?re?
指定した正規表現
.Em re
を含む、現在行より前の行を表します。
必要であれば、文字列検索はテキストの最後に折り返し、
現在行に達するまで検索を行ないます。
?? は、最後に行なった検索を繰り返します。
.It 'lc
.Em k
(mark)  コマンドでマークをつけた行を表します。
ここで
.Em lc
は、英小文字1文字です。
.El
.Sh 正規表現
正規表現はテキストを選択する際に用いるパターンです。
例えば次の
.Em ed
コマンド
.Pp
.Sm off
.Cm g No / Em string Xo
.No /
.Xc
.Sm on
.Pp
は
.Em string
を含む全ての行を表示します。
正規表現は
.Em s
コマンドで古いテキストを新しいテキストで置き換える際にも用いられます。
.Pp
文字リテラルを指定するのに加え、
正規表現は文字列のクラスを表現することができます。
このようにして表現された文字列は、それに対応する正規表現に「マッチする」と
言います。
ある正規表現が一つの行の中の複数の文字列にマッチする場合、
マッチする部分のうち最も左にあって最も長いものが選択されます。
.Pp
正規表現を組み立てる際には以下のシンボルが用いられます:
.Bl -tag -width indent
.It c
以下に挙げるものを除く任意の文字
.Em c
は、その文字自身にマッチします。
このような文字には
.Ql \&{ ,
.Ql \&} ,
.Ql \&( ,
.Ql \&) ,
.Ql < ,
.Ql >
が含まれます。
.It Pf \e c
バックスラッシュでエスケープした文字
.Em c
は、その文字自身にマッチします。
ただし
.Ql \&{ ,
.Ql \&} ,
.Ql \&( ,
.Ql \&) ,
.Ql < ,
.Ql >
を除きます。
.It .
任意の一文字にマッチします。
.It Op char-class
文字クラス
.Em char-class
に含まれる任意の一文字にマッチします。
文字クラス
.Em char-class
に
.Ql \&]
を含めるには、文字
.Ql \&]
を最初の文字に指定します。
文字の範囲を指定するには、範囲の両端の文字の間を
.Ql -
でつなぎます。
例えば
.Ql a-z
は小文字全体を表します。
以下のようなリテラル表記も、文字集合を指定するために文字クラス
.Em char-class
で使用することができます:
.Pp
.Bl -column "[:alnum:]" "[:cntrl:]" "[:lower:]" "[:xdigit:]" -compact
.It [:alnum:] Ta [:cntrl:] Ta [:lower:] Ta [:space:]
.It [:alpha:] Ta [:digit:] Ta [:print:] Ta [:upper:]
.It [:blank:] Ta [:graph:] Ta [:punct:] Ta [:xdigit:]
.El
.Pp
文字クラス
.Em char-class
の最初あるいは最後の文字として
.Ql -
が用いられると、
それはその文字自身にマッチします。
文字クラス
.Em char-class
中のこれ以外の文字は全て、それら自身にマッチします。
.Pp
以下の形式の文字クラス中のパターン:
.Pp
.Bl -item -compact -offset 2n
.It
.Op \&. Ns Ar col-elm Ns .\&
or,
.It
.Op = Ns Ar col-elm Ns =
.El
.Pp
は
現在のロケール
に沿って解釈されます (現在のところサポートされません)。
ここで
.Ar col-elm
は
.Em collating element
です。
詳しい説明は
.Xr regex 3
と
.Xr re_format 7
を参照して下さい。
.It Op ^char-class
文字クラス
.Em char-class
に含まれない、改行以外の任意の一文字にマッチします。
文字クラス
.Em char-class
は上で定義しています。
.It ^
.Em ^
が正規表現の最初の文字である場合、
その正規表現は行頭でのみマッチします。
それ以外の場合、
.Em ^
はそれ自身にマッチします。
.It $
.Em $
が正規表現の最後の文字である場合、
その正規表現は行末でのみマッチします。
それ以外の場合、
.Em $
はそれ自身にマッチします。
.It Pf \e <
これに続く単一文字の正規表現あるいはその部分式が、
単語の先頭でのみマッチするようにします (この機能は利用できない
場合があります)。
.It Pf \e >
これに続く単一文字の正規表現あるいはその部分式が、
単語の末尾でのみマッチするようにします (この機能は利用できない
場合があります)。
.It Pf \e (re\e)
部分式 (subexpression)
.Em re
を定義します。
部分式はネストできます。
これ以降、
.Pf \e Em n
(
.Em n
は [1,9] の範囲の数)
の形式の後方参照は、
.Em n
番目の部分式にマッチしたテキストに展開されます。
例えば、正規表現
.Ql \e(.*\e)\e1
は、
同じ文字列が隣接しているような任意の文字列にマッチします。
部分式は左側のデリミタから順に番号が振られます。
.It *
直前にある単一文字の正規表現あるいはその部分式の 0 回以上の繰り返しに
マッチします。
.Em *
が正規表現あるいはその部分式の最初の文字として用いられた場合、
.Em *
はその文字自身にマッチします。
.Em *
演算子は時に予期しない結果をもたらすことがあります。
例えば、正規表現
.Ql b*
は文字列
.Ql abbb
の先頭にマッチします (部分文字列
.Ql bbb
ではありません)。
これはヌルへのマッチが最も左にあるマッチだからです。
.It \e{n,m\e} or \e{n,\e} or \e{n\e}
直前にある単一文字の正規表現あるいはその部分式の、
.Em n
回以上
.Em m
回以下の繰り返しにマッチします。
.Em m
が省略された場合、
.Em n
回以上の繰り返しにマッチします。
更にコンマも省略された場合、ちょうど
.Em n
回の繰り返しにのみマッチします。
.El
.Pp
各
.Xr regex 3
の実装によっては、
更に正規表現演算子がいくつか定義されていることがあります。
.Sh コマンド
全ての
.Nm
コマンドは、1 文字からなりますが、追加パラメータが必要なコマンドもあります。
コマンドのパラメータが複数の行にわたる場合には、そのパラメータを含めたコマンド
の終りを含む行を除き、行末にバックスラッシュ (\\) を付加して下さい。
.Pp
一般的には、1 行ごとに 1 コマンドを入れることが許されています。
しかしながら、ほとんどのコマンドは、コマンド実行を行なった後のデータ更新
その他を確認するために、
.Em p
(print)、
や
.Em l
(list)、
.Em n
(enumerate),
のような表示系のコマンドを同時に指定できます。
.Pp
インタラプト (一般的には ^C) を入力することで、現在実行しているコマンドを
強制終了し、コマンドモードに戻すことができます。
.Pp
.Nm
ユーティリティは、以下のコマンドを使用できます。
コマンド実行時に何の指定もない場合の
デフォルトの行番号もしくは行範囲が括弧内に示されています。
.Bl -tag -width indent
.It (.)a
指定した行の後にテキストを追加します。
テキストは入力モードで入力されていきます。
現在行番号は、入力された最後の行に設定されます。
.It (.,.)c
バッファ内の指定した行を変更します。
指定した行のデータは、バッファから消去
され、そこに対してテキストデータを入力するようになります。
テキストは入力モードで入力されていきます。
現在行番号は、入力した最後の行に設定されます。
.It (.,.)d
指定した範囲をバッファから削除します。
削除した範囲の後に行が続いている場合、現在行番号は、その行に設定されます。
そうでない場合には、現在行番号は、削除された範囲の前の行に設定されます。
.It e Ar file
.Ar file
を編集し、デフォルトのファイル名を設定します。
もし
.Ar file
が指定されなかった場合には、デフォルトのファイル名が使用されます。
本コマンド実行時に、それまで別のファイルを編集していた場合には、
その内容はすべて消去され、新しいファイルが読み込まれます。
現在行番号は、入力された最後の行に設定されます。
.It e Ar !command
.Ar !command
で指定されたコマンドを実行し、その結果として標準出力へ
出力されたデータを編集します (後述する
.Ar ! command
を参照して下さい)。
デフォルトのファイル名は変更されません。
.Ar command
の出力が読み込まれる前に、バッファ内に存在した行はすべて消去されます。
現在行番号は、入力された最後の行に設定されます。
.It E Ar file
無条件で
.Ar file
で指定したファイルを読み込み、編集します。
.Em e
コマンドと動作は似ていますが、すでにバッファ上のデータに変更が加えられ
ている場合でも、未書き込みの変更を警告を出さずに捨ててしまう点が異なります。
現在行番号は、入力された最後の行に設定されます。
.It f Ar file
デフォルトファイル名を
.Ar file
に設定します。
.Ar file
名が指定されない場合には、デフォルトファイル名が表示されます。
.It (1,$)g/re/command-list
.Ar command-list
で指定されたコマンドを、指定した正規表現
.Ar re
に一致する各行に対して実行します。
現在行番号は、
.Ar command-list
で指定されたコマンドが実行される前に、指定した正規表現に一致した行
に設定されます。
.Em g
コマンドが終了した場合、現在行番号は最後に
.Ar command-list
実行の影響を受けた行に設定されます。
.Pp
.Ar command-list
で指定されるコマンドは、1 行ごとに 1 つずつ書かれる必要があります。
各コマンド
行の終りには、一番最後のコマンド行を除いてはバックスラッシュ (\\) を記述する
必要があります。
コマンド
.Em g ,
.Em G ,
.Em v ,
.Em V
を除くすべてのコマンドを指定可能です。
.Ar command-list
中の空行は、
.Em p
コマンドと同等に扱われます。
.It (1,$)G/re/
指定した正規表現
.Ar re
に一致した行に対して、対話編集を行ないます。
指定した正規表現に一致する文字列を含む行があると、その行を表示し、現在行番号を
設定します。
そして、ユーザに
.Ar command-list
の入力を促します。
.Em G
コマンドが終了した場合、現在行番号は、
.Ar command-list
実行の影響を受けた最後の行に設定されます。
.Pp
.Ar command-list
の記述形式は、
.Em g
コマンドで指定するものと同じです。
改行のみの場合は、コマンド実行をしない
(ヌルコマンドリストを指定した) ものとみなされます。
.Ql &
文字のみを入力した場合には、
直前に実行した (ヌルコマンドリストではない) コマンドを再実行します。
.It H
エラーメッセージの出力の有無を切り替えます。
デフォルトでは、エラーメッセージは出力されません。
ed スクリプトを作成する場合、スクリプトのデバッグのために、本コマンドを
最初に実行することをおすすめします。
.It h
最後に表示されたエラーメッセージを表示します。
.It (.)i
編集バッファ中の現在行の前に、テキストを挿入します。
テキストは入力モードで入力されていきます。
現在行番号は、入力された最後の行に設定されます。
.It (.,.+1)j
指定した範囲の行を 1 行に連結します。
指定した行はバッファから削除され、
その行の内容を含む 1 行に置き換えられます。
現在行番号は、置き換えられた行に設定されます。
.It (.)klc
行に、英小文字
.Em lc
で指定したマークをつけます。
その後、マークをつけられた行は、コマンド中で
.Em 'lc
(つまり、シングルクォートと小文字
.Em lc )
として指定できるようになります。
マークは、その行が削除されるかもしくは変更されるかしない限り、消えることは
ありません。
.It (.,.)l
指定した範囲の行の内容を見やすく表示します。
もし 1 つの行が 1 画面以上を占める場合 (例えばバイナリファイルを見ている
場合など)
.Dq Li --More--
プロンプトが最下行に表示されます。
次の画面を表示する前に
.Nm
ユーティリティはリターンキーが入力されるまで待ちます。
現在行番号は、表示された最後の行に設定されます。
.It (.,.)m(.)
指定した範囲の行をバッファ内で移動します。
指定した行は、コマンドの右辺で指定した行の後ろに移動されます。
移動先の行としては、
.Em 0
(ゼロ) が指定可能です。
現在行番号は、移動された最後の行に設定されます。
.It (.,.)n
指定した行の内容を、行番号つきで表示します。
現在行番号は、表示された最後の行に設定されます。
.It (.,.)p
指定した範囲の行の内容を表示します。
現在行番号は、表示された最後の行に設定されます。
.It P
コマンドプロンプト表示の有無を切り替えます。
コマンド起動時のオプション
.Fl p Ar string
でプロンプトが指定されていなければ、
コマンドプロンプトの表示はデフォルトでオフになっています。
.It q
.Nm
を終了します。
.It Q
無条件に
.Nm
を終了します。
このコマンドは
.Em q
コマンドと似ていますが、まだファイルに書き出されていない
変更があっても警告せずに終了する点が異なります。
.It ($)r Ar file
.Ar file
で指定されたファイルを、指定した行の後ろに読み込みます。
.Ar file
が指定されない場合、デフォルトのファイル名が読み込みに使用されます。
このコマンドに先だってデフォルトのファイル名が設定されていない場合、
デフォルトのファイル名には、
.Ar file
で指定されたものが設定されます。
それ以外の場合、デフォルトのファイル名は変更されません。
現在行番号は、読み込まれたファイルの最後の行に設定されます。
.It ($)r Ar !command
.Ar command
で指定されたコマンドを実行し、その結果として標準出力へ出力された
データを指定した行の後ろに読み込みます (後述する
.Ar ! command
を参照して下さい)。
デフォルトのファイル名は変更されません。
現在行番号は、読み込まれた最後の行の行番号に設定されます。
.It (.,.)s/re/replacement/
.It (.,.)s/re/replacement/g
.It (.,.)s/re/replacement/n
指定した行のテキスト中の、正規表現
.Ar re
に一致する文字列を、文字列
.Ar replacement
に置き換えます。
デフォルトでは、それぞれの行で最初に一致した文字列のみを置き換えます。
.Em g
(global) サフィックスが指定された場合、一致した文字列はすべて置き換えられます。
.Em n
サフィックス 
.Em ( n
は正の整数) が指定された場合、
.Em n
回目に一致した文字列だけを置き換えます。
指定した範囲で一度も文字列の置換が起こらなかった場合、エラーとみなされます。
現在行番号は、最後に置換が発生した行に設定されます。
.Pp
.Ar re
および
.Ar replacement
は、スペースおよび改行を除くすべてのキャラクタを用いて区切ることが
可能です (後述する
.Em s
コマンドを見て下さい)。
最後のデリミタのうち 1 つか 2 つが省略された場合、
最後に文字列置換が発生した行は、
.Em p
コマンドが指定された場合と同様に表示されます。
.Pp
.Ar replacement
中のエスケープされていない
.Ql &
は、一致した文字列と置き換えられます。
キャラクタシーケンス
.Em \em
.Em ( m
は [1,9] の範囲の整数です ) は、一致した文字列の
.Em m
番目の後方参照で置き換えられます。
.Ar replacement
の中に入る文字が
.Ql % 
のみだった場合、最後に行なった置換の
.Ar replacement
が使用されます。
改行を
.Ar replacement
に指定したい場合は、バックスラッシュを用いてエスケープすれば可能です。
.It (.,.)s
最後の置換を繰り返します。
この形式の
.Em s
コマンドは、回数を示すサフィックス
.Em n
もしくは、他の
.Em r、
.Em g、
.Em p
のどのキャラクタとの組み合わせも可能です。
.Em n
が指定されると、
.Em n
回目に一致した文字列だけが置換されます。
.Em r
サフィックスが指定されると、最後の置換が発生した文字列の変わりに、
最後に指定した正規表現が使用されます。
.Em g
サフィックスは、最後の置換で用いたグローバルサフィックスの使用の
有効/無効を切り替えます。
.Em p
サフィックスは、最後の置換に指定されたプリントサフィックスを反転します。
現在行番号は、最後に置換が発生した行に設定されます。
.It (.,.)t(.)
指定した範囲の行を、コマンド文字の右辺に指定した行番号の後に
コピー (つまり転送) します。
コピー先の行番号としては、
.Em 0
(ゼロ) の指定が許されています。
現在行番号は、コピーした一番最後の行の行番号に設定されます。
.It u
最後に実行したコマンドの実行結果を取り消し、現在行番号を、取り消したい
コマンドが実行される前のものに戻します。
グローバルコマンドである
.Em g、
.Em G、
.Em v、
.Em V
については、その改変は 1 コマンドで行なわれたとして扱います。
.Em u
は自分自身の動作を取り消すこともできます。
.It (1,$)v/re/command-list
指定した範囲の行のうち、指定した正規表現
.Ar re
と一致する文字列が含まれていない行について、
.Ar command-list
で指定したコマンドを実行します。
これは
.Em g
コマンドに動作が似ています。
.It (1,$)V/re/
指定した範囲の行のうち、指定した正規表現
.Ar re
に一致する文字列が含まれていない行について、対話編集を行ないます。
これは
.Em G
コマンドに動作が似ています。
.It (1,$)w Ar file
指定した範囲の行を、
.Ar file
で指定したファイルに書き出します。
それまで
.Ar file
に格納されていた内容は、警告なしに消去されます。
デフォルトファイル名が設定されていない場合、デフォルトファイル名は
.Ar file
に設定されます。
それ以外の場合では、デフォルトファイル名は変更されません。
ファイル名が指定されなかった場合には、デフォルトファイル名が使用されます。
現在行番号は変更されません。
.It (1,$)wq Ar file
指定した範囲の行を
.Ar file
で指定したファイルに書き出し、
.Em q
コマンドを実行します。
.It (1,$)w Ar !command
指定した範囲の行の内容を
.Ar !command
の標準入力に書き出します
.Em ( !command
については、以下の説明を参照して下さい)。
デフォルトファイル名および現在行番号は変更されません。
.It (1,$)W Ar file
指定した範囲の行の内容を、
.Ar file
で指定したファイルの後ろに追加書き込みします。
.Em w
コマンドと似ていますが、指定したファイルにそれまで格納されていた内容
がなくなることはありません。
現在行番号は変更されません。
.It x
以降の読み書きで用いられる暗号化鍵の入力を促します。
改行のみが入力されると、暗号化は解除されます。
それ以外の場合、キー読み込み中のエコーは抑制されます。
暗号化および復号化は
.Xr bdes 1
アルゴリズムを用いて行われます。
.It Pf (.+1)z n
指定した行から一度に
.Ar n
行だけスクロールします。
.Ar n
が指定されない場合には、現在のウィンドウサイズだけスクロールします。
現在行番号は、最後に表示した行の行番号に設定されます。
.It !command
.Ar command
で指定したコマンドを、
.Xr sh 1
を用いて実行します。
.Ar command
の最初の文字が
.Ql \&!
の場合には、その文字は直前に
.Ar !command
で実行したコマンド文字列が格納されます。
.Ar command
文字列をバックスラッシュ (\\) でエスケープした場合には、
.Nm
ユーティリティは処理を行ないません。
しかし、エスケープされない
.Em %
文字があった場合には、その文字列はデフォルトファイル名に置き換えられます。
シェルがコマンド実行から戻ってきた場合には、
.Ql \&!
が標準出力に出力されます。
現在行番号は変更されません。
.It ($)=
指定された行の行番号を表示します。
.It (.+1)newline
指定した行を表示します。
そして、現在行番号を表示した行のものに設定します。
.El
.Sh 関連ファイル
.Bl -tag -width /tmp/ed.* -compact
.It /tmp/ed.*
バッファファイル
.It ed.hup
端末が回線切断した場合に、
.Nm
がバッファ内容を書き出すファイル
.El
.Sh 関連項目
.Xr bdes 1 ,
.Xr sed 1 ,
.Xr sh 1 ,
.Xr vi 1 ,
.Xr regex 3
.Pp
USD:12-13
.Rs
.%A B. W. Kernighan
.%A P. J. Plauger
.%B Software Tools in Pascal
.%O Addison-Wesley
.%D 1981
.Re
.Sh 制限
.Nm
ユーティリティは、
.Ar file
引数に対してバックスラッシュエスケープ処理を施します。
つまり、ファイル名中でバックスラッシュ (\\) を前につけた文字は、
リテラルとして解釈されます。
.Pp
(バイナリではない) テキストファイルの最後が改行文字で終っていない場合、
.Nm
はそれを読み書きする際に改行文字を追加します。
バイナリファイルの場合は、
.Nm
はこのような改行文字追加は行いません。
.Pp
1 行あたりのオーバヘッドは整数 4 つ分です。
.Sh 診断
エラーが発生すると、
.Nm
は
.Ql \&?
を表示し、コマンドモードに戻るか、スクリプトによる実行のエラーの場合には
プログラムを終了します。
最後のエラーメッセージについての説明は、
.Em h
(help) コマンドを用いることで表示可能です。
.Pp
.Em g
(global) コマンドは、検索や置換が失敗したというエラーを隠蔽します。
そのため、スクリプトの中で条件つきコマンド実行を行なわせるのによく使われます。
例えば
.Pp
.Sm off
.Cm g No / Em old Xo
.No / Cm s
.No // Em new
.No /
.Xc
.Sm on
.Pp
は、出現した文字列
.Em old
をすべて文字列
.Em new
に置き換えます。
.Em u
(undo) コマンドがグローバルコマンドリスト内で実行された場合、コマンドリストは
1 度だけの実行になります。
.Pp
診断が無効にされていないと、
.Nm
を終了しようとする場合やバッファ内のデータを書き出さずに他のファイルを
編集しようとする場合にエラーになります。
その場合でも、同一のコマンドを 2 回入力すると、コマンドは成功します。
しかし、それまでの未保存の編集結果は、すべて失われます。
.Sh 歴史
.Nm
コマンドは Version 1 AT&T UNIX で登場しました。
.Sh バグ
.Nm
ユーティリティは、マルチバイト文字を認識しません。
