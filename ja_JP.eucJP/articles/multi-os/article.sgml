<!--
     The FreeBSD Documentation Project
     The FreeBSD Japanese Documentation Project

     Original revision: 1.39
     $FreeBSD$
-->
<!DOCTYPE ARTICLE PUBLIC "-//FreeBSD//DTD DocBook V4.1-Based Extension//EN" [
<!ENTITY % articles.ent PUBLIC "-//FreeBSD//ENTITIES DocBook FreeBSD Articles Entity Set//EN">
%articles.ent;
]>
<article>
  <articleinfo>
    <title>FreeBSD と他の OS を共存させるには</title>

    <authorgroup>
      <author>
	<firstname>Jay</firstname>

	<surname>Richmond</surname>

	<affiliation>
	  <address>
	    <email>jayrich@sysc.com</email>
	  </address>
	</affiliation>
      </author>
    </authorgroup>

    <pubdate>1996 年 8 月 6 日</pubdate>

    <legalnotice id="trademarks" role="trademarks">
      &tm-attrib.freebsd;
      &tm-attrib.ibm;
      &tm-attrib.linux;
      &tm-attrib.microsoft;
      &tm-attrib.powerquest;
      &tm-attrib.general;
    </legalnotice>

    <abstract>
      <para>
	ここでは、FreeBSD を (Linux、&ms-dos;、&os2、&windows; 95 など)
	人気のある他の OS とうまく同居させる方法について説明します。
	この文章を書くにあたり、
	Annelise Anderson <email>andrsn@stanford.edu</email>、
	Randall Hopper <email>rhh@ct.picker.com</email>、
	&a.jkh;	には、特にお世話になりました。
      </para>
    </abstract>
  </articleinfo>

  <sect1>
    <title>概要</title>

    <para>大容量のディスクがないと、大半の人は複数の OS を
      うまく共存させることはできません。そのため、この文書には大容量
      EIDE ドライブに関する記述も含まれています。
      複数の OS を同居させる場合、ハードディスクの設定や
      OS の組合せというのは非常にたくさんありますが、
      おそらく <xref linkend="ch5"> が最も役に立つ章でしょう。
      その章には、複数の OS を使用するために特に必要な
      コンピュータ設定についての詳細が書かれています。</para>

    <para>この文書では、ハードディスクに
      OS を追加できるだけの空き容量があることを前提としています。
      ハードディスクのパーティションを再度切り直すと、
      既存のパーティションにあるデータを壊すことになりかねません。
      しかし、ハードディスクが完全に DOS で占められているようであれば、
      (FreeBSD CDROM の中の <filename>\TOOLS</filename> ディレクトリ、
      あるいは <ulink url="ftp://ftp.FreeBSD.org/pub/FreeBSD/tools/">ftp
      </ulink> から取得できる) FIPS ユーティリティが役に立つことでしょう。
      このツールを使えば、データを破壊することなくハードディスクの
      パーティションを切り直すことができます。
      また、データを破壊せずにパーティションのサイズを変更したり削除できる
      <application>&partitionmagic;</application>
      という商用のプログラムも出回っています。</para>
  </sect1>

  <sect1 id="ch2">
    <title>ブートマネージャの概要</title>

    <para>ここでは、おそらくあなたが目にするであろう、
      いくつかのブートマネージャについて簡単に説明します。
      コンピュータの設定によっては、同じシステム上で 1 つ以上の
      ブートマネージャを使用した方が便利な場合があります。</para>

    <variablelist>
      <varlistentry>
	<term>Boot Easy</term>

	<listitem>
	  <para>これは、FreeBSD で標準に使用されている
	    ブートマネージャです。
            大半の OS が起動可能で、
            BSD、&os2; (HPFS)、&windows; 95 (FAT および FAT32)、Linux
	    などをサポートします。
	    ファンクションキーで起動パーティションを選択することができます。</para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term>&os2; Boot Manager</term>

	<listitem>
	  <para>これは、FAT、FAT32、HPFS、FFS (FreeBSD)、および EXT2 (Linux)
            の起動に対応しています。
	    パーティション選択は、カーソルキーで行います。
	    &os2; Boot Manager は、他のマスターブートレコード (MBR) を
            使用するブートマネージャと異なり、
	    唯一、自分用にひとつパーティションを占有します。
	    そのため、起動時の問題を避けるために、
	    第 1024 番目より前のシリンダにインストールしなければいけません。
	    ブートマネージャが MBR ではなく、起動セクタの一部にある場合は、
	    LILO を使っている Linux を起動することができます。
	    &os2; Boot Manager で Linux を起動させる方法の詳細は、
	    次のサイト
	    <ulink url="http://www.linuxresources.com/LDP/HOWTO/HOWTO-INDEX.html">Linux HOWTO</ulink>
	    を参照してください。</para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term>OS-BS</term>

	<listitem>
	  <para>これは、Boot Easy に類似したもので、
            起動のタイムアウト設定や起動のデフォルトパーティションを決めるといった、
            起動プロセスの細かい制御が可能です。
	    このプログラムのベータ版では、
            カーソルキーを用いて起動する OS を選択することができます。
	    これは、FreeBSD CD-ROM の
	    <filename class="directory">\TOOLS</filename> ディレクトリ、
	    あるいは <ulink url="ftp://ftp.FreeBSD.org/pub/FreeBSD/tools/">
	      ftp</ulink> に収録されています。</para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term>LILO - LInux LOader</term>

	<listitem>
	  <para>これは、動作が限定されたブートマネージャです。
	    FreeBSD を起動することはできますが、
	    LILO の設定ファイルを少々編集する必要があります。</para>
	</listitem>
      </varlistentry>
    </variablelist>

    <note id="fat32">
      <title>FAT32 について</title>

      <para>FAT32 は FAT ファイルシステムに代わるものです。
        これは Microsoft の OEM SR2 ベータ版
        (訳注: &windows; 95 の OEM 版の一つ)
        に含まれていて、1996 年末へ向けて、&windows; 95 がプリインストールされた
	コンピュータで広く利用され始めました。
	&windows; 95 は従来の FAT ファイルシステムを変換し、
	大容量のハードディスクでより小さなサイズのクラスタを利用可能にします。
	また、FAT32 は従来の FAT 起動セクタやアロケーションテーブルを
	変更するため、いくつかのブートマネージャは利用できなくなっています。</para>
    </note>
  </sect1>

  <sect1 id="ch3">
    <title>標準的なインストール</title>

    <para>では、大容量の EIDE ハードディスクが 2 つあり、
      FreeBSD、Linux、&windows; 95 を同居させたい、
      という場合を考えましょう。</para>

    <para>このようなハードディスクを使用した場合の
      一例について見てみましょう:</para>

    <itemizedlist>
      <listitem>
	<para><filename>/dev/wd0</filename> (1 番目の物理的なハードディスク)</para>
      </listitem>

      <listitem>
	<para><filename>/dev/wd1</filename> (2 番目のハードディスク)</para>
      </listitem>
    </itemizedlist>

    <para>両方のディスクとも 1416 シリンダあります。</para>

    <procedure>
      <step>
	<para><filename>FDISK.EXE</filename> ユーティリティが入っている
	  &ms-dos;、あるいは &windows; 95 boot ディスクから起動させ、
	  1 番目のディスク上に 50MB のプライマリパーティション
	  (&windows; 95 本体に必要な 35-40MB に、少々余分な空きを加えたもの)
          を作成します。
          また、&windows; アプリケーションとデータ用として、
          2番目のハードディスク上に大きめのパーティションを作成します。</para>
      </step>

      <step>
	<para>再起動し、<filename>C:</filename>
          パーティション上に &windows; 95 をインストールします
          (一言で終わらせられるほど簡単ではありませんが)。</para>
      </step>

      <step>
	<para>次に Linux をインストールします。
          すべての Linux ディストリビューションについて確認したわけではありませんが、
	  少なくとも
	  <ulink url="http://www.slackware.com">Slackware</ulink>
	  には LILO (<xref linkend="ch2"> 参照)
	  が含まれています。Linux の <command>fdisk</command>
          コマンドを使って、ハードディスクを切り分けるとしたら、
          わたしの場合は最初のドライブ (ルートパーティションとスワップ
          を合わせてだいたい 300MBくらい) に Linux
          の全システムを入れるでしょう。</para>
      </step>

      <step>
	<para>Linux をインストールしてから LILO
          をインストールするかどうか聞かれた時、
	  LILO のインストール先は
          MBR (マスターブートレコード) ではなく
          Linux のルートパーティション上になっていることを
          <emphasis>必ず</emphasis>確認して下さい。</para>
      </step>

      <step>
	<para>残りのハードディスクは、すべて FreeBSD にあてます。
	  この時、FreeBSD のルートスライスが 1024 シリンダを越えないように
	  気を付けます (ここで想定している 720MB のディスクの場合、
	  1024 シリンダは 528MB の位置にあります)。
	  残りのハードディスク (270MB) は、
          <filename class="directory">/usr</filename> と
	  <filename class="directory">/</filename> スライスにあてることもできます。
	  2 番目のディスクの残りは、
	  <filename class="directory">/usr/src</filename>
	  とスワップ領域に使用します。
	  この残りの容量は、手順 1) で作成した &windows; アプリケーション /
	  データのパーティションに依存します。</para>
      </step>

      <step>
	<para>&windows; 95 <command>fdisk</command>
          ユーティリティで見た場合、
	  ハードドライブは次のように見えているはずです。

	  <screen>---------------------------------------------------------------------

                  領域情報を表示

現在のハードディスク: 1

領域      状態     種類   ボリュームラベル Mバイト  システム  使用
C: 1         A    PRI DOS                     50     FAT**     7%
   2         A    Non-DOS (Linux)            300              43%

ディスクの総容量は 696 Mバイトです。(1 M バイト = 1048576 バイト)

続けるには Esc キーを押してください。

---------------------------------------------------------------------

                  領域情報を表示

現在のハードディスク: 2

領域      状態     種類   ボリュームラベル Mバイト  システム  使用
D: 1         A    PRI DOS                    420     FAT**    60%

ディスクの総容量は 696 Mバイトです。(1 Mバイト = 1048576 バイト)

続けるには Esc キーを押してください。

---------------------------------------------------------------------</screen>

	  注) 最新の OEM SR2 をお使いの場合は、
          ** の部分が FAT16、FAT32 と表示されることがあります。
	  詳しくは <xref linkend="ch2"> をご覧下さい。</para>
      </step>

      <step>
	<para>FreeBSD をインストールします。
	  最初のハードディスクが BIOS で <quote>NORMAL</quote>
	  と設定された状態で起動することを確認します。
	  そうでない場合は、
	  起動時に適切なディスクジオメトリ情報を入力しなければなりません
	  (ジオメトリ情報を得るには、&windows; 95 を起動して
	  Microsoft Diagnostics (<filename>MSD.EXE</>) で調べるか、
	  BIOS の機能でチェックして下さい)。
	  ここでのパラメータ <literal>hd0=1416,16,63</literal> は、
	  <replaceable>1416</replaceable> はハードディスクのシリンダ数であり、
	  <replaceable>16</replaceable> はトラックあたりのヘッド数、
	  <replaceable>63</replaceable> はトラックあたりのセクタ数です。</para>
      </step>

      <step>
	<para>ハードディスクのパーティションを切る時には、
	  Boot Easy が 1 番目のディスクにインストールされていることを確認します。
	  2 番目のハードディスクは起動と関係ないので、
          こちらについて心配する必要はありません。</para>
      </step>

      <step>
	<para>再起動すると、Boot Easy が DOS (&windows; 95)、
          Linux、BSD (FreeBSD) という、
          3 つの起動可能パーティションを認識します。</para>
      </step>
    </procedure>
  </sect1>

  <sect1 id="ch4">
    <title>注意と考察</title>

    <para>大部分の OS は、自分がハードディスクのどの領域に、
      どのように配置しているか、ということを非常に気にします。
      &windows; 95 や DOS は、1 番目のハードディスクの
      基本領域にインストールされる必要がありますが、
      &os2; は例外的に、ハードディスクの 1 番目 と 2 番目、
      基本領域と拡張領域をまったく問わずにインストールすることができます。
      よく分からなければ、起動可能なパーティションを
      1024 シリンダ内に入れるようにして下さい。</para>

    <para>BSD システムが存在しているところに
      &windows; 95 を載せると、MBR が <quote>破壊</quote> されてしまいます。
      そのため、ブートマネージャの再インストールが必要になります。
      Boot Easy は、CDROM の
      <filename class="directory">\TOOLS</filename> ディレクトリあるいは
      <ulink url="ftp://ftp.FreeBSD.org/pub/FreeBSD/tools/">ftp</ulink>
      サイトに含まれる <filename>BOOTINST.EXE</filename> ユーティリティを用いて、
      再インストールすることが可能です。
      また、インストーラのパーティションエディタを使って
      Boot Easy を再インストールすることもできます。
      そこから、FreeBSD パーティションを bootable としてマークをつけ、
      Boot Manager を選択します。
      変更した情報を MBR に (W)rite out (= 保存) するため、W を入力します。
      そして再起動すると、
      Boot Easy が &windows; 95 を DOS として認識するはずです。</para>

    <para>&os2; は FAT、HPFS パーティションを認識しますが、
      FFS (FreeBSD)、EXT2 (Linux) パーティションを認識しないことを覚えておいて下さい。
      同様に、&windows; 95 は、FAT と FAT32
      パーティションしか読み書きすることができません (<xref linkend="ch2"> を参照)。
      FreeBSD は、 ほとんどのファイルシステムを読むことができますが、
      現時点で HPFS パーティションの読み込みには対応していません。
      Linux では、HPFS パーティションを読むことができますが、
      書き込みはできません。
      最近の Linux カーネル (2.x) のバージョンでは、
      &windows; 95 VFAT パーティションに読み書きができます
      (VFAT は、&windows; 95 で長いファイル名を利用可能にするもので、
      ほとんど FAT と一緒です)。
      つまり Linux は、ほとんどのファイルシステムに読み書きができるわけです。
      わかりました?  そう期待して…。</para>
  </sect1>

  <sect1 id="ch5">
    <title>例</title>
    
    <para><emphasis>(この章はまだまだ手を入れる必要があります。
	良い例があったら、 <email>jayrich@sysc.com</email>
	までメールを送って下さい。)</emphasis></para>

    <para>FreeBSD + &windows; 95:
      &windows; 95 の後に FreeBSD を載せた場合は、
      Boot Easy メニューの <literal>DOS</literal> という部分を確認して下さい。
      これが &windows; 95 になります。
      もし、FreeBSD の後に &windows; 95 を載せてしまった場合は、
      上記の <xref linkend="ch4"> を読んで下さい。
      お持ちのハードディスクが 1024 シリンダを越えない場合は、
      起動時の問題はありません。
      パーティションのうち 1 つでも 1024 を越えたものがあり、
      DOS (&windows; 95) で
      <errorname>invalid system disk</errorname> と表示されたり、
      FreeBSD で起動できない場合には、BIOS の
      <quote>&gt;1024 cylinder support</quote> あるいは
      <quote>NORMAL/LBA</quote> モードの設定を確認して下さい。
      DOS が正常に起動するには、おそらく LBA (Logical Block Addressing)
      モードが必要になります。
      毎回起動時にBIOS の設定を切替える方法をとりたくない場合には、
      CD に収録されている <filename>FBSDBOOT.EXE</filename>
      ユーティリティを使い、DOS を経由して FreeBSD
      を起動させる方法もあります (このプログラムは、
      FreeBSD パーティションを見付けて、起動します)。</para>

    <para>FreeBSD + &os2; + &windows; 95:
      特に注意すべきことはありません。
      &os2; のブートマネージャは、これらすべての OS
      を起動することができますので、問題はないでしょう。</para>

    <para>FreeBSD + Linux:
      両方の OS を起動するのに、Boot Easy を使うこともできます。</para>

    <para>FreeBSD + Linux + &windows; 95:
      (<xref linkend="ch3"> を参照)</para>
  </sect1>

  <sect1 id="sources">
    <title>他の参考となる資料</title>

    <para>ハードディスク上に複数の OS を同居させる方法について
      取り扱っている <ulink
	url="http://www.linuxresources.com/LDP/HOWTO/HOWTO-INDEX.html">Linux
	HOW-TO</ulink> は、たくさんあります。</para>

    <para><ulink url="http://www.linuxresources.com/LDP/HOWTO/mini/Linux+DOS+Win95+OS2.html">
        Linux+DOS+Win95+OS2 mini-HOWTO</ulink> には、
      &os2; ブートマネージャの詳細な設定法が書かれています。また、
      <ulink url="http://www.linuxresources.com/LDP/HOWTO/mini/Linux+FreeBSD.html">
        Linux+FreeBSD mini-HOWTO</ulink> も同様に参考となるでしょう。
      さらに、<ulink url="http://www.in.net/~jkatz/win95/Linux-HOWTO.html">Linux-HOWTO</ulink>
      というサイトもあります。</para>

    <para><ulink url="http://www.tburke.net/info/ntldr/ntldr_hacking_guide.htm">&windowsnt;
	Loader Hacking Guide</ulink> には、
      &windowsnt;、&windows; 95、DOS を、他の OS
      とマルチブートする方法についての情報が書かれています。</para>

    <para>Hale Landis の <quote>How It Works (動作の仕組み)</quote> ドキュメント集には、
      あらゆる種類のディスクジオメトリ情報や、起動に関する情報が含まれています。
      また、以下のリンク
      <ulink url="ftp://fission.dt.wdc.com/pub/otherdocs/pc_systems/how_it_works/allhiw.zip"></ulink>
      にあるものも参考になるでしょう。</para>

    <para>最後に、
      配布されているカーネルソース (<ulink url="file://localhost/usr/src/sys/i386/boot/biosboot/README.386BSD">/usr/src/sys/i386/boot/biosboot/README.386BSD</ulink>
      に展開されています) に含まれている、FreeBSD
      カーネルの文書も見落とさないようにしてください。</para>
  </sect1>

  <sect1>
    <title>技術的な詳細</title>

    <para><emphasis>(Randall Hopper、
        <email>rhh@ct.picker.com</email> の寄稿によるものです)</emphasis></para>

    <para>この章は、
      ハードディスクやハードディスクの起動プロセスに関する基礎知識を提供します。
      これは、複数の OS を起動する設定で問題が起こった時、
      それを解決するのに役立つでしょう。
      最初はごく基本的な用語から始まりますので、
      章全体を流し読みして、見慣れない内容が出てくるところから
      読み始めても構いません。</para>

    <sect2>
      <title>ハードディスクの基礎</title>

      <para>まず、ハードディスク上のデータの位置を示すのに使われる、
	基本となる用語が 3 つあります。それは、シリンダ、ヘッド、セクタです。
	これらの用語の関係を知ることが、とりわけ重要と言うわけではありません。
	が、これらがディスク上の物理的なデータの位置を示す、
	ということは覚えておきましょう。</para>

      <para>ハードディスクにはそれぞれ、
        固有ののシリンダ数、ヘッド数、シリンダヘッドごとのセクタ数があります
	(シリンダヘッドはトラックとも呼ばれます)。
	この情報は、ハードディスクの<quote>ディスクジオメトリ</quote>を定義します。
	セクタ数は大抵の場合、1 セクタが 512 バイト、
        1 トラックが 63 セクタに対応するようになっていますが、
        シリンダとヘッドの数はディスクによってさまざまです。
        このように、計算すると、
	ディスクに納めることのできるデータのバイト数が分かります:</para>

      <informalexample>
        <para>(シリンダ数) &times; (ヘッド数) &times; (63
          セクタ/トラック) &times; (512 バイト/セクタ)</para>
      </informalexample>

      <para>たとえば Western Digital AC31600 EIDE
	ハードディスクの場合、次のようになります。</para>
      
      <informalexample>
        <para>(3148 シリンダ) &times; (16 ヘッド) &times; (63
          セクタ/トラック) &times (512 バイト/セクタ)</para>
      </informalexample>

      <para>これを計算すると 1,624,670,208 バイト、
        つまり約 1.6 GB になります。</para>

      <para>
        ハードディスクの物理的なディスクジオメトリ情報
        (シリンダ数、ヘッド数、トラックあたりのセクタ数) は、
        ATAID などのインターネット上にあるプログラムを用いて
	調べることができます。おそらくハードディスク自体にも、
        こういった情報が付属しているでしょう。
	しかし注意して欲しいのですが、BIOS LBA
        (<xref linkend="limits"> 参照)
        を使用している場合、
        物理的なジオメトリ情報を得るためのプログラムはどんなものでも良い、
        というわけではありません。
	これは、数多くのプログラム
	(たとえば <filename>MSD.EXE</filename> や FreeBSD の fdisk)
        が物理的なディスクジオメトリ情報を認識しないためです。
	これらはその代りに、
        <firstterm>変換されたジオメトリ</firstterm> (LBA を使った仮想的なセクタ数)
        を報告します。
	この言葉が何を意味しているのかについては、後述します。</para>

      <para>これらの用語について役立つこととしては、
        与えられた三つの数字&mdash;シリンダ数、ヘッダ数、
        トラックあたりのセクタ数&mdash;は、ハードディスク上の特定のセクタ
	(データの 512 バイトブロック) を絶対位置で決定します。
	シリンダ、ヘッドは 0 から、セクタは 1 から番号付けされます。</para>

      <para>さらに詳しい技術情報に興味がある方には、
	ディスクジオメトリ、起動セクタ、BIOS などに関する情報は
	ネット上の至るところで得ることができることをお知らせしておきます。
	Lycos、Yahoo などで
	<literal>boot sector (起動セクタ)</literal>、
	<literal>master boot record (マスターブートレコード)</literal>
	などを検索してみてください。
	それらの役立つ情報の中でも、
        Hale Landis の <citetitle>How It Works (動作の仕組み)</citetitle>
	ドキュメント集は参考になります。このドキュメント集に関しては
	<xref linkend="sources"> の章を参照してください。
      </para>

      <para>もう用語については十分ですね。
        次は起動についてお話します。</para>
    </sect2>

    <sect2 id="booting">
      <title>起動のプロセス</title>

      <para>ハードディスクの一番先頭のセクタ上
	(シリンダ 0、ヘッド 0、セクタ 1) には、
        マスターブートレコード (MBR) が存在します。
	MBR には、ハードディスクのマップ情報が含まれていて、
	最大 4 つの <firstterm>パーティション</firstterm>
	を認識することができます。それぞれのパーティションは、
        ディスク上の連続したデータ領域の塊です。
        FreeBSD では、このパーティションを <firstterm>スライス</firstterm>
        と呼んでいます。これは、FreeBSD
        独自のパーティションと混乱しないようにですが、
        ここではスライスという言葉は使いません。
	各パーティションには、それぞれ別の OS を入れることができます。</para>

      <para>MBR の各パーティションエントリには、
	<firstterm>パーティション ID</firstterm>、
	<firstterm>シリンダ/ヘッド/セクタの開始位置</firstterm>、
	<firstterm>シリンダ/ヘッド/セクタの終了位置</firstterm>
        があります。パーティション ID は、パーティションの種類
	(どの OS を使用しているか) を、
	開始位置/終了位置 はパーティションの位置を示します。
	<xref linkend="tbl-pid"> に、
          良く使われるパーティション ID のリストを示します。</para>

      <table id="tbl-pid">
	<title>パーティション ID - Partition IDs</title>

	<tgroup cols="2">
	  <thead>
	    <row>
	      <entry>ID (hex)</entry>
	      <entry>説明</entry>
	    </row>
	  </thead>

	  <tbody>
	    <row>
	      <entry>01</entry>
	      <entry>DOS12 基本領域 (12-bit FAT)</entry>
	    </row>

	    <row>
	      <entry>04</entry>
	      <entry>DOS16 基本領域 (16-bit FAT)</entry>
	    </row>

	    <row>
	      <entry>05</entry>
	      <entry>DOS 拡張領域</entry>
	    </row>

	    <row>
	      <entry>06</entry>
	      <entry>大容量 DOS 基本領域 (&gt; 32MB)</entry>
	    </row>

	    <row>
	      <entry>0A</entry>
	      <entry>&os2;</entry>
	    </row>

	    <row>
	      <entry>83</entry>
	      <entry>Linux (EXT2FS)</entry>
	    </row>

	    <row>
	      <entry>A5</entry>
	      <entry>FreeBSD、NetBSD、386BSD (UFS)</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <para>注: パーティションには、起動ができないものもあります
        (例えば DOS 拡張領域)。
	つまり、できるものもあれば、できないものもあるというわけです。
	パーティションが起動可能かどうかは、
	各パーティションの先頭に存在する
	<firstterm>パーティション起動セクタ</firstterm>の設定で決まります。</para>

      <para>好みのブートマネージャを設定した場合を考えてみます。
        ブートマネージャは、接続されているすべてのハードディスクの
        MBR パーティションテーブルのエントリをリストアップし、
        そしてそのリストから、どのエントリを起動するのか
        選択できるようにしてくれます。
	ブートマネージャは、
        起動の際、最初に接続が検出されたハードディスクのマスターブートセクタにある、
	特別なプログラムコードによって呼び出されます。
        呼び出されたブートマネージャは、選択したパーティションに対応するエントリを
	MBR パーティションテーブルから調べ、
        シリンダ/ヘッド/セクタの開始位置を取得します。
	それから、そのジオメトリ情報を使うことでパーティションの起動セクタを読み込み、
        制御をそちらに渡します。
	読み込まれる起動セクタには、そのパーティション上の OS
        をロードするために必要な情報が含まれています。</para>

      <para>今、かるく触れた内容を理解することは、とても重要です。
	ハードディスクには、必ず MBR が存在します。
	しかし重要なのは、そのうち BIOS により最初に接続が検出された
	ハードディスク上にあるものです。
	IDE ハードディスクだけを使用しているなら、
	最初のIDE ディスクです (例えば、最初のコントローラーのプライマリ側)。
	SCSI だけで構成されたシステムの場合も、同じことが言えます。
	もし、IDE と SCSI の両方のハードディスクを持っている場合には、
	多くの場合、IDE ディスクが先に検出されるため、
        1 台目の IDE ディスクが、最初に検出されるハードディスクになります。
	先ほど述べたように、インストールするブートマネージャは、
	最初に検出されたハードディスク上の MBR に格納されることになります。</para>
    </sect2>

    <sect2 id="limits">
      <title>起動の制限と注意事項</title>

      <para>ここでは、用心しなければならない、興味深い内容についてお話します。</para>

      <sect3>
	<title>恐怖の 1024 シリンダ制限と BIOS LBA の作用</title>

	<para>起動プロセスの最初の部分は、すべて BIOS によって実現されています。
	  (BIOS とは、コンピュータのためのスタートアップコードを提供する、
          システムマザーボードに載っているソフトウェアチップのことです)。
	  そのため、この最初のプロセスは BIOS
          インタフェースによって制限を受けます。</para>

	<para>このプロセスの間、ハードディスクを読み込むために使用された
	  BIOS インタフェース (INT 13H、Subfunction 2) は、
	  シリンダ番号へ 10 ビット、ヘッド番号へ 8 ビット、
	  セクタ番号へ 6 ビット割り当てます。
	  これがこのインタフェースを使う場合
	  (例 … ハードディスクの MBR から呼び出されるブートマネージャや、
	  起動セクタから呼び出される OS ローダーなど)
	  に次のような制限を与えるのです:</para>

      <itemizedlist>
	<listitem>
	  <para>最大 1024 シリンダ</para>
	</listitem>

	<listitem>
	  <para>最大 256 ヘッド</para>
	</listitem>

	<listitem>
	  <para>最大 64 セクタ/トラック (実際には 63 で <literal>0</literal>
	    は利用できません)</para>
	</listitem>
      </itemizedlist>

	<para>さて、容量の大きなハードディスクには多くのシリンダがありますが、
          ヘッドは多数ありません。
	  そのため、大容量のハードディスクにおいては、
          シリンダ数が 1024 を越えます。
          このことや BIOS インタフェースを考慮すると、
	  ハードディスクのどこからでも起動できるとは限らないのです。
	  すべての起動可能なパーティションの起動セクタから呼び出されるブートマネージャや
          OS ローダーは 1024 シリンダより下のシリンダに存在しなければなりません。
	  実際に、お使いのハードディスクが典型的なものでヘッドが 16 であれば、
	  次のようになります:</para>

	<informalexample>
	  <para>1024 シリンダ/ディスク &times; 16 ヘッド/ディスク &times; 63
	    セクタ/(シリンダ - ヘッド) &times; 512 バイト/セクタ</para>
	</informalexample>

	<para>これが、よく言われる 528MB 制限です。</para>

	<para>ここが BIOS LBA (Logical Block Addressing)
          が入ってくるところです。
	  BIOS LBA はシリンダを再定義することにより、
	  BIOS API を呼び出すコードが BIOS インタフェース経由で 1024 シリンダ
	  より上の物理シリンダにアクセスするようにします。
	  つまり、BIOS を通して見る場合に、実際より少ないシリンダ数、
	  多いヘッド数として扱われるようにシリンダ数、
	  ヘッド数を再マップしてくれるのです。
	  言い替えれば、シリンダ数とヘッド数のバランスを変更することで、
	  ハードディスクが相対的にヘッドが少なく、
	  シリンダが多くなるということを利用することにより、
	  双方の数が上記に述べられている制限 (1024 シリンダ、256 ヘッド)
	  を越えないと言うことになります。</para>

	<para>BIOS LBA を用いることで、
	  ハードディスク容量の制限が仮想的になくなりました
	  (まぁ、8GB まで上がったと言うところでしょうか)。
	  LBA BIOS を使用している場合は、FreeBSD または 他の OS
	  をどこにでも載せることができ、
	  1024 のシリンダ制限に引っかかることもありません。</para>

	<para>1.6GB Western Digital を再度例として考えてみましょう。
	  物理的なジオメトリは、次のとおりです:</para>

	<informalexample>
	  <para>(3148 シリンダ、16 ヘッド、63 セクタ/トラック、512
	    バイト/セクタ)</para>
	</informalexample>

	<para>しかしながら、BIOS LBA は次のように再マッピングを行います:
	</para>

	<informalexample>
	  <para>(787 シリンダ、64 ヘッド、63 セクタ/トラック、512
	    バイト/セクタ)</para>
	</informalexample>

	<para>実際には同じサイズのディスクなのですが、
	  シリンダとヘッドの計算は BIOS API の範囲内で行われます
	  (偶然にも、私のハードディスクの一つには、
	  Linux と FreeBSD が物理的なシリンダ 1024 番目より上に載っています。
	  これらのOS が問題なく起動するのも、BIOS LBA のおかげなのです)。</para>
      </sect3>

      <sect3>
	<title>ブートマネージャとディスクの割り当て</title>
        
	<para>ブートマネージャのインストール時、
	  他に気をつけねばいけないことは、
	  ブートマネージャ用として領域を割り当てることです。
	  1 つ、あるいは複数の OS の再インストールを余儀なくされたくないなら、
	  一番気にしなくてはいけないトピックです。
	</para>

	<para>(MBR のある) マスターブートセクタ、
	  パーティション起動セクタ、起動プロセス についての
	  <xref linkend="booting"> の説明を読んだ後は、
	  自分のハードディスクのどこに、
	  この気のきくブートマネージャが存在するのか気になるところですね。
	  それはと言いますと、いくつかのブートマネージャは、
	  パーティションテーブルの隣の、マスターブートセクタ
	  (シリンダ 0、ヘッド 0、セクタ 1) に納まり切る程に小さいのです。
	  ブートマネージャによってはもう少し容量が必要なものもあり、
	  その領域は一般には空いているため、
	  シリンダ 0 ヘッド 0 セクタ 1 にあるマスターブートセクタを
	  越えたいくつかのセクタにまで自身を拡張しています。
	</para>

	<para>ありがたいことに
	  (FreeBSD を含む) OS のいくつかは、
          必要ならばマスターブートセクタの直後、
	  シリンダ 0、ヘッド 0、セクタ 2 からパーティションを
	  起動することができます。
	  実際に、先頭に空きのある、あるいは全体が空のディスクで
	  FreeBSD の sysinstall を実行すると、デフォルトではその場所から
	  FreeBSD パーティションが始まります
	  (少なくとも私が行った時はそうでした)。
	  そして、MBR の後にあるいくつかのセクタを消費するような
	  ブートマネージャをインストールする場合、
	  最初のパーティションのデータの先頭が上書きされます。
	  FreeBSD の場合は、ディスクラベルが上書きされ、
	  FreeBSD が起動できなくなります。</para>

	<para>このような問題を避ける簡単な方法としては
	  (また、後で異なるブートマネージャを試す柔軟性を持たすためにも)、
	  パーティションを切る時に、
	  ハードディスクの最初のトラックを割り当てないまま
	  まるまる残しておくことです。
	  つまり、シリンダ 0、ヘッド 0、セクタ 2 からシリンダ 0、
	  ヘッド 0、セクタ 63 までを空けておき、
	  パーティションをシリンダ 0、ヘッド 1、セクタ 1
	  から開始するということです。
	  更に良いことに、ハードディスクの先頭に DOS パーティションを
	  作成する際、DOS はデフォルトでこの場所を空けておきます
	  (これがブートマネージャのいくつかはその場所が空きだと
	  仮定するという理由です)。
	  というわけで、ディスクの先頭に DOS パーティションを作成することで
	  この問題を避けることができるのです。
	  私はこのやり方が好みで、自分で 1MB の DOS パーティションを先頭に
	  作成します。そうすると、パーティションを切り直す時、
	  DOS のドライブ名をずらすことも必要ないのです。</para>

	<para>参考として、次のブートマネージャはコードとデータを
	  記録する際にマスターブートセクタを使用します:</para>

	<itemizedlist>
	  <listitem>
	    <para>OS-BS 1.35</para>
	  </listitem>

	  <listitem>
	    <para>Boot Easy</para>
	  </listitem>

	  <listitem>
	    <para>LILO</para>
	  </listitem>
	</itemizedlist>

	<para>次のブートマネージャはマスターブートセクタの後にある
	  セクタをいくつか使用します:</para>

	<itemizedlist>
	  <listitem>
	    <para>OS-BS 2.0 Beta 8 (sectors 2-5)</para>
	  </listitem>

	  <listitem>
	    <para>&os2; boot manager</para>
	  </listitem>
	</itemizedlist>
      </sect3>

      <sect3>
	<title>マシンが起動しない場合はどうするか?</title>

	<para>ブートマネージャをインストールした際に、
	  MBR が起動しない状態にしてしまうことがあります。
	  あまりないことですが、既にインストールしたブートマネージャが
	  ある状態で FDISK してしまうと起こることがあります。</para>

	<para>ハードディスクに起動可能な DOS パーティションがある場合、
	  DOS フロッピーから起動します。次を実行します:</para>

	<informalexample>
	  <screen>A:\&gt; <userinput>FDISK /MBR</userinput></screen>
	</informalexample>

	<para>オリジナルに戻すには、シンプルな DOS の起動コードを
	  システムに戻します。そうすると、ハードディスクから DOS
	  (DOS に限る) を起動することができます。
	  もう一つの手としては、起動可能なフロッピーを使って、
	  ブートマネージャのインストールプログラムを再度実行します。</para>
      </sect3>
    </sect2>
  </sect1>
</article>
