<!--
     The FreeBSD Documentation Project
     The FreeBSD Japanese Documentation Project

     Original revision: r38826
     $FreeBSD$
-->

<chapter id="printing">
  <chapterinfo>
    <authorgroup>
      <author>
	<firstname>Sean</firstname>
	<surname>Kelly</surname>
	<contrib>寄稿: </contrib>
      </author>
      <!-- 30 Sept 1995 -->
    </authorgroup>
    <authorgroup>
      <author>
	<firstname>Jim</firstname>
	<surname>Mock</surname>
	<contrib>改訂:</contrib>
	<!-- Mar 2000 -->
      </author>
    </authorgroup>
  </chapterinfo>

  <title>プリンタの利用</title>

  <sect1 id="printing-synopsis">
    <title>この章では</title>
    <indexterm><primary>LPD スプーリングシステム</primary></indexterm>
    <indexterm><primary>印刷</primary></indexterm>

    <para>&os;
      は古いインパクトプリンタから最新のレーザープリンタまで幅広いプリンタが利用でき、
      実行しているアプリケーションから高品質な印刷出力が行えます。</para>

    <para>&os; はネットワーク上のプリンタサーバとして動作するように設定することもできます。
      この機能は、他の &os; コンピュータや、&windows; や
      &macos; ホストから印刷ジョブを受け取ることができます。
      &os; は印刷ジョブを 1 つずつ処理することを保証します。
      また、どのユーザやマシンが最も多く印刷しているかの統計を取り、
      どの印刷物が誰の物か表示する
      <quote>バナー</quote> ページの作成などを行うことができます。</para>

    <para>この章を読めば以下のことがわかります。</para>

    <itemizedlist>
      <listitem>
	<para>&os; プリントスプーラの設定方法。</para>
      </listitem>

      <listitem>
	<para>入力ドキュメントをプリンタが扱える印刷フォーマットへ変換するなどといった、
	  特別な印刷ジョブを別に取り扱うための印刷フィルタのインストール方法。</para>
      </listitem>

      <listitem>
	<para>印刷物へのヘッダやバナーの適用方法。</para>
      </listitem>

      <listitem>
	<para>他のコンピュータに接続されたプリンタで印刷する方法。</para>
      </listitem>

      <listitem>
	<para>ネットワークに直接接続されたプリンタで印刷する方法。</para>
      </listitem>

      <listitem>
	<para>印刷ジョブの上限サイズや特定のユーザからの印刷拒否といった、
	  プリンタの制限の制御方法。</para>
      </listitem>

      <listitem>
	<para>印刷の統計とプリンタの使用状況の取得方法。</para>
      </listitem>

      <listitem>
	<para>印刷問題のトラブルシューティング方法。</para>
      </listitem>
    </itemizedlist>

    <para>この章を読み始める前に以下を済ませておいてください。</para>

    <itemizedlist>
      <listitem>
	<para>新しいカーネルの設定とインストール方法について理解すること
	  (<xref linkend="kernelconfig">)。</para>
      </listitem>
    </itemizedlist>
  </sect1>

  <sect1 id="printing-intro-spooler">
    <title>はじめに</title>

    <para>&os; でプリンタを使うために、それらを
      <application>LPD</application> スプーリングシステム、
      または単に <application>LPD</application> としても知られる
      Berkeley ラインプリンタスプーリングシステムで動作するように設定できます。
      これは &os; での標準的なプリンタ制御システムです。
      この章では、<application>LPD</application> を紹介し、
      その設定方法について説明します。</para>

    <para>あなたがすでに <application>LPD</application>
      やその他のプリンタスプーリングシステムに詳しいのなら、
      <link linkend="printing-intro-setup">基本的な設定</link>
      まで読み飛ばしてもかまいません。</para>

    <para><application>LPD</application>
      はホストのプリンタに関するあらゆることを制御します。
      ここで言う制御としては、次のことがあげられます。</para>

    <itemizedlist>
      <listitem>
	<para>ホストに接続されたプリンタ、
          あるいはネットワーク上の他ホストに接続されたプリンタに対するアクセス制御を行ないます。</para>
      </listitem>

      <indexterm><primary>プリントジョブ</primary></indexterm>
      <listitem>
	<para>ファイルをプリントする要求に対して許可を与えます。
	  この要求は特に<emphasis>ジョブ</emphasis>と呼ばれています。</para>
      </listitem>

      <listitem>
	<para>各々のプリンタの<emphasis>キュー</emphasis>を管理することにより、
	  複数のユーザがあるプリンタに対して同時にアクセスすることを防ぎます。</para>
      </listitem>

      <listitem>
	<para><emphasis>ヘッダページ</emphasis>
	  (<emphasis>バナー</emphasis>または
	  <emphasis>バースト</emphasis>ページとしても知られています)
	  をプリントすることができます。
	  これにより、
	  プリントアウトの山の中から自分がプリントしたジョブを見つけやすくなります。</para>
      </listitem>

      <listitem>
	<para>シリアルポートに接続したプリンタ用に通信パラメータを管理します。</para>
      </listitem>

      <listitem>
	<para>ネットワーク経由で他のホスト上の
	  <application>LPD</application>
	  スプーラにジョブを送ることができます。</para>
      </listitem>

      <listitem>
	<para>様々なプリンタ言語やプリンタの能力に応じてジョブの形式を整えるため、
	  特別なフィルタを起動することができます。</para>
      </listitem>

      <listitem>
	<para>プリンタの使用に対して課金を行なうことができます。</para>
      </listitem>
    </itemizedlist>

    <para>設定ファイル (<filename>/etc/printcap</filename>)
      を通して、専用のフィルタプログラムを用いることにより、
      多種多様なプリンタ機器に対して、上述の機能の全部または一部を
      <application>LPD</application> システムに行なわせることができます。</para>

    <sect2 id="printing-intro-why">
      <title>どうしてスプーラを使うべきなのか</title>

      <para>あなたのシステムを利用するのがあなた一人だけだとしたら、
        アクセス制御もヘッダページもプリンタ利用に対する課金も必要ないのに、
        なぜわざわざスプーラに煩わされなければならないのか疑問に思うかも知れません。
        プリンタに対する直接アクセスを許可することもできるのですが、
        とにかくスプーラを使用するべきです。その理由は、</para>

      <itemizedlist>
        <listitem>
	  <para><application>LPD</application>
	    はジョブをバックグラウンドで処理します。
            データがプリンタに送信されるまで待つ必要がなくなります。</para>
        </listitem>

        <indexterm><primary>&tex;</primary></indexterm>
        <listitem>
	  <para><application>LPD</application>
	    ではジョブをフィルタを通してプリントすることが簡単にできます。
            これにより、印刷物のヘッダに時刻や日付を入れたり、
            特別なファイル形式 (&tex; の DVI ファイルなど)
            をプリンタが処理できる形式に変更することができ、
            これらの作業を手動で行なう必要がなくなります。</para>
        </listitem>

        <listitem>
          <para>プリント処理を行なうフリー、
            または商用のプログラムのほとんどは、
            システムのスプーラとやりとりするように作られています。
            スプーリングシステムをセットアップすることで、
            今後加えるかもしれない、あるいは、
            すでに持っている別のソフトウェアをより簡単にサポートすることができるでしょう。</para>
        </listitem>
      </itemizedlist>
    </sect2>
  </sect1>

  <sect1 id="printing-intro-setup">
    <title>基本的な設定</title>

    <warning>
      <para>&os; 8.0 から、シリアルポートのデバイスノード名が、
	<filename>/dev/ttyu<replaceable>N</replaceable></filename> から
	<filename>/dev/ttyd<replaceable>N</replaceable></filename>
	へと変更になりました。
	&os;&nbsp;7.X ユーザは、
	この変更を理解した上で以下の文書を読んでください。</para>
    </warning>

    <para><application>LPD</application>
      スプーリングシステムを用いてプリンタを使用するためには、
      プリンタ機器と <application>LPD</application>
      用ソフトウェアの両方を準備する必要があります。
      本文書では次の二段階のレベルに分けて説明をします。</para>

    <itemizedlist>
      <listitem>
	<para>プリンタを接続する方法、
	  プリンタにどのように通信するかを
	  <application>LPD</application> に指示する方法や、
          プレインテキストをプリンタで印字する方法については、
          <link linkend="printing-simple">プリンタの簡単な設定</link>をご覧ください。</para>
      </listitem>

      <listitem>
	<para>様々な形式のファイルを印字する方法、
          ヘッダページを印字する方法、
          ネットワーク経由でプリンタに印字する方法、
          プリンタを制御する方法、
          プリンタの使用に対する課金を行なう方法については<link
	  linkend="printing-advanced">プリンタ設定上級編</link>をご覧ください。</para>
      </listitem>
    </itemizedlist>

    <sect2 id="printing-simple">
      <title>プリンタ設定導入編</title>

      <para>この節では、プリンタ機器やプリンタを使用するための
        <application>LPD</application>
	用ソフトウェアを設定する方法について述べます。
        この節の概要は次のとおりです。</para>

      <itemizedlist>
        <listitem>
          <para><link linkend="printing-hardware">プリンタ機器の設定</link>では、
            プリンタをコンピュータに接続するためのヒントがいくつか書かれています。</para>
        </listitem>

      <listitem>
          <para><link linkend="printing-software">ソフトウェアの設定</link>では、
            <application>LPD</application> のスプーラ設定ファイル
            (<filename>/etc/printcap</filename>)
            の設定方法について書かれています。</para>
        </listitem>
      </itemizedlist>

      <para>データをプリンタに送るのにコンピュータのローカルインタフェースではなく、
        ネットワークプロトコルを使用する場合は、
        <link linkend="printing-advanced-network-net-if">
        ネットワークにおけるデータストリームインタフェースを持つプリンタ</link>をご覧ください。</para>

      <para>この節のタイトルは <quote>プリンタ設定導入編</quote> ですが、
        実際の設定はかなり複雑です。
        プリンタをコンピュータに接続し、
	<application>LPD</application>
	スプーラを起動させることは一番困難な作業です。
        ヘッダページを出力させたり課金したりするオプションの設定は、
        一度プリンタがうまく動くようになればとても簡単です。</para>

      <sect3 id="printing-hardware">
        <title>プリンタ機器の設定</title>

        <para>この節では、プリンタに PC
          を接続するための様々な方法について説明しています。
          ここでは、ポートやケーブルの種類、
          &os; がプリンタとの通信に必要なカーネルコンフィグレーションについても言及しています。</para>

        <para>もしプリンタが既に接続されていて、
          他のオペレーティングシステム上でプリンタからの印字に成功している場合は、
          <link linkend="printing-software">ソフトウェアの設定</link
            >まで読み飛ばすことが多分できるでしょう。</para>

        <sect4 id="printing-ports">
          <title>ポートとケーブル</title>

          <para>今日 PC 用に売られているプリンタには通常、
	    次の 3 つのインタフェースのうち、どれか
	    1 つ以上がついてきます。</para>

          <itemizedlist>
            <indexterm>
              <primary>プリンタ</primary>
              <secondary>シリアル</secondary>
            </indexterm>
            <listitem>
              <para><emphasis>シリアル</emphasis>インタフェース、
		は RS-232 または COM ポートとも呼ばれますが、
		コンピュータにあるシリアルポートを使ってプリンタにデータを送信します。
                シリアルインタフェースはコンピュータ業界で共通して使用されています。
                そのケーブルは容易に手に入りますし、簡単に自作することもできます。
                シリアルインタフェースの場合は時々、
		特別なケーブルや何か複雑な通信方式選択の設定が必要になることがあります。
		ほとんどの PC のシリアルポートは通信速度が最大で
		115200&nbsp;bps であり、
		大きな画像を印刷するのには実用的ではありません。</para>
            </listitem>

            <indexterm>
              <primary>プリンタ</primary>
              <secondary>パラレル</secondary>
            </indexterm>
            <listitem>
              <para><emphasis>パラレル</emphasis>インタフェースではプリンタにデータを送信するために、
                コンピュータにあるパラレルポートを使用します。
		パラレルインタフェースは PC 業界ではよく使われており、
		RS-232 シリアルよりも速いです。
                ケーブルの入手は容易ですが、
                自作するのはシリアルよりも困難です。
                パラレルインタフェースには通常、通信方式の選択はなく、
                設定は極めて単純です。</para>

              <indexterm>
                <primary>セントロニクス</primary>
                <see>パラレルプリンタ</see>
              </indexterm>
	    <para>パラレルインタフェースは <quote>セントロニクス</quote> インタフェースとして知られています。
                これは、プリンタ用のコネクタタイプとして採用された後に名付けられました。</para>
            </listitem>

	    <indexterm>
	      <primary>プリンタ</primary>
	      <secondary>USB</secondary>
	    </indexterm>
	    <listitem>
	      <para>USB インタフェースは、Universal Serial Bus
		(汎用シリアルバス) の略で、パラレルや RS-232
		シリアルよりさらに速く動作します。
		ケーブルは単純で安価です。USB は、印刷目的には RS-232
		シリアルやパラレルよりも向いていますが、&unix;
		システムでは十分対応されていません。
		この問題を回避する手としては、多くのプリンタがそうですが、
		USB とパラレルの両方のインタフェースを備えたプリンタを購入することが挙げられます。</para>
	    </listitem>
          </itemizedlist>

	  <para>パラレルインタフェースでは、普通は
	    (コンピュータからプリンタへの)
	    単方向通信のみを行なうのに対して、
	    シリアルおよび USB インタフェースは双方向通信を行ないます。
	    &os; でも IEEE1284 準拠のケーブルを使えば、
	    最近のパラレルポート (EPP や ECP)
	    とプリンタの多くで双方向通信を行なうことができます。</para>

          <indexterm><primary>PostScript</primary></indexterm>

	  <para>パラレルポート経由のプリンタとの双方向通信には、
	    通常 2 つの方法のどちらかが使われます。一つ目の方法は、
	    プリンタが使用しているプロプライエタリな言語を話す
	    &os; 用に作成されたプリンタドライバを使うものです。
	    これはインクジェットプリンタではよく使われる方法で、
	    インクの残量やその他の状態の情報を知らせるのに使えます。
	    二つ目の方法は、プリンタが &postscript;
	    に対応している時に使われます。</para>

	  <para>&postscript;
	    ジョブは、実際にはプリンタに送信されるプログラムです。
	    印字作業を行う必要は必ずしありませんし、
	    プログラムの結果を直接コンピュータに返してもよいのです。
            &postscript; プリンタでは双方向通信を使って
            &postscript; プログラムのエラーや紙づまりといった問題をコンピュータに報告します。
            ユーザはそれらの情報を知りたいと思うかも知れません。
            また、&postscript; プリンタで課金作業をもっとも効率よく行なうためには、
            双方向通信が必要となります。
            この方法ではまず、プリンタの現在のページカウント
            (起動してから今まで何枚の紙を印字したか) の情報を得ます。
            次に、ユーザのジョブを実行し、終了後、再びページカウントを得ます。
            この二つの数を差によって、
            課金対象となる紙の枚数を知ることができるのです。</para>
	</sect4>

        <sect4 id="printing-parallel">
          <title>パラレルポート</title>

          <para>プリンタをパラレルインタフェースを使って接続する場合は、
            セントロニクスケーブルでプリンタとコンピュータを接続してください。
            詳しい説明はプリンタやコンピュータに付属する説明書に書かれているはずです。</para>

          <para>その際、
            どのパラレルポートを使用したかを覚えておいてください。
	    &os; では最初のポートは <filename class="devicefile">ppc0</filename>、
	    二番目が <filename class="devicefile">ppc1</filename> であり、
            三番目以降も同様に続きます。
	    プリンタのデバイス名にも同じ形式が使われており、
	    最初のパラレルポートに接続されたプリンタは
	    <filename class="devicefile">/dev/lpt0</filename> などとなります。</para>
        </sect4>

        <sect4 id="printing-serial">
          <title>シリアルポート</title>

          <para>シリアルインタフェースを使ってプリンタを使う場合は、
            適切なシリアルケーブルでプリンタとコンピュータを接続してください。
            詳しい説明はプリンタ、コンピュータ、あるいは両方に付属する説
            明書に書かれているはずです。</para>

          <para><quote>適切なシリアルケーブル</quote> が良くわからないときは、
            次のどれかを試してみてください。</para>

          <itemizedlist>
            <listitem>
              <para><emphasis>モデム</emphasis>用ケーブルでは、
                それぞれのピンは他方のコネクタの対応するピンと線でつながっています。
                このタイプのケーブルは <quote>DTE-DCE</quote>
                間ケーブルとしても知られています
                (訳注:
                日本ではストレートケーブルという名前で売られています)。</para>
            </listitem>

            <indexterm><primary>ヌルモデム用ケーブル</primary></indexterm>
            <listitem>
              <para><emphasis>ヌルモデム</emphasis>用ケーブルでは、
                あるピンは対応するピンとを接続していますが、
                あるピン
                (たとえば、データ送信用とデータ受信用のピン)
                が交差して接続したり、
                いくつかのピンは内部で短絡していたりします。
                このタイプのケーブルは、
                <quote>DTE-DTE</quote> 間ケーブルと呼ばれています
                (訳注: 日本ではクロスケーブルという名前で売られています)。</para>
            </listitem>

            <listitem>
              <para>A <emphasis>シリアルプリンタ</emphasis>用ケーブルは、
                ある特定のプリンタで必要とされるものです。
                ヌルモデムケーブルと似ていますが、
                内部で短絡させる代わりに、
                ある信号を他方側に送るために使用しています。</para>
            </listitem>
          </itemizedlist>

          <indexterm><primary>ボーレート</primary></indexterm>
          <indexterm><primary>パリティ</primary></indexterm>
          <indexterm><primary>フローコントロールプロトコル</primary></indexterm>
          <para>この他に、
            プリンタ用の通信パラメータを設定する必要があります。
            通常、プリンタのフロントパネルや DIP スイッチによって制御します。
            コンピュータとプリンタの双方で設定できる最高の通信速度
            [bps] (ビット/秒、
            <emphasis>ボーレート</emphasis>と示されているときもある)
            を選んでください。そして、データビット (7 または 8)、
            パリティ (偶/奇/なし)、ストップビット (1 または 2)
            を選んでください。
            そして、フローコントロールの有無
            (制御なし、または XON/XOFF (<quote>イン・バンド</quote>
            または
            <quote>ソフトウェア</quote> フローコントロールとも呼ばれる))
            を選びます。
            以下に続くソフトウェアの設定のために、
            ここでの設定を覚えておいてください。</para>
        </sect4>
      </sect3>

    <sect3 id="printing-software">
      <title>ソフトウェアの設定</title>

      <para>本節では &os; の <application>LPD</application>
	スプーリングシステムで印字をおこなうために
	必要となるソフトウェアの設定について説明しています。</para>

      <para>本節の概要は次のようになります。</para>

      <procedure>
	<step>
	  <para>プリンタで使用するポートのために、必要があれば、
	    カーネルの書き変えをおこないます。「<link
	      linkend="printing-kernel">カーネルの変更</link>」で、
	    このためにしなくてはならないことを説明しています。</para>
	</step>

	<step>
	  <para>パラレルポートを使用している場合は、
	    パラレルポートのための通信モードを設定します。
	    詳細は、
	    「<link linkend="printing-parallel-port-mode">
	      パラレルポートの通信モードを設定する</link>」
	    で説明しています。</para>
	</step>

	<step>
	  <para>オペレーティングシステムからプリンタにデータが送ら
	    れているかをテストします。「<link
	      linkend="printing-testing">プリンタとの通信状況を調べる</link>」で、
	    どのようにテストするかの提案をいくつかおこなっています。</para>
	</step>

	<step>
	  <para>ファイル<filename>/etc/printcap</filename>を変更し、
	    <application>LPD</application> の設定をおこないます。
	    この節で、どのように変更するかを説明しています。</para>
	</step>
      </procedure>

      <sect4 id="printing-kernel">
	<title>カーネルの変更</title>

	<para>オペレーティングシステムのカーネルの
	  コンパイルをおこなうことによって、
	  指定されたデバイスが機能するようになります。シリアル、
	  または、パラレルインタフェースをプリンタで使用する場合、
	  必要なデバイスがこの指定の中に含まれていなくてはなりません。
	  したがって、
	  必要なデバイスがカーネルに組み込まれていない場合、
	  追加のシリアル、または、パラレルポートをサポートするために、
	  カーネルの再コンパイルが必要となるかもしれません。</para>

	<para>シリアルポートが現在使用しているカーネルで
	  サポートされているかどうかを調べるためには、
	  次のように入力します。</para>

	  <screen>&prompt.root; <userinput><command>grep sio<replaceable>N</replaceable> <filename>/var/run/dmesg.boot</filename></command></userinput></screen>

	<para>ここで、<replaceable>N</replaceable>
	  はシリアルポートの番号を示し、この番号は 0 から始まります。
	  次のような出力があった場合、
	  カーネルはそのポートをサポートしています。</para>

	<screen>sio2 at port 0x3e8-0x3ef irq 5 on isa
 sio2: type 16550A</screen>

	<para>パラレルポートが現在使用しているカーネルで
	  サポートされているかどうかを調べるためには、
	  次のように入力します。</para>

	  <screen>&prompt.root; <userinput><command>grep ppc<replaceable>N</replaceable> /var/run/dmesg.boot</command></userinput></screen>

	<para>ここで、<replaceable>N</replaceable>
	  はパラレルポートの番号を示し、この番号は 0 から始まります。
	  次のような出力があった場合、
	  カーネルはそのポートをサポートしています。</para>

	<screen>ppc0: &lt;Parallel port&gt; at port 0x378-0x37f irq 7 on isa0
ppc0: SMC-like chipset (ECP/EPP/PS2/NIBBLE) in COMPATIBLE mode
ppc0: FIFO with 16/16/8 bytes threshold</screen>

	<para>上記の出力が得られない場合、プリンタを使うため、
	  オペレーティングシステムにパラレル、または、
	  シリアルポートを認識し、使用できるようにするためには
	  カーネルを変更する必要があります。</para>

	<para>シリアルポートをサポートさせるには、「<link
	    linkend="kernelconfig">
	    &os; カーネルのコンフィグレーション</link>」の節をご覧く
	  ださい。パラレルポートをサポートさせる場合も、その節と、
	  <emphasis>あわせて</emphasis>、
	  この節に続く節もご覧ください。</para>
	</sect4>
      </sect3>

	<sect3 id="printing-parallel-port-mode">
	  <title>パラレルポートの通信モードを設定する</title>

	  <para>パラレルインタフェースを使用している場合、&os; では、
	    割り込み駆動型にするか、
	    プリンタとの通信の状況をカーネルに監視させるかのいずれかを選択できます。
	    &os; の汎用プリンタデバイスドライバ
	    (&man.lpt.4;) は &man.ppbus.4; システムを利用しています。
	    これは &man.ppc.4;
	    ドライバを使ってパラレルポートのチップセットを制御します。</para>

	  <itemizedlist>
	    <listitem>
	      <para>GENERIC
		カーネルでは<emphasis>割り込み駆動</emphasis>方式がデフォルトになっています。
		この方式では、
		オペレーティングシステムはプリンタがデータを受け付けられるかどうかを調べるために、
		IRQ ラインを一つ使用します。</para>
	    </listitem>

	    <listitem>
	      <para><emphasis>監視</emphasis>方式では、
		オペレーティングシステムにプリンタがもっとデータを受け付けられるかどうかを繰り返し尋ねるように指示します。
		そして、受け付けるという応答を受けたとき、
		カーネルはさらなるデータを送信します。</para>
	    </listitem>
	  </itemizedlist>

	  <para>割り込み駆動方式は一般的にいくらか高速になりますが、貴重な
	    IRQ ラインを一つ消費します。
	    HP の新しいプリンタの一部には、明らかに何かしらのタイミングの問題
	    (まだ正確にはわかっていません)
	    で割り込みモードでは正常に動作しないものがあると言われています。
	    これらのプリンタにはポーリングモードが必要になります。
	    どちらかうまく機能する方を使ってください。
	    一部のプリンタはどちらの方式でも動作しますが、
	    割り込みモードでは苦痛を感じるほど低速です。</para>

	  <para>通信モードを設定するためには 2 つの方法があります。
	    1 つはカーネルを変更することで、もう一つは
	    &man.lptcontrol.8; プログラムを使用する方法です。</para>

	  <para><emphasis> カーネルを設定することによって、
	      通信モードを変更する。</emphasis></para>

	  <procedure>
	    <step>
	      <para>カーネルコンフィグレーションファイルを変更します。
		<literal>ppc0</literal> のエントリを探してください。
		2 番目のパラレルポートを設定するときは、代わりに
		<literal>ppc1</literal> を使います。
		以下、3 番目のポートは <literal>ppc2</literal> となっていきます。</para>

	      <itemizedlist>
		<listitem>
		  <para>割り込み駆動方式にする場合は、
		    <filename>/boot/device.hints</filename>
		    ファイルの以下の行を編集して、
		    <replaceable>N</replaceable> を適切な
		    IRQ 番号に置き換えてください。</para>

		  <programlisting>hint.ppc.0.irq="<replaceable>N</replaceable>"</programlisting>

		  <para>カーネルの設定ファイルには &man.ppc.4;
		    ドライバも入れなければなりません。</para>

		  <screen>device ppc</screen>

		</listitem>

		<listitem>
		  <para>ポーリングモードを使用する場合は、
		    <filename>/boot/device.hints</filename>
		    ファイルの以下の行を削除してください。</para>

		  <programlisting>hint.ppc.0.irq="<replaceable>N</replaceable>"</programlisting>

		  <para>場合によっては、これだけでは &os;
		    でポートをポーリングモードにするには十分ではないことがあります。
		    多くの場合これは &man.acpi.4; ドライバと併せて動作します。
		    これはデバイスのプローブとアタッチを行うので、
		    プリンタポートへのアクセスモードを制御できます。
		    問題を修正するために &man.acpi.4;
		    の設定を確認してください。</para>
		</listitem>
	      </itemizedlist>
	    </step>

	    <step>
	      <para>ファイルをセーブし、config プログラムを起動し、
		カーネルの構築、インストールをおこないます。そして、
		リブートしてください。詳細は、「<link
		  linkend="kernelconfig">
		  &os;カーネルのコンフィグレーション</link>」を参照
		してください。</para>
	    </step>
	  </procedure>

	  <para>&man.lptcontrol.8; <emphasis>
	      で通信モードを設定する場合</emphasis></para>

	  <procedure>
	    <step>
	      <para><literal>lpt<replaceable>N</replaceable></literal>
		をイベント駆動方式に設定する場合は、
		次のように入力します。</para>

	      <screen>&prompt.root; <userinput><command>lptcontrol <option>-i</option> <option>-d</option> <filename class="devicefile">/dev/lpt<replaceable>N</replaceable></filename></command></userinput></screen>
	    </step>

	    <step>
	      <para><literal>lpt<replaceable>N</replaceable></literal>
		を監視方式に設定する場合は、次のように入力します。
	      </para>

	      <screen>&prompt.root; <userinput><command>lptcontrol <option>-p</option> <option>-d</option> <filename class="devicefile">/dev/lpt<replaceable>N</replaceable></filename></command></userinput></screen>
	    </step>
	  </procedure>

	  <para>これらのコマンドを <filename>/etc/rc.local</filename>
	    ファイルに追加
	    しておくと、システムをブートする度に通信モードを設定する
	    ことができます。詳細については、
	    &man.lptcontrol.8; をご覧ください。</para>
	</sect3>

	<sect3 id="printing-testing">
	  <title>プリンタとの通信状況を調べる</title>

	  <para>スプーリングシステムの設定に進む前に、オペレーティング
	    システムがプリンタにデータを送ることに成功しているかどうか
	    を確かめるべきでしょう。これにより、印字がうまくいかないと
	    き、プリンタとの通信が問題なのか、スプーリングシステムが問
	    題なのかを分けて調べることがかなり容易になります。</para>

	  <para>プリンタをテストするためには、
	    プリンタに何かのテキストを送
	    信してみます。送信した文字をすぐに印字してくれるプリンタに
	    は、&man.lptest.1; コマンドを使うと有用です。このコマンドは印
	    字可能な 96 文字の ASCII 文字すべてを 96 行生成します。</para>

          <indexterm><primary>PostScript</primary></indexterm>
	  <para>&postscript; (または他の言語に対応した) プリンタの場合
	    は、もっと巧妙なテストが必要になります。次のような、簡単な
	    &postscript; プログラムを使えば十分でしょう。</para>

	  <programlisting>%!PS
100 100 moveto 300 300 lineto stroke
310 310 moveto
/Helvetica findfont 12 scalefont setfont
(Is this thing working?) show
showpage</programlisting>

	  <para>上の &postscript; コードはファイルに保存し、
            以降の節で例として示されているように利用することができます。</para>

          <indexterm><primary>PCL</primary></indexterm>
	  <note>
	    <para>このドキュメントでプリンタ用言語を参照するときは、
	      &postscript; のような言語を仮定しており、Hewlett Packard
	      の PCL は考慮していません。PCL は非常に機能的なの
	      ですが、
	      プレインテキストにエスケープシーケンスを混ぜること
	      ができます。&postscript; ではプレインテキストを直接印字
	      することはできません。
	      このような種類のプリンタ言語に対しては、
	      特別な対応をおこなわなければなりません。</para>
	  </note>

	  <sect4 id="printing-checking-parallel">
	    <title>パラレルポートのプリンタとの接続を調べる</title>

            <indexterm>
              <primary>プリンタ</primary>
              <secondary>パラレル</secondary>
            </indexterm>
	    <para>この節では、&os; がパラレルポートに接続されたプリ
	      ンタと通信できているかどうかを調べる方法について説明し
	      ています。</para>

	    <para><emphasis>
		パラレルポートのプリンタをテストするために
	      </emphasis></para>

	    <procedure>
	      <step>
		<para>&man.su.1; コマンドで <username>root</username> になります。</para>
	      </step>

	      <step>
		<para>プリンタにデータを送ります。</para>

		<itemizedlist>
		  <listitem>
		    <para>プリンタがプレインテキストを印字できる場合、
		      &man.lptest.1; コマンドを使います。
		      次のように入力してください。</para>

		    <screen>&prompt.root; <userinput><command>lptest &gt; <filename class="devicefile">/dev/lpt<replaceable>N</replaceable></filename></command></userinput></screen>

		    <para>ここで、<replaceable>N</replaceable>
		      はパラレルポートの番号で、番号は
		      0 から始まります。</para>
		  </listitem>

		  <listitem>
		    <para>プリンタが &postscript; か他のプリンタ
		      言語を使用している場合、そのプリンタに簡単なプロ
		      グラムを送信してください。次のように入力します。
		    </para>

		    <screen>&prompt.root; <userinput><command>cat &gt; <filename class="devicefile">/dev/lpt<replaceable>N</replaceable></filename></command></userinput></screen>

		    <para>そして、一行一行、
		      プログラムを<emphasis>慎重に</emphasis>入力して
		      下さい。RETUREN または ENTER キーを入力してしま
		      うと、その行は編集できなくなります。プログラムの
		      入力が終わったら、CONTROL+D か、あなたが設定して
		      いるファイル終了のキーを押してください。</para>

		    <para>もしくは、プログラムを入力したファイルがある
		      場合は、次のように入力してください。</para>

		  <screen>&prompt.root; <userinput><command>cat <filename><replaceable>file</replaceable></filename> &gt; <filename class="devicefile">/dev/lpt<replaceable>N</replaceable></filename></command></userinput></screen>

		    <para>ここで、<replaceable>file</replaceable>
		      はプログラムが格納されていて、
		      プリンタに送信するファイルの名前です。</para>
		  </listitem>
		</itemizedlist>
	      </step>
	    </procedure>

	    <para>これで何かが印刷されるはずです。
	      印字されたテキストがおかしくても心配は無用です。
	      それについては、後で修正します。</para>
	  </sect4>

	  <sect4 id="printing-checking-serial">
	    <title>シリアルポートのプリンタとの接続を調べる</title>

            <indexterm>
              <primary>プリンタ</primary>
              <secondary>シリアル</secondary>
            </indexterm>
	    <para>この節では、&os; がシリアルポートに接続されたプリ
	      ンタと通信できているかどうかを調べる方法について述べられ
	      ています。</para>

	    <para><emphasis>
		シリアルポートのプリンタをテストするために
	      </emphasis></para>

	    <procedure>
	      <step>
		<para>&man.su.1; コマンドで <username>root</username> になります。</para>
	      </step>

	      <step>
		<para><filename>/etc/remote</filename>
		  ファイルを編集します。次のエントリを加えてください。
		</para>

		<programlisting>printer:dv=<filename class="devicefile">/dev/<replaceable>port</replaceable></filename>:br#<replaceable>bps-rate</replaceable>:pa=<replaceable>parity</replaceable></programlisting>

                <indexterm><primary>bit/秒</primary></indexterm>
                <indexterm><primary>シリアルポート</primary></indexterm>
                <indexterm><primary>パリティ</primary></indexterm>
		<para>ここで、<replaceable>port</replaceable>
		  シリアルポート (<literal>ttyu0</literal>、
		  <literal>ttyu1</literal> など) のデバイスエントリで、
		  <replaceable>bps-rate</replaceable>は
		  プリンタとの通信の転送速度[bit/秒]、
		  <replaceable>parity</replaceable>はプリ
		  ンタとの通信で必要とされるパリティ
		  (<literal>even</literal>、<literal>odd</literal>、
		  <literal>none</literal>、
		  <literal>zero</literal>のいずれか) を表わしていま
		  す。</para>

		<para>次の例は、
		  プリンタをシリアルケーブルでパリティなし、転送速度
		  19200&nbsp;bps で第 3 番目のシリアルポートに接続した場
		  合です。</para>

	      <programlisting>printer:dv=<filename class="devicefile">/dev/ttyu2</filename>:br#19200:pa=none</programlisting>
	      </step>

	      <step>
		<para>&man.tip.1; コマンドでプリンタと接続します。
		  次のように入力してください。</para>

		<screen>&prompt.root; <userinput><command>tip</command> printer</userinput></screen>

		<para>これがうまくいかなかった場合は、
		  <filename>/etc/remote</filename>を編集して、
		<filename class="devicefile">/dev/ttyu<replaceable>N</replaceable></filename>
		  の代わりに
		  <filename class="devicefile">/dev/cuaa<replaceable>N</replaceable></filename>
		  を試してみてください。</para>
	      </step>

	      <step>
		<para>プリンタにデータを送ります。</para>

		<itemizedlist>
		  <listitem>
		    <para>プリンタがプレインテキストを印字できる場合、
		      &man.lptest.1; コマンドを使います。
		      次のように入力してください。</para>

		    <screen>&prompt.user; <userinput>$lptest</userinput></screen>
		  </listitem>

		  <listitem>
		    <para>プリンタが &postscript; か他のプリンタ言語を使用している場合、
		      そのプリンタに簡単なプログラムを入力します。
		      一行一行、プログラムを<emphasis>慎重に</emphasis>入力してください。
		      バックスペースキーや他の編集用のキーは、
		      プリンタの制御コードに割り当てられているかもしれません。
		      プログラムが終了したことをプリンタに伝えるための特別なファイル終了キーを
		      入力する必要があるかもしれません。
		      &postscript; プリンタの場合、
		      <literal>CONTROL+D</literal> を入力します。</para>

		    <para>もしくは、プログラムを入力したファイルがある場合は、
		      次のように入力してください。</para>

		    <screen>&prompt.user; <userinput>&gt;<replaceable>file</replaceable></userinput></screen>

		    <para>ここで、<replaceable>file</replaceable>
		      はプログラムが格納されているファイル名です。
		      &man.tip.1; コマンドでファイルを送信した後は、
		      ファイル終了を表わすキーを入力する必要があります。</para>
		  </listitem>
		</itemizedlist>
	      </step>
	    </procedure>

	    <para>これで何かがプリントされることでしょう。
	      印字されたテキ
	      ストがおかしくても心配しなくても構いません。
	      それについては、後で修正します。</para>
	</sect4>
      </sect3>

      <sect3 id="printing-printcap">
	<title>スプーラに許可を与える:
	  <filename>/etc/printcap</filename> ファイル</title>

	<para>ここまでで、プリンタはコンピュータに接続され、(必要なら)
	  プリンタと通信できるようにカーネルを変更し、
	  簡単なデータをプリンタに送信することができているはずです。
	  これで、<application>LPD</application> にプリンタへのアクセスを
	  制御させる設定をおこなう準備が整いました。</para>

	<para><application>LPD</application> の設定は
	  <filename>/etc/printcap</filename> を編集することでおこないます。
	  <application>LPD</application> スプーリングシステムは
	  スプーラが使われる毎にこのファイルを参照します。
	  そのため、ファイルを更新するとすぐにその変更が反映されます。</para>

        <indexterm>
          <primary>プリンタ</primary>
          <secondary>ケイパビリティ</secondary>
        </indexterm>
	<para>&man.printcap.5; ファイルの書式は簡単です。
	  <filename>/etc/printcap</filename>
	  の編集はお好みのテキストエディタをお
	  使いください。このファイルの書式は、
	  <filename>/usr/share/misc/termcap</filename> や
	  <filename>/etc/remote</filename>
	  といった他のケイパビリティファイルと一致しています。
	  この書式
	  についての詳細な情報については
	  &man.cgetent.3; をご覧ください。</para>

	<para>スプーラの単純な設定法は、
	  次のステップでおこないます。</para>

	<procedure>
	  <step>
	    <para>プリンタに名前 (と簡単な別名 2 〜 3 個) を付け、それを
	      <filename>/etc/printcap</filename> ファイルに記述します。
	      これについては、「<link linkend="printing-naming">
		プリンタに名前を付ける</link>」
	      を参照してください。</para>
	  </step>

          <indexterm><primary>ヘッダページ</primary></indexterm>
	  <step>
	    <para><literal>sh</literal> の項目を追加することで、
	      ヘッダページの出力を禁止します (デフォルトは許可)。
	      これについては、「<link
		linkend="printing-no-header-pages">
		ヘッダページの印字を禁止する</link>」
	      を参照してください。</para>
	  </step>

	  <step>
	    <para>スプール用のディレクトリを作成し、その位置を
	      <literal>sd</literal> 項目で指定します。これについては、
	      「<link linkend="printing-spooldir">
		スプーリングディレクトリの作成</link>」
	      を参照してください。</para>
	  </step>

	  <step>
	    <para>プリンタを使用するために <filename class="directory">/dev</filename>
	      エントリを設定し、<filename>/etc/printcap</filename> の
	      <literal>lp</literal> 項目でそのエントリを指定します。
	      これについては、「<link linkend="printing-device">
		プリンタデバイスの特定</link>」 を参照してください。
	      プリンタをシリアルポートに接続した場合は、
	      <literal>ms#</literal>
	      の項目を設定する必要があります。こちらについては、
	      「<link linkend="printing-commparam">
		スプーラのための通信パラメータの設定</link>」
	      を参照してください。</para>
	  </step>

	  <step>
	    <para>プレインテキスト用の入力フィルタのインストールをおこないます。
	    「<link linkend="printing-textfilter">テキストフィルタのインストール</link>」
	      を参照してください。</para>
	  </step>

	  <step>
	    <para>&man.lpr.1;
	      コマンドで何かを印字することで設定のテストをおこないます。
	    <link linkend="printing-trying">印字してみよう</link> と
	    <link linkend="printing-troubleshooting">トラブルシューティング</link>
	    を参照してください。</para>
	  </step>
	</procedure>

	<note>
	  <para>&postscript; プリンタのような、
	    プリンタ言語を使用しているプリンタには、
	    プレインテキストを直接印字させることができません。
	    上にアウトラインを示し、
	    以下の節で説明する簡単な設定方法の説明では、
	    そのようなプリンタを設置している場合は、
	    プリンタが認識できるファイルだけを印字の対象としているという
	    仮定をしています。</para>
	</note>

	<para>多くの場合、
	  利用者はシステムに設置されているプリンタすべてで
	  プレインテキストが印字できることを期待しています。
	  印字作業をおこなうために <application>LPD</application>
	  のインタフェースを利用するプログラムでも、
	  通常、そのような仮定を置きます。
	  プリンタ言語を使用するプリンタを設置しており、
	  そのプリンタ言語で記述されたジョブと、
	  <emphasis>これに加えて</emphasis>、
	  プレインテキストのジョブも印字できるようにしたいならば、
	  上で示した簡単な設定方法に加えて、
	  さらなる設定をおこなうことを強くお勧めします。すなわち、
	  自動的にプレインテキストから &postscript; (もしくは、
	  他のプリンタ言語)
	  に変換するプログラムをインストールしてください。「<link
	    linkend="printing-advanced-if-conversion">
	    プレインテキストのジョブを &postscript;
	    プリンタで印字する</link>」
	  で、それをどのようにおこなえばよいのかが説明されています。</para>

	<note>
	  <title>訳注</title>
	  <para>
	    日本語を印字したい場合は、プリンタ言語を使用し
	    ていない「日本語プリンタ」についても、
	    プリンタ固有のエスケープシーケンスを送る必要があります。
	    また、漢字コードをプリン
	    タが設定しているものに変換したりする必要があり、
	    各プリンタ毎に、日本語用のフィルタが必要になります。</para>
	</note>

	<sect4 id="printing-naming">
	  <title>プリンタに名前を付ける</title>

	  <para>最初の (簡単な) ステップで、プリンタの名前を考えます。
	    プリンタには別名をいくつか付けることもできるので、
	    機能的な名前
	    でも風変わりな名前でもどちらを選んでもまったく
	    問題はありません。</para>

	  <para>少なくとも1つのプリンタには、
	    <filename>/etc/printcap</filename> の中で、
	    <literal>lp</literal> という別名を持たせるべきでしょう。
	    この名前はデフォルトのプリンタ名になっています。
	    ユーザが環境変数 <envar>PRINTER</envar> を設定しておらず、
	    かつ、<application>LPD</application> コマンドのコマンドラインで
	    プリンタの名前が指定されていない場合、<literal>lp</literal>
	    がデフォルトのプリンタ名となり、
	    そのプリンタに出力されます。</para>

	  <para>それから、これは共通の慣習ですが、
	    プリンタの最後の別名には、
	    メーカーやモデル名を含むプリンタの完全な名称をつけることに
	    なっています。</para>

	  <para>名前と別名のいくつかを決めたら、
	    <filename>/etc/printcap</filename> ファイルに設定します。
	    プリンタ名は一番左のカラムから書き始めます。
	    別名はそれぞれ縦棒によって区切られ、
	    最後の別名の後ろにコロンを置きます。</para>

	  <para>次の例では、2 台のプリンタ (Diablo 630 ラインプリンタと
	    Panasonic KX-P4455 &postscript; レーザライタプリンタ) が定義
	    されている <filename>/etc/printcap</filename>
	    のスケルトンを記しています。</para>

	  <programlisting>#
#  /etc/printcap for host rose
#
rattan|line|diablo|lp|Diablo 630 Line Printer:

bamboo|ps|PS|S|panasonic|Panasonic KX-P4455 PostScript v51.4:</programlisting>

	  <para>この例では、最初のプリンタに <literal>rattan</literal>
	    という名前と別名として、<literal>line</literal>、
	    <literal>diablo</literal>、<literal>lp</literal> そして
	    <literal>Diablo 630 Line Printer</literal>
	    が付けられています。別名とし て <literal>lp</literal>
	    があるので、このプリンタはデフォルトのプリンタとなっ
	    ています。2 番目は <literal>bamboo</literal> と名付けられ、
	    別名として、<literal>ps</literal> と
	    <literal>PS</literal>、<literal>S</literal>、
	    <literal>panasonic</literal>、<literal>Panasonic KX-P4455
	      PostScript v51.4</literal> が付けられています。</para>
	</sect4>

	<sect4 id="printing-no-header-pages">
	  <title>ヘッダページの印字を禁止する</title>
          <indexterm>
            <primary>印刷</primary>
            <secondary>ヘッダページ</secondary>
          </indexterm>

	  <para><application>LPD</application> スプーリングシステムでは、
	    デフォルトでジョブ毎に
	    <emphasis>ヘッダページ</emphasis>を印字します。
	    ヘッダページにはジョブを要求したユーザ名、
	    ジョブが送られたホスト名、そして、ジョブの名前が素晴
	    らしい大きな文字で印字されています。
	    残念なことに、この余分なテキストすべてが、
	    簡単なプリンタ設定法のデバッグの際に紛れ込んできてしまいます。
	    このため、ヘッダページの出力を禁止しておきます。</para>

	  <para>ヘッダページの出力を禁止するには、
	    <filename>/etc/printcap</filename>
	    にあるプリンタのエントリに <literal>sh</literal>
	    の項目を追加します。次に、<literal>sh</literal> を加えた
	    <filename>/etc/printcap</filename> の例を示します。</para>

	  <programlisting>#
#  /etc/printcap for host rose - no header pages anywhere
#
rattan|line|diablo|lp|Diablo 630 Line Printer:\
        :sh:

bamboo|ps|PS|S|panasonic|Panasonic KX-P4455 PostScript v51.4:\
        :sh:</programlisting>

	  <para>この書式を正しく使うための注意をしておきます。
	    最初の行は左端のカラムから始めます。
	    それに続く行は字下げします。最後の行以外のすべての行は、
	    行末にバックスラッシュを記述します。</para>
	</sect4>

	<sect4 id="printing-spooldir">
	  <title>スプーリングディレクトリの作成</title>
          <indexterm><primary>プリンタスプール</primary></indexterm>
          <indexterm><primary>プリントジョブ</primary></indexterm>

	  <para>スプーラの簡単な設定の次のステップでは、
	    <emphasis>スプーリングディレクトリ</emphasis>を作成します。
	    プリンタに送られるジョブは、
	    その印字が終了するまでこのディレクトリに置かれます。また、
	    他のたくさんのスプーラもこのディレクトリにファイルを置きます。</para>

	  <para>様々な事情によりスプーリングディレクトリは、通常、慣例
	    として <filename class="directory">/var/spool</filename> の下に置きます。
	    また、スプーリングディレクトリの内容は
	    バックアップをする必要はありません。
	    &man.mkdir.1; によってディレクトリを
	    作るだけでスプーリングディレクトリの復旧は完了します。
	  </para>

	  <para>スプーリングディレクトリの名前は、これも慣例ですが、
	    次のようにプリンタの名前と同じにします。</para>

	  <screen>&prompt.root; <userinput><command>mkdir <filename class="directory">/var/spool/<replaceable>printer-name</replaceable></filename></command></userinput></screen>

	  <para>しかしながら、ネットワーク上に使用可能なプリンタがたく
	    さんあるならば、<application>LPD</application>
	    で印字するための専用のディレクトリにスプーリングディレクトリを置きたくなるかもしれません。
	    例に出てきたプリンタ <literal>rattan</literal> と
	    <literal>bamboo</literal> について、この方式を採用すると、
	    次のようになります。</para>

	  <screen>&prompt.root; <userinput><command>mkdir <filename class="directory">/var/spool/lpd</filename></command></userinput>
&prompt.root; <userinput><command>mkdir <filename class="directory">/var/spool/lpd/rattan</filename></command></userinput>
&prompt.root; <userinput><command>mkdir <filename class="directory">/var/spool/lpd/bamboo</filename></command></userinput></screen>

	  <note>
	    <para>各ユーザが印字するジョブのプライバシを守りた
	      いと考えているならば、スプーリングディレクトリを保護し
	      て、これを誰からでもアクセスできないようにしたいと思う
	      かもしれません。スプーリングディレクトリは、
	      <username>daemon</username> ユーザと
	      <groupname>daemon</groupname> グループに所有され、
	      読み込み、書き込み、検
	      索可能であり、他からはアクセスできないようにするべきで
	      す。例題のプリンタに対して、次のようにすることにしましょ
	      う。</para>

	    <screen>&prompt.root; <userinput><command>chown daemon:daemon <filename class="directory">/var/spool/lpd/rattan</filename></command></userinput>
&prompt.root; <userinput><command>chown daemon:daemon <filename class="directory">/var/spool/lpd/bamboo</filename></command></userinput>
&prompt.root; <userinput><command>chmod 770 <filename class="directory">/var/spool/lpd/rattan</filename></command></userinput>
&prompt.root; <userinput><command>chmod 770 <filename class="directory">/var/spool/lpd/bamboo</filename></command></userinput></screen>
	  </note>

	  <para>最後に、<filename>/etc/printcap</filename> ファイルで、
	    これらのディレクトリの位置を
	    <application>LPD</application> に伝える必要があります。
	    スプーリングディレクトリのパス名は <literal>sd</literal>
	    項目で指定します。</para>

	  <programlisting>#
#  /etc/printcap for host rose - added spooling directories
#
rattan|line|diablo|lp|Diablo 630 Line Printer:\
        :sh:sd=<filename class="directory">/var/spool/lpd/rattan</filename>:

bamboo|ps|PS|S|panasonic|Panasonic KX-P4455 PostScript v51.4:\
        :sh:sd=<filename class="directory">/var/spool/lpd/bamboo</filename>:</programlisting>

	  <para>プリンタ名が最初のカラムから始まっており、
	    そのプリンタに関して記述される他の項目は字下げされていること、
	    各行がバックスラッシュで終わっていることに注意してください。</para>

	  <para><literal>sd</literal>
	    によりスプーリングディレクトリが指定されていない場合、
	    スプーリングシステムは
	    <filename class="directory">/var/spool/lpd</filename>
	    をデフォルト値として使用します。</para>
	</sect4>

	<sect4 id="printing-device">
	  <title>プリンタデバイスの特定</title>

	  <para><link linkend="printing-hardware">プリンタ機器の設定</link>
	    の節では、&os; でプリンタとの通信に使用されるポートおよび
	    <filename class="directory">/dev</filename>
	    ディレクトリ内のエントリを特定します。
	    そして、<application>LPD</application> にその情報を伝えます。
	    印字するジョブを受け取ると、スプーリングシステムは、
	    (プリンタにデータを渡す義務がある)
	    フィルタプログラムに代わって指定されたデバイスをオープンします。</para>

	  <para><filename>/etc/printcap</filename> ファイルで
	    <literal>lp</literal> 項目を使って
	    <filename class="directory">/dev</filename> エントリを記入します。</para>

	  <para>ここでの例では、<literal>rattan</literal>
	    は 1 番目のパラレルポートに、<literal>bamboo</literal>
	    は 6 番目のシリアルポートに接続されていることにしましょう。
	    このとき、<filename>/etc/printcap</filename> には
	    次のようになります。</para>

	  <programlisting>#
#  /etc/printcap for host rose - identified what devices to use
#
rattan|line|diablo|lp|Diablo 630 Line Printer:\
        :sh:sd=<filename class="directory">/var/spool/lpd/rattan</filename>:\
        :lp=<filename class="devicefile">/dev/lpt0</filename>:

bamboo|ps|PS|S|panasonic|Panasonic KX-P4455 PostScript v51.4:\
        :sh:sd=<filename class="directory">/var/spool/lpd/bamboo</filename>:\
        :lp=<filename class="devicefile">/dev/ttyu5</filename>:</programlisting>

	  <para><filename>/etc/printcap</filename> でプリンタの
	    <literal>lp</literal> 項目が指定されていない場合は、
	    <application>LPD</application>
	    はデフォルトとして <filename class="devicefile">/dev/lp</filename>
	    を使用します。<filename class="devicefile">/dev/lp</filename> は、現在の
	    &os; には存在していません。</para>

	  <para>設置したプリンタがパラレルポートに
	    接続されている場合は、
	    「<link linkend="printing-textfilter">
	      テキストフィルタのインストール</link>」
	    まで読み飛ばしてください。
	    そうでない場合は、次節の説明に続いてください。</para>
	</sect4>

	<sect4 id="printing-commparam">
	  <title>スプーラのための通信パラメータの設定</title>
          <indexterm>
            <primary>プリンタ</primary>
            <secondary>シリアル</secondary>
          </indexterm>

	  <para>シリアルポートにプリンタを接続した場合、
	    <application>LPD</application>
	    は、プリンタにデータを送信するフィルタプログラムに代わり、
	    通信速度やパリティ、
	    その他のシリアル通信パラメータを設定することができます。
	    このことによる利点は、</para>

	  <itemizedlist>
	    <listitem>
	      <para><filename>/etc/printcap</filename>
		を編集するだけで、
		様々な通信パラメータを試してみることができます。
		フィルタプログラムを再コンパイルする必要はありません。</para>
	    </listitem>

	    <listitem>
	      <para>スプーリングシステムで、
		シリアル通信の設定が異なっているかもしれない複数のプリンタに
		同じフィルタプログラムを使うことが可能になります。</para>
	    </listitem>
	  </itemizedlist>

	  <para>次の <filename>/etc/printcap</filename> の項目で、
	    <literal>lp</literal> で指定された
	    デバイスのシリアル通信パラメータを制御できます。</para>

	  <variablelist>
	    <varlistentry><term><literal>
		  br#<replaceable>bps-rate</replaceable></literal></term>
	      <listitem>
		<para>デバイスの通信速度を
		  <replaceable>bps-rate</replaceable> に設定します。
		  ここで、<replaceable>bps-rate</replaceable> は 50,
		  75, 110, 134, 150, 200, 300, 600, 1200, 1800, 2400,
		  4800, 9600, 19200, 38400, 57600, 115200 [bit/秒]
		  のいずれかです。</para>
	      </listitem>
	    </varlistentry>

	    <varlistentry>
	      <term><literal>ms#<replaceable>stty-mode</replaceable></literal></term>
	      <listitem>
		<para>デバイスをオープンした後にターミナルデバイスのオプションを設定します。
		  利用できるオプションについては &man.stty.1; を参照してください。</para>
	      </listitem>
	    </varlistentry>
	  </variablelist>

	  <para><literal>lp</literal> で指定されたデバイスをオープンするとき、
	    <application>LPD</application> は <literal>ms#</literal>
	    で指定されたデバイスの特性を設定します。
	    特に関係があるのは、<literal>parenb</literal>,
	    <literal>parodd</literal>, <literal>cs5</literal>,
	    <literal>cs6</literal>, <literal>cs7</literal>,
	    <literal>cs8</literal>, <literal>cstopb</literal>,
	    <literal>crtscts</literal>, <literal>ixon</literal>
	    モードです。
	    これらは &man.stty.1; のマニュアルページで説明されています。</para>

	  <para>例題のプリンタで6番目のシリアルポートに接続された
	    プリンタの設定を追加してみましょう。
	    通信速度は 38400bps に設定します。
	    モードとして、<literal>-parenb</literal> でパリティ無し、
	    <literal>cs8</literal> で 8 ビットキャラクタ、
	    <literal>clocal</literal> でモデム制御無し、
	    そして <literal>crtscts</literal>
	    でハードウェアフロー制御を設定します。</para>

	  <programlisting>bamboo|ps|PS|S|panasonic|Panasonic KX-P4455 PostScript v51.4:\
        :sh:sd=<filename class="directory">/var/spool/lpd/bamboo</filename>:\
        :lp=<filename class="devicefile">/dev/ttyu5</filename>:ms#-parenb cs8 clocal crtscts:</programlisting>
	</sect4>

	<sect4 id="printing-textfilter">
	  <title>テキストフィルタのインストール</title>
	  <indexterm>
	    <primary>印刷</primary>
	    <secondary>フィルタ</secondary>
	  </indexterm>

	  <para>ここまでで、
	    プリンタにジョブを送るために使うテキストフィルタを
	    <application>LPD</application> に設定する準備が整いました。
	    <emphasis>テキストフィルタ</emphasis>とは、
	    <emphasis>入力フィルタ</emphasis>としても知られていますが、
	    印字するジョブがあるときに
	    <application>LPD</application> が起動するプログラムです。
	    <application>LPD</application>
	    がプリンタのためにテキストフィルタを起動するとき、
	    <application>LPD</application>
	    はフィルタの標準入力からプリントするジョブを入力し、
	    フィルタの標準出力に項目 <literal>lp</literal>
	    で指定されたプリンタデバイスを接続します。フィルタは、
	    標準入力からジョブを読み込み、
	    プリンタのための必要な変換をおこなった後、
	    その結果を標準出力に出力する、
	    これにより印字がなされることを期待されています。
	    テキストフィルタについての更に詳しい情報については、「<link
	      linkend="printing-advanced-filters">
	      フィルタはどのように機能しているか</link>」
	    をご覧ください。</para>

	  <para>ここでの簡単なプリンタ設定では、
	    プリンタにジョブを送るため、<command>/bin/cat</command>
	    を実行するだけの簡単なシェルスクリプトで間に合います。
	    &os; に標準で付属している <command>lpf</command>
	    というフィルタでは、バックスペース文字を使った
	    下線引きの動作をおこなう文字ストリームをうまく扱うことができない
	    プリンタのための代替処理をおこなってくれます。
	    もちろん、
	    他のどんなフィルタプログラムを使っても構いません。
	    フィルタ <filename>lpf</filename> については、「<link
	      linkend="printing-advanced-lpf">テキストフィルタ
	      lpf</link>」で詳しく説明します。</para>

	  <para>最初に、簡単なテキストフィルタであるシェルスクリプト
	    <filename>/usr/local/libexec/if-simple</filename>
	    を作ってみましょう。
	    次のテキストをお好みのテキストエディタでファイルに
	    書き込んでください。</para>

	  <programlisting>#!/bin/sh
#
# if-simple - Simple text input filter for lpd
# Installed in /usr/local/libexec/if-simple
#
# Simply copies stdin to stdout.  Ignores all filter arguments.

/bin/cat &amp;&amp; exit 0
exit 2</programlisting>

	  <para>そして、このファイルを実行可能にします。</para>

	  <screen>&prompt.root; <userinput><command>chmod 555 <filename>/usr/local/libexec/if-simple</filename></command></userinput></screen>

	  <para>LPD
	    にこのテキストフィルタを使うことを設定するためには、
	    <filename>/etc/printcap</filename> に
	    <literal>if</literal> 項目を使って指定します。これまでの
	    <filename>/etc/printcap</filename> の例のプリンタ 2 台に、
	    このフィルタを加えてみましょう。</para>

	  <programlisting>#
#  /etc/printcap for host rose - added text filter
#
rattan|line|diablo|lp|Diablo 630 Line Printer:\
        :sh:sd=<filename class="directory">/var/spool/lpd/rattan</filename>:\ :lp=<filename class="devicefile">/dev/lpt0</filename>:\
        :if=<filename>/usr/local/libexec/if-simple</filename>:

bamboo|ps|PS|S|panasonic|Panasonic KX-P4455 PostScript v51.4:\
        :sh:sd=<filename class="directory">/var/spool/lpd/bamboo</filename>:\
        :lp=<filename class="devicefile">/dev/ttyu5</filename>:ms#-parenb cs8 clocal crtscts:\
        :if=<filename>/usr/local/libexec/if-simple</filename>:</programlisting>

	  <note>
	    <para><filename>if-simple</filename>
	      スクリプトのコピーが <filename
	      class="directory">/usr/share/examples/printing</filename>
	      ディレクトリにあります。</para>
	  </note>
	</sect4>

	<sect4>
	  <title><application>LPD</application> の起動</title>

	  <para>&man.lpd.8; は <literal>lpd_enable</literal> 変数に従って
	    <filename>/etc/rc</filename> から実行されます。この変数の
	    デフォルト値は <literal>NO</literal> です。まだ
	    そうしていなかったならば</para>

	  <programlisting>lpd_enable="YES"</programlisting>

	  <para>の行を <filename>/etc/rc.conf</filename> に追加して
	    計算機を再起動するか、そのまま &man.lpd.8; を
	    起動してください。</para>

	  <screen>&prompt.root; <userinput><command>lpd</command></userinput></screen>
	</sect4>

	<sect4 id="printing-trying">
	  <title>印字してみよう</title>

	  <para>簡単な <application>LPD</application>
	    設定も終わりにたどり着きました。
	    残念ながら、設定はこれでおしまいというわけではありません。
	    なぜなら、さらに、設定をテストし、
	    すべての問題点を解決しなくてはならないからです。
	    設定をテストするために、
	    何かを印字してみましょう。
	    <application>LPD</application> システムで印字をするためには、
	    &man.lpr.1; コマンドを使います。このコマンドは、
	    印字するためのジョブを投入する働きをします。</para>

	  <para>&man.lpr.1; コマンドを
	    「<link linkend="printing-testing">
	      プリンタとの通信状況を調べる</link>」で紹介した、
	    あるテスト用のテキストを生成してくれる
	    &man.lptest.1; プログラムと一緒に使うこともできます。</para>

	  <para><emphasis>簡単な <application>LPD</application>
	      設定のテスト</emphasis></para>

	  <para>次のように入力してください。</para>

	  <screen>&prompt.root; <userinput><command>lptest 20 5 | lpr <option>-P</option><replaceable>printer-name</replaceable></command></userinput></screen>

	  <para>ここで、<replaceable>printer-name</replaceable>
	    は <filename>/etc/printcap</filename>
	    で指定したプリンタ名 (もしくはその別名) です。デフォルト
	    のプリンタを使用する場合は、
	    <option>-P</option> 引数を付けないで
	    &man.lpr.1; を打ち込んでください。もう一度述べますが、
	    &postscript; を期待しているプリンタをテストするならば、
	    &man.lptest.1; を使う代わりに &postscript; で書かれた
	    プログラムをプリンタに送ってください。
	    プログラムを送るためには、プログラムをファイルに格納して、
	    <command>lpr <replaceable>file</replaceable></command>
	    と打ち込みます。</para>

	  <para>&postscript; プリンタの場合、
	    送信したプログラムによる結果が得られるでしょう。
	    &man.lptest.1; を使った場合は、
	    以下のような結果が見られるでしょう。</para>

	  <screen>!"#$%&amp;'()*+,-./01234
"#$%&amp;'()*+,-./012345
#$%&amp;'()*+,-./0123456
$%&amp;'()*+,-./01234567
%&amp;'()*+,-./012345678</screen>

	  <para>更にプリンタをテストしたい場合は、
	    (言語ベースのプリンタのための) もっと大きなプログラムを送信するか、
	    引数を変えて
	    &man.lptest.1; を実行します。たとえば、<command>lptest
	      80 60</command> で、それぞれ 80 文字の行を 60
	    行生成します。</para>

	  <para>プリンタがうまく動かなかった場合は、次の節、「<link
	      linkend="printing-troubleshooting">
	      トラブルシューティング</link>」をご覧ください。</para>
	</sect4>
      </sect3>
    </sect2>
  </sect1>

  <sect1 id="printing-advanced">
    <title>プリンタ設定上級編</title>

    <warning>
      <para>&os; 8.0 から、シリアルポートのデバイスノード名が、
	<filename>/dev/ttyu<replaceable>N</replaceable></filename> から
	<filename>/dev/ttyd<replaceable>N</replaceable></filename>
	へと変更になりました。
	&os;&nbsp;7.X ユーザは、
	この変更を理解した上で以下の文書を読んでください。</para>
    </warning>

    <para>この節では、特殊な形式のファイルを印字するためのフィルタ、
      ヘッダページ、ネットワーク越しのプリンタへの印字、そして、
      プリンタ使用の制限や課金について説明しています。</para>

    <sect2 id="printing-advanced-filter-intro">
      <title>フィルタ</title>
      <indexterm>
	<primary>印刷</primary>
	<secondary>フィルタ</secondary>
      </indexterm>

      <para><application>LPD</application>
	は、ネットワークプロトコル、キュー、アクセス制御などの
	印刷にかかわるさまざまな点を扱いますが、
	<emphasis>実際の</emphasis>作業のほとんどは
	<emphasis>フィルタ</emphasis>によっておこなわれています。
	フィルタは、プリンタと通信し、
	プリンタのデバイス依存性や特殊な要求を扱うプログラムです。
	簡単なプリンタ設定では、
	プレインテキストのためのフィルタをインストールしました。
	このプレインテキストフィルタは、
	ほとんどのプリンタで機能する極めて単純なものでした
	(「<link linkend="printing-textfilter">
	  テキストフィルタのインストール</link>」を参照)。</para>

      <para>しかしながら、形式変換やプリンタ課金、特定のプリンタの癖、
	など をうまく利用するためには、
	フィルタがどのように機能するかという
	ことを理解しておくべきです。これらの側面を扱うことは、
	最終的には、フィルタの責任であるからです。
	そして、これは悪い情報ですが、ほとんどの場合において、
	<emphasis>あなた自身</emphasis>が
	フィルタを供給する必要があるということです。また都合のよいことには、
	たくさんのフィルタが一般的に利用できるということです。
	もしフィルタがなかったとしても、
	普通はフィルタを作るのは簡単です。</para>

      <para>&os; にも、プレインテキストを印字させることができる
	<filename>/usr/libexec/lpr/lpf</filename>
	というフィルタが 1 つ付いています
	(このフィルタはファイルに含まれるバックスペースやタブを扱います。
	また、課金をすることもできますが、
	できることはこれだけしかありません)。
	いくつかのフィルタとフィルタの構成要素は
        &os; Ports Collection にもあります。</para>

      <para>この節で述べることは次の通りです。</para>

      <itemizedlist>
	<listitem>
	  <para>「<link linkend="printing-advanced-filters">
	      フィルタはどのように機能しているか</link>」では、
	    印字の過程におけるフィルタの役割を概説します。
	    この節を読むことで、<application>LPD</application>
	    がフィルタを使うときに、<quote>見えないところで</quote>
	    何が起こっているかが理解できるでしょう。このことを知っておくと、
	    プリンタそれぞれに様々なフィルタをインストールしたときに
	    遭遇するかもしれない問題を予期したり、
	    デバッグするときに役立つでしょう。</para>
	</listitem>

	<listitem>
	  <para><application>LPD</application>
	    は、すべてのプリンタがデフォルトでプレインテキストを印字できることを期待しています。
	    これは、プレインテキストを直接印字できない &postscript;
	    (または他の言語対応の) プリンタで問題になります。「<link
	      linkend="printing-advanced-if-conversion">
	      プレインテキストのジョブを &postscript;
	      プリンタで印字する</link>」 で、
	    この問題を克服する方法について述べます。
            &postscript; プリンタをお持ちの方は、
            この節をお読みになることをおすすめします。</para>
	</listitem>

	<listitem>
	  <para>&postscript;
	    は様々なプログラムのための有名な出力形式です。
	    &postscript; のコードを直接書いてしまう人すらいます。
	    残念ながら、&postscript; プリンタは高価です。「<link
	      linkend="printing-advanced-ps">非 &postscript; プリンタによる
	      &postscript; のシミュレート</link>」節では、&postscript;
	    データを<emphasis>非 &postscript;
	    プリンタ</emphasis>に受けつけさせ、印字させるために、
	    どのようにしてプリンタ用のテキストフィルタをさらに変更すればよいのか、
	    ということについて説明しています。&postscript;
	    プリンタを持っていない方は、
	    この節をお読みになることをおすすめします。</para>
	</listitem>

	<listitem>
	  <para>「<link linkend="printing-advanced-convfilters">
	      変換フィルタ</link>」では、
	      図形や組版データといった特定のファイル形式を、
	      プリンタが理解できる形式へ変換する作業を自動的におこなわせる方法について述べます。
	      この節を読むと、troff のデータを印字するには <command>lpr
	      <option>-t</option></command>, または、&tex; DVI を印字するには
	    <command>lpr <option>-d</option></command>、
	    ラスタイメージデータを印字するには <command>lpr <option>-v</option></command>、
	    などといったようにユーザが入力することができるように
	    プリンタの設定をおこなうことができます。
	    この節もお読みになることをお薦めします。</para>
	</listitem>

	<listitem>
	  <para>「<link
	      linkend="printing-advanced-of">出力フィルタ</link>」
	    では、あまり使われない <application>LPD</application>
	    の機能のすべて、すなわち、
	    出力フィルタに関することが記述されています。ヘッダページ
	    (「<link linkend="printing-advanced-header-pages">
	      ヘッダページ</link>」参照) を印字させていない場合は、
	    多分、この節は飛ばしても構わないでしょう。</para>
	</listitem>

	<listitem>
	  <para>「<link
	      linkend="printing-advanced-lpf">テキストフィルタ
	      lpf</link>」では、<command>lpf</command>
	    についての説明が、ほぼ完全におこなわれています。これは
	    &os; に付属するラ インプリンタ (または、
	    ラインプリンタのように動作するレーザプリンタ) のための、
	    単純なテキストフィルタです。
	    プレインテキストを印字したことに対して課金をおこなう方法が
	    至急必要な場合、もしくは、バックスペース文字を印字しようと
	    すると煙を発するプリンタを持っている場合は、絶対に
	    <command>lpf</command> を検討するべきです。</para>
	</listitem>
      </itemizedlist>

      <note>
	<para>以下で述べられているさまざまなスクリプトは、<filename
	  class="directory">/usr/share/examples/printing</filename>
	  ディレクトリにあります。</para>
      </note>

      <sect3 id="printing-advanced-filters">
	<title>フィルタはどのように機能しているか</title>

	<para>既に言及したように、フィルタとは、プリンタにデータを送る際に、
	  デバイスに依存した部分を取り扱うために <application>LPD</application>
	  によって起動される実行プログラムです。</para>

	<para><application>LPD</application>
	  がジョブ中のファイルを印字しようとするとき、
	  <application>LPD</application>
	  はフィルタプログラムを起動します。このとき、
	  フィルタの標準入力を印字するファイルに、
	  標準出力をプリンタに、そして、標準エラー出力を
	  エラーログファイル (<filename>/etc/printcap</filename> 内の
	  <literal>lf</literal> 項目で指定されたファイル、または、
	  指定されていない場合は、デフォルトとして
	  <filename class="devicefile">/dev/console</filename>)
	  にセットします。</para>

        <indexterm>
          <primary><command>troff</command></primary>
        </indexterm>
	<para><application>LPD</application>
	  が起動するフィルタと、その引数が何であるかは、
	  <filename>/etc/printcap</filename>
	  ファイルの内容と、ジョブの起動時にユーザが指定した
	  &man.lpr.1; コマンドの引数に依存しています。
	  たとえば、ユーザが <command>lpr <option>-t</option></command> と入力した場合は、
	  <application>LPD</application> は出力先のプリンタ用の
	  <literal>tf</literal> 項目で指定されている troff
	  用のフィルタを起動させるでしょう。
	  ユーザがプレインテキストの印字を指示したときは、
	  <literal>if</literal> で指定されたフィルタが起動されるでしょう
	  (このことはほとんどの場合にあてはまります。
	  詳細については、「<link linkend="printing-advanced-of">
	    出力フィルタ</link>」をご覧ください)。</para>

	<para><filename>/etc/printcap</filename>
	  で指定可能なフィルタは次の3種類があります。</para>

	<itemizedlist>
	  <listitem>
	    <para><emphasis>テキストフィルタ</emphasis>
	      (<application>LPD</application> のドキュメントでは紛らわしいことに
	      <emphasis>入力フィルタ</emphasis>と呼んでいますが)
	      は一般のテキストの印字を扱います。これはデフォルトのフィルタと
	      考えてください。<application>LPD</application>
	      では、すべてのプリンタに対して、
	      デフォルトでプレインテキストが印字できることを期待しています。
	      さらに、バックスペースやタブを正しく扱い、また、
	      他の特殊な文字が入力されてもプリンタに混乱を来さないように
	      するのはテキストフィルタの仕事であると考えています。

	      プリンタの使用に対して課金をしなくてはならない環境にあ
	      るときは、テキストフィルタが印字したページ数を数える作
	      業もしなくてはなりません。この作業は、通常、印字した行
	      数を数え、これをプリンタが 1 ページ当たりに印字できる行
	      数と比較することでおこなわれます。

	      テキストフィルタは、次のような引数を付けて起動されます。</para>

	      <cmdsynopsis>
		<command>filter-name</command>
		<arg>-c</arg>
		<arg choice="plain">-w <replaceable>width</replaceable></arg>
		<arg choice="plain">-l <replaceable>length</replaceable></arg>
		<arg choice="plain">-i <replaceable>indent</replaceable></arg>
		<arg choice="plain">-n <replaceable>login</replaceable></arg>
		<arg choice="plain">-h <replaceable>host</replaceable></arg>
		<arg choice="plain"><replaceable>acct-file</replaceable></arg>
	      </cmdsynopsis>

	      <para>ここで、</para>

	      <variablelist>
		<varlistentry><term><option>-c</option></term>
		  <listitem>
		    <para><command>lpr <option>-l</option></command>
		      によってジョブが入力されたときに与えられます。</para>
		  </listitem>
		</varlistentry>

		<varlistentry><term><replaceable>width</replaceable></term>
		  <listitem>
		    <para><filename>/etc/printcap</filename>
		      で指定された <literal>pw</literal> (page width)
		      項目の値が与えられます。デフォルトは、
		      132 です。</para>
		  </listitem>
		</varlistentry>

		<varlistentry><term><replaceable>length</replaceable></term>
		  <listitem>
		    <para><literal>pl</literal> (page length)
		      項目で指定された値が与えられます。
		      デフォルトは 66 です。</para>
		  </listitem>
		</varlistentry>

		<varlistentry><term><replaceable>indent</replaceable></term>
		  <listitem>
		    <para><command>lpr <option>-i</option></command>
		      によって与えられた字下げの量で、
		      デフォルトは 0 です。</para>
		  </listitem>
		</varlistentry>

		<varlistentry><term><replaceable>login</replaceable></term>
		  <listitem>
		    <para>ファイルを印字したユーザのアカウント名が
		      与えられます。</para>
		  </listitem>
		</varlistentry>

		<varlistentry><term><replaceable>host</replaceable></term>
		  <listitem>
		    <para>ジョブが入力されたホスト名が
		      与えられます。</para>
		  </listitem>
		</varlistentry>

		<varlistentry><term><replaceable>acct-file</replaceable></term>
		  <listitem>
		    <para><literal>af</literal>
		      項目で指定されている課金データファイル
		      の名前が与えられます。</para>
		  </listitem>
		</varlistentry>
	      </variablelist>
	  </listitem>

          <indexterm>
            <primary>印刷</primary>
            <secondary>フィルタ</secondary>
          </indexterm>
	  <listitem>
	    <para><emphasis>変換フィルタ</emphasis>は、
	      特定のファイル形式をプリンタ
	      が紙に印字できるようなものに変換します。たとえば、
	      プリンタで ditroff 組版データを直接印字することはできません。
	      しかし、ditroff データをプリンタが消化し、
	      印字することができる形式へ変換するために、ditroff
	      ファイル用フィルタをインストールすることができます。
	      「<link linkend="printing-advanced-convfilters">
		変換フィルタ</link>」
	      で、これらに関するすべてについて説明します。
	      プリンタの課金をする必要がある場合は、
	      変換フィルタでも印字ページを数える作業が必要となります。

	      変換フィルタは次の引数をとって起動されます。</para>

	      <cmdsynopsis>
		<command>filter-name</command>
		<arg choice="plain">-x <replaceable>pixel-width</replaceable></arg>
		<arg choice="plain">-y <replaceable>pixel-height</replaceable></arg>
		<arg choice="plain">-n <replaceable>login</replaceable></arg>
		<arg choice="plain">-h <replaceable>host</replaceable></arg>
		<arg choice="plain"><replaceable>acct-file</replaceable></arg>
	      </cmdsynopsis>

	    <para>ここで、<replaceable>pixel-width</replaceable> は、
	      <literal>px</literal> 項目で指定された値
	      (デフォルトは 0)、
	      <replaceable>pixel-height</replaceable> は、
	      <literal>py</literal> 項目で指定された値
	      (デフォルトは 0) です。</para>
	  </listitem>

	  <listitem>
	    <para><emphasis>出力フィルタ</emphasis>は、
	      テキストフィルタが指定されて
	      おらず、かつ、
	      ヘッダページの出力が許可されている場合にのみ使われます。
	      「<link linkend="printing-advanced-of">
		出力フィルタ</link>」で、これらのことについて説明します。
	      出力フィルタに対する引数は次の 2 つだけです。</para>

	      <cmdsynopsis>
		<command>filter-name</command>
		<arg choice="plain">-w <replaceable>width</replaceable></arg>
		<arg choice="plain">-l <replaceable>length</replaceable></arg>
	      </cmdsynopsis>

	    <para>ここで、<option>-w</option> と <option>-l</option> は、
	      テキストフィルタの場合と同じです。</para>
	  </listitem>
	</itemizedlist>

	<para>フィルタは、次に示す終了状態をもってプログラムを
	  <emphasis>exit</emphasis> するべきです。</para>

	<variablelist>
	  <varlistentry><term>exit 0</term>
	    <listitem>
	      <para>フィルタがファイルを正常に印字した場合。</para>
	    </listitem>
	  </varlistentry>

	  <varlistentry><term>exit 1</term>
	    <listitem>
	      <para>フィルタはファイルの印字に失敗したが、
		<application>LPD</application>
		に再度ファイルの印字を試みて欲しい場合。
		この終了状態で終了した場合、<application>LPD</application>
		はフィルタを再スタートします。</para>
	    </listitem>
	  </varlistentry>

	  <varlistentry><term>exit 2</term>
	    <listitem>
	      <para>フィルタはファイルの印字に失敗し、かつ、<application>LPD</application>
		に再出力を試みて欲しくない場合。この場合、<application>LPD</application>
		はそのファイルを放棄します。</para>
	    </listitem>
	  </varlistentry>
	</variablelist>

	<para>&os; に付属するテキストフィルタ
	  <filename>/usr/libexec/lpr/lpf</filename> は、FORM FEED
	  文字が送られたときやプリンタ使用に対する課金をどのようにするかを決定するために、
	  ページ幅やページ長の引数を利用します。また、
	  課金用のエントリを作成するため、ログイン名、ホスト名、
	  課金ファイル名の引数を利用します。</para>

	<para>もし、フィルタの購入を検討しているならば、<application>LPD</application>
	  と互換性があるかどうかを確認してください。もしそうならば、
	  上述の引数リストをサポートしていなければなりません。
	  一般向けの使用のためにフィルタを作成する計画をしている場合は、
	  同じ引数リストと終了コードをサポートしてください。</para>
      </sect3>

      <sect3 id="printing-advanced-if-conversion">
	<title>プレインテキストのジョブを &postscript; プリンタで印字する</title>
        <indexterm><primary>プリントジョブ</primary></indexterm>

	<para>コンピュータと &postscript; (または、他の言語に対応した)
	  プリンタをあなたしか使用しない場合は、プリンタにプレ
	  インテキストを絶対に送らない、そして、
	  プリンタにプレインテキストを送りたがっている
	  様々なプログラムの機能を決して使わないことにしてください。そうすれば、
	  この節に書かれたことに心を煩わせる必要はまったくなくなります。</para>

	<para>しかし、&postscript;
	  とプレインテキストの両方のジョブをプリンタへ送りたいと思っている場合は、
	  プリンタ設定についての要求が増えるでしょう。
	  両者をプリンタへ送信するためには、
	  到着したジョブがプレインテキストであるか
	  &postscript; であるかを検出するテキストフィルタが必要です。
	  &postscript; のジョブはすべて <literal>%!</literal>
	  で始まらなければならないことになっています
	  (他のプリンタ言語に関しては、
	  プリンタのドキュメントをご覧ください)。
	  ジョブの最初の 2 文字がこれならば、&postscript; であることが分かります。
	  したがって、
	  ジョブのそれ以降の部分をプリンタに直接送ることができます
	  (訳注: &postscript; では、<emphasis remap=tt>%</emphasis>
	  以降はコメントとして扱われるので、最初の <emphasis
	    remap=tt>%!</emphasis> の行を読み捨てても問題はない)。
	  最初の2文字が <emphasis remap=tt>%!</emphasis> でない場合は、
	  フィルタはテキストを &postscript; に変換し、
	  その結果を使って印字をおこないます。</para>

	<para>この作業をどうやってやればよいのでしょうか。</para>

        <indexterm>
          <primary>プリンタ</primary>
          <secondary>シリアル</secondary>
        </indexterm>
	<para>シリアルポートにプリンタを接続した場合は、
	  <command>lprps</command> をインストールすることをお勧めします。
	  <command>lprps</command> は &postscript; 用のフィルタで、
	  プリンタとの双方向通信をおこないます。
	  このフィルタでは、プリンタからの冗長な情報を得ることで、
	  プリンタの状況を示すファイルが更新されていきます。
	  したがって、ユーザや管理者は
	  (<errorname>トナー残量少</errorname>や
	  <errorname>紙詰まり</errorname>といった)
	  プリンタの状況を正確に知ることができます。しかし、
	  もっと重要なことは、<command>psif</command>
	  と呼ばれるプログラムが含まれているということです。
	  このプログラムは、
	  入力されたジョブがプレインテキストかどうかを検出し、
	  これを &postscript; に変換するために、<command>textps</command>
	  (<command>lprps</command> に付属する別のプログラム)
	  を呼び出します。そして、このジョブをプリンタに送るために、
	  <command>lprps</command> が使われます。</para>

	<para><command>lprps</command> は &os; Ports Collection
	  に含まれています (<link linkend="ports">Ports Collection</link>
          を参照してください)。
	  紙のサイズに合わせて
	  <filename role="package">print/lprps-a4</filename> または
	  <filename role="package">print/lprps-letter</filename> port
	  をインストールしてください。<command>lprps</command>
	  をインストールした後は、<command>lprps</command>
	  の一部である <command>psif</command>
	  プログラムのパス名を指定するだけです。Ports Collection から
	  <command>lprps</command> をインストールしたときは、
	  <filename>/etc/printcap</filename> の中のシリアル接続した
	  &postscript; プリンタのエントリに対して、次を使ってください。
	</para>

        <programlisting>:if=<filename>/usr/local/libexec/psif</filename>:</programlisting>

	<para><application>LPD</application>
	  にプリンタをリード・ライトモードでオープンさせるために、
	  <literal>rw</literal> 項目も指定すべきです。</para>

	<para>パラレルポート接続の &postscript; プリンタの場合 (すなわち、
	  <command>lprps</command> が
	  必要としているプリンタとの双方向通信ができない)、
	  テキストフィルタとして次のシェルスクリプトを使うことができます。</para>

	<programlisting>#!/bin/sh
#
#  psif - Print PostScript or plain text on a PostScript printer
#  Script version; NOT the version that comes with lprps
#  Installed in /usr/local/libexec/psif
#

IFS="" read -r first_line
first_two_chars=`expr "$first_line" : '\(..\)'`

if [ "$first_two_chars" = "%!" ]; then
   #
   #  PostScript job, print it.
   #
   echo "$first_line" &amp;&amp; cat &amp;&amp; printf "\004" &amp;&amp; exit 0
   exit 2
else
   #
   #  Plain text, convert it, then print it.
   #
   ( echo "$first_line"; cat ) | /usr/local/bin/textps &amp;&amp; printf "\004" &amp;&amp; exit 0
   exit 2
fi</programlisting>

	<para>上記のスクリプトにおいて、<command>textps</command>
	  はプレインテキストから &postscript;
	  へ変換するために別にインストールしたプログラムです。
	  テキストから &postscript; へ変換するのには、
	  お好みのどんなプログラムでも使うことができます。&os;
	  Ports Collection (<link linkend="ports">Ports Collection</link>
	  を参照してください) には、<literal>a2ps</literal>
	  と呼ばれるテキストから
	  &postscript; に変換するプログラムが入っています。</para>
      </sect3>

      <sect3 id="printing-advanced-ps">
	<title>非 &postscript; プリンタによる &postscript;
	  のシミュレート</title>
        <indexterm>
          <primary>PostScript</primary>
          <secondary>エミュレーション</secondary>
        </indexterm>
        <indexterm><primary>Ghostscript</primary></indexterm>

	<para>&postscript;
	  は質の高い組版と印字をおこなうための
	  <emphasis>事実上の</emphasis>標準です。しかしながら、&postscript;
	  は、<emphasis>高価な</emphasis>標準です。ありがたいことに、
	  Aladdin Enterprises から
	  <application>Ghostscript</application> と呼ばれる、
	  &postscript; 互換の動作をするフリーのプログラムが出されていて、
	  &os; で動きます。
	  <application>Ghostscript</application> はほとんどの &postscript; ファイルを読むことができ、
	  これらの各ページを多くのブランドの非 &postscript; プリンタを含む
	  様々なデバイス用に変換することができます。
	  <application>Ghostscript</application> をインストールし、
	  プリンタ用の特別なテキストフィルタを使うことによって、
	  非 &postscript; プリンタをあたかも本物の &postscript;
	  プリンタであるかのように動作させることができます。</para>

	<para><application>Ghostscript</application> は &os; Ports Collection に入っています。
	  複数のバージョンがありますが、最も良く使われているバージョンは <filename
	  role="package">print/ghostscript-gpl</filename> です。</para>

	<para>&postscript; プリンタをシミュレートさせる場合は、
	  テキストフィルタに &postscript;
	  ファイルを印字しようとしているかどうかを検出させます。
	  &postscript; ファイルでない場合は、
	  フィルタはそのファイルを直接プリンタに送ります
	  (訳注: テキストファイルを直接印字できない場合は、もちろん、
	  変換フィルタを通す必要があります)。&postscript; の場合は、
	  まず、<application>Ghostscript</application> を使い、
	  ファイルをそのプリンタが理解できる形式へ変換します。</para>

	<para>次の例のスクリプトは、Hewlett Packard DeskJet 500
	  プリンタ用 のテキストフィルタです。
	  他のプリンタで用いるときは、<option>-sDEVICE</option>
	  引数を <command>gs</command> (<application>Ghostscript</application>)
	  コマンドに変えてください (<command>gs <option>-h</option></command>
	  と入力すると、現在インストールされている <application>Ghostscript</application>
	  でサポートされているデバイスのリストが得られます)。</para>

	<programlisting>#!/bin/sh
#
#  ifhp - Print Ghostscript-simulated PostScript on a DeskJet 500
#  Installed in /usr/local/libexec/ifhp

#
#  Treat LF as CR+LF (to avoid the "staircase effect" on HP/PCL
#  printers):
#
printf "\033&amp;k2G" || exit 2

#
#  Read first two characters of the file
#
IFS="" read -r first_line
first_two_chars=`expr "$first_line" : '\(..\)'`

if [ "$first_two_chars" = "%!" ]; then
    #
    #  It is PostScript; use Ghostscript to scan-convert and print it.
    #
    /usr/local/bin/gs -dSAFER -dNOPAUSE -q -sDEVICE=djet500 \
      -sOutputFile=- - &amp;&amp; exit 0

else
    #
    #  Plain text or HP/PCL, so just print it directly; print a form feed
    #  at the end to eject the last page.
    #
    echo "$first_line" &amp;&amp; cat &amp;&amp; printf "\033&amp;l0H" &amp;&amp;
    exit 0
fi

exit 2</programlisting>

	<para>最後に、<literal>if</literal> 項目を通して、<application>LPD</application>
	  にこのフィルタを教えてやる必要があります。</para>

        <programlisting>:if=<filename>/usr/local/libexec/ifhp</filename>:</programlisting>

	<para>これでおしまいです。<command>lpr <filename><replaceable>plain.text</replaceable></filename></command>
	  とか <command>lpr <filename><replaceable>whatever.ps</replaceable></filename></command>
	  と入力してみましょう。どちらも正常に印字されるはずです。</para>

	<note>
	<title>訳注</title>
	  <para>
	    日本語を印字する場合は、
	    日本語対応の Ghostscript が必要です。日本語対応版の
	    Ghostscript も Ports Collection に入っています。</para>
	</note>
      </sect3>

      <sect3 id="printing-advanced-convfilters">
	<title>変換フィルタ</title>

	<para>「<link
	    linkend="printing-simple">プリンタ設定導入編</link>」
	  に書かれた簡単な設定が完了したら、最初に、
	  やってみたいと思うことは、多分 (プレイン ASCII テキストに加えて)
	  好みのファイル形式のための変換フィルタをインストールすることでしょう。
	  </para>

	<sect4>
	  <title>なぜ、変換フィルタをインストールするのか?</title>
          <indexterm>
            <primary>&tex;</primary>
            <secondary>DVI ファイルの印刷</secondary>
          </indexterm>

	  <para>変換フィルタによって、
	    様々な種類のファイルを印字することが簡単になります。たとえば、&tex;
	    組版システムでたくさんの仕事をしたと仮定しましょう。
	    そして、&postscript; プリンタが接続 されているとします。
	    すると、&tex; で DVI ファイルを作成する度に、DVI
	    ファイルを印字するために、
	    これを &postscript; ファイルに変換する必要があります。
	    このコマンドは次のようになるでしょう。</para>

          <screen>&prompt.user; <userinput><command>dvips <filename><replaceable>seaweed-analysis.dvi</replaceable></filename></command></userinput>
&prompt.user; <userinput><command>lpr <filename><replaceable>seaweed-analysis.ps</replaceable></filename></command></userinput></screen>

	  <para>DVI ファイル用の変換フィルタがインストールしてあると、
	    <application>LPD</application> に変換を肩代わりさせることで毎回毎回
	    おこなわなければならなかった面倒な変換作業を省くことができます。
	    つまり、DVI を生成したら、
	    次のようなコマンドを入力するだけで、これが印字されます。
	  </para>

          <screen>&prompt.user; <userinput><command>lpr <option>-d</option> <filename><replaceable>seaweed-analysis.dvi</replaceable></filename></command></userinput></screen>

	  <para><application>LPD</application> に DVI
	    ファイルの変換をさせるためには、
	    <option>-d</option> オプション を指定します。
	    変換オプションのリストは「<link
	      linkend="printing-lpr-options-format">
	      整形と変換に関するオプション</link>」
	    に載せてあります。</para>

	  <para>変化のオプションのそれぞれをプリンタに
	    サポートさせるためには、
	    <emphasis>変換フィルタ</emphasis>をインストールし、
	    そのパス名を <filename>/etc/printcap</filename>
	    の中で指定しなくてはなりません。変換フィルタは、
	    プレインテキストを印字する代わりに、フィルタはファイルを
	    プリンタが理解できる形式に変換するところを除けば、
	    「プリンタの簡単な設定」で説明したテキストファイル
	    (「<link linkend="printing-textfilter">
	      テキストフィルタのインストール</link>」 を見て下さい)
	    に似ています。</para>
	</sect4>

	<sect4>
	  <title>どの変換フィルタをインストールすべきか?</title>

	  <para>使いたいと思う変換フィルタをインストールすべきです。
	    DVI のデータを頻繁に印字するならば、DVI 変換フィルタ
	    をインストールするのが適切でしょう。印字しなくてはなら
	    ない troff を大量に抱えている場合は、多分、
	    troff フィルタが欲しくなるはずです。</para>

	  <para>次の表は、<application>LPD</application> で動作するフィルタと、
	    <filename>/etc/printcap</filename>
	    ファイルでのエントリする項目、そして、
	    <command>lpr</command>
	    コマンドで呼び出す方法をまとめたものです。</para>

	  <informaltable frame="none" pgwide="1">
	    <tgroup cols="3">
	      <thead>
		<row>
		  <entry>ファイル形式</entry>
		  <entry><filename>/etc/printcap</filename>項目</entry>
		  <entry><command>lpr</command> オプション</entry>
		</row>
	      </thead>

	      <tbody>
		<row>
		  <entry>cifplot</entry>
		  <entry><literal>cf</literal></entry>
		  <entry><option>-c</option></entry>
		</row>
		<row>
		  <entry>DVI</entry>
		  <entry><literal>df</literal></entry>
		  <entry><option>-d</option></entry>
		</row>
		<row>
		  <entry>plot</entry>
		  <entry><literal>gf</literal></entry>
		  <entry><option>-g</option></entry>
		</row>
		<row>
		  <entry>ditroff</entry>
		  <entry><literal>nf</literal></entry>
		  <entry><option>-n</option></entry>
		</row>
		<row>
		  <entry>FORTRAN text</entry>
		  <entry><literal>rf</literal></entry>
		  <entry><option>-f</option></entry>
		</row>
		<row>
		  <entry>troff</entry>
		  <entry><literal>tf</literal></entry>
		  <entry><option>-f</option></entry>
		</row>
		<row>
		  <entry>raster</entry>
		  <entry><literal>vf</literal></entry>
		  <entry><option>-v</option></entry>
		</row>
		<row>
		  <entry>プレインテキスト</entry>
		  <entry><literal>if</literal></entry>
		  <entry>なし、<option>-p</option>、または
		    <option>-l</option></entry>
		</row>
	      </tbody>
	    </tgroup>
	  </informaltable>

	  <para>先の例のように、<command>lpr <option>-d</option></command>
	    を使うためには、出力先のプリンタの
	    <filename>/etc/printcap</filename> 内のエントリで、
	    <literal>df</literal>
	    項目が必要であることが分かります。</para>

          <indexterm><primary>FORTRAN</primary></indexterm>
	  <para>反論はあるかも知れませんが、FORTRAN テキストや plot
	    のような形式は、多分、廃れてていくでしょう。
	    あなたのサイトで、自前のフィルタをインストールするだけで、
	    プリントオプションのいくつか、あるいは、
	    全部に新しい意味を与えることができます。たとえば、
	    Printerleaf ファイル (Interleaf
	    デスクトップパブリッシングプログラムによるファイル)
	    を直接印字したいとします。
	    そして、Printerleaf 用の変換フィルタを
	    <literal>gf</literal> 項目で
	    指定したパスにインストールすれば、<command>lpr
	      <option>-g</option></command> の意味は <quote>Printerleaf
	    ファイルを印字する</quote> 意味だとユーザに教えることができます。
	    </para>
	</sect4>

	<sect4>
	  <title>変換フィルタのインストール</title>

	  <para>変換フィルタは &os;
	    の基本システムのインストールとは別にインストールするプログラムなので、
	    変換フィルタは、
	    <filename class="directory">/usr/local</filename>
	    ディレクトリの下に置くべきでしょう。
	    フィルタは <application>LPD</application> だけが実行する特別なプログラム、
	    すなわち、一般ユーザが実行する必要すらないプログラムなので、
	    <filename class="directory">/usr/local/libexec</filename>
	    ディレクトリに置くのが普通です。</para>

	  <para>変換フィルタを使用可能にするためには、
	    <filename>/etc/printcap</filename>
	    の目的のプリンタの適切な項目に
	    フィルタがあるパス名を指定します。</para>

	  <para>DVI 変換フィルタをプリンタ <literal>bamboo</literal>
	    のエントリに加えてみましょう。プリンタ
	    <literal>bamboo</literal> の <literal>df</literal>
	    項目を新たに加えた <filename>/etc/printcap</filename>
	    ファイルの例を以下に再掲します。</para>

	  <programlisting>#
#  /etc/printcap for host rose - added df filter for bamboo
#
rattan|line|diablo|lp|Diablo 630 Line Printer:\
        :sh:sd=<filename class="directory">/var/spool/lpd/rattan</filename>:\
        :lp=<filename class="devicefile">/dev/lpt0</filename>:\
        :if=<filename>/usr/local/libexec/if-simple</filename>:

bamboo|ps|PS|S|panasonic|Panasonic KX-P4455 PostScript v51.4:\
        :sh:sd=<filename class="directory">/var/spool/lpd/bamboo</filename>:\
        :lp=<filename class="devicefile">/dev/ttyu5</filename>:ms#-parenb cs8 clocal crtscts:rw:\
        :if=<filename>/usr/local/libexec/psif</filename>:\
        :df=<filename>/usr/local/libexec/psdf</filename>:</programlisting>

	  <para>DVI フィルタは
	    <filename>/usr/local/libexec/psdf</filename> という
	    名前のシェルスクリプトです。
	    このスクリプトは次のようになっています。</para>

	  <programlisting>#!/bin/sh
#
#  psdf - DVI to PostScript printer filter
#  Installed in /usr/local/libexec/psdf
#
#  Invoked by lpd when user runs lpr -d
#
exec /usr/local/bin/dvips -f | /usr/local/libexec/lprps "$@"</programlisting>

	  <para>このスクリプトでは、<command>dvips</command>
	    をフィルタモード (引数 <option>-f</option>) で、
	    標準入力上で起動しています。標準入力は印字するジョブです。
	    それから、&postscript; プリンタ用フィルタ
	    <command>lprps</command> (これについては「<link
	      linkend="printing-advanced-if-conversion">
	      プレインテキストのジョブを &postscript;
	      プリンタで印字する</link>」 を参照してください) を
	    <application>LPD</application> に与えられた引数を付けて起動します。
	    <command>lprps</command>
	    はこれらの引数を印字されたページ分の課金をおこなうために使われます。
	    </para>

	</sect4>

	<sect4>
	  <title>変換フィルタのその他の例</title>

	  <para>変換フィルタのインストールには決まったステップがないので、
	    この節では、例をもっと挙げることにします。
	     これを自分でフィルタを作る際のガイドにしてください。
	    適当な例があったら、それをそのまま使ってください。</para>

	  <para>次のスクリプト例は、Hewlett Packard LaserJet III-Si
	    のための、raster (ええと・・実は、GIF ファイル)
	    用の変換フィルタです。</para>

	  <programlisting>#!/bin/sh
#
#  hpvf - Convert GIF files into HP/PCL, then print
#  Installed in /usr/local/libexec/hpvf

PATH=/usr/X11R6/bin:$PATH; export PATH

giftopnm | ppmtopgm | pgmtopbm | pbmtolj -resolution 300 \
    &amp;&amp; exit 0 \
    || exit 2</programlisting>

	  <para>ここでは、GIF ファイルから PNM (portable anymap)
	    形式に変換し、次に PGM (portable graymap) 形式に変換してから、
	    LaserJet/PCL-互換データに変換しています。</para>

	  <para>上記のフィルタを使うプリンタのためのエントリを付け加えた
	    <filename>/etc/printcap</filename>
	    ファイルは次のようになります。</para>

	  <programlisting>#
#  /etc/printcap for host orchid
#
teak|hp|laserjet|Hewlett Packard LaserJet 3Si:\
        :lp=<filename class="devicefile">/dev/lpt0</filename>:sh:sd=<filename class="directory">/var/spool/lpd/teak</filename>:mx#0:\
        :if=<filename>/usr/local/libexec/hpif</filename>:\
        :vf=<filename>/usr/local/libexec/hpvf</filename>:</programlisting>

	  <para>次のスクリプトは、&postscript; プリンタ
	    <literal>bamboo</literal> のための groff 組版システムの
	    troff データのための変換フィルタです。</para>

	  <programlisting>#!/bin/sh
#
#  pstf - Convert groff's troff data into PS, then print.
#  Installed in /usr/local/libexec/pstf
#
exec grops | /usr/local/libexec/lprps "$@"</programlisting>

	  <para>上記のスクリプトではプリンタとの通信をおこなうため、
	    <command>lprps</command> をまた利用しています。
	    プリンタがパラレルポートに接続されている場合は、代わりに、
	    次のスクリプトを使うかもしれません。</para>

	  <programlisting>#!/bin/sh
#
#  pstf - Convert groff's troff data into PS, then print.
#  Installed in /usr/local/libexec/pstf
#
exec grops</programlisting>

	  <para>これで完成しました。次に、フィルタを使用可能にするため
	    に <filename>/etc/printcap</filename>
	    に加える必要があるエントリを示します。</para>

	  <programlisting>:tf=<filename>/usr/local/libexec/pstf</filename>:</programlisting>

	  <para>次の例をみたら、FORTRAN のベテランは赤面するかもしれません。
	    この FORTRAN テキストフィルタは、
	    プレインテキストを直接印字できるすべてのプリンタで利用できます。
	    このフィルタをプリンタ <literal>teak</literal>
	    にインストールすることにしましょう。</para>

	  <programlisting>#!/bin/sh
#
# hprf - FORTRAN text filter for LaserJet 3si:
# Installed in /usr/local/libexec/hprf
#

printf "\033&amp;k2G" &amp;&amp; fpr &amp;&amp; printf "\033&amp;l0H" &amp;&amp; exit 0
exit 2</programlisting>

	  <para>そして、このフィルタを使用可能にするため、以下の行を
	    <filename>/etc/printcap</filename> のプリンタ
	    <literal>teak</literal> のエントリに加えます。</para>

          <programlisting>:rf=<filename>/usr/local/libexec/hprf</filename>:</programlisting>

	  <para>これが最後の、そして、若干複雑な例です。前に紹介した
	    LaserJet プリンタ <literal>teak</literal> に、DVI
	    フィルタを加える ことにしましょう。最初に、
	    簡単な部分をおこないます。すなわち、DVI フィルタの位置を
	    <filename>/etc/printcap</filename> に書き加えます。
	  </para>

          <programlisting>:df=<filename>/usr/local/libexec/hpdf</filename>:</programlisting>

	  <para>さて、難しい部分であるフィルタの作成をおこないます。
	    このために、DVI から LaserJet/PCL
	    への変換プログラムが必要です。&os; の Ports Collection
            (<link linkend="ports">Ports Collection</link>
	    を参照してください) には、それがあります。
	    <filename role="package">dvi2xx</filename> というのがその port の名前です。
	    これをインストールすると、必要なプログラム
	    <command>dvilj2p</command> が使えます。このプログラムは
	    DVI を LaserJet IIp、LaserJet III、そして LaserJet 2000
	    の互換コードへ変換してくれます。</para>

	  <para><command>dvilj2p</command> はフィルタ
	    <command>hpdf</command> を極めて複雑にしています。
	    なぜなら、<command>dvilj2p</command>
	    は標準入力からデータを読み込むことができないからです。
	    このプログラムを働かせるためには、ファイル名が必要です。
	    もっと悪いことに、ファイル名は <filename>.dvi</filename>
	    で終わっている必要があり、標準入力の代わりに、
	    <filename class="devicefile">/dev/fd/0</filename> を使うのは問題があります。
	    この問題は、(<filename>.dvi</filename> で終わる)
	    一時的なファイル名から<filename class="devicefile">/dev/fd/0</filename> に
	    (シンボリックな) リンクを張る
	    ことで回避することができます。これで、
	    <command>dvilj2p</command>
	    に強制的に標準入力からデータを読み込ませることができます。</para>

	  <para>もう1つの問題は、一時的なリンクを張るために
	    <filename class="devicefile">/tmp</filename>
	    ディレクトリを使うことができないという事実です。
	    シンボリックリンクはユーザ、グループが <username>bin</username>
	    であるユーザに所有されています。フィルタはユーザ
	    <username>daemon</username> として起動します。そして、
	    <filename class="devicefile">/tmp</filename>
	    ディレクトリはスティッキービットが立っています。
	    フィルタはリンクを作ることができます。しかし、
	    リンクは別のユーザに所有されているため、
	    作業が終了したとき、このリンクを削除することができません。</para>

	  <para>その代わりに、シンボリックリンクは現在の作業ディレクトリ、
	    すなわち、スプーリングディレクトリ
	    (<filename>/etc/printcap</filename> の
	    <literal>sd</literal> 項目で指定する) に作ることにします。
	    フィルタが作業するにはここの場所は完璧な場所で、なぜなら、
	    特に、スプーリングディレクトリのディ スクの空き容量は
	    (ときどき) <filename class="devicefile">/tmp</filename>
	    ディレクトリよりもたくさんあるからです。</para>

	  <para>以下に示すのが最後のフィルタです。</para>

	  <programlisting>#!/bin/sh
#
#  hpdf - Print DVI data on HP/PCL printer
#  Installed in /usr/local/libexec/hpdf

PATH=/usr/local/bin:$PATH; export PATH

#
#  Define a function to clean up our temporary files.  These exist
#  in the current directory, which will be the spooling directory
#  for the printer.
#
cleanup() {
   rm -f hpdf$$.dvi
}

#
#  Define a function to handle fatal errors: print the given message
#  and exit 2.  Exiting with 2 tells LPD to do not try to reprint the
#  job.
#
fatal() {
    echo "$@" 1&gt;&amp;2
    cleanup
    exit 2
}

#
#  If user removes the job, LPD will send SIGINT, so trap SIGINT
#  (and a few other signals) to clean up after ourselves.
#
trap cleanup 1 2 15

#
#  Make sure we are not colliding with any existing files.
#
cleanup

#
#  Link the DVI input file to standard input (the file to print).
#
ln -s /dev/fd/0 hpdf$$.dvi || fatal "Cannot symlink /dev/fd/0"

#
#  Make LF = CR+LF
#
printf "\033&amp;k2G" || fatal "Cannot initialize printer"

#
#  Convert and print.  Return value from dvilj2p does not seem to be
#  reliable, so we ignore it.

#
dvilj2p -M1 -q -e- dfhp$$.dvi

#
#  Clean up and exit
#
cleanup
exit 0</programlisting>
	</sect4>

	<sect4 id="printing-advanced-autoconv">
	  <title>自動変換: その他の変換フィルタ</title>

	  <para>ここまでに述べてきたフィルタによって、
	    印字環境の能率が上がったことと思います。しかし、
	    これはどのフィルタを使うかを (&man.lpr.1; のコマンドライン上で)
	    ユーザが指定しなくてはならないという代価を支払って実現されています。
	    コンピュータの事情にあまり詳しくないユーザにとって、
	    フィルタのオプションを指定させられるということは
	    いらいらさせられるものになるでしょう。更に悪いことに、
	    間違ったフィルタオプションを指定されると、
	    間違った形式のファイルがそのフィルタに適用されることになり、
	    その結果、何百枚もの紙を吐き出すことになるかもしれません。</para>

	  <para>そのような結果になるならば、
	    変換フィルタをインストールするよりもむしろ、
	    テキストフィルタ (これがデフォルトフィルタなので)
	    に印字するよう要求されたファイルの形式を検出させ、自動的に、
	    適切な変換フィルタを起動するようにしたいと思うかもしれません。
	    ここでは <command>file</command>
	    コマンドのようなツールを役立たせることができます。
	    もちろん、<emphasis>いくつかの</emphasis>
	    ファイル形式の違いを見分けることは難しいことでしょう。
	    そして、もちろん、それらのファイルに対しては、
	    変換フィルタを提供するだけで済ますこともできるのです。</para>

          <indexterm><primary>apsfilter</primary></indexterm>
          <indexterm>
            <primary>印刷</primary>
            <secondary>フィルタ</secondary>
            <tertiary>apsfilter</tertiary>
          </indexterm>
	  <para>&os; Ports Collection には、<command>apsfilter</command>
	    (<filename role="package">print/apsfilter</filename>)
	    と呼ばれる自動変換をおこなうテキストフィルタがあります。
	    このフィルタは プレインテキスト、&postscript;, DVI
	    など、ほとんどすべてのファイル形式を検出し、適当な変換をおこなった後、
	    データを印字することができます。</para>
	</sect4>
      </sect3>

      <sect3 id="printing-advanced-of">
	<title>出力フィルタ</title>

	<para><application>LPD</application> スプーリングシステムでは、
	  ここまでにまだ取り上げていないフィルタ形式、
	  出力フィルタをサポートしています。出力フィルタは、
	  テキストフィルタのように、
	  プレインテキストのみを印字するために意図されたものですが、
	  非常に簡単化されています。テキストフィルタを用いずに、
	  出力フィルタを使っている場合は、次のようになります。</para>

	<itemizedlist>
	  <listitem>
	    <para><application>LPD</application>
	      はジョブ中の各ファイルに一度ではなく、
	      ジョブ全体に対して一度だけ出力フィルタを起動します。</para>
	  </listitem>

	  <listitem>
	    <para><application>LPD</application> は出力フィルタに対し、
	      ジョブ中のファイルの先頭や末尾を特定するための対策を
	      一切おこなっていません。</para>
	  </listitem>

	  <listitem>
	    <para><application>LPD</application>
	      はユーザのログイン名やホスト名をフィルタに渡しません。
	      したがって、課金の処理をおこなうことは考えていません。
	      実際、出力フィルタには、以下2つの引数しか与えられません。</para>

	    <cmdsynopsis>
	      <command>filter-name</command>
	      <arg choice="plain">-w<replaceable>width</replaceable></arg>
	      <arg choice="plain">-l<replaceable>length</replaceable></arg>
	    </cmdsynopsis>

	    <para>ここで、<replaceable>width</replaceable>
	      は対象となるプリンタの <literal>pw</literal> 項目、
	      <replaceable>length</replaceable> は
	      <literal>pl</literal> 項目に指定された数です。</para>
	  </listitem>
	</itemizedlist>

	<para>出力フィルタの簡便さに誘惑されてはいけません。もし、
	  ジョブ中のそれぞれのファイルに別のページ番号を付加しようとしても、
	  出力フィルタは<emphasis>うまく動作しないでしょう</emphasis>。
	  そのような動作を期待しているならば、
	  (入力フィルタとしても知られている) テキストフィルタを使ってください。
	  詳しくは、「<link linkend="printing-textfilter">
	    テキストフィルタのインストール</link>」をご覧ください。
	  さらに、出力フィルタは、実のところ、
	  <emphasis>もっと複雑</emphasis>になっています。まず、
	  特殊なフラグ文字を検出するために、
	  フィルタに送られてくるバイトストリームを検査する必要があります。
	  また、<application>LPD</application> に代わって、
	  自分自身にシグナルを送らなければなりません。</para>

	<para>しかしながら、ヘッダページの印字をおこないたくて、
	  エスケープシーケンスやヘッダページを印字できるようにするその他の初期化文字列を送信する必要がある場合は、
	  出力ファイルが<emphasis>必要</emphasis>です。
	  (しかし、
	  ヘッダページを要求したユーザに対して課金しようとするのもまた無駄なことです。
	  <application>LPD</application>
	  は出力フィルタにユーザやホストの情報を渡しません)。</para>

	<para>1 台のプリンタに対し、<application>LPD</application>
	  では出力フィルタとテキストやその他のフィルタを両方使うことができます。
	  このような場合、<application>LPD</application> はヘッダページ (「<link
	    linkend="printing-advanced-header-pages">
	    ヘッダページ</link>」 を参照してください)
	  だけを印字させるために、出力フィルタを起動させます。
	  それから <application>LPD</application> では、出力フィルタに 2 バイトの文字
	  (ASCII 031 の次に ASCII 001) を送ることで、
	  出力フィルタが<emphasis>自分自身を停止する</emphasis>ことを期待しています。
	  2 バイト (031, 001) が出力フィルタに送られたとき、
	  出力フィルタは自分自身にシグナル <literal>SIGSTOP</literal>
	  を送ることによって停止するはずです。
	  <application>LPD</application> がその他のフィルタを動かし終わると、
	  出力フィルタにシグナル <literal>SIGCONT</literal>
	  を送って、出力フィルタを再起動します。</para>

	<para>出力フィルタがあり、
	  テキストフィルタが<emphasis>ない</emphasis>場合、
	  <application>LPD</application>
	  はプレインテキストジョブを扱う場合に、
	  出力フィルタを使います。前述したように、出力フィルタでは、
	  ジョブ中の各ファイルの間に
	  FORM FEED 文字や紙を送る他の文字を入れることはしません。
	  この動作は多分、
	  あなたが求めているものとは<emphasis>異なっている</emphasis>でしょう。
	  ほとんどの場合において、テキストフィルタが必要なはずです。</para>

	<para>プログラム <command>lpf</command> は、
	  テキストフィルタの項で既に紹介しましたが、
	  出力フィルタとしても動作させることができます。もし、
	  簡便で極悪な出力フィルタが必要で、かつ、
	  バイトストリームを検査したりシグナルを送るコードを書きたくないときには、
	  <command>lpf</command> をお試しください。
	  あるいは、プリントが要求する初期化コードを送るために、
	  <command>lpf</command>
	  をシェルスクリプトに包んで使うこともできます。</para>
      </sect3>

      <sect3 id="printing-advanced-lpf">
	<title>テキストフィルタ <command>lpf</command></title>

	<para>プログラム <filename>/usr/libexec/lpr/lpf</filename> は、
	  &os; の バイナリ配布に付属しているテキストフィルタ
	  (入力フィルタ) で、出力を字下げしたり (<command>lpr
	    <option>-i</option></command> でジョブが入力さ れたとき)、
	  文字を未処理のままプリンタに送ったり (<command>lpr
	    <option>-l</option></command> でジョブが入力されたとき)、
	  ジョブ中のバックスペースやタブの印字位置を調節したり、
	  印字したページに対して課金したりすることができます。また、
	  このフィルタは出力フィルタとしても動作させることができます。</para>

	<para><command>lpf</command>
	  フィルタは多くの印字環境において使用することに適しています。
	  このフィルタには、プリンタに初期化文字列を送る機能はありませんが、
	  必要とされる初期化をおこない、それから
	  <command>lpf</command>
	  を実行させるためのシェルスクリプトを作成するのはたやすいことです。
	  </para>

        <indexterm><primary>ページ課金</primary></indexterm>
        <indexterm>
          <primary>課金</primary>
          <secondary>プリンタ</secondary>
        </indexterm>
	<para><command>lpf</command> に対して、
	  印字ページへの課金を正確におこなわせるためには、
	  <filename>/etc/printcap</filename> ファイルの中の
	  <literal>pw</literal> と <literal>pl</literal>
	  の項目に正確な値を入れておく必要があります。これらの値は、
	  どのくらいの量のテキストがページにフィットするか、また、
	  ユーザのジョブが何ページあるのかを調べるために使われます。
	  プリンタの課金についての詳しい情報については、「<link
	    linkend="printing-advanced-acct">
	    プリンタの利用に対する課金</link>」をご覧ください。</para>
      </sect3>
    </sect2>

    <sect2 id="printing-advanced-header-pages">
      <title>ヘッダページ</title>

      <para>あなたが管理するシステムのユーザが
	<emphasis>たくさん</emphasis>おり、
	ユーザ全員が様々なプリンタを使用する場合、多分、
	必要悪である<emphasis>ヘッダページ</emphasis>を
	印字させることを検討したいと思うかもしれません。</para>

      <indexterm>
        <primary>バナーページ</primary>
        <see>ヘッダページ</see>
      </indexterm>
      <indexterm><primary>ヘッダページ</primary></indexterm>
      <para>ヘッダページは、<emphasis>バナー</emphasis> とか
	<emphasis>バーストページ</emphasis> としても知られていますが、
	出力されたジョブが誰によるものなのかを特定させる働きがあります。
	印字結果の山の中において、
	ユーザのジョブによって印字された本物のドキュメント部分よりも際立たせるために、
	ヘッダページは、通常、多分、縁が装飾されている大きな太文字で印字されます。
	ヘッダページにより、
	ユーザは自分が出したジョブがどこにあるのかをすばやく見つけることができます。
	ヘッダページの欠点は、明らかに、すべてのジョブに対して、
	紙が 1 枚余分に印字されるということです。
	この紙の有効期間は短く、2 〜 3 分も続きません。最終的に、
	これらの紙は再利用紙入れの中かくずの山に入れられることでしょう
	(ヘッダページはジョブ中の各ファイル毎に印字されるのではなく、
	ジョブ毎に印字されるということに注意してください。したがって、
	紙の消費はそれほどひどくはないかもしれません)。</para>

      <para><emphasis>もし</emphasis>、
	プリンタがプレインテキストを直接印字できるならば、<application>LPD</application>
	システムは印字物に対して自動的にヘッダページを付けることができます。
	&postscript; プリンタを使っている場合は、
	ヘッダページを生成する外部プログラムが必要になります。これについては、
	「<link linkend="printing-advanced-header-pages-ps">&postscript;
	  プリンタでのヘッダページ</link>」をご覧ください。</para>

      <sect3 id="printing-advanced-header-pages-enabling">
	<title>ヘッダページの印字を許可する</title>

	<para>「<link linkend="printing-simple">プリンタ設定導入編
	  </link>」節では、<filename>/etc/printcap</filename>
	  ファイルの <literal>sh</literal> (``suppress header'' :
	  <quote>ヘッダを供給しない</quote> という意味) を指定して、
	  ヘッダページの印字を止めていました。
	  プリンタでのヘッダページの印字を許可するには、
	  <literal>sh</literal> 項目を取り除くだけでよいのです。</para>

	<para>とても簡単そうに見えるけど、本当かな?</para>

	<para>それは本当です。
	  プリンタに初期化文字列を送るための
	  出力フィルタを用意しなくてはならないかもしれません。次に、Hewlett
	  Packard PCL 互換プリンタの例を挙げます。</para>

	<programlisting>#!/bin/sh
#
#  hpof - Output filter for Hewlett Packard PCL-compatible printers
#  Installed in /usr/local/libexec/hpof


printf "\033&amp;k2G" || exit 2
exec /usr/libexec/lpr/lpf</programlisting>

	<para><literal>of</literal>
	  項目に出力フィルタのパス名を指定してください。
	  詳細については、「<link
	    linkend="printing-advanced-of">出力フィルタ</link>」節
	  をご覧ください。</para>

	<para>次に、以前紹介したプリンタ <literal>teak</literal>
	  のための <filename>/etc/printcap</filename>
	  ファイルの例を示します。ここでは、
	  ヘッダページの印字を許可し、上記の出力フィルタを追加しました。
	</para>

	<programlisting>#
#  /etc/printcap for host orchid
#
teak|hp|laserjet|Hewlett Packard LaserJet 3Si:\
        :lp=<filename class="devicefile">/dev/lpt0</filename>:sd=<filename class="directory">/var/spool/lpd/teak</filename>:mx#0:\
        :if=<filename>/usr/local/libexec/hpif</filename>:\
        :vf=<filename>/usr/local/libexec/hpvf</filename>:\
        :of=<filename>/usr/local/libexec/hpof</filename>:</programlisting>

	<!-- kuriyama - literallayout? -->
	<!-- si006 - now literal -->
	<para>さて、ユーザが <literal>teak</literal>
	  からジョブを印字させたとき、
	  それぞれのジョブ毎にヘッダページが印字されます。
	  もし、ユーザが印字物を探すのに時間を費やしたいと思うなら、
	  <command>lpr <option>-h</option></command> によってジョブを入力することで、
	  ヘッダページの印字を止めることができます。
	  これ以外の
	  &man.lpr.1; のオプションについては、
	  「<link linkend="printing-lpr-options-misc">
	    ヘッダページ用オプション</link>」節をご覧ください。</para>

	<note>
	  <para><application>LPD</application> では、ヘッダページの最後に、
	    FORM FEED 文字が印字されます。
	    プリンタに紙排出をさせるために、別な文字、
	    もしくは、別な文字列が利用されている場合は、
	    <filename>/etc/printcap</filename> 中の
	    <literal>ff</literal> 項目で指定することができます。</para>
	</note>
      </sect3>

      <sect3 id="printing-advanced-header-pages-controlling">
	<title>ヘッダページを制御する</title>

	<para>ヘッダページの印字が許可されていると、<application>LPD</application> は
	  <emphasis>長いヘッダ</emphasis>を作ります。これには、
	  紙全面に大きな文字でユーザ名、ホスト名、
	  ジョブ名が書かれています。次に、このヘッダページの例を示
	  します (<username>kelly</username> がジョブ名
	  <quote>outline</quote> を <hostid>rose</hostid>
	  というホストから印字 された場合)。</para>

        <screen>      k                   ll       ll
      k                    l        l
      k                    l        l
      k   k     eeee       l        l     y    y
      k  k     e    e      l        l     y    y
      k k      eeeeee      l        l     y    y
      kk k     e           l        l     y    y
      k   k    e    e      l        l     y   yy
      k    k    eeee      lll      lll     yyy y
                                               y
                                          y    y
                                           yyyy


                                   ll
                          t         l        i
                          t         l
       oooo    u    u   ttttt       l       ii     n nnn     eeee
      o    o   u    u     t         l        i     nn   n   e    e
      o    o   u    u     t         l        i     n    n   eeeeee
      o    o   u    u     t         l        i     n    n   e
      o    o   u   uu     t  t      l        i     n    n   e    e
       oooo     uuu u      tt      lll      iii    n    n    eeee









      r rrr     oooo     ssss     eeee
      rr   r   o    o   s    s   e    e
      r        o    o    ss      eeeeee
      r        o    o      ss    e
      r        o    o   s    s   e    e
      r         oooo     ssss     eeee







                                              Job:  outline
                                              Date: Sun Sep 17 11:04:58 1995</screen>

	<para><application>LPD</application> はこのテキストの終わりに
	  FORM FEED 文字を加えます
	  ので、ジョブは新しいページから開始されます (ただし、
	  <filename>/etc/printcap</filename>
	  で出力先のプリンタのエントリに <literal>sf</literal>
	  (suppress form feeds) が指定されているときはこ
	  の限りではありません)。</para>

	<para>お望みならば、<application>LPD</application>
	  に<emphasis>短いヘッダページ</emphasis>を出力させることもできます。
	  この場合は、
	  <filename>/etc/printcap</filename> ファイルの中で
	  <literal>sb</literal> (short banner) を指定してください。
	  ヘッダページは次のようになります。</para>

        <screen>rose:kelly  Job: outline  Date: Sun Sep 17 11:07:51 1995</screen>

	<para>デフォルトでは、<application>LPD</application>
	  はヘッダページを最初に印字し、次にジョブの印字をおこないます。
	  この順番を逆にするときは、
	  <filename>/etc/printcap</filename> で <literal>hl</literal>
	  (header last) を指定してください。</para>
      </sect3>

      <sect3 id="printing-advanced-header-pages-accounting">
	<title>ヘッダページに対する課金</title>

	<para><application>LPD</application>
	  に備わっているヘッダページ出力機能を使うと、
	  入力されたジョブに対して課金をおこなうことができても、
	  ヘッダページは<emphasis>無料</emphasis>で提供しなくてはならない、
	  という特有のやり方を強要されます。</para>

	<para>なぜでしょうか。</para>

	<para>出力フィルタは単なる外部プログラムなので、
	  課金をするための制御をおこなうとすれば、
	  それはヘッダページを印字するときですが、出力フィルタには、
	  <emphasis>ユーザ名とホスト名</emphasis>
	  の情報や課金情報を格納するファイルがどれな
	  のかということが知らされません。それゆえ、出力ファイルには、
	  誰にプリンタ利用の課金をおこなえばよいのかが分からないのです。
	  テキストフィルタやその他の変換フィルタ
	  (これらのフィルタはユーザやホストの情報が知らされます)
	  が出力ページの枚数に <quote>1 ページ分水増しする</quote> だけでは十分ではありません。
          なぜなら、ユーザは
	  <command>lpr <option>-h</option></command> に
	  よってヘッダページの出力を止めることができるからです。
	  やみくもに 1 ページを水増しすると、
	  印字されてもいないヘッダページに対する
	  料金をとることになります。基本的に、<command>lpr
	   <option>-h</option></command> は環境に優しい心を持つユーザに好まれるオプションですが、
	  これを使うように奨励することもできません。</para>

	<para>各々のフィルタに独自のヘッダページを生成させる
	  (その結果、ヘッダページに課金することができる)
	  という方法<emphasis>でも十分であるとはいえません</emphasis>。
	  この場合、<application>LPD</application> はフィルタに
	  <option>-h</option> の情報を送りませんので、<command>lpr
	    <option>-h</option></command>
	  によってヘッダページを印字しないオプションを選択したとしても、
	  依然としてヘッダページは印字され、
	  その分の課金がおこなわれてしまいます。</para>

	<para>では、どのような選択肢があるのでしょうか。</para>

	<para>ヘッダページへの課金に関しては、
	  次のことができます。</para>

	<itemizedlist>
	  <listitem>
	    <para><application>LPD</application> のやり方を受け入れ、
	      ヘッダページは無料とする。</para>
	  </listitem>

	  <listitem>
	    <para><application>LPRng</application> などの
	      <application>LPD</application> の代替品をインストールする。
	      <application>LPD</application>
	      と入れ替えが可能な他のスプーリングソフトウェアに関しては、
              <link linkend="printing-lpd-alternatives">標準スプーラの代替品</link>
              をご覧ください。</para>
	  </listitem>

	  <listitem>
	    <!-- kuriyama - more para -->
	    <para><emphasis>スマートな</emphasis>
	      出力フィルタを作成する。通常、
	      出力フィルタはプリンタを初期化するか、
	      単純な文字列変換をする程度の働きしかしません。
	      (テキスト (入力) フィルタがない場合)
	      出力フィルタはヘッダページとプレインテキストの印字をおこなうのに適しています。

	      プレインテキストを印字するためのテキストフィルタがない場合、
	      <application>LPD</application>
	      はヘッダページを印字するためだけの目的で出力フィルタを起動します。
	      そして、<application>LPD</application>
	      が生成するヘッダページのテキストを解析することにより、
	      出力フィルタはヘッダページに課金するために必要なユーザ名と
	      ホスト名を取得することができます。この方式の唯一の問題点は、
	      出力フィルタは課金情報を格納するデータファイルの名前を知ることが
	      できないということです
	      (<literal>af</literal> 項目で指定されたファイル名は
	      出力ファイルに渡されません)。しかし、既知の
	      名前の課金データファイルを使うのならば、
	      その名前を出力フィルタのプログラム中に埋め込むことができます。

	      解析の手順を簡単にするためには、
	      <filename>/etc/printcap</filename>
	      で <literal>sh</literal> 項目
	      (短いヘッダを指定) を使うとよいでしょう。

	      そしてまた、
	      ここまでの方法は少なからぬトラブルを生じさせるかもしれません。
	      そうなれば、もちろんユーザはヘッダページを無料で
	      提供してくれる気前のよいシステム管理者に感謝することでしょう。
	    </para>
	  </listitem>
	</itemizedlist>
      </sect3>

      <sect3 id="printing-advanced-header-pages-ps">
	<title>&postscript; プリンタでのヘッダページ</title>

	<para>これまでに述べたように、<application>LPD</application>
	  ではプレインテキストのヘッダページをたくさんのプリンタに合うように生成することができます。
	  残念ながら、&postscript; プリンタは、
	  プレインテキストを直接印字することができません。ですから、
	  <application>LPD</application> のヘッダページ機能はまったく、
	  あるいはほとんどの場合、役に立ちません。</para>

	<para>ヘッダページを出力するための自明な方法の1つに、
	  すべての変換フィルタとテキストフィルタにヘッダページを生成させる方法があります。
	  フィルタは、
	  適切なヘッダページを生成するために、
	  ユーザ名とホスト名の引数を使うべきです。この方法の欠点は、いつでも、
	  <command>lpr <option>-h</option></command>
	  によってジョブが入力された場合でさえも、
	  ヘッダページが印字されるということです。</para>

	<para>この方法で試してみましょう。次のスクリプトは、3 つの引数
	  (ユーザ のログイン名、ホスト名、ジョブ名) をとり、簡単な
	  &postscript; 用 のヘッダページを生成します。</para>

	<programlisting>#!/bin/sh
#
#  make-ps-header - make a PostScript header page on stdout
#  Installed in /usr/local/libexec/make-ps-header
#

#
#  These are PostScript units (72 to the inch).  Modify for A4 or
#  whatever size paper you are using:
#
page_width=612
page_height=792
border=72

#
#  Check arguments
#
if [ $# -ne 3 ]; then
    echo "Usage: `basename $0` &lt;user&gt; &lt;host&gt; &lt;job&gt;" 1&gt;&amp;2
    exit 1
fi

#
#  Save these, mostly for readability in the PostScript, below.
#
user=$1
host=$2
job=$3
date=`date`

#
#  Send the PostScript code to stdout.
#
exec cat &lt;&lt;EOF
%!PS

%
%  Make sure we do not interfere with user's job that will follow
%
save

%
%  Make a thick, unpleasant border around the edge of the paper.
%
$border $border moveto
$page_width $border 2 mul sub 0 rlineto
0 $page_height $border 2 mul sub rlineto
currentscreen 3 -1 roll pop 100 3 1 roll setscreen
$border 2 mul $page_width sub 0 rlineto closepath
0.8 setgray 10 setlinewidth stroke 0 setgray

%
%  Display user's login name, nice and large and prominent
%
/Helvetica-Bold findfont 64 scalefont setfont
$page_width ($user) stringwidth pop sub 2 div $page_height 200 sub moveto
($user) show

%
%  Now show the boring particulars
%
/Helvetica findfont 14 scalefont setfont
/y 200 def
[ (Job:) (Host:) (Date:) ] {
200 y moveto show /y y 18 sub def
} forall

/Helvetica-Bold findfont 14 scalefont setfont
/y 200 def
[ ($job) ($host) ($date) ] {
        270 y moveto show /y y 18 sub def
} forall

%
%  That is it
%
restore
showpage
EOF</programlisting>

	<para>そして、変換フィルタやテキストフィルタがそれぞれ、
	  最初にこのスクリプトを起動することで、
	  ヘッダページが出力され、それから、
	  ユーザのジョブの印字をおこないます。次に、
	  このドキュメントの始めのほうで紹介した DVI 変換フィルタを、
	  ヘッダページを印字するように変更したものを示します。</para>

	<programlisting>#!/bin/sh
#
#  psdf - DVI to PostScript printer filter
#  Installed in /usr/local/libexec/psdf
#
#  Invoked by lpd when user runs lpr -d
#

orig_args="$@"

fail() {
    echo "$@" 1&gt;&amp;2
    exit 2
}

while getopts "x:y:n:h:" option; do
    case $option in
        x|y)  ;; # Ignore
        n)    login=$OPTARG ;;
        h)    host=$OPTARG ;;
        *)    echo "LPD started `basename $0` wrong." 1&gt;&amp;2
              exit 2
              ;;
    esac
done

[ "$login" ] || fail "No login name"
[ "$host" ] || fail "No host name"

( /usr/local/libexec/make-ps-header $login $host "DVI File"
  /usr/local/bin/dvips -f ) | eval /usr/local/libexec/lprps $orig_args</programlisting>

	<para>このフィルタがユーザ名やホスト名を決定するために
	  引数リストをどのように解析しなくてはならないかという点に注意してください。
	  この解析方法は他の変換フィルタに対しても同様です。
	  しかしながら、テキストフィルタについては、
	  引数の設定が少し異なっています (これについては、「<link
	    linkend="printing-advanced-filters">
	    フィルタはどのように機能しているか</link>」
	  をご覧ください)。</para>

	<para>前述の通り、上記の手法は、極めて単純なのにも関らず、
	  <literal>lpr</literal>
	  で <quote>ヘッダページを印字しない</quote> オプション
	  (<option>-h</option> オプション) が使えなくなっています。
	  ユーザが森林資源を (あるいは、
	  ヘッダページが課金されているならば、その僅かな金額を)、
	  節約したいと望んでいる場合でも、
	  すべてのフィルタがすべてのジョブ毎にヘッダページを印字
	  することになっているので、節約することはできません。</para>

	<para>ジョブ毎に印字されるヘッダページを
	  ユーザが抑制できるようにするためには、「<link
	    linkend="printing-advanced-header-pages-accounting">
	    ヘッダページに対する課金</link>」で紹介したトリックを
	  使う必要があります。すなわち、LPD
	  が生成するヘッダページの解析をおこない、&postscript;
	  版のヘッダページを出力させる出力フィルタを作るのです。
	  この場合、ユーザが <command>lpr <option>-h</option></command> でジョブを入力すると、
	  <application>LPD</application> はヘッダページを生成しなくなり、また、
	  出力フィルタも起動されません。そうでないならば、
	  作成した出力フィルタが <application>LPD</application>
	  からのテキストを読み込み、ヘッダページを印字する適当な
	  &postscript; のコードがプリンタに送られるでしょう。</para>

	<para>&postscript; プリンタがシリアルポートに接続されている場合、
	  出力フィルタとして <command>lprps</command> を、
	  上記の動作をおこなうものとして <command>psof</command>
	  を使うことができます。ただし、<command>psof</command>
	  はヘッダページに対して課金をおこないませんので注意してください。
	</para>
      </sect3>
    </sect2>

    <sect2 id="printing-advanced-network-printers">
      <title>リモートプリンタからの出力</title>
      <indexterm>
        <primary>プリンタ</primary>
        <secondary>ネットワーク</secondary>
      </indexterm>
      <indexterm><primary>ネットワークプリンタ</primary></indexterm>

      <para>&os; では、ネットワーク越しの印字、すなわち、
	ジョブをリモートプリンタに送ることをサポートしています。
	リモートプリンタからの出力をするには、一般に、
	次の 2 つを参照してください。
      </para>

      <itemizedlist>
	<listitem>
	  <para>リモートホストに接続されたプリンタにアクセスする方法。
	    プリンタがあるホストのシリアル、
	    または、パラレルインタフェースに接続されている場合、
	    ネットワーク上の他のホストからこのプリンタにアクセスできるように
	    <application>LPD</application> を設定します。「<link
	      linkend="printing-advanced-network-rm">リモートホストに
	      接続されたプリンタ</link>」
	    でどのようにするかを説明します。</para>
	</listitem>

	<listitem>
	  <para>ネットワークに直接接続されているプリンタにアクセスする方法。
	    プリンタに、旧来のシリアル、または、
	    パラレルインタフェースに加えて (もしくは、これらに代わって)
	    ネットワーク用のインタフェースがある場合。
	    そのようなプリンタは次のように動作するでしょう。</para>

	  <itemizedlist>
	    <listitem>
	      <para>そのプリンタが <application>LPD</application>
		のプロトコルを理解でき、リモートホストからのジョブを
		キューに入れることさえできる場合。この場合、
		プリンタは、<application>LPD</application>
		が起動している一般のホストのように振る舞います。
		そのようなプリンタを設定するために、
		「<link linkend="printing-advanced-network-rm">
		  リモートホストに接続されたプリンタ</link>」
		と同様の手順をおこなってください。</para>
	    </listitem>

	    <listitem>
	      <para>そのプリンタが、
	        データストリームによるネットワーク接続をサポートしている場合。
		この場合、ネットワーク上の1つのホストとしてプリンタを
		<quote>接続</quote> します。
		このホストは、ジョブをスプーリングする責任を負い、
		スプーリングされたジョブはプリンタに送られます。
		そのようなプリンタをインストールするためのいくつかの提案が
		「<link
		  linkend="printing-advanced-network-net-if">
		  ネットワークにおけるデータストリームの
		  インタフェースを持つプリンタ</link>」にあります。</para>
	    </listitem>
	  </itemizedlist>
	</listitem>
      </itemizedlist>

      <sect3 id="printing-advanced-network-rm">
	<title>リモートホストに接続されたプリンタ</title>

	<para><application>LPD</application> スプーリングシステムでは
	  <application>LPD</application>
	  (または <application>LPD</application> 互換のシステム)
	  が起動している他のホストへジョブを送る機能が
	  始めからサポートされています。この機能により、
	  あるホストに接続されたプリンタへ、
	  他のホストからアクセスできるようになります。また、
	  <application>LPD</application>
	  プロトコルを理解するネットワークインタフェースを持ったプリンタに対しても、
	  この機能は働きます。</para>

	<para>リモートプリンタへの出力を許可するためには、最初に、
	  あるホスト (これを、
	  <emphasis>プリンタホスト</emphasis>と呼びます)
	  にプリンタを接続します。そして、「<link
	    linkend="printing-simple"> プリンタ設定導入編</link>」
	  に書かれた簡単なプリンタの設定をおこなってください。
	  必要ならば、「<link
	    linkend="printing-advanced">プリンタ設定上級編</link>」
	  にある、更に進んだ設定をおこなってください。そして、
	  そのプリンタをテストしてうまく動作することを確認し、<application>LPD</application>
	  に許可した機能がうまく働くかどうかを見てください。さらに
	  <emphasis>ローカルホスト</emphasis>が
	  <emphasis>プリンタホスト</emphasis>の <application>LPD</application>
	  サービスの使用を許可されているか確認して下さい (「<link
	    linkend="printing-advanced-restricting-remote">
	    リモートホストからの利用を制限する
	  </link>」参照)。</para>

        <indexterm>
          <primary>プリンタ</primary>
          <secondary>ネットワーク</secondary>
        </indexterm>
        <indexterm><primary>ネットワークプリンタ</primary></indexterm>
	<para><application>LPD</application>
	  互換のネットワークインタフェースを持つプリンタを使用している場合は、
	  そのプリンタ自身が以下で説明する
	  <emphasis>プリンタホスト</emphasis>になります。そして、
	  <emphasis>プリンタ名</emphasis>とは、
	  そのプリンタに設定した名前のことを指します。
	  これについては、プリンタ、および (または)、
	  プリンタのネットワークインタフェースに付属するドキュメントを参照してください。</para>

	<tip>
	  <para>
            ヒューレット・パッカード社の Laserjet シリーズを使用している場合には、
            プリンタ名を <literal>text</literal> とすると、
            自動的に LF から CRLF への変換が行なわれます。
            そのため、<filename>hpif</filename> スクリプトは必要ありません。
          </para>
	</tip>

	<para>次に、
	  そのプリンタにアクセスしたいと思っている他ホストにおいて、
	  そのホストの <filename>/etc/printcap</filename>
	  ファイルに次にあげるエントリを作ります。</para>

	<orderedlist>
	  <listitem>
	    <para>名前のエントリ。どんな名前でもよいのですが、簡単のため、多分、
	      プリンタホストで設定されたプリンタ名や別名と同じものを使いたいと思うでしょう。</para>
	  </listitem>

	  <listitem>
	    <para><literal>lp</literal>
	      項目で指定されるデバイスは明示的に空にします
	      (<literal>:lp=:</literal> とします)。</para>
	  </listitem>

	  <listitem>
	    <para>スプーリングディレクトリを作成し、
	      <literal>sd</literal> 項目でその位置を指定します。
	      <application>LPD</application>
	      では、プリンタホストにジョブを送信するまでの間、
	      このディレクトリにジョブを格納します。</para>
	  </listitem>

	  <listitem>
	    <para><literal>rm</literal>
	      項目でプリンタホストの名前を指定します。</para>
	  </listitem>

	  <listitem>
	    <para><literal>rp</literal> 項目で
	      <emphasis>プリンタホスト</emphasis>に接続したプリンタ名を指定します。</para>
	  </listitem>
	</orderedlist>

	<para>これで終わりです。
	  変換フィルタやページの大きさやその他の事項を
	  <filename>/etc/printcap</filename>
	  に加える必要はありません。</para>

	<para>次に、
	  リモートホストに接続されたプリンタで印字するための設定例を示します。
	  ホスト <hostid>rose</hostid> には 2 台のプリンタ
	  <literal>bamboo</literal> と <literal>rattan</literal>
	  が接続されています。これらのプリンタをホスト <hostid>orchid</hostid>
	  のユーザが使えるようにしましょう。最初に
	  <hostid>orchid</hostid> の
	  <filename>/etc/printcap</filename> を示します
	  (このファイルは、「<link
	    linkend="printing-advanced-header-pages-enabling">
	    ヘッダページの出力を許可する</link>」
	  で参照することができます)。このファイルには、既に、プリンタ
	  <literal>teak</literal> 用のエントリがありました。以下では、
	  これに、ホスト <hostid>rose</hostid>
	  にある2台のプリンタ用のエントリが加えられています。</para>

	<programlisting>#
#  /etc/printcap for host orchid - added (remote) printers on rose
#

#
#  teak is local; it is connected directly to orchid:
#
teak|hp|laserjet|Hewlett Packard LaserJet 3Si:\
        :lp=<filename class="devicefile">/dev/lpt0</filename>:sd=<filename class="directory">/var/spool/lpd/teak</filename>:mx#0:\
        :if=<filename>/usr/local/libexec/ifhp</filename>:\
        :vf=<filename>/usr/local/libexec/vfhp</filename>:\
        :of=<filename>/usr/local/libexec/ofhp</filename>:

#
#  rattan is connected to rose; send jobs for rattan to rose:
#
rattan|line|diablo|lp|Diablo 630 Line Printer:\
        :lp=:rm=rose:rp=rattan:sd=<filename class="directory">/var/spool/lpd/rattan</filename>:

#
#  bamboo is connected to rose as well:
#
bamboo|ps|PS|S|panasonic|Panasonic KX-P4455 PostScript v51.4:\
        :lp=:rm=rose:rp=bamboo:sd=<filename class="directory">/var/spool/lpd/bamboo</filename>:</programlisting>

	<para><hostid>orchid</hostid>
	  で必要となる作業はスプーリングディレクトリを作ることだけです。</para>

	<screen>&prompt.root; <userinput><command>mkdir <option>-p</option> <filename class="directory">/var/spool/lpd/rattan</filename> <filename class="directory">/var/spool/lpd/bamboo</filename></command></userinput>
&prompt.root; <userinput><command>chmod 770 <filename class="directory">/var/spool/lpd/rattan</filename> <filename class="directory">/var/spool/lpd/bamboo</filename></command></userinput>
&prompt.root; <userinput><command>chown daemon:daemon <filename class="directory">/var/spool/lpd/rattan</filename> <filename class="directory">/var/spool/lpd/bamboo</filename></command></userinput></screen>

	<para>これで、<hostid>orchid</hostid> のユーザが
	  <literal>rattan</literal> と <literal>bamboo</literal>
	  で印字することができるようになりました。
	  たとえば、<hostid>orchid</hostid> のユーザが次のように入力したとします。</para>

          <screen>&prompt.user; <userinput><command>lpr <option>-P</option> bamboo <option>-d</option> <filename><replaceable>sushi-review.dvi</replaceable></filename></command></userinput></screen>

	<para>すると、<hostid>orchid</hostid> の
	  <application>LPD</application> システムは、
	  ジョブをスプーリングディレクトリ
	  <filename class="directory">/var/spool/lpd/bamboo</filename>
	  にコピーし、これが
	  DVI ファイルを印字するジョブであることを記録します。
	  ホスト <hostid>rose</hostid> の <literal>bamboo</literal>
	  スプーリングディレクトリに十分な容量が確保でき次第、
	  両者の <application>LPD</application> は、ジョブのファイルを
	  <hostid>rose</hostid> に転送します。
	  このファイルは、そのすべてが印字されるまで、<hostid>rose</hostid>
	  のキューに留まります。
	  (<literal>bamboo</literal> は &postscript; プリンタなので)
	  DVI から &postscript; への変換は
	  <hostid>rose</hostid> でおこなわれます。</para>
      </sect3>

      <sect3 id="printing-advanced-network-net-if">
	<title>ネットワークにおけるデータストリームの
	  インタフェースを持つプリンタ</title>

	<para>プリンタのネットワークインタフェースカードは、
	  2 種類に分類することができます。
	  1 つはスプーラをエミュレートするもの (高価) で、もう 1
	  つはシリアルやパラレルポートを使うように
	  プリンタにデータを送ることができるだけのもの (安価) です。この節では、
	  後者の使い方を説明します。前者のプリンタは、前節「<link
	    linkend="printing-advanced-network-rm">
	    リモートホストに接続されたプリンタ</link>」
	  の方法が適用できます。</para>

	<para><filename>/etc/printcap</filename> ファイルでは、
	  シリアルかパラレルのインタフェースのどちらを使うのか、
	  そして、(シリアルインタフェースを使う場合)
	  そのボーレートはいくらであるか、フロー制御は使うのか、
	  タブのための遅延を加えるのか、
	  改行文字を変換するかなどの指定をおこなうことができます。
	  しかし、TCP/IP や他のネットワークポートからデータを受け取るプリンタを
	  接続するための指定をおこなうことはでき ません。</para>

	<para>ネットワーク接続されたプリンタにデータを送るためには、
	  テキストフィルタと変換フィルタから呼び出すことができる
	  通信プログラムを開発する必要があります。以下に、
	  そのようなプログラムの例を示します。スクリプト
	  <command>netprint</command> では、
	  標準入力から印字データをすべて受け取り、
	  ネットワーク接続されたプリンタにこれを送ります。
	  <command>netprint</command>
	  の最初の引数でプリンタのホスト名を、
	  2 番目の引数で接続するポート番号を指定します。
	  このプログラムでは単方向通信 (&os; からプリンタ)
	  のみをサポートしていることに注意してください。
	  ネットワークプリンタの多くは双方向通信をサポートしていますので、
	  その恩恵 (プリンタの状態を得たり、
	  課金をおこなうなど) にあずかりたいと思われるかもしれません。
	</para>

	<programlisting>#!/usr/bin/perl
#
#  netprint - Text filter for printer attached to network
#  Installed in /usr/local/libexec/netprint
#

$#ARGV eq 1 || die "Usage: $0 &lt;printer-hostname&gt; &lt;port-number&gt;";

$printer_host = $ARGV[0];
$printer_port = $ARGV[1];

require 'sys/socket.ph';

($ignore, $ignore, $protocol) = getprotobyname('tcp');
($ignore, $ignore, $ignore, $ignore, $address)
    = gethostbyname($printer_host);

$sockaddr = pack('S n a4 x8', &amp;AF_INET, $printer_port, $address);

socket(PRINTER, &amp;PF_INET, &amp;SOCK_STREAM, $protocol)
    || die "Can't create TCP/IP stream socket: $!";
connect(PRINTER, $sockaddr) || die "Can't contact $printer_host: $!";
while (&lt;STDIN&gt;) { print PRINTER; }
exit 0;</programlisting>

	<para>このスクリプトは、
	  様々なフィルタが利用することができます。仮に、Diablo 750-N
	  ラインプリンタを持っており、
	  これがネットワークに接続されているとしましょう。
	  プリンタはポート番号 5100 にて印字するデータを受け取ります。
	  プリンタのホスト名は <hostid>scrivener</hostid> とします。このとき、
	  このプリンタのテキストフィルタは次のようになります。</para>

	<programlisting>#!/bin/sh
#
#  diablo-if-net - Text filter for Diablo printer `scrivener' listening
#  on port 5100.  Installed in /usr/local/libexec/diablo-if-net
#

exec /usr/libexec/lpr/lpf "$@" | /usr/local/libexec/netprint scrivener 5100</programlisting>
      </sect3>
    </sect2>

    <sect2 id="printing-advanced-restricting">
      <title>プリンタの利用に制約を与える</title>

        <indexterm>
          <primary>プリンタ</primary>
          <secondary>利用制限</secondary>
        </indexterm>
      <para>本節では、プリンタの利用に制約を与えるための情報を記しています。
	<application>LPD</application> システムでは、プリンタ (ローカル、
	リモートのいずれに接続されていても)
	にアクセスできる人を制限する機能、
	複数部のコピーの印字の可否を制御する機能、
	ジョブのサイズの最大値やプリンタキューに入る
	ジョブの最大個数を制御する機能を提供しています。</para>

      <sect3 id="printing-advanced-restricting-copies">
	<title>複数部のコピーの印字を制限する</title>

	<para><application>LPD</application>
	  システムではユーザが複数部のコピーの印字を簡単におこなう
	  機能を提供しています。ユーザが、(たとえば) <command>lpr
	    <option>-#5</option></command> コマンドを使ってジョブを印字すると、
	  ジョブのそれぞれのファイルのコピーを 5 部得ることができます。
	  これがよい機能であると思うかどうかは人それぞれでしょう。</para>

	<para>複数部のコピーの印字によってプリンタが
	  必要以上に消耗してしまうと感じるならば、
	  <filename>/etc/printcap</filename>
	  ファイルに <literal>sc</literal>
	  項目を加えてください。これにより、
	  &man.lpr.1; の <option>-#</option>
	  オプションの使用が禁止されます。
	  このオプションが指定されているにも関らず、
	  <option>-#</option> オプションを使うと、
	  次のようなメッセージが表示され、
	  このオプションの利用できない旨を伝えます。</para>

	<screen>lpr: multiple copies are not allowed</screen>

	<para>リモートホストからプリンタをアクセスできる
	  設定にしている場合 (この 設定については、「<link
	    linkend="printing-advanced-network-rm">
	    リモートホストに接続されたプリンタ</link>」
	  をご覧ください)、そのリモートホストの
	  <filename>/etc/printcap</filename> にも同じように
	  <literal>sc</literal>
	  項目を追加する必要があることに注意してください。
	  そうしないと、ユーザは別なホストから複数部のコピーの
	  印字をすることができてしまいます。</para>

	<para>例を使って説明しましょう。次に示す
	  <filename>/etc/printcap</filename> ファイルは、ホスト
	  <hostid>rose</hostid> のものです。プリンタ
	  <literal>rattan</literal> は極めて頑丈なので、
	  複数部のコピーの印字は許可されています。しかし、
	  レーザプリンタの <literal>bamboo</literal>
	  はもう少しデリケートで、
	  このプリンタから複数部のコピーを印字することを <literal>sc</literal>
	  項目を追加することで禁止しています。</para>

	<programlisting>#
#  /etc/printcap for host rose - restrict multiple copies on bamboo
#
rattan|line|diablo|lp|Diablo 630 Line Printer:\
        :sh:sd=<filename class="directory">/var/spool/lpd/rattan</filename>:\
        :lp=<filename class="devicefile">/dev/lpt0</filename>:\
        :if=<filename>/usr/local/libexec/if-simple</filename>:

bamboo|ps|PS|S|panasonic|Panasonic KX-P4455 PostScript v51.4:\
        :sh:sd=<filename class="directory">/var/spool/lpd/bamboo</filename>:sc:\
        :lp=<filename class="devicefile">/dev/ttyu5</filename>:ms#-parenb cs8 clocal crtscts:rw:\
        :if=<filename>/usr/local/libexec/psif</filename>:\
        :df=<filename>/usr/local/libexec/psdf</filename>:</programlisting>

	<para>さらに、orchid の <filename>/etc/printcap</filename>
	  にも <literallayout>sc</literallayout>
	  項目を追加する必要があります (<hostid>orchid</hostid>
	  でこの編集をおこなっているときに、ついでに、プリンタ
	  <literal>teak</literal>
	  でも複数部のコピーの印字を禁止することにしましょう)。</para>

	<programlisting>#
#  /etc/printcap for host orchid - no multiple copies for local
#  printer teak or remote printer bamboo

teak|hp|laserjet|Hewlett Packard LaserJet 3Si:\
        :lp=<filename class="devicefile">/dev/lpt0</filename>:sd=<filename class="directory">/var/spool/lpd/teak</filename>:mx#0:sc:\
        :if=<filename>/usr/local/libexec/ifhp</filename>:\
        :vf=<filename>/usr/local/libexec/vfhp</filename>:\
        :of=<filename>/usr/local/libexec/ofhp</filename>:

rattan|line|diablo|lp|Diablo 630 Line Printer:\
        :lp=:rm=rose:rp=rattan:sd=<filename class="directory">/var/spool/lpd/rattan</filename>:

bamboo|ps|PS|S|panasonic|Panasonic KX-P4455 PostScript v51.4:\
        :lp=:rm=rose:rp=bamboo:sd=<filename class="directory">/var/spool/lpd/bamboo</filename>:sc:</programlisting>

	<para><literal>sc</literal> 項目を指定することにより、
	  <command>lpr <option>-#</option></command>
	  の使用を防ぐことができます。しかし、この状態では
	  &man.lpr.1; を複数回起動したり、
	  1 回のジョブで次のように同じファイルを複数個指定することを防ぐまでには至っていません。</para>

        <screen>&prompt.user; <userinput>lpr <filename><replaceable>forsale.sign forsale.sign forsale.sign forsale.sign forsale.sign</replaceable></filename></userinput></screen>

	<para>このような悪用を防ぐ方法は
	  (その指示を無視することも含めて) たくさんあります。
	  各自で調べてみてください。</para>
      </sect3>

      <sect3 id="printing-advanced-restricting-access">
	<title>プリンタを使用できる人を限定する</title>

        <para>それぞれのプリンタを使用できる人を限定するには、&unix; の
	  グループ権限のメカニズムを利用し、さらに、
	  <filename>/etc/printcap</filename> で <literal>rg</literal>
	  項目を指定することでおこないます。
	  あるプリンタにアクセスさせてもよいと思うユーザすべてを
	  グループのどれかに入れてください。そして、
	  そのグループ名を <literal>rg</literal> で指定します。</para>

	<para>このとき、そのグループに含まれないユーザ
	  (<username>root</username> も含みます)
	  がプリントしようとすると、次のようなメッセージが表示されます。</para>

        <screen>lpr: Not a member of the restricted group</screen>

	<para><literal>sc</literal> (suppress multiple copies :
	  複数部のコピーの印字を禁止する)
	  を指定するときと同様に、<literal>rg</literal>
	  が指定されたプリンタがリモートホストからもアクセスでき
	  (この設定については、
	  「<link linkend="printing-advanced-network-rm">
	    リモートホストに接続されたプリンタ</link>」
	  をご覧ください)、かつ、
	  そのホストでもプリンタを使用できる人を限定するのが
	  妥当であると思う場合は、
	  そのホストの <filename>/etc/printcap</filename> にも
	  <emphasis remap=tt>rg</emphasis>
	  指定をおこなう必要があります。</para>

	<para>たとえば、プリンタ <literal>rattan</literal>
	  は誰でも利用できるが、<literal>bamboo</literal> はグループ
	  <groupname>artists</groupname>
	  に属している人のみが利用できるようにしてみましょう。
	  以下に、もうお馴染みとなったホスト
	  <hostid>rose</hostid> の <filename>/etc/printcap</filename>
	  を示します。</para>

	<programlisting>#
#  /etc/printcap for host rose - restricted group for bamboo
#
rattan|line|diablo|lp|Diablo 630 Line Printer:\
        :sh:sd=<filename class="directory">/var/spool/lpd/rattan</filename>:\
        :lp=<filename class="devicefile">/dev/lpt0</filename>:\
        :if=<filename>/usr/local/libexec/if-simple</filename>:

bamboo|ps|PS|S|panasonic|Panasonic KX-P4455 PostScript v51.4:\
        :sh:sd=<filename class="directory">/var/spool/lpd/bamboo</filename>:sc:rg=artists:\
        :lp=<filename class="devicefile">/dev/ttyu5</filename>:ms#-parenb cs8 clocal crtscts:rw:\
        :if=<filename>/usr/local/libexec/psif</filename>:\
        :df=<filename>/usr/local/libexec/psdf</filename>:</programlisting>

	<para>これ以外の <filename>/etc/printcap</filename> ファイル
	  (ホスト <hostid>orchid</hostid> のもの)
	  はそのままにしておくことにします。もちろん、
	  <hostid>orchid</hostid> のユーザは全員
	  <literal>bamboo</literal> を利用することができます。これは、
	  <hostid>orchid</hostid>
	  には特定のユーザのみにしかアクセスさせておらず、
	  そのユーザにはプリンタを利用させたいと思っているからなのかもしれませんし、
	  そうでないかもしれません。</para>

	<note>
	  <para>1台のプリンタを複数グループのユーザに利用させることはできません。</para>
	</note>
      </sect3>

      <sect3 id="printing-advanced-restricting-sizes">
	<title>入力可能なジョブのサイズを制限する</title>

        <indexterm><primary>プリントジョブ</primary></indexterm>
	<para>たくさんのユーザからプリンタが利用される場合には、多分、
	  ユーザが印字要求を出すことができるファイルのサイズに
	  上限値を置く必要が生じるでしょう。結局のところ、
	  スプーリングディレクトリ
	  が置かれているファイルシステムの空き容量がその
	  上限値になる訳ですが、
	  あるユーザがこれを独占的に使用すること避けるために、
	  他ユーザからのジョブ用の空き容量を確保する必要もあります。</para>

        <indexterm>
          <primary>プリントジョブ</primary>
          <secondary>制御</secondary>
        </indexterm>
	<para><application>LPD</application> では、<literal>mx</literal>
	  項目を指定することにより、
	  ジョブ中の個々のファイルのサイズの上限値を制限する機能を提供しています。
	  指定される ファイルサイズの単位は BUFSIZ ブロックで、1
	  <literal>BUFSIZ</literal> ブロックは 1024バイトを表わします。この
	  <literal>mx</literal> 項目の値として 0 が指定されると、
	  ファイルサイズの制限はなくなります。
	  <literal>mx</literal> が指定されない場合は、
	  デフォルトの制限として 1000 ブロックが使われます。
	</para>

	<note>
	  <para>この制限はジョブ中の各
	    <emphasis>ファイル</emphasis>に対して適用されるものであり、
	    ジョブ全体のサイズ
	    を制限するものでは<emphasis>ありません</emphasis>。</para>
	</note>

	<para>ところで、
	  プリンタに設定された上限値を超えるファイルサイズの
	  ファイルが入力された場合でも、<application>LPD</application>
	  はこれを拒否しません。その代わりに、このファイルは、
	  その先頭から上限値のファイルサイズまでしかキューに入れられません。
	  そして、その部分までが印字され、
	  残りの部分は捨てられます。
	  これが正しい動作といえるのかどうかは議論の余地があるところです。</para>

	<para>それでは、設定例に登場しているプリンタ
	  <literal>rattan</literal> と  <literal>bamboo</literal>
	  の印字可能なファイルサイズに制限を加えてみましょう。
	  <groupname>artists</groupname>
	  グループの人達が作る &postscript; ファイルのサイズは
	  巨大になる傾向があるので、上限値を 5M バイトとします。
	  それから、
	  プレインテキスト用のラインプリンタは無制限とします。</para>

	<programlisting>#
#  /etc/printcap for host rose
#

#
#  No limit on job size:
#
rattan|line|diablo|lp|Diablo 630 Line Printer:\
        :sh:mx#0:sd=<filename class="directory">/var/spool/lpd/rattan</filename>:\
        :lp=<filename class="devicefile">/dev/lpt0</filename>:\
        :if=<filename>/usr/local/libexec/if-simple</filename>:

#
#  Limit of five megabytes:
#
bamboo|ps|PS|S|panasonic|Panasonic KX-P4455 PostScript v51.4:\
        :sh:sd=<filename class="directory">/var/spool/lpd/bamboo</filename>:sc:rg=artists:mx#5000:\
        :lp=<filename class="devicefile">/dev/ttyu5</filename>:ms#-parenb cs8 clocal crtscts:rw:\
        :if=<filename>/usr/local/libexec/psif</filename>:\
        :df=<filename>/usr/local/libexec/psdf</filename>:</programlisting>

	<para>この場合もそうですが、この制限はローカル (ホスト rose)
	  のユーザのみに適用されます。
	  リモートホストからプリンタを利用できるように設定している場合は、
	  そのリモートホストのユーザはこの制限を受けません。
	  これらのユーザにも制限を加える場合は、リモートホストの
	  <filename>/etc/printcap</filename> の <literal>mx</literal>
	  を指定する必要があります。
	  リモートホストから印字するための詳しい情報については、
	  「<link
	    linkend="printing-advanced-network-rm">
	    リモートホストに接続されたプリンタ</link>」
	  を参照してください。</para>

	<para>リモートホストに接続されたプリンタへのジョブの
	  サイズを制限する特別な方法は他にもあります。これについては、
	  「<link linkend="printing-advanced-restricting-remote">
	    リモートホストからの利用を制限する</link>」
	  を参照してください。</para>
      </sect3>

      <sect3 id="printing-advanced-restricting-remote">
	<title>リモートホストからの利用を制限する</title>

	<para><application>LPD</application> スプーリングシステムでは、
	  リモートホストから要求されたジョブの印字を制限するための方法がいくつか提供されています。</para>

	<variablelist>
	  <varlistentry><term>ホストの制限</term>
	    <listitem>
	      <para>ローカルの <application>LPD</application>
		が印字要求を受け付けるリモートホストは、ファイル
		<filename>/etc/hosts.equiv</filename> と
		<filename>/etc/hosts.lpd</filename>
		によって制御することができます。<application>LPD</application>
		では、あるホストから印字の要求がきたとき、
		このホストの名前がこれら 2 つのファイルのどちらかに含まれている
		かどうかを調べます。これが含まれていない場合は、<application>LPD</application>
		はこの要求を拒否します。</para>

	      <para>これらのファイルの形式は単純です。
		各行にホストの名前を
		1つずつ書いていきます。ファイル
		<filename>/etc/hosts.equiv</filename> の方は
		&man.ruserok.3; プロトコルでも利用され、
		&man.rsh.1; や &man.rcp.1;
		といったプログラムの動作に影響するので注意が必要です。
		<filename>/etc/hosts.equiv</filename>
		の記述は慎重におこないましょう。</para>

	      <para>例として、以下にホスト <hostid>rose</hostid> の
		<filename>/etc/hosts.lpd</filename> を示します。
	      </para>

	      <programlisting>orchid
violet
madrigal.fishbaum.de</programlisting>

	      <para>この例では、<hostid>rose</hostid> はホスト
		<hostid>orchid</hostid>, <hostid>violet</hostid>
		そして <hostid
		  role="fqdn">madrigal.fishbaum.de</hostid>
		からの要求を受け付けることになります。
		その他のホストが <hostid>rose</hostid> の
		<application>LPD</application> にアクセスしようとしても、
		<application>LPD</application> はそのジョブを拒否します
		(訳注: 拒否されるのは、そのホストが
		<filename>/etc/hosts.equiv</filename>
		にも含まれていない場合です)。</para>
	    </listitem>
	  </varlistentry>

	  <varlistentry><term>サイズの制限</term>
	    <listitem>
	      <para>スプーリングディレクトリがある
		ファイルシステムに残しておく必要がある
		空き容量の大きさを制御することができます。
		ローカルプリンタ用のスプーリングディレクトリに
		<filename>minfree</filename>
		という名前のファイルを作成します。そして、
		そのファイルの中にリモートホストからのジョブの
		要求を受け付けるために必要な空き容量のディスクブロックサイズ
		(1 ディスクブロック = 512 バイト) を記します。</para>

	      <para>これで、
		リモートホストのユーザにファイルシステムを満杯にされないことが保証されます。
		この機能を使うと、
		ローカルホストのユーザに対してある種の優先権を与えることもできます。
		ローカルホストのユーザは、
		<filename>minfree</filename>
		ファイルで指定された値よりもディスクの空き容量が下回った後でもずっと、
		ジョブをキューに入れることができるのです。</para>

	      <para>たとえば、プリンタ <literal>bamboo</literal> 用の
		<filename>minfree</filename> を作ってみましょう。
		このプリンタのスプーリングディレクトリを調べるために、
		<filename>/etc/printcap</filename> を調べてみましょう。
		以下に、<literal>bamboo</literal>
		のエントリ部分を示します。</para>

	      <programlisting>bamboo|ps|PS|S|panasonic|Panasonic KX-P4455 PostScript v51.4:\
        :sh:sd=<filename class="directory">/var/spool/lpd/bamboo</filename>:sc:rg=artists:mx#5000:\
        :lp=<filename class="devicefile">/dev/ttyu5</filename>:ms#-parenb cs8 clocal crtscts:rw:mx#5000:\
        :if=<filename>/usr/local/libexec/psif</filename>:\
        :df=<filename>/usr/local/libexec/psdf</filename>:</programlisting>

	      <para>スプーリングディレクトリは <literal>sd</literal>
		項目で指定されます。<application>LPD</application>
		がリモートホストからのジョブを受け付けるために必要な
		ファイルシステムの空き容量を 3M バイト
		(= 6144 ディスクブロック) にすることにしましょう。
	      </para>

              <screen>&prompt.root; <userinput><command>echo 6144 &gt; <filename>/var/spool/lpd/bamboo/minfree</filename></command>
              </userinput></screen>
	    </listitem>
	  </varlistentry>

	  <varlistentry><term>利用ユーザの制限</term>
	    <listitem>
	      <para><filename>/etc/printcap</filename> の
		<literal>rs</literal> 項目を指定することで、
		ローカルプリンタを利用できるリモートホストのユーザを制限することができます。
		ローカルホストに接続されたプリンタ用のエントリに
		<literal>rs</literal> 項目が指定されている場合、
		<application>LPD</application>
		は、印字を要求したユーザのアカウントと同じログイン名が
		ローカルホストに登録されている<emphasis>場合に限り</emphasis>、
		そのジョブを受け付けます。それ以外のジョブを
		<application>LPD</application> は拒否します。</para>

	      <para>この機能は、(たとえば)
		複数の部署がネットワークを共有しており、
		この内のあるユーザが部署の境界を越えて活動している場合には特に有用です。
		そのようなユーザに対して、システムのアカウントを与えるだけで、
		これらのユーザは自分が所属する部署のシステムから
		そのシステムに接続されているプリンタを使用することができます。
		これらのユーザにはむしろ、
		プリンタの使用<emphasis>だけ</emphasis>を認め、
		その他のコンピュータ資源を利用させたくないときは、
		それらのユーザにはホームディレクトリを与えず、
		ログインシェルはシェルとしては何の役にも立たない
		<filename>/usr/bin/false</filename> などを指定して、
		これらのユーザのアカウントはプリンタ用の <quote>形式的な</quote> ものとします。</para>
	    </listitem>
	  </varlistentry>
	</variablelist>
      </sect3>
    </sect2>

    <sect2 id="printing-advanced-acct">
      <title>プリンタの利用に対する課金</title>

      <indexterm>
        <primary>課金</primary>
        <secondary>プリンタ</secondary>
      </indexterm>
      <para>という訳で、印字するためには料金をとることが必要です。
	取らない理由などありましょうか。紙やインクにはお金がかかります。
	そして、プリンタの維持費もかかります。
	プリンタには可動部分が搭載されており、
	これらの部分は壊れやすいという傾向があります。
	プリンタや、その利用形態、維持費について調査をし、1 ページ
	(1 フィート、1 メートルなど) 当たりにかかるコストを調べておいてください。
	これに基づき、プリンタの利用に対する課金を、実際に、
	どのように始めればよいのでしょうか。</para>

      <para>さて、残念ながら、この部分に関しては <application>LPD</application>
	スプーリングシステムはほとんど役に立ちません。
	課金は使用しているプリンタの種類、印字するもののファイルの形式、
	プリンタの利用に対する課金での
	<emphasis>あなた自身の</emphasis>要求に大きく左右されます。</para>

      <para>課金システムを実現するためには、プリンタのテキストフィルタ
	(プレインテキストのジョブに対して課金するため) と変換フィルタ
	(その他のファイル形式に対して課金するため) を変更して、
	印字したページを数えたり、
	プリンタに印字したページ数を取得するための要求を送る必要があります。
	ただし、出力フィルタのみを利用している場合は、
	課金をおこなうことができません。フィルタに関しては、
	「<link
	  linkend="printing-advanced-filter-intro">
	  フィルタ</link>」をご覧ください。</para>

      <para>一般に、課金方式には次の 2 つがあります。</para>

      <itemizedlist>
	<listitem>
	  <para><emphasis>定期的に課金する方法</emphasis>
	    はよく利用される方法です。この理由は、
	    恐らく比較的簡単に実現できるからです。
	    誰かがジョブを印字する度に、フィルタはそのユーザ名、
	    ホスト名、印字したページ数を課金データファイルに記録します。
	    毎月、毎学期、毎年、その他お好みの時期に、
	    各プリンタの課金用ファイルを集め、
	    それぞれのユーザが印字したページ数を合計して
	    その分の課金をおこないます。
	    次回の課金期間をデータを 0 にして課金を再開するために、
	    すべてのログファイルを削除します。</para>
	</listitem>

	<listitem>
	  <para><emphasis>利用毎に課金する方法</emphasis>
	    はあまり利用されていません。これは、
	    実現するのが比較的難しいからです。この方式では、
	    プリンタを使用したらすぐに、
	    フィルタがユーザにその利用に対する課金をおこないます。
	    ディスククォータのように、課金作業は瞬時におこなわれます。
	    この方式では、ユーザのアカウントが赤字になる場合に、
	    ユーザが印字をおこなうことを拒否することができます。
	    また、ユーザに <quote>プリンタ版 quota</quote> を調べたり、
	    調整したりする方法を提供したいと思うかもしれ ません。
	    これを実現するためには、ユーザとその quota を追跡するために、
	    あるデータベース用のコードが必要となります。</para>
	</listitem>
      </itemizedlist>

      <para><application>LPD</application> スプーリングシステムでは、
	どちらの方式にも簡単に対応できます。(ほとんどの場合は)
	フィルタを用意しなければならないので、
	課金作業のためのコードも用意しなければなりません。
	しかし、明るい面もあります。
	それは、課金方式に関して、非常に大きな柔軟性が与えられたということです。
	たとえば、「定期的に課金する方法」か、
	「利用毎に課金する方法」のどちらかを選びまず、そして、
	どんな情報 (ユーザ名、ホスト名、ジョブのタイプ、印字された頁数、
	使用した紙の大きさ、印字をするために要した時間など)
	をログに記録するかを決めます。
	以上のことをおこなうには、上記の情報を保持するために、
	フィルタを変更しなくてはなりません。</para>

      <sect3>
	<title>手軽なプリンタ課金方法</title>

	<para>&os; には、「定期的に課金する方法」による課金を
	  すぐに設定できるように、2 個のプログラムを添付しています。
	  その内の1つはテキストフィルタ <command>lpf</command> で、
	  これについては、「<link linkend="printing-advanced-lpf">
	    テキストフィルタ lpf</link>」をご覧ください。もう1つは、
	  &man.pac.8; で、
	  これはプリンタの課金データファイルからのエントリを集め、
	  これを合計するプログラムです。</para>

	<para>「<link linkend="printing-advanced-filters">
	    フィルタはどのように機能しているか</link>」で述べたように、
	  <application>LPD</application>
	  ではテキストフィルタや変換フィルタを起動しますが、
	  そのコマンドラインで使用している課金データファイルの名前が指定されます。
	  両フィルタはこの引数を使って、
	  どの課金データファイルのエントリに書き込めばよいのかを知ることができます。
	  このファイルの名前は <filename>/etc/printcap</filename> 中の
	  <literal>af</literal> 項目によって指定されます。
	  このファイルが絶対パ スで指定されない場合は、
	  スプーリングディレクトリからの相対パスとして扱われます。</para>

	<para><application>LPD</application> は、紙のページの幅と行数
	  (<literal>pw</literal> と <literal>pl</literal> 項目で 指定される)
	  を引数として <command>lpf</command>
	  を起動します。<command>lpf</command> フィルタでは、
	  何ページ印字したかを決定するためにこれらの引数を使用します。
	  ファイルをプリンタに送った後、
	  課金情報を課金データファイルに書き込みます。
	  このファイルは次のようになります。</para>

	<programlisting>2.00 rose:andy
3.00 rose:kelly
3.00 orchid:mary
5.00 orchid:mary
2.00 orchid:zhang</programlisting>

	<para>課金データファイルはプリンタ毎に分けて作るべきです。
	  これは、<command>lpf</command>
	  にはファイルをロックする機構が組み込まれていないためです。
	  したがって、<command>lpf</command>
	  が 2 つ起動されたとき、
	  同じファイルに同時に書き込みをおこなった場合、
	  お互いのエントリを破壊してしまうかもしれません。
	  課金用ファイルを各プリンタ毎に確実に分けるには、
	  <filename>/etc/printcap</filename> 中の
	  <literal>af=acct</literal> 項目を使います。
	  そうすれば、それぞれの課金用ファイルがプリンタのスプーリングディレクトリに、
	  <filename>acct</filename> という名称で作成されます。</para>

	<para>プリンタの利用に対してユーザに課金する準備ができたら、
	  &man.pac.8; プログラムを実行してください
	  (課金したいプリンタのスプーリングディレクトリに移動した後、
	  <command>pac</command> と入力してください)。
	  次のような、ドル中心主義の課金リストが表示されます
	  (訳注: ドル中心主義という表現は、
	  表示がドルで出ることへの著者の皮肉でしょう。
	  セントがあるので小数点以下が表示されますが、
	  この機能も日本では邪魔ですね)。</para>

	<screen>  Login               pages/feet   runs    price
orchid:kelly                5.00    1   $  0.10
orchid:mary                31.00    3   $  0.62
orchid:zhang                9.00    1   $  0.18
rose:andy                   2.00    1   $  0.04
rose:kelly                177.00  104   $  3.54
rose:mary                  87.00   32   $  1.74
rose:root                  26.00   12   $  0.52

total                     337.00  154   $  6.74</screen>

	<para>&man.pac.8; が受け付ける引数には次のようなものがあります。</para>

	<variablelist>
	  <varlistentry><term><option>-P<replaceable>printer</replaceable></option></term>
	    <listitem>
	      <para> プリンタ <replaceable>printer</replaceable>
		の利用に対する課金リストを作成します。
		このオプションは、<filename>/etc/printcap</filename>
		の <literal>af</literal>
		が絶対パスで指定されていた場合に限り、動作します。</para>
	    </listitem>
	  </varlistentry>

	  <varlistentry><term><option>-c</option></term>
	    <listitem>
	      <para>ユーザ名のアルファベット順ではなく、
		課金額の低い順にリストを並べます。</para>
	    </listitem>
	  </varlistentry>

	  <varlistentry><term><option>-m</option></term>
	    <listitem>
	      <para>課金データファイルにあるホスト名を無視します。
		このオプションを使用すると、ホスト
		<hostid>alpha</hostid> のユーザ
		<username>smith</username> とホスト
		<hostid>gamma</hostid> のユーザ
		<username>smith</username> は同一人物として扱われます。
		このオプションが指定されない場合は、
		両者は別なユーザとして扱います。</para>
	    </listitem>
	  </varlistentry>

	  <varlistentry><term><option>-p<replaceable>price</replaceable></option></term>
	    <listitem>
	      <para><filename>/etc/printcap</filename> の
		<literal>pc</literal> 項目で指定された値、または、
		デフォルトの値 (2 セント) に代わり、紙1ページ、または、
		1フィート当たりの価格を指定します。
		<replaceable>price</replaceable> として、
		浮動小数点数を指定することができます。</para>
	    </listitem>
	  </varlistentry>

	  <varlistentry><term><option>-r</option></term>
	    <listitem>
	      <para>リストの並べる順番を逆順にします。</para>
	    </listitem>
	  </varlistentry>

	  <varlistentry><term><option>-s</option></term>
	    <listitem>
	      <para>課金リストを作成し、
		課金データファイルを削除します。</para>
	    </listitem>
	  </varlistentry>

	  <varlistentry><term><replaceable>name</replaceable> <replaceable>&hellip;</replaceable></term>
	    <listitem>
	      <para>ユーザ <replaceable>names</replaceable>
		に対する課金情報のみを表示します。</para>
	    </listitem>
	  </varlistentry>
	</variablelist>

	<para>&man.pac.8; が生成するデフォルトのリストには、
	  各ホストのユーザ別に印字ページ数が表示されます。
	  (ユーザがサイト内のすべてのホストを使用できるため)
	  ホスト名の情報が意味を持たない場合、
	  <command>pac <option>-m</option></command>
	  を実行してください。次のようなリストが得られます。</para>

	<screen>  Login               pages/feet   runs    price
andy                        2.00    1   $  0.04
kelly                     182.00  105   $  3.64
mary                      118.00   35   $  2.36
root                       26.00   12   $  0.52
zhang                       9.00    1   $  0.18

total                     337.00  154   $  6.74</screen>

	<para>課金額を決めるために、
	  &man.pac.8; は <filename>/etc/printcap</filename>
	  ファイルの <literal>pc</literal>
	  項目で指定された値 (デフォルト値は 200、すなわち 1
	  ページ当たり 2 セント)
	  を使います。この項目で、印字物に課金したい
	  ファと思う 1 ページ当たり、
	  または、1 フィート当たりの価格を 100 分の 1 セント単位で指定します。
	  &man.pac.8; を <option>-p</option> オプション付きで起動すると、
	  この値を置き換えることができます。
	  この <option>-p</option> オプションで指定する額の単位は、
	  100 分の 1 セント単位ではなく、ドル単位です。たとえば、次の指定では、
	  1 ページ当たりの単価が 1 ドル 50 セントになります。</para>

          <screen>&prompt.root; <userinput><command>pac <option>-p1.50</option></command></userinput></screen>

	<para>このオプションを使うと、
	  実際の課金額を集計することができます。</para>

	<para>最後に、<command>pac <option>-s</option></command>
	  を起動すると、課金情報は課金データ累計ファイルに保存されます。
	  このファイルの名前は、プリンタの課金データファイルの後ろに
	  <literal>_sum</literal> を付けたものとなります。そして、
	  課金データファイルは削除されます。次に
	  &man.pac.8; が起動されると、
	  その時点までの累計金額を得るために、
	  課金データ累計ファイルが読み込まれ、
	  通常の課金データファイルからの情報に加算されます。</para>
      </sect3>

      <sect3>
	<title>印字されたページ数をどのように数えるか?</title>

	<para>課金を、リモートホストからの印字でさえも、
	  正確におこなうためには、
	  ジョブで使用された紙が何ページであるかを特定できる必要があります。
	  このことは、プリンタ利用に対する課金をおこなう上の根本的な問題です。</para>

	<para>プレインテキストのジョブの場合、
	  問題を解決するのはさほど難しくはありません。
	  ジョブが何行であったかを数え、プリンタがサポートしている紙
	  1 ページに印字できる最大の行数と比較すればよいのです。
	  重ね打ちするために利用されるファイル中のバックスペース文字や、
	  物理的に複数の行に渡る長い論理行に対する取り扱いを忘れずにおこなってください。</para>

	<para>(「<link
	    linkend="printing-advanced-lpf">テキストフィルタ
	    lpf</link>」で紹介した) テキストフィルタ
	  <command>lpf</command> では、課金をおこなうときに、
	  これらの取り扱いをおこなってくれます。
	  課金をおこなうために必要なテキストフィルタを作成している方は、
	  <command>lpf</command>
	  のソースコードが参考になるでしょう。</para>

	<para>これに対して、他のファイル形式の処理はどのようにすれば
	  よいのでしょうか。</para>

	<para>まず、DVI から LaserJet, または、DVI から &postscript;
	  への変換の場合、フィルタが <command>dvilj</command> や
	  <command>dvips</command> の 出力メッセージを解析することで、
	  何ページ分の変換がおこなわれたかを知ることができます。
	  他のファイル形式とその変換プログラムに関しても、
	  同様のことができるかもしれません。</para>

	<para>しかし、この方式には問題点があります。それは、
	  変換されたページがすべて印字されるとは限らないということです。
	  たとえば、プリンタが紙詰まりを起こしたり、トナー切れになったり、
	  はたまた、爆発したりするかもしれません。
	  そのような状況により印字が途中で中止されたとしても、この方式では、
	  ユーザは全ページ分の料金を課されてしまうのです。</para>

	<para>それでは、どのような対策をたてることができるのでしょうか。</para>

	<para><emphasis>正確な</emphasis>
	  課金をおこなうための唯一の<emphasis>確実な</emphasis>方法は、
	  何ページ印字したのかを知らせることができるプリンタを入手し、
	  これをシリアルポートかネットワークに接続することです。
	  ほとんどすべての &postscript;
	  プリンタではこの概念がサポートされています。
	  他のプリンタも同様です (Imagen
	  レーザプリンタをネットワーク接続するなど)。
	  それぞれのプリンタのフィルタを、
	  ジョブを印字した後で印字ページ数を得るように変更してください。
	  そして、課金情報はここで得られた値<emphasis>のみに</emphasis>
	  基づいて記録してください。行数を数えたり、
	  エラーが生じやすいファイルの調査は必要とされません。</para>

	<para>もちろん、
	  気前よく印字料金をすべて無料にすることもできます。</para>
      </sect3>
    </sect2>
  </sect1>

  <sect1 id="printing-using">
    <title>プリンタを使う</title>

    <indexterm>
      <primary>プリンタ</primary>
      <secondary>使い方</secondary>
    </indexterm>
    <para>この節では、&os; で設定したプリンタを使う方法について説明します。
      ここでは、ユーザレベルでのコマンドを概説します。</para>

    <variablelist>
      <varlistentry><term>&man.lpr.1;</term>
	<listitem>
	  <para>印字をおこないます。</para>
	</listitem>
      </varlistentry>

      <varlistentry><term>&man.lpq.1;</term>
	<listitem>
	  <para>プリンタキューを調べます。</para>
	</listitem>
      </varlistentry>

      <varlistentry><term>&man.lprm.1;</term>
	<listitem>
	  <para>プリンタキューにあるジョブを削除します。</para>
	</listitem>
      </varlistentry>
    </variablelist>

    <para>また、「<link linkend="printing-lpc">プリンタの管理</link>」
      節で説明されている管理者用コマンド &man.lpc.8; もあり、
      プリンタやそのキューの制御のために用いられています。</para>

    <para>&man.lpr.1;、&man.lprm.1;、そして &man.lpq.1; の 3
      コマンドは、<option>-P<replaceable>printer-name</replaceable></option>
      オプションをとり、これによって、
      <filename>/etc/printcap</filename> のように操作の対象となる
      プリンタやキューを指定します。
      これによって、様々なプリンタに対してジョブを送る、
      取り消す、調査することができます。
      <option>-P</option> が使われなかった場合は、これらのコマンドは
      <envar>PRINTER</envar> 環境変数で指定されたプリンタを使用します。
      そして、<envar>PRINTER</envar> 環境変数がなかった場合は、
      これらのコマンドはデフォルトのプリンタ
      <literal>lp</literal> を使います。</para>

    <para>以下では、<emphasis>デフォルトプリンタ</emphasis>
      という用語が意味するプリンタは、<envar>PRINTER</envar>
      環境変数で指定されたプリンタ、もしくは、<envar>PRINTER</envar>
      環境変数がない場合は、<literal>lp</literal>
      という名前のプリンタです。</para>

    <sect2 id="printing-lpr">
      <title>印字する</title>

      <para>ファイルを印字するためには、
	次のように入力してください。</para>

      <screen>&prompt.user; <userinput><command>lpr <filename><replaceable>filename</replaceable></filename> <replaceable>...</replaceable></command></userinput></screen>

      <indexterm><primary>印刷</primary></indexterm>
      <para>これにより、
	入力されたファイルのそれぞれをデフォルトのプリンタ
	から印字します。ファイル名が与えられなかった場合、
	&man.lpr.1;
	は標準入力から印字するデータを読み込みます。たとえば、
	次のコマンドにより、ある重要なシステムファイルが印字されます。</para>

      <screen>&prompt.user; <userinput><command>lpr <filename>/etc/host.conf</filename> <filename>/etc/hosts.equiv</filename></command></userinput></screen>

      <para>印字させるプリンタを選択するためには、
	次のように入力します。</para>

      <screen>&prompt.user; <userinput><command>lpr <option>-P</option> <replaceable>printer-name</replaceable> <filename><replaceable>filename</replaceable></filename> <replaceable>...</replaceable></command></userinput></screen>

      <para>次の例では、プリンタ <literal>rattan</literal> に、
	カレントディレクトリにあるファイルの詳細なリストを印字しています。</para>

      <screen>&prompt.user; <userinput><command>ls <option>-l</option> | lpr <option>-P</option> rattan</command></userinput></screen>

      <para>上記の &man.lpr.1; コマンドではファイル名の指定がないので、
	<command>lpr</command> は標準入力から印字するデータ、
	この場合、<command>ls <option>-l</option></command>
	コマンドの出力、を読み込みます。</para>

      <para>&man.lpr.1; コマンドでは、
	出力の整形を制御したり、ファイル変換を適用したり、
	複数部数のコピーを作成したり、
	などといた様々な幅広いオプションを受け付けることもできます。
	詳細については、
	「<link linkend="printing-lpr-options">
	  その他の印字オプション</link>」をご覧ください。</para>
    </sect2>

    <sect2 id="printing-lpq">
      <title>ジョブの処理状況を調べる</title>

      <indexterm><primary>プリントジョブ</primary></indexterm>
      <para>&man.lpr.1; コマンドを使って印字をする場合、プリントしようと
	するデータは <quote>プリントジョブ</quote> と呼ばれる箱に一緒に置かれ、
	これが <application>LPD</application> スプーリングシステムに送られます。
        プリンタにはそれぞれジョブ用のキューがあり、
	送られてきたジョブはあなたや他のユーザからの別のジョブと一緒にそのキューで並んで、
	処理される順番を待ちます。
	プリンタは到着順にこれらのジョブの印字をおこないます。</para>

      <para>デフォルトプリンタのキューの状態を表示するには、
	&man.lpq.1; と入力します。プリンタを指定するときは、
	<option>-P</option> オプションを使います。たとえば、次のコマンド</para>

	<screen>&prompt.user; <userinput><command>lpq <option>-P</option> bamboo</command></userinput></screen>

      <para>は、プリンタ <literal>bamboo</literal>
	のキューの状態を表示します。この <command>lpq</command>
	コマンドの出力結果の例を次に示します。</para>

      <screen>bamboo is ready and printing
Rank   Owner    Job  Files                              Total Size
active kelly    9    /etc/host.conf, /etc/hosts.equiv   88 bytes
2nd    kelly    10   (standard input)                   1635 bytes
3rd    mary     11   ...                                78519 bytes</screen>

      <para>この例では、<literal>bamboo</literal>
	のキューに 3 つのジョブがあることが分かります。
	最初のジョブはユーザ kelly からのものであり、
        <quote>ジョブ番号</quote> 9 が割り当てられています。
	プリンタのすべてのジョブには一意なジョブ番号が付けられています。
	ほとんどの場合、このジョブ番号は無視することができますが、
	ジョブをキャンセルするときにはこの番号が必要になります。
	このことの詳細については、「<link
	  linkend="printing-lprm">ジョブの削除</link>
	」をご覧ください。</para>

      <para>ジョブ番号 9 のジョブは 2 つのファイルを処理します。すなわち、
	&man.lpr.1;
	のコマンドラインに複数のファイル名が与えられたときは、
	1つのジョブとして扱われるのです。このジョブは、現在、
	アクティブジョブ (<quote>Rank</quote>
	の欄の <literal>active</literal> という後に注目) になっています。
	これは、プリンタからそのジョブが現在印字されているはずであることを意味しています。
	2 番目のジョブでは、
	&man.lpr.1; コマンドに標準入力からデータが与えられています。
	3番目のジョブはユーザ <username>mary</username> から与えられました。
	このジョブのサイズはとても大きくなっています。
	彼女がプリントしようとしたファイルのパス名はここで表示させるには長すぎるため、
	&man.lpq.1; コマンドはドットを 3 つだけ表示しています。</para>

      <para>&man.lpq.1; からの出力で一番最初の行もまた有益な情報を与えています。
        この行から、プリンタが現在何をしているか (あるいは、少なくとも
	<application>LPD</application> がプリンタがしていると思っていること)
	が分かります。</para>

      <para>&man.lpq.1; コマンドは
	<option>-l</option> オプションもサポートしています。
	これにより、
	詳しい情報が表示されます。
	<command>lpq <option>-l</option></command> の実行例を次に示します。</para>

      <screen>waiting for bamboo to become ready (offline ?)
kelly: 1st                               [job 009rose]
       /etc/host.conf                    73 bytes
       /etc/hosts.equiv                  15 bytes

kelly: 2nd                               [job 010rose]
       (standard input)                  1635 bytes

mary: 3rd                                [job 011rose]
      /home/orchid/mary/research/venus/alpha-regio/mapping 78519 bytes</screen>
    </sect2>

    <sect2 id="printing-lprm">
      <title>ジョブの削除</title>

      <para>印字するようジョブを
	送った後で印字を中断したくなったときは、
	&man.lprm.1; コマンドで、
	キューの中からそのジョブを削除することができます。
	大抵の場合、アクティブジョブでさえも
	&man.lprm.1; を使って削除することができますが、
	そのジョブの一部またはすべてが印字されてしまうかもしれません。</para>

      <para>デフォルトプリンタへのジョブを削除するためには、最初に、
	&man.lpq.1; を使ってそのジョブ番号を調べます。
	すなわち、それから、
	次のように入力して、ジョブを削除します。</para>

      <screen>&prompt.user; <userinput><command>lprm <replaceable>job-number</replaceable></command></userinput></screen>

      <para>特定のプリンタへのジョブを削除するときは、
	<option>-P</option> オプションを使ってそのプリンタを指定します。
	たとえば、プリンタ <literal>bamboo</literal>
	のキューからジョブ番号 10 のジョブを削除するには次のようにします。</para>

      <screen>&prompt.user; <userinput><command>lprm <option>-P</option> bamboo 10</command></userinput></screen>

      <para>&man.lprm.1; コマンドには略記法がいくつかあります。</para>

      <variablelist>
	<varlistentry><term>lprm -</term>
	  <listitem>
	    <para>あなたが (デフォルトプリンタへ)
	      送ったジョブをすべて削除します。</para>
	  </listitem>
	</varlistentry>

	<varlistentry><term>lprm <replaceable>user</replaceable></term>
	  <listitem>
	    <para>ユーザ <replaceable>user</replaceable> が
	      (デフォルトプリンタへ) 送ったジョブをすべて削除します。
	      他のユーザのジョブを削除できるのはスーパユーザだけです。
	      あなたは、あなた自身のジョブしか削除することはできません。</para>
	  </listitem>
	</varlistentry>

	<varlistentry><term>lprm</term>
	  <listitem>
	    <para>ジョブ番号もユーザ名もシンボル
	      <option>-</option>も指定されないときは、
	      &man.lprm.1; は現在のアクティブジョブを、
	      そのジョブを送ったのがあなた自身であるときに限り、
	      デフォルトプリンタから削除します。ただし、
	      スーパユーザは任意のアクティブジョブを削除することができます。</para>
	  </listitem>
	</varlistentry>
      </variablelist>

      <para>上記の略記法をデフォルトプリンタではなく
	特定のプリンタに対しておこなうときは、<option>-P</option>
	オプションでそのプリンタを指定するだけよいのです。たとえば、
	プリンタ <literal>rattan</literal> のキューへあなたが送ったジョブを
	すべて削除するためには次のようにします。</para>

      <screen>&prompt.user; <userinput><command>lprm <option>-P</option> rattan -</command></userinput></screen>

      <note>
	<para>ネットワーク環境で作業をしている場合、
	  あるホストから送られたプリンタジョブは、これを送ったホストで
	  &man.lprm.1; を使った場合に限って、
	  これを削除することができます。
	  他のホストで同じプリンタを使えたとしても、
	  このジョブを削除することはできません。
	  次の例では、他ホストからジョブを削除することを試みています。</para>

	<screen>&prompt.user; <userinput><command>lpr <option>-P</option> rattan <filename><replaceable>myfile</replaceable></filename></command></userinput>
&prompt.user; <userinput><command>rlogin orchid</command></userinput>
&prompt.user; <userinput><command>lpq <option>-P</option> rattan</command></userinput>
Rank   Owner      Job  Files                          Total Size
active seeyan     12    ...                           49123 bytes
2nd    kelly      13   myfile                         12 bytes
&prompt.user; <userinput><command>lprm <option>-P</option> rattan 13</command></userinput>
rose: Permission denied
&prompt.user; <userinput><command>logout</command></userinput>
&prompt.user; <userinput><command>lprm <option>-P</option> rattan 13</command></userinput>
dfA013rose dequeued
cfA013rose dequeued
	</screen>
      </note>
    </sect2>

    <sect2 id="printing-lpr-options">
      <title>その他の印字オプション</title>

      <para>&man.lpr.1; コマンドには、テキストの整形や、
	図や他のファイル形式の変換、複数部コピーの生成、
	ジョブの扱いなどを制御することができます。
	この節では、これに関するオプションについて記しています。</para>

      <sect3 id="printing-lpr-options-format">
	<title>整形と変換に関するオプション</title>

	<para>以下の &man.lpr.1; 用のオプションはジョブにおける
	  ファイルの整形の制御に関するものです。
	  このオプションは、ジョブにプレインテキストが含まれない場合や
	  &man.pr.1;
	  ユーティリティを使ってプレインテキストを整形する場合に用いてください。</para>

        <indexterm><primary>&tex;</primary></indexterm>
	<para>次の例では、プリンタ
	  <literal>bamboo</literal> に (&tex; 組版システムによる)
	  DVI ファイル
	  <filename><replaceable>fish-report.dvi</replaceable></filename> を印字しています。</para>

	<screen>&prompt.user; <userinput><command>lpr <option>-P</option> bamboo -d <filename><replaceable>fish-report.dvi</replaceable></filename></command></userinput></screen>

	<para>このオプションは、
	  ジョブに含まれるすべてのファイルに対して適用されます。
	  したがって、1 つのジョブに (たとえば) DVI ファイルと ditroff
	  ファイルを混在させることはできません。その代わりに、
	  ファイルを形式毎に別々のジョブに分け、
	  それぞれのジョブでその形式用の変換オプションを使って印字してください。</para>

	<note>
	  <para><option>-p</option> と <option>-T</option>
	    を除くすべてのオプションを使用 するためには、
	    出力先プリンタ用の変換フィルタが必要です。たとえば、
	    <option>-d</option> オプションを使用するには、DVI
	    用の変換フィルタが必要 です。詳細については、「<link
	      linkend="printing-advanced-convfilters">
	      変換フィルタ</link>」で説明しています。</para>
	</note>

	<variablelist>
	  <varlistentry><term><option>-c</option></term>
	    <listitem>
	      <para>cifplot ファイルを印字します。</para>
	    </listitem>
	  </varlistentry>

	  <varlistentry><term><option>-d</option></term>
	    <listitem>
	      <para>DVI ファイルを印字します。</para>
	    </listitem>
	  </varlistentry>

	  <varlistentry><term><option>-f</option></term>
	    <listitem>
	      <para>FORTRAN プログラムを印字します。</para>
	    </listitem>
	  </varlistentry>

	  <varlistentry><term><option>-g</option></term>
	    <listitem>
	      <para>plot のデータを印字します。</para>
	    </listitem>
	  </varlistentry>

	  <varlistentry><term><option>-i <replaceable>number</replaceable></option></term>
	    <listitem>
	      <para>出力に対して、<replaceable>number</replaceable>
		カラム分の字下げをおこないます。
		<replaceable>number</replaceable> が省略されると、
		8 カラム分字下げされます。
		このオプションはある変換フィルタと一緒の指定されたときのみに機能します。</para>

	      <note>
		<para><option>-i</option>
		  と数字の間に空白を入れてはいけません。</para>
	      </note>
	    </listitem>
	  </varlistentry>

	  <varlistentry><term><option>-l</option></term>
	    <listitem>
	      <para>制御文字を含む文字通りのテキストデータを印字します。</para>
	    </listitem>
	  </varlistentry>

	  <varlistentry><term><option>-n</option></term>
	    <listitem>
	      <para>ditroff (device independent troff) データを印字します。</para>
	    </listitem>
	  </varlistentry>

	  <varlistentry><term>-p</term>
	    <listitem>
	      <para>印字する前に &man.pr.1;
		によってプレインテキストを整形します。
		詳細については &man.pr.1; をご覧ください。</para>
	    </listitem>
	  </varlistentry>

	  <varlistentry><term><option>-T <replaceable>title</replaceable></option></term>
	    <listitem>
	      <para>&man.pr.1; コマンドにより生成されるヘッダを、
		ファイル名の代わりに <replaceable>title</replaceable> とする。
		このオプションは、<option>-p</option>
		と一緒に使ったときのみ機能する。</para>
	    </listitem>
	  </varlistentry>

	  <varlistentry><term><option>-t</option></term>
	    <listitem>
	      <para>troff データを印字します。</para>
	    </listitem>
	  </varlistentry>

	  <varlistentry><term><option>-v</option></term>
	    <listitem>
	      <para>ラスタのデータを印字します。</para>
	    </listitem>
	  </varlistentry>
	</variablelist>

	<para>次の例では、&man.ls.1;
	  のマニュアルを美しく整形したものをデフォルトプリンタで印字しています。
	</para>

	<screen>&prompt.user; <userinput><command>zcat <filename>/usr/share/man/man1/ls.1.gz</filename> | troff <option>-t</option> -man | lpr <option>-t</option></command></userinput></screen>

	<para>&man.zcat.1; コマンドで
	  &man.ls.1; のマニュアルのソースファイルの圧縮を復元し、これを
	  &man.troff.1; コマンドに渡しています。
          これによりソースファイルが整形され
          GNU troff の形式となります。
          その結果は &man.lpr.1; に渡され、
	  <application>LPD</application> スプーラへジョブの要求が発せられます。
          &man.lpr.1; には
	  <option>-t</option> オプションが使われているため、
          スプーラでジョブを印字したときに GNU troff
          の形式から、デフォルトプリンタが解釈できる形式へと変換されます。</para>
      </sect3>

      <sect3 id="printing-lpr-options-job-handling">
	<title>ジョブに関するオプション</title>

	<para>以下のオプションは、&man.lpr.1; によって、
	  そのジョブを特殊な扱いにするよう <application>LPD</application>
	  に指示するためのものです。</para>

	<variablelist>
	  <varlistentry><term>-# <replaceable>copies</replaceable></term>
	    <listitem>
	      <para>ジョブに含まれるファイルのそれぞれを
		1 部だけ印字するのではなく、
		<replaceable>copies</replaceable>
		部のコピーを生成させるものです。管理者によっては、
		プリンタの消耗を避け、コピー機による複製を奨励するために
		このオプションの使用が禁止されているかもしれません。
		これに関しては、「<link
		  linkend="printing-advanced-restricting-copies">
		  複数部のコピーの印字を制限する
		</link>」をご覧ください。</para>

	      <para>次の例では、デフォルトプリンタで
		<filename><replaceable>parser.c</replaceable></filename> を 3 部コピーし、次に、
		<filename><replaceable>parser.h</replaceable></filename> を 3 部コピーしています。</para>

	      <screen>&prompt.user; <userinput><command>lpr <option>-#3</option> <filename><replaceable>parser.c parser.h</replaceable></filename></command></userinput></screen>

	    </listitem>
	  </varlistentry>

	  <varlistentry><term>-m</term>
	    <listitem>
	      <para>印字ジョブが完了した後で、メールを送ります。
		このオプションを付けると、<application>LPD</application>
		システムはジョブの処理が終了したときに、
		あなたのアカウントにメールを送ります。
		メールのメッセージには、ジョブが正常終了したのか、あるいは、
		何か異常があり、(しばしば)
		その異常が何であったのかが書かれています。</para>
	    </listitem>
	  </varlistentry>

	  <varlistentry><term>-s</term>
	    <listitem>
	      <para>印字ファイルをスプールディレクトリにコピーせず、
		代わりに、
		シンボリックリンクを作成するよう指示します。</para>

	      <para>印字させるジョブのサイズが大きいとき、
		このオプションを使うと便利かもしれません。このオプションにより、
		スプー ルディレクトリの容量が節約されます (それに、
		巨大なジョブのお陰でスプールディレクトリのあるファイルシステムの空き容量がなくなってしまうかもしれません)。
		さらに、<application>LPD</application>
		がいちいちすべてのデータをコピーする必要がなくなりますので、
		時間の節約にもなります。</para>

	      <para>ただし、欠点もあります。<application>LPD</application>
		はオリジナルのファイルを直接参照するので、
		印字が終了するまでそのファイルを変更したり削除することができません。</para>

	      <note>
		<para>リモートのプリンタで印字している場合、
		  <application>LPD</application> は、結局のところ、
		  ローカルホストからリモートホストにファイルをコピーする必要があります。
		  したがって、<option>-s</option>
		  オプションはローカルのスプーリングディレクトリの空き容量を節約するだけで、
		  リモート側では節約されません。
		  それでも、このオプションは有用です。</para>
	      </note>
	    </listitem>
	  </varlistentry>

	  <varlistentry><term>-r</term>
	    <listitem>
	      <para>ジョブに含まれるファイルを、
		スプーリングディレクトリに
		ファイルをコピーした後に削除します。もしくは、
		<option>-s</option> オプションと一緒に使われた場合は、
		印字終了後に削除されます。
		このオプションの使用には十分注意して下さい。</para>
	    </listitem>
	  </varlistentry>
	</variablelist>
      </sect3>

      <sect3 id="printing-lpr-options-misc">
	<title>ヘッダページ用オプション</title>

	<para>以下のオプションにより、
	  ジョブのヘッダページに通常印字さ
	  れるテキストを
	  &man.lpr.1; に調整させることができます。
	  対象のプリンタからヘッダページが出力されない場合は、
	  これらのオプションは何の効力も持ちません。
	  ヘッダページの設定に関する情報については、
	  「<link linkend="printing-advanced-header-pages">
	    ヘッダページ</link>」を参照してください。</para>

	<variablelist>
	  <varlistentry><term>-C <replaceable>text</replaceable></term>
	    <listitem>
	      <para>ヘッダページに印字されるホスト名を
		<replaceable>text</replaceable> に置き換えます。なお、
		ホスト名の場所には、通常、
		ジョブの要求があったホストの名前が印字されます。</para>
	    </listitem>
	  </varlistentry>

	  <varlistentry><term>-J <replaceable>text</replaceable></term>
	    <listitem>
	      <para>ヘッダページに印字されるジョブ名を
		<replaceable>text</replaceable> に置き換えます。
		ジョブ名の場所には、通常、ジョブの最初のファイル名、
		または、標準入力からデータが印字されたときは
		<filename>stdin</filename> が印字されます。</para>
	    </listitem>
	  </varlistentry>

	  <varlistentry><term>-h</term>
	    <listitem>
	      <para>ヘッダページの出力を禁止します。</para>

	      <note>
		<para>サイトによっては、
		  そのヘッダページの生成方法により、
		  このオプションの効果が現れないかもしれません。
		  詳細は、「<link
		    linkend="printing-advanced-header-pages">
		    ヘッダページ</link>」をご覧ください。</para>
	      </note>
	    </listitem>
	  </varlistentry>
	</variablelist>
      </sect3>
    </sect2>

    <sect2 id="printing-lpc">
      <title>プリンタの管理</title>

      <para>プリンタの管理者として、プリンタの設置、設定、
	そして、それらのテストをおこなう必要がありました。
	&man.lpc.8; コマンドにより、
	これまでとは別な管理方法がプリンタと対話的におこなわれます。
	&man.lpc.8; により、次のことが可能となります。</para>

      <itemizedlist>
	<listitem>
	  <para>プリンタの起動、停止をおこなう。</para>
	</listitem>

	<listitem>
	  <para>キューへの入力の許可、禁止をおこなう。</para>
	</listitem>

	<listitem>
	  <para>それぞれのキューにあるジョブの順番を変更する。</para>
	</listitem>
      </itemizedlist>

      <para>最初に用語に関する注意をしておきます。
	プリンタが<emphasis>停止している</emphasis>とは、
	キューの中にあるどのジョブも印字されることがない状態
	を言います。この状態においても、
	ユーザはまだジョブの要求をおこなうことができますが、
	これらのジョブはキューの中で、
	プリンタが<emphasis>スタートする</emphasis>状態になるまで、
	あるいは、キューの内容が削除されるまで待たされることになります。</para>

      <para>キューが<emphasis>禁止状態</emphasis>にあると、
	(<username>root</username> 以外の)
	すべてのユーザがプリンタにジョブを要求することができません。
	キューが<emphasis>許可状態にある</emphasis>場合は、
	ジョブの入力が許可されます。
	キューが<emphasis>禁止状態にある</emphasis>場合でも、
	プリンタを<emphasis>スタートす
	  る</emphasis>状態にすることは可能です。この場合は、
	キューが空になるまで、
	キュー内のジョブの印字が続けられます。</para>

      <para>一般的に、&man.lpc.8; コマンドを使用するには
	<username>root</username> 権限を持っている必要があります。
	一般のユーザも &man.lpc.8; コマンドを使うことはできますが、
	プリンタの状態を取得することとハングしたプリンタ
	を再スタートすることだけに使用が制限されています。</para>

      <para>以下に、
	&man.lpc.8; コマンドに関する説明の要約を述べます。
	ほとんどのコマンドでは、操作対象となるプリンタを指定するため
	<replaceable>printer-name</replaceable> 引数を与えます。
	<replaceable>printer-name</replaceable> の代わりに
	<literal>all</literal> が与えられると、操作は
	<filename>/etc/printcap</filename>
	内にある全プリンタに対しておこなわれることになります。</para>

      <variablelist>
	<varlistentry><term><command>
	      abort <replaceable>printer-name</replaceable></command></term>
	  <listitem>
	    <para>現在のジョブをキャンセルし、プリンタを停止させます。
	      キューが許可状態にある場合は、
	      ユーザはまだジョブを入力することができます。</para>
	  </listitem>
	</varlistentry>

	<varlistentry><term><command>
	      clean <replaceable>printer-name</replaceable></command></term>
	  <listitem>
	    <para>プリンタのスプーリングディレクトリから、
	      ジョブの古いファイルを削除します。状況によって、
	      とりわけ、印字途中でエラーが発生していたり、
	      管理操作が頻発していた場合には、
	      ジョブで作られたファイルを <application>LPD</application>
	      が完全に削除しないことがあります。このコマンドでは、
	      スプーリングディレクトリに入っていないファイルを見つけ出し、
	      それを削除しています。</para>
	  </listitem>
	</varlistentry>

	<varlistentry><term><command>
	      disable <replaceable>printer-name</replaceable></command></term>
	  <listitem>
	    <para>キューに新しいジョブを入れることを禁止します。
	      プリンタが動作しているときは、
	      キューに残っているジョブの印字は続けられます。ただし、
	      キューが禁止状態にあったとしても、スーパーユーザ
	      (<username>root</username>)
	      は常にジョブを入力することができます。</para>

	    <para>このコマンドは、
	      新しいプリンタやフィルタを設置している間に使用すると有用です。
	      すなわち、キューを禁止状態にしておくと、
	      <username>root</username> によるジョブのみが入力されます。
	      そして、他のユーザは、テストが完了し、
	      <command>enable</command>
	      コマンドでキューが再度許可状態になるまで、
	      ジョブの入力はできなくなります。</para>
	  </listitem>
	</varlistentry>

	<varlistentry><term><command>
	      down <replaceable>printer-name</replaceable>
	      <replaceable>message</replaceable></command></term>
	  <listitem>
	    <para>プリンタをダウンさせます。これは、
	      <command>disable</command> をおこなった後で、
	      <command>stop</command> をおこなった場合と等価になります。
	      <replaceable>message</replaceable> は、ユーザが
	      &man.lpq.1; コマンドでプリンタのキューの状態を調べたり、
	      <command>lpc status</command>
	      でプリンタの状態を調べたときに、
	      プリンタの状況として表示されるメッセージです。</para>
	  </listitem>
	</varlistentry>

	<varlistentry><term><command>
	      enable <replaceable>printer-name</replaceable></command></term>
	  <listitem>
	    <para>プリンタのキューを許可状態にします。
	      ユーザはジョブの入力ができるようになりますが、
	      プリンタがスタートの状態になるまでは、
	      プリンタからは何も印字されません。</para>
	  </listitem>
	</varlistentry>

	<varlistentry><term><command>
	      help <replaceable>command-name</replaceable></command></term>
	  <listitem>
	    <para><replaceable>command-name</replaceable>
	      コマンドのヘルプメッセージを表示します。
	      <replaceable>command-name</replaceable>
	      が指定されなかった場合は、
	      利用できるコマンドの要約が表示されます。</para>
	  </listitem>
	</varlistentry>

	<varlistentry><term><command>
	      restart <replaceable>printer-name</replaceable></command></term>
	  <listitem>
	    <para>プリンタをスタートさせます。通常のユーザは、
	      <application>LPD</application>
	      がある異常な状況でハングしたときに限り、
	      このコマンドを使用することができます。しかし、
	      <command>stop</command>
	      または <command>down</command> コマンドにより、
	      停止状態にあるプリンタをスタートさせることはできません。
	      <command>restart</command> コマンドは、
	      <command>abort</command> の後に <command>start</command>
	      をおこなったことと同じになります。</para>
	  </listitem>
	</varlistentry>

	<varlistentry><term><command>
	      start <replaceable>printer-name</replaceable></command></term>
	  <listitem>
	    <para>プリンタをスタートさせます。
	      プリンタのキューにあるジョブを印字することでしょう。</para>
	  </listitem>
	</varlistentry>

	<varlistentry><term><command>
	      stop <replaceable>printer-name</replaceable></command></term>
	  <listitem>
	    <para>プリンタを停止します。プリンタは、
	      現在のジョブを終了させ、そして、
	      キューにあるその他のジョブは印字しません。
	      プリンタが停止状態にあったとしても、まだ、
	      許可状態にあるキューに対して、ジョブを送ることができます。</para>
	  </listitem>
	</varlistentry>

	<varlistentry><term><command>
	      topq <replaceable>printer-name</replaceable>
	      <replaceable>job-or-username</replaceable></command></term>
	  <listitem>
	    <para><replaceable>printer-name</replaceable>
	      のキューに対して、ジョブ番号
	      <replaceable>job</replaceable> のジョブ、または、ユーザ
	      <replaceable>username</replaceable>
	      から送られたジョブを置き換えて、キューの先頭に持ってきます。
	      このコマンドに関しては、
	      <replaceable>printer-name</replaceable> の代わりに
	      <literal>all</literal>
	      を使用することはできません。</para>
	  </listitem>
	</varlistentry>

	<varlistentry><term><command>
	      up <replaceable>printer-name</replaceable></command></term>
	  <listitem>
	    <para>プリンタをアップ状態にします。これの反対のコマンドが
	      <command>down</command> です。<command>start</command>
	      の次に <command>enable</command>
	      をおこなったことと等しくなります。</para>
	  </listitem>
	</varlistentry>
      </variablelist>

      <para>コマンドラインから上記のコマンドを入力すると、
	&man.lpc.8;
	はこれを受け付けます。コマンドが入力されなかった場合は、
	&man.lpc.8; は対話モードに入り、
	<command>exit</command>、<command>quit</command>、
	または、
	ファイル終端文字が入力されるまでコマンドの入力ができます。</para>
    </sect2>
  </sect1>

  <sect1 id="printing-lpd-alternatives">
    <title>標準スプーラの代替品</title>

    <para>このマニュアルを最初から通読されている方ならば、ここまでで、
      &os; 付属の <application>LPD</application>
      スプーリングシステムに関して知っておくべきことすべてを学ばれたことと思います。
      多分、このシステムにあるたくさんの欠点について認識できたことでしょう。
      そこから
      <quote>(&os; 上で動作する)
      スプーリングシステムには他にどのようなものがあるのか</quote>
      という疑問が自然と湧いてきます。</para>

    <variablelist>
      <varlistentry>
        <term>LPRng</term>

        <indexterm><primary>LPRng</primary></indexterm>
	<listitem>
	  <para><quote>次世代 LPR</quote> を称する
	    <application>LPRng</application> は、
	    PLP を完全に書き換えたものです。
            Patrick Powell と Justin Mason (PLP の主要な管理者)
	    が共同で <application>LPRng</application> を作成しました。
            <application>LPRng</application> の本サイトは
            <ulink url="http://www.lprng.org/"></ulink>
            です。</para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>CUPS</term>

 	<indexterm><primary>CUPS</primary></indexterm>
	<listitem>
	  <para><application>CUPS</application> (the Common UNIX Printing
	    System) は、&unix; ベースのオペレーティングシステムに対して、
	    移植性の高い印刷レイヤを提供します。
	    <application>CUPS</application> は Easy Software Products
	    によって、すべての &unix; ベンダとユーザに、
	    標準的な印刷ソリューションを普及するために開発されています。</para>

	  <para><application>CUPS</application>
	    は、プリントジョブとキューを管理する基盤として
	    Internet Printing Protocol (<acronym>IPP</acronym>)
	    を使っています。機能は限定されますが、
	    ラインプリンタデーモン (<acronym>LPD</acronym>)、
	    サーバーメッセージブロック　(<acronym>SMB</acronym>) や
	    AppSocket (JetDirect とも呼ばれています)
	    プロトコルにも対応しています。
	    CUPS は、&unix; に現実的なプリント機能を備えるため、
	    ネットワークプリンタの検索、
	    PostScript プリンタ記述言語 (<acronym>PPD</acronym>)
	    に基づいた印刷オプションを追加します。</para>

	  <para><application>CUPS</application>
	    のメインサイトは <ulink
	    url="http://www.cups.org/"></ulink> です</para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term>HPLIP</term>

	<indexterm><primary>HPLIP</primary></indexterm>
	<listitem>
	  <para><application>HPLIP</application>
	    (the HP &linux; Imaging and Printing system) は、
	    HP アプライアンス用に HP が開発した、
	    プリンタ、スキャナ、ファックスへの対応のためのプログラム群です。
	    このプログラムでは、印刷機能において
	    <application>CUPS</application>
	    印刷システムをバックエンドとして利用しています。</para>

	  <para><application>HPLIP</application> のメインサイトは、
	    <ulink url="http://hplipopensource.com/hplip-web/index.html"></ulink>
	    です。</para>
	</listitem>
      </varlistentry>
    </variablelist>
  </sect1>


	<sect1 id="printing-troubleshooting">
	  <title>トラブルシューティング</title>

	  <para>&man.lptest.1; を使った簡単なテストをおこなった結果、
	    正しい出
	    力を得られずに、以下に示すような出力が得られるかもしれません。</para>

	  <variablelist>
	    <varlistentry><term>しばらくしたら出力される、または、
		紙の全体が出てこない</term>
	      <listitem>
		<para>プリンタは上で示されたような印字を
		  おこなったのですが、しばらくして止まってしまい、
		  動かなくなってしまいました。
		  印字された結果をプリンタから取り出すためには、
		  プリンタにある PRINT REMAINING ボタン、または、FORM
		  FEED ボタンを押す必要があるようです。</para>

		<para>この場合は、
		  おそらくジョブはプリントをする前に
		  更にデータが送られてこないか待ち続けているのでしょう。
		  この問題を解決するためには、プリンタに FORM FEED
		  文字 (あるいは特定の必要な文字コード) を
		  送るテキストフィルタを使ってください。
		  プリンタ内部に残ったデータをプリンタにすぐに印字させるには、
		  普通はこれで十分です。
		  次のジョブが前のジョブの最終ページの中央の
		  どこかから印字を開始させないためにも、
		  紙の途中で印字のジョブが終了したかどうかを確認するのは有益です。</para>

		<para>シェルスクリプト
		  <filename>/usr/local/libexec/if-simple</filename>
		  を次のように変更して、プリンタへジョブを送信した後に
		  FORM FEED 文字を印字させるようにします。</para>

		<programlisting>#!/bin/sh
#
# if-simple - Simple text input filter for lpd
# Installed in /usr/local/libexec/if-simple
#
# Simply copies stdin to stdout.  Ignores all filter arguments.
# Writes a form feed character (\f) after printing job.

/bin/cat &amp;&amp; printf "\f" &amp;&amp; exit 0
exit 2</programlisting>
	      </listitem>
	    </varlistentry>

	    <varlistentry><term><quote>階段効果</quote> が現れた</term>
	      <listitem>
		<para>出力された紙には次のように印字されていました。</para>

	  <screen>!"#$%&amp;'()*+,-./01234
                 "#$%&amp;'()*+,-./012345
                                 #$%&amp;'()*+,-./0123456</screen>

          <indexterm><primary>MS-DOS</primary></indexterm>
          <indexterm><primary>OS/2</primary></indexterm>
          <indexterm><primary>ASCII</primary></indexterm>
		<para>あなたは<emphasis>「階段効果」</emphasis>
		  の新たなる犠牲者になってしまいました。この原因は、
		  改行を表わすべき文字がなんであるか
                  の解釈が混乱していることにあります。&unix;
		  スタイルのオペレーティングシステムでは、改行文字は
		  ASCII コード 10 の line feed (LF)
		  の 1 文字が使われています。&ms-dos; や &os2; などは ASCII
		  コード 10の LF <emphasis>と</emphasis>、ASCII コード
		  13 の文字 (carriage return または CR)
		  をペアで使います (訳注: Macintosh では CR
		  のみで表現されています)。大抵のプリンタでは、
		  改行を表わすために &ms-dos; の慣習にしたがいます。</para>

		<para>&os; で印字する場合、印字したテキストは LF
		  文字だけ が使われていました。プリンタでは LF
		  文字を見つけると、紙を 1 行分送り出しました。しかし、
		  次の文字を印字するた
		  めの紙の水平方向の位置は維持されました。すなわち、CR
		  文字が意味することは、
		  次の文字を印字する位置を紙の左端に動かすことです。</para>

		<para>&os;
		  がプリンタに動作をして欲しいと思っている動作を以下に示します。
		</para>

		<informaltable frame="none" pgwide="1">
		  <tgroup cols="2">
		    <tbody>
		      <row>
			<entry>プリンタが CR を受け取ったとき</entry>
			<entry>CR 動作 (復帰) をおこなう</entry>
		      </row>

		      <row>
			<entry>プリンタが LF を受け取ったとき</entry>
			<entry>CR + LF 動作 (復帰、改行) をおこなう</entry>
		      </row>
		    </tbody>
		  </tgroup>
		</informaltable>

		<para>このように動作させるための方法がいくつかあります。</para>

		<itemizedlist>
		  <listitem>
		    <para>これらの文字の解釈を変えるために、
		      プリンタの設定スイッチかコントロールパネルを操作する方法。
		      どのようにして設定をするかはプリンタのマニュアルを参照してください。</para>

		    <note>
		      <para>&os;
			以外のオペレーティングシステムを切り替えて使う場合、
			CR と LF 文字の解釈をそのオペレーティングシステムで使われているようにプリンタを
			<emphasis>再設定</emphasis>する必要があるかもしれません。
			以下に示す解決方法のいずれかを
			選ぶのがよいかもしれませんね。</para>
		    </note>
		  </listitem>

		  <listitem>
		    <para>自動的に LF を CR+LF に変換してくれる
		      &os; 用のシリアルドライバを入手する方法。
		      もちろん、このドライバはプリンタ専用に接続される
		      シリアルポート
		      <emphasis>のみ</emphasis>で動作します。
		      この機能を許可するためには、
		      <literal>ms#</literal> 項目を使い、
		      対象プリンタの <filename>/etc/printcap</filename>
		      ファイルで<literal>onlcr</literal> モードを設定します。</para>
		  </listitem>

		  <listitem>
		    <para>LF
		      文字の扱いを一時的に変更するための
		      <emphasis>エスケープコード</emphasis>
		      をプリンタに送る方法。
		      プリンタがサポートしているかもしれないエスケープコード
		      については、
		      プリンタのマニュアルを参照してください。
		      適切なエスケープコードが見つかったら、
		      最初にそのコードを送り、次にプリントジョブを送信
		      するようにテキストフィルタを変更してください。
		    </para>

              <indexterm><primary>PCL</primary></indexterm>
		    <para>次に、Hewlett Packard 社の PCL
		      エスケープコードに対応しているプリンタのための
		      テキストフィルタの例を示します。
		      このフィルタでは、プリンタ に
		      LF 文字を LF と CR の2文字として扱わせます。
		      その後に、プリンタにジョブを送ります。最後に、
		      ジョブの最終ページの紙を排出するため、FROM FEED
		      文字を送ります。このフィルタは Hewlett Packard
		      社のほとんどすべてのプリンタで機能するはずです。</para>

		    <programlisting>#!/bin/sh
#
# hpif - Simple text input filter for lpd for HP-PCL based printers
# Installed in /usr/local/libexec/hpif
#
# Simply copies stdin to stdout.  Ignores all filter arguments.
# Tells printer to treat LF as CR+LF.  Ejects the page when done.

printf "\033&amp;k2G" &amp;&amp; cat &amp;&amp; printf "\f" &amp;&amp; exit 0
exit 2</programlisting>

		    <para>ホスト <hostid>orchid</hostid> の
		      <filename>/etc/printcap</filename>
		      の例を以下に示します。ここには、
		      一番目のパラレルポートにプリンタ
		      (Hewlett Packard LaserJet 3Si)
		      が一台接続されており、そのプリンタ名は
		      <literal>teak</literal> です。</para>

		    <programlisting>#
#  /etc/printcap for host orchid
#
teak|hp|laserjet|Hewlett Packard LaserJet 3Si:\
        :lp=<filename class="devicefile">/dev/lpt0</filename>:sh:sd=<filename class="directory">/var/spool/lpd/teak</filename>:mx#0:\
        :if=<filename>/usr/local/libexec/hpif</filename>:</programlisting>
		  </listitem>

		  <listitem>
		    <note>
		    <title>訳注</title>
		      <para>
		         LF を CR+LF
			に置き換える cat コマンドを作る方法も当然考えられます。
			そして、このコマンドと、<emphasis
			  remap=tt>if-simple</emphasis> の cat
			の部分を置き換えればよいわけです。
			具体的にどのようにするかは、
			読者への練習問題としましょう。</para>
		    </note>
		  </listitem>
		</itemizedlist>
	      </listitem>
	    </varlistentry>

	    <varlistentry><term>各行が重ね書きされてしまった</term>
	      <listitem>
		<para>プリンタは紙送りをまったくしませんでした。
		  テキストすべての行がある行の上で重ねて印字されてしまいました。
		</para>

		<para>この問題は、
		  階段現象とは <quote>正反対</quote> な問題で、
		  ほとんどまれにしか起こりません。&os; では行末として扱われる
		  LF  文字が、紙の左端に印字位置を復帰しますが、
		  紙送りはしない CR 文字として扱われています。</para>

		<para>プリンタの設定スイッチかコントロールパネルを使って、
		  LF と CR
		  の文字を次のような解釈をするようにしてください。
		</para>

		<informaltable frame="none" pgwide="1">
		  <tgroup cols="2">
		    <thead>
		      <row>
			<entry>プリンタが受け取ったとき</entry>
			<entry>プリンタがおこなう</entry>
		      </row>
		    </thead>

		    <tbody>
		      <row>
			<entry>CR</entry>
			<entry>CR 動作 (復帰)</entry>
		      </row>

		      <row>
			<entry>LF</entry>
			<entry>CR + LF (復帰、改行)</entry>
		      </row>
		    </tbody>
		  </tgroup>
		</informaltable>

		<note>
		<title>訳注</title>
		  <para>
		    LF を CR+LF
		    に置き換える cat コマンドを作る方法も当然考えられます。
		    そして、このコマンドと、
		    <filename>if-simple</filename> の cat
		    の部分を置き換えればよいわけです。
		    具体的にどのようにするかは、
		    読者への練習問題としましょう。</para>
		</note>
	      </listitem>
	    </varlistentry>

	    <varlistentry><term>プリンタが文字を紛失してしまう</term>
	      <listitem>
		<para>印字しているのですが、
		  各行の 2 〜 3 文字が印字されません。
		  プリンタを動かせば動かすほど、
		  もっとたくさんの文字が紛失されていき、
		  この問題は更に悪くなっていくかもしれませんでした。</para>

		<para>この問題は、
		  シリアルポートを通してコンピュータから送られてくるデータの速度に、
		  プリンタがついていけないことに起因します
		  (この問題は、パラレルポートに接続された
		  プリンタでは発生することはありません)。
		  この問題を克服する方法が2つあります。</para>

		<itemizedlist>
		  <listitem>
		    <para>プリンタが XON/XOFF のフロー制御をサポート
		      している場合は、項目 <literal>ms#</literal> で
		      <literal>ixon</literal> モードをセットして、&os;
		      にこの機能を使用させてください。</para>
		  </listitem>

		  <listitem>
		    <para>プリンタが Request to Send / Clear to Send
		      ハードウェアハンドシェイク
		      (通称 <literal>RTS/CTS</literal>) をサポートして
		      いる場合は、項目 <literal>ms#</literal> で
		      <literal>crtscts</literal>
		      モードをセットして下さい。それから、
		      プリンタとコンピュータを接続しているシリアルケーブルが
		      ハードウェアフロー制御用に正しく配線されたものかどうかを確認してください。</para>
		  </listitem>
		</itemizedlist>
	      </listitem>
	    </varlistentry>


	    <varlistentry><term>プリンタは意味不明な文字列を印字した</term>
	      <listitem>
		<para>プリンタはランダムなゴミのように
		  見えるものを印字しましたが、
		  意図したテキストは印字してくれませんでした。</para>

		<para>この問題は、通常、
		  シリアルポートに接続したプリンタでの
		  通信パラメータの誤りからくる前項とは別の症状です。
		  <literal>br</literal> 項目の通信速度と
		  <literal>ms#</literal> 項目を再確認してください。
		  また、プリンタでの設定が
		  <filename>/etc/printcap</filename>
		  ファイルで設定した
		  内容と一致しているかどうかも確認してください。</para>

		<note>
		<title>訳注</title>
		  <para>
		    simple-if
		    のような単純なフィルタだけの状態で、
		    日本語を含むテキストを印字しようとした場合にも、
		    シリアルポート、パラレルポートの使用に関係なく、
		    このような症状は見られます。日本語プリンタの場合、
		    漢字コードそのもの
		    を送信しただけでその漢字を印字してくれるものは、
		    少なくとも訳者は見たことがありません。
		    漢字を印字するための制御
		    コードを別途送信するフィルタが必要となります。
		    また、そのようなフィルタを使用していても、
		    そのフィルタが想定してる漢字コードと異なった文書を
		    プリントしようとしたときもこのような症状は出ます。
		    もちろん、これはプリンタ用の
		    言語を持たないプリンタの話で、&postscript; プリンタ
		    などにプレインテキストを送信しても、日本語対応、
		    非対応に関らず、意味不明な文字列が印字される
		    (もしくは、何も印字されない) ことでしょう。</para>
		</note>
	      </listitem>
	    </varlistentry>

	    <varlistentry><term>何も起きない</term>
	      <listitem>
		<para>もしプリンタが何の動作もしないのであれば、
		  ハード的な問題ではなく、多分 &os;
		  の中に問題があります。
		  <filename>/etc/printcap</filename> ファイルで、
		  デバッグしているプリンタのエントリに
		  (<literal>lf</literal> 項目で) ログファイルを取るように
		  設定を追加してください。たとえば、プリンタ
		  <literal>rattan</literal> 用のエントリの項目
		  <literal>lf</literal> は次のようになります。</para>

		<programlisting>rattan|line|diablo|lp|Diablo 630 Line Printer:\
        :sh:sd=<filename class="directory">/var/spool/lpd/rattan</filename>:\
        :lp=<filename class="devicefile">/dev/lpt0</filename>:\
        :if=<filename>/usr/local/libexec/if-simple</filename>:\
        :lf=<filename>/var/log/rattan.log</filename></programlisting>

		<para>次に、もう一度印字をおこなってみます。そして、
		  発生したと思われるエラーメッセージを見るためにログファイル
		  (上記の例では、
		  <filename>/var/log/rattan.log</filename>)
		  を調べます。そこで見られたメッセージを元に、
		  問題を解決してみてください。</para>

		<para>項目 <literal>lf</literal>
		  が指定されていない場合、<application>LPD</application>
		  はデフォルトのログファイルとして
		  <filename class="devicefile">/dev/console</filename> を使います。</para>
	      </listitem>
	    </varlistentry>
	  </variablelist>
	</sect1>
</chapter>

<!--
     Local Variables:
     mode: sgml
     sgml-declaration: "../chapter.decl"
     sgml-indent-data: t
     sgml-omittag: nil
     sgml-always-quote-attributes: t
     sgml-parent-document: ("../book.sgml" "part" "chapter")
     End:
-->
