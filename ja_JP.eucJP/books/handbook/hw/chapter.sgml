<!--
     The FreeBSD Documentation Project
     The FreeBSD Japanese Documentation Project

     Original revision: 1.41
     $FreeBSD$
-->

<appendix id="hw">
  <title>PC ハードウェアコンパチビリティ</title>

  <para><emphasis>訳: &a.jp.yoshiaki;, 1998 年 3 月 23 日.</emphasis></para>

  <para>ハードウェアコンパチビリティの問題は現在の
    コンピュータ業界でもっとも多く起きる種類の問題であり,
    FreeBSDもこれに無縁ではありません.
    安価に普及している PC ハードウェアで動かすことができるという
    FreeBSDの利点は, 市場にある驚くほど多様な種類の製品の
    サポートの義務というマイナス点でもあります.
    FreeBSDのサポートするハードウェアを徹底的に調べて提供することは不
    可能ですが, このセクションでは
    FreeBSDに含まれるデバイスドライバとそ
    のドライバがサポートするハードウェアのカタログを示します.
    可能で適切 なものについては特定の製品についての注釈を含めました.
    また, このハンドブックの <link
      linkend="kernelconfig-config">コンフィグレーション
      ファイル</link> のセクションにも
    サポートされているデバイスのリストがありますので
    そちらもご覧ください.</para>

  <para>FreeBSD
    はボランティアプロジェクトでテスト部門には資金がありません から,
    より多くの情報をこのカタログに載せるにはあなたがたユーザに
    頼らなければなりません.  あなた自身の経験により,
    あるハードウェアが
    FreeBSDで動くか動かないかがわかったとしたら&a.doc; へ
    e-mailして知らせてください. サポートされているハードウェアについて
    の質問は, &a.questions;(詳しいことは <link
      linkend="eresources-mail">メーリングリスト</link>
    を参照してください) へ 宛ててください.
    情報を提供したり質問をする時は FreeBSDのバージョンと使っ
    ているハードウェアのできるだけ詳しい情報を含めることを
    忘れないでください.</para>

  <sect1>
    <title>インターネット上のリソース</title>

    <para>以下のリンクはハードウェアを選ぶのに役に立ちます.
      FreeBSDに対して は必要のない (あるいは適用できない)
      ように見えるかもしれませんが, ここ
      からのハードウェアの情報のほとんどは OSに依存しないものです.
      購入をする前にはあなたの選んだものがサポートされているか
      FreeBSDハード ウェアガイドを注意して読んでください.</para>

    <itemizedlist>
      <listitem>
	<para><ulink url="http://www.tomshardware.com/">Toms's Hardware &amp; Performance Guide</ulink></para>
      </listitem>
    </itemizedlist>

    <para>訳注: 日本国内でFreeBSDの動くハードウェアの情報を提供してい
      るWWWサーバがあります.</para>

    <itemizedlist>
      <listitem>
	<para><ulink url="http://freebsd.chem.nagoya-u.ac.jp/~ugoita/">FreeBSD POWERED hardwares</ulink></para>
      </listitem>
    </itemizedlist>

    <para>これ以外にも情報を提供しているサーバはあります. いくつかの
      URLについて は<ulink url="http://www.jp.FreeBSD.org">FreeBSD
	Japan.</ulink> からたどることができます.</para>
  </sect1>

  <sect1 id="hw-configs">
    <title>組合せの見本</title>

    <para>以下のハードウェアの組合せのサンプルリストは
      ハードウェアベンダや  <emphasis>FreeBSD
	プロジェクト</emphasis>が保証するものではありません. この情
      報は公共の利益のために公開しているものであり,
      極めて数多くあるであろう
      異なったハードウェアの組合せの中からのある経験の
      カタログに過ぎません. やり方はいろいろあります.
      場合によってはうまく行かないこともあります.
      十分気をつけてください.</para>

    <sect2 id="hw-jordans-picks">
      <title>Jordan氏の選んだ組合せ</title>

      <para>私の作ったワークステーションとサーバの構成は
	まずまずうまく行っ ています.
	私はこれを保証できるわけでもありませんし, ここにあげた組
	合せがずっと <quote>best buys</quote>であるわけではありません.
	私はできればリス
	トを更新して行きますがそれがいつになるかはわかりません.</para>

      <para>訳注: &a.jkh; 氏は FreeBSDプロジェクト <link
	  linkend="staff-core">FreeBSD
	  コアチーム</link>のメンバです.</para>

      <sect3 id="hw-mb">
	<title>マザーボード</title>

	<para>Pentium Pro (P6)システム用で気に入っているのは <ulink
	    url="http://www.tyan.com/html/products.html">Tyan</ulink>
	  S1668 デュアルプロセッサマザーボードです. これは Intel
	  PR440FX 同様 オンボードの WIDE SCSI と 100/10MB Intel
	  Etherexpress NIC が ついています.
	  これを使えば最高の小型のシングルあるいは
	  デュアルプロセッサシステム (FreeBSD
	  3.0ではサポートされています)を作ることができます.  Pentium
	  Pro 180/256K チップの価格は非常に安くなっていますが,
	  いつまで手にはいるかはわかりません..</para>

	<para>Pentium II には, どちらかと言えばひいき目ですが, Adaptec
	  SCSI WIDE コントローラのついた <ulink
	    url="http://www.asus.com.tw/">ASUS</ulink> <ulink
	    url="http://www.asus.com.tw/Products/Motherboard/Pentiumpro/P2l97-s/index.html">P2l97-S</ulink> マザーボードです.</para>

	<para>For Pentium machines, the ASUS <ulink
	    url="http://www.asus.com.tw/Products/Motherboard/Pentium/P55tp4/index.html">http://www.asus.com.tw/Products/Motherboard/Pentium/P55tp4/index.html</ulink>
	  はミッドレンジからハイエンドの Pentium
	  サーバあるいはワークステーションシステムには
	  よい選択です. </para>

	<para>フォルトトレラントシステムを構築したいのであれば
	  パリティメモリを 使い,
	  真に24時間/週7日間動作させ続けるアプリケーションであれば
	  ECCメモリを使うべきでしょう.</para>

	<note>
	  <para>ECCメモリはいくらか性能のトレードオ フがあります
	    (それが重要なものであるかそうでないかはあなたのアプ
	    リケーションによりますが). しかし,
	    メモリエラーに対しては明らかに
	    フォルトトレランス性が強化されます.</para>
	</note>
      </sect3>

      <sect3>
	<title>ディスクコントローラ</title>

	<para>これはいくらかトリッキーです. 私は ISAから
	  PCIまですべてコンパチブルな <ulink
	    url="http://www.buslogic.com/">Buslogic</ulink> コント
	  ローラを使うようにすすめていましたが, 現在では ISAでは
	  <ulink url="http://www.adaptec.com/">Adaptec</ulink> 1542CF,
	  EISA では Bt747c, PCIでは Adaptec 2940UW
	  をすすめるよう変わってきています.</para>

	<para>NCR/Symbios の
	  PCIカードも私のところではうまく動いています, ただ し
	  BIOS-less モデルのボード(SCSI ボード上に ROMらしいものがない
	  場合は, マザーボード上に SCSIアダプタのための BIOSが必要な
	  ボードである可能性があります 訳注: SC-200など)
	  を使うのであれば
	  マザーボードがそれをサポートしているかどうか
	  注意しなくてはなりません.</para>

	<para>PCIマシンで2つ以上の
	  SCSIコントローラが必要となるのであれば,
	  PCIバスの不足を防ぐために Adaptec 3940
	  カードを考えてもいいでしょう. これは1つのスロットで2台の
	  SCSIコントローラ(と内部バス)を持ちます.</para>

	<note>
	  <para>
	    ます. 市場には2つのタイプの 3940 がありますので
	    注意しましょう. &mdash; 古いモデルでは AIC 7880
	    チップを使っていますが, 新しいモデルでは AIC 7895
	    を使っています. 新しいモデルでは <ulink
	      url="http://www.FreeBSD.org/pub/FreeBSD/development/cam/"> CAM </ulink>
	    ドライバのサポートが必要です.
	    これはまだ FreeBSD の一部では ありません.
	    自分で付け加えるか, CAM binary snapshot リリースから
	    インストールする必要があります(URLを参照してください).
	  </para>
	</note>
      </sect3>

      <sect3 id="hw-disks">
	<title>ディスクドライブ</title>

	<para>私は, 極々特殊な状況を除いて
	  <quote>それだけのお金をかけることができる なら SCSIは
	  IDEよりもよい</quote> と言っています.
	  小規模なデスクトップ構成 のシステムでも,
	  SCSIであればディスクが安くなっていった時にサーバの
	  (古い入れ換えた)
	  ディスクを比較的簡単に移し替えることができます. あ
	  なたが複数のマシンの管理をしているのであれば単純に
	  容量について考えるのではなく, 食物連鎖のように考えましょう.
	  重要なサーバの場合は議論の余地はありません.
	  SCSI機器と品質の良いケーブルを使いましょう. </para>
      </sect3>

      <sect3 id="hw-jordans-picks-cdrom">
	<title>CDROM ドライブ</title>

	<para>私は SCSIの方が好みますのでもちろん SCSI
	  CDROMを選びました. <ulink
	    url="http://www.toshiba.com/">東芝</ulink> のドライブは
	  常に(スピードがどうであっても)お気に入りでしたが, 古い
	  <ulink url="http://www.plextor.com/">Plextor</ulink> PX-12CS
	  ドライブも好きです. 高々12倍速のドライブですが,
	  高い性能と信頼性を提供してくれています.</para>

	<para>一般的には, 大部分の SCSI CDROM
	  ドライブは私の見た限りではほとんどしっかりした構造ですので
	  多分 HPや NECの SCSI CDROMでも問題が起き
	  ることはないでしょう. SCSI CDROM
	  の価格はここ数ヶ月でかなり下落したようで, 技術的に
	  優れた方法でありながら 現在では IDE CDROMと同じ程度の価
	  格になっています. もし IDE と SCSI の CDROM
	  ドライブの間で選択することができるのなら, 特に IDE
	  を選ぶ理由はないでしょう.</para>
      </sect3>

      <sect3 id="hw-worm">
	<title>CD-R (CD Recordable: WORM) ドライブ</title>

	<para>この原稿を書いている時点で, FreeBSDは 3種類の
	  CDRドライブ (私は これらすべては結局は
	  Phillips社のドライブであるのではないかと考えているのですが)
	  をサポートしています : Phillips CDD 522 (Plasmon
	  のドライブと同様の動作をします), PLASMON RF4100, HP 6020i
	  です. 私は HP 6020i を CDROMを焼くのに使っています(2.2
	  以降の システムで動きます. &mdash; それ以前のリリースの
	  SCSIコードでは動きません). 非常に調子よく動いています.
	  システムの <ulink
	    url="file://localhost/usr/share/examples/worm">/usr/share/examples/worm</ulink>
	  を見てください.
	  ISO9660ファイルシステムイメージ (RockRidge拡張)
	  を作るスクリプトと それを HP6020i CDR
	  で焼くためのスクリプトの例があります.</para>
      </sect3>

      <sect3 id="hw-tape">
	<title>テープドライブ</title>

	<para>私はたまたま <ulink
	    url="http://www.exabyte.com/">Exabyte</ulink> の <ulink
	    url="http://www.Exabyte.COM:80/Products/8mm/8505XL/Rfeatures.html">8mm drives</ulink>
          と <ulink url="http://www.hp.com/">HP</ulink> の
          <ulink url="http://www-dmo.external.hp.com:80/tape/_cpb0001.htm">
            4mm (DAT)</ulink> を持っています.</para>

	<para>バックアップのためであれば, より本質的に丈夫な (また,
	  より容量が大きい) Exabyteの
	  8mmテープの方がおすすめできます.</para>
      </sect3>

      <sect3 id="hw-video">
	<title>ビデオカード</title>

	<para>もし (米国では) 99USドルをかけて商品の Xサーバを<ulink
	    url="http://www.xig.com/">Xi Graphics, Inc. (以前の X
	    Inside, Inc.)</ulink>から買うことができる  なら間違いなく
	  <ulink url="http://www.matrox.com/">Matrox</ulink> <ulink
	    url="http://www.matrox.com/mgaweb/brochure.htm">Millenium
	    II</ulink>カードをおすすめします.
	  このカードは無償提供されている <ulink
	    url="http://www.xfree86.org">XFree86</ulink>
	  (現在のバージョンは 3.3.2です)
	  のサーバでも非常によく動きます.</para>

	<para><ulink url="http://www.nine.com/">Number 9</ulink>の  S3
	  Vision 868と 968 ベースのカード (the 9FX series)
	  はわりあいと速く, <ulink
	    url="http://www.xfree86.org">XFree86</ulink>の S3サーバで
	  うまくサポートされています, 加えて現在では非常に低価格です.
	  まず問題も起きないでしょう. </para>
      </sect3>

      <sect3 id="hw-monitors">
	<title>モニタ</title>

	<para>私の持っている <ulink
	    url="http://cons3.sel.sony.com/SEL/ccpg/display/ms17se2.html">Sony Multiscan 17seII monitors</ulink>
	  は非常に調子がいいので, 同じ (トリニトロン)
	  ブラウン管を使っている Viewsonic をおすすめします.
	  17"よりも 大きなモニタ, 例えば 21"
	  のモニタが実際に必要だとしたらこの文章の執筆時点では
	  2,000USドル以下のもの (20"のモニタでは 1,700USドル以下のもの)
	  はまったくすすめられません.
	  20" 以上のクラスでよいモニタは(いくつも) ありますし,
	  20" クラスで安いモニタもあり ます.
	  うまくいかないことに安くてよいモニタはほとんどありません!
	</para>
      </sect3>

      <sect3 id="hw-networking">
	<title>ネットワーキング</title>

	<para>まず最初に, Intel EtherExpress Pro/100B
	  カードをすすめます. ISA カードでは <ulink
	    url="http://www.smc.com/">SMC</ulink> Ultra 16
	  コントローラ, いくらか安めのPCIベースのカード では SMC
	  9392DST, SMC EtherPower と Compex ENET32カードがおすすめ
	  できます. 一般的に DECの DC2104x
	  イーサネットコントローラチップを 使っている Znyx ZX342 や
	  DEC DE435/450 などのカードはうまく動くでしょうし, (firewall や
	  roouter に便利な) 2-port 品や 4-port 品を
	  よく見つけることができますが, Pro/100B カードは最も少ない
	  オーバーヘッドで最高の性能を出すでしょう.</para>

	<para>もう一方,
	  できるだけ低コストでそこその性能で動くものを探しているなら,
	  ほとんどの NE2000のクローンは極めて低価格で
	  うまく動いてくれます. </para>
      </sect3>

      <sect3 id="hw-serial">
	<title>(特殊な) シリアル</title>

	<para>高速のシリアル ネットワーク インタフェース
	  (同期シリアルカード) を探しているのであれば <ulink
	    url="http://www.dgii.com/">Digi International</ulink>製の
	  <ulink
	    url="http://www.dgii.com/prodprofiles/profiles-prices/di
	    giprofiles/digispecs/sync570.html">SYNC/570</ulink>
	  シリーズのド ライバが今の FreeBSD-CURRENT にあります. <ulink
	    url="http://www.etinc.com/">Emerging Technologies</ulink>
	  も 提供 するソフトウェアにより T1/E1
	  の性能が得られるボードを製造しています.
	  もっとも私が直接これらの製品を動かした
	  経験があるわけではありません.</para>

	<para>訳注:Emerging TechnologiesのWeb
	  ページを見るとカードのスペックに Operating Systems: MS-DOS,
	  MS-WINDOWS, System V UNIX, BSD/OS, FreeBSD, NetBSD and Linux
	  と書いてあります. また   "BSD/OS, FreeBSD and LINUX Router
	  Card Solutions" というページ
	  もあってサポートは良さそうです.</para>

	<para>マルチポートカードの選択の幅はかなり広いですが,
	  FreeBSDがサポー トするいう点では <ulink
	    url="http://www.cyclades.com/"> Cyclades</ulink>
	  の製品が最も信頼できるでしょう. この最大の理由はこ
	  の会社が私たちに十分な評価用ボードとスペックを
	  供給することを約束してくれているからです. 私は Cyclom-16Y
	  が最高の性能価格比であると聞
	  いていましたが最近は価格のチェックはしていません.</para>

	<para>訳注: cycladesの WWWサーバでも Supported Operating
	  Systemsに Linuxや BSDi, FreeBSD が明記されています.</para>

	<para>他のマルチポートカードで評判がよいのは BOCAおよび
	  ASTのカードと  <ulink
	    url="http://www.stallion.com/">Stallion
	    Technologies</ulink>で, このカードには <ulink
	    url="ftp://ftp.stallion.com/drivers/unsupported/freebsd/s
	    talbsd-0.0.4.tar.gz">ここ</ulink>
	  で非公式なドライバが提供されているようです.</para>
      </sect3>

      <sect3 id="hw-audio">
	<title>オーディオ</title>

	<para>私は現在 <ulink url="http://www.creaf.com/">Creative
	    Labs</ulink> AWE32 を 使っています.
	  もっともクリエイティブラボ製品が現在一般的にうまく
	  動いているから, ということにすぎませんが.
	  他のタイプのサウンド
	  カードは同様にうまくは動かないと聞いています. 単に私の経験が
	  乏しいということにすぎないと言うことなのかも知れませんが.
	  (私は以前は GUS のファンでしたが, Gravis はサウンドカード
	  から撤退してしまいました).</para>
      </sect3>

      <sect3 id="hw-vgrabbers">
	<title>ビデオキャプチャー</title>

	<para>ビデオキャプチャーについては2つのいい選択肢があります
	  &mdash; Hauppauge や WinTV などの Brooktree BT848
	  チップベースのボードは FreeBSD で非常にうまく動きます.
	  もう一つの動作するボードは <ulink
	    url="http://www.matrox.com/">Matrox</ulink> <ulink
	    url="http://www.matrox.com/imgweb/meteor.htm">Meteor
	  </ulink> カードです. FreeBSD はクリエィティブラボの古い
	  video spigotカードの
	  サポートはしていますがこれは見つけるのは非常に
	  むずかしいでしょう. Meteor は 440FX
	  チップセットベースのマザーボードでは
	  <emphasis>動きません</emphasis>ので注意してください.
	  詳細は<link
	    linkend="hw-mb">マザーボード</link>の節を参照してください.
	  このような場合には BT848 ベースの
	  ボードを使った方がよいでしょう.</para>
      </sect3>
    </sect2>
  </sect1>

  <sect1 id="hw-core">
    <title>中心部/プロセッサ</title>
    <para></para>

    <sect2>
      <title>マザーボード, バス, チップセット</title>

      <sect3>
	<title>* ISA</title>

	<para></para>
      </sect3>

      <sect3>
	<title>* EISA</title>

	<para></para>
      </sect3>

      <sect3>
	<title>* VLB</title>

	<para></para>
      </sect3>

      <sect3 id="hw-mb-pci">
	<title>PCI</title>

	<para><emphasis>原作: &a.obrien; 投稿者: &a.rgrimes;.<!-- <br> -->
	    25 April 1995.</emphasis></para>

	<para><emphasis>更新: &a.jkh;.</emphasis><!-- <br> -->最終更新
	  <emphasis>26 August 1996.</emphasis></para>

	<para><emphasis>訳: &a.jp.yoshiaki;.<!-- <br> -->
	    12 October 1996.</emphasis></para>

	<para>Intelの PCIチップセットについて, 以下にさまざまな種類
	  の既知の不具合と問題の程度のリストを示します.</para>

	<variablelist>
	  <varlistentry><term>Mercury:</term>
	    <listitem>
	      <para>ISAバスマスタがISAとPCIブリッジの向
		こう側にある場合は,キャッシュコヒーレンシ(一貫性)の
		問題があります.  このハードウェア欠陥に対処してうま
		く動かす方法はキャッシュを
		offにする以外にはありません.</para>
	    </listitem>
	  </varlistentry>

	  <varlistentry><term>Saturn-I <emphasis>
		(82424ZX の rev 0, 1 ,2)</emphasis>:</term>
	    <listitem>
	      <para>ライトバックキャッシュのコヒーレンシに
		問題があります.
		このハードウェア欠陥に対処してうまく動かす方法は
		外部キャッ
		シュをライトスルーにすること以外にはありませ ん.
		Saturn-IIにアップデートしましょう.</para>
	    </listitem>
	  </varlistentry>

	  <varlistentry><term>Saturn-II <emphasis>
		(82424ZX の rev 3 or 4)</emphasis>:</term>
	    <listitem>
	      <para>問題なく動きます.
		ただし多くのマザーボードではライトバック動作に必要な
		外部ダーティビット SRAMが実装されていません.
		対策としてはライトスルーモードで動かすか, ダーティ
		ビット SRAMをインストールするかがあります. (これは
		ASUS PCI/I-486SP3G の rev 1.6
		以降で使われています)</para>
	    </listitem>
	  </varlistentry>

	  <varlistentry><term>Neptune:</term>
	    <listitem>
	      <para>2つより多くの(3台以上の)バスマスタデ
		バイスを動かすことができません. Intelは設計の欠陥を
		認めています. 2つを越えるバスマスタを許さない, 特別な
		設計のハードウェアで PCIバスアービタを置き換えることに
		より解決されています. (Intelの Altair boardや他にはい
		くつかの Intelサーバグループマザーボードに見られます).
		そして, もちろん Intelの公式の回答は Triton
		チップセットへの 移行で,
		<quote>こちらでは修整した</quote>ということです.</para>
	    </listitem>
	  </varlistentry>

	  <varlistentry><term>Triton <emphasis>(430FX)</emphasis>:</term>
	    <listitem>
	      <para>知られているキャッシュコヒーレンシ
		やバスマスタの問題はありませんがパリティチェック機能が
		ありません.  パリティを使いたいような場合は, 可能であ
		れば Triton-II
		ベースのマザーボードを選びましょう.</para>
	    </listitem>
	  </varlistentry>

	  <varlistentry><term>Triton-II <emphasis>(430HX)</emphasis>:</term>
	    <listitem>
	      <para>このチップセット
		を使っているマザーボードに関するすべての
		報告によれば今の ところ好評です.
		既知の問題はありません.</para>
	    </listitem>
	  </varlistentry>

	  <varlistentry><term>Orion:</term>
	    <listitem>
	      <para>このチップセットの初期のバージョンでは PCI
		write-posting にバグがあり, 大量の PCIバストラフィッ
		クのあるアプリケーションでは性能の著しい低下があるとい
		う障害がありました. B0以降のリビジョンのチップセットで
		は問題は解決されています.</para>
	    </listitem>
	  </varlistentry>

	  <varlistentry><term>
	      <ulink url="http://developer.intel.com/design/pcisets/desktop.htm#440FX">440FX</ulink>:</term>
	    <listitem>
	      <para>これは <ulink
		  url="http://www.intel.com/procs/ppro/index.htm">
		  Pentium Pro</ulink> に対応したチップセットで,
		初期の  Orion チップセットにあったような問題は見られず,
		問題なく動 いているようです.
		また, これは ECCやパリティを含んだ広い
		種類のメモリに対応しています.
		既知の問題は Matrox Meteor
		ビデオキャプチャカードに関するものだけです.</para>
	    </listitem>
	  </varlistentry>
	</variablelist>
      </sect3>
    </sect2>

    <sect2>
      <title>CPU/FPU</title>

      <para><emphasis>原作  &a.asami;.<!-- <br> -->
	  27 December 1997.</emphasis></para>

      <sect3>
	<title>P6 クラス (Pentium Pro/Pentium II)</title>

	<para>Pentim Pro, Pentim IIとも
	  FreeBSDで使うのにまったく問題はありません. 実際, わたしたちのメイン
	  FTP サイトである <ulink
	    url="ftp://ftp.FreeBSD.org/">ftp.FreeBSD.org</ulink>
	  (世界一大きな FTP サイト "<filename>ftp.cdrom.com</filename>"
	  としても知られています) では Pentium Pro で
	  FreeBSD を使っています. 興味のある方向けに<ulink
	    url="ftp://ftp.cdrom.com/archive-info/wcarchive.txt">
	    設定の詳細</ulink>が公開されています.</para>
      </sect3>

      <sect3>
	<title>Pentium クラス</title>

	<para>Intel Pentium (P54C), Pentium MMX (P55C), AMD K6と
	  Cyrix/IBM 6x86MXプロセッサは全て
	  FreeBSDで動作確認がされています. どの
	  CPUが速いかということはここでは述べません.
	  インターネットを探せばあれが
	  速いとかこっちの方がいいとか教えてくれるサイトは
	  いっぱいありますので, そちらをご覧ください. <!-- smiley
	  --><emphasis>:)</emphasis></para>

	<note>
	  <para>一つ注意しないといけないのは, CPU
	    によって必要な電源電圧や冷却の仕様が 異なるということです.
	    マザーボードが指定された電圧を供給できることを
	    必ず確認しましょう. 例えば, 最近の
	    MMX チップにはコアと入出力で違う電圧を使うもの (コア 2.9V,
	    入出力 3.3V など) がたくさんあります. また, AMDと
	    Cyrix/IBMのチップには
	    Intelの製品より熱くなるものがいくつかあります.
	    その場合には強力なヒートシンク／ファンを使いましょう.
	    (各社のホームページにお勧めの部品のリストがあります.)
	  </para>
	</note>

	<sect4>
	  <title>クロックスピード</title>

	  <para><emphasis>原作  &a.rgrimes;.<!-- <br> -->
	      1 October 1996.</emphasis></para>

	  <para><emphasis>更新  &a.asami;.<!-- <br> -->
	      最終更新 27 December 1997.</emphasis></para>

	  <para>Pentium クラスのマシンはシステムの
	    いくつかの部分で異なったクロックスピードを使っています.
	    これは CPU, 外部メモリバス, PCIバスです.
	    別々のクロックスピードが使われるために<quote>高速な</quote>
	    CPUを使ったシステムが <quote>低速な</quote>
	    システムよりも必ずしも速いとは限りません.
	    それぞれの場合の違いを以下の表に示します.</para>

	  <informaltable frame="none">
	    <tgroup cols="4">
	      <thead>
		<row>
		  <entry>CPUクロック MHz</entry>
		  <entry>外部クロックとメモリバス MHz</entry>
		  <entry>外部クロックと内部クロックの比</entry>
		  <entry>PCIバスクロック MHz</entry>
		</row>
	      </thead>

	      <tbody>
		<row>
		  <entry>60</entry><entry>60</entry>
		  <entry>1.0</entry><entry>30</entry></row>
		<row>
		  <entry>66</entry><entry>66</entry>
		  <entry>1.0</entry><entry>33</entry></row>
		<row>
		  <entry>75</entry><entry>50</entry>
		  <entry>1.5</entry><entry>25</entry></row>
		<row>
		  <entry>90</entry><entry>60</entry>
		  <entry>1.5</entry><entry>30</entry></row>
		<row>
		  <entry>100</entry><entry>50</entry>
		  <entry>2</entry><entry>25</entry></row>
		<row>
		  <entry>100</entry><entry>66</entry>
		  <entry>1.5</entry><entry>33</entry></row>
		<row>
		  <entry>120</entry><entry>60</entry>
		  <entry>2</entry><entry>30</entry></row>
		<row>
		  <entry>133</entry><entry>66</entry>
		  <entry>2</entry><entry>33</entry></row>
		<row>
		  <entry>150</entry><entry>60</entry>
		  <entry>2.5</entry><entry>30 (Intel, AMD)</entry></row>
		<row>
		  <entry>150</entry><entry>75</entry>
		  <entry>2</entry><entry>37.5 (Cyrix/IBM 6x86MX)</entry></row>
		<row>
		  <entry>166</entry><entry>66</entry>
		  <entry>2.5</entry><entry>33</entry></row>
		<row>
		  <entry>166</entry><entry>66</entry>
		  <entry>2.5</entry><entry>33</entry></row>
		<row>
		  <entry>180</entry><entry>60</entry>
		  <entry>3</entry><entry>30</entry></row>
		<row>
		  <entry>200</entry><entry>66</entry>
		  <entry>3</entry><entry>33</entry></row>
		<row>
		  <entry>233</entry><entry>66</entry>
		  <entry>3.5</entry><entry>33</entry></row>
	      </tbody>
	    </tgroup>
	  </informaltable>

	  <note>
	    <para>66 MHz は実際には 66.667 MHzかもしれませんが,
	      そうだと決まっているわけでもありません.</para>

	    <para>Pentium 100 は 50MHzの外部クロックの 2
	      倍または 66MHz の 1.5 倍の両方で
	      動かすことができます.</para>
	  </note>

	  <para>3 倍クロック以上の CPU ではメモリアクセス速度が
	    不足気味であるという点には注意していただきたいですが,
	    上の表を見るかぎりでは 100, 133, 166, 200, 233
	    MHzを使うのが最良だというのがわかります.</para>
	</sect4>

	<sect4>
	  <title>AMD K6のバグ</title>

	  <para>AMDの K6プロセッサで大きなコンパイルをすると,
	    セグメンテーションフォルトで
	    プロセスが落ちることがあるという事例が
	    1997年に多数報告されました. これは
	    '97年の第3四半期に直ったようです. 情報を総合すると,
	    チップ上の製造年週が <quote>9733</quote> (97年の
	    第33週に製造)
	    以降のものは大丈夫ということのようです.</para>
	</sect4>
      </sect3>

      <sect3>
	<title>* 486 クラス</title>

	<para></para>
      </sect3>

      <sect3>
	<title>* 386 クラス</title>

	<para></para>
      </sect3>

      <sect3>
	<title>286 クラス</title>

	<para>FreeBSDは 80286マシンでは動きません. 現在の巨大なフ
	  ルスペックの
	  UNIXをこのようなハードウェアで動かすことはほとんど
	  不可能でしょう.</para>
      </sect3>
    </sect2>

    <sect2>
      <title>メモリ</title>

      <para>FreeBSDをインストールするのに最低限必要なメモリ量は 5
	MBです. いったんシステムが起動して<link
	  linkend="kernelconfig-building">カスタムカーネルを
	  作る</link>ことができるならば, もっと少ないメモリ
	で動かすこともできます. <filename>boot4.flp</filename>
	を使えば 4 MB しかメモリがなく
	てもインストールできます.</para>
    </sect2>

    <sect2>
      <title>* BIOS</title>

      <para></para>
    </sect2>
  </sect1>

  <sect1 id="hw-io">
    <title>入力/出力デバイス</title>

    <sect2>
      <title>* ビデオカード</title>

      <para></para>
    </sect2>

    <sect2>
      <title>* サウンドカード</title>

      <para></para>
    </sect2>

    <sect2>
      <title>シリアルポートとマルチポートカード</title>

      <sect3 id="uart">
	<title>UART とは何か, そしてどのように動作するか</title>

	<para><emphasis>Copyright &copy; 1996 &a.uhclem;,
	    All Rights Reserved.<!-- <br> -->
	    13 January 1996.</emphasis></para>

	<para><emphasis>訳: &a.jp.saeki;, &a.jp.iwasaki;.<!-- <br> -->
	    11 November 1996.</emphasis></para>

	<para>( ここからは &a.jp.saeki; が翻訳を担当)</para>

	<para>汎用非同期送受信コントローラ (UART)
	  はコンピュータのシリアル通信 サブシステムの鍵となる部品です.
	  UART は何バイトかのデータを受けとり,  これを 1
	  ビットずつ順番に送信します. 受信側では, もう一つの UART が
	  このビット列を完全なバイト列に組み立て直します.</para>

	<para>シリアル転送は,
	  モデムやコンピュータ間の非ネットワーク型の通信,
	  ターミナルその他のデバイスで広く使われています.</para>

	<para>シリアル転送には主に同期と非同期という
	  二つの形式があります:  通信サブシステムの名前は,
	  そのハードウェアでサポートされている
	  通信モードによって変化します.  通常,
	  非同期通信をサポートしているものは文字 <literal>A</literal>
	  を含み,  同期通信をサポートしているものは文字
	  <literal>S</literal> を含みます.
	  以下で両方の形式について詳しく説明します.</para>

	<para>通常使われている略号は以下の通りです:
	  <blockquote>
	    <para>UART	汎用非同期送受信装置 (Universal
	      Asynchronous Receiver/Transmitter)</para>
	  </blockquote>

	  <blockquote>
	    <para>USART	汎用同期-非同期送受信装置 (Universal
	      Synchronous-Asynchronous Receiver/Transmitter)</para>
	  </blockquote></para>

	<sect4>
	  <title>同期シリアル転送</title>

	  <para>同期シリアル転送では,
	    送信側と受信側がクロックを共有している 必要があります.
	    さもなければ, 送信側がストローブまたは
	    その他のタイミング信号を供給して,
	    受信側にデータの次のビットを いつ<quote>読み込</quote>
	    めばよいのかを知らせる必要があります.</para>

	  <para>ほとんどの同期シリアル通信では,
	    常に何らかのデータが転送され続けます.  そのため,
	    転送のタイミングまでに送信データが用意できていなければ,
	    通常のデータのかわりに「埋め草」 (fill character)
	    が送られます.  同期通信では,
	    送信側と受信側との間でデータビットのみが転送されるため,
	    同じビット速度の非同期シリアル通信に比べて効率的です.
	    しかし,
	    送信側と受信側でクロック信号を共有するために余分な電線と
	    回路が必要となる場合には,
	    よりコスト高となる可能性があります.</para>

	  <para>プリンタやハードディスクでも同期転送の
	    一種が使用されています.  このときデータが 1
	    組みの電線で送られる一方, クロック信号または
	    ストローブ信号が別の電線で送られます.
	    プリンタやハードディスクは通常,
	    シリアルデバイスではありません.
	    ほとんどのハードディスクのインタフェース規格では,
	    データを送るための
	    線とは別にクロックまたはストローブ信号を
	    送るための線を持っていて,  ストローブ 1
	    回毎に一つのデータ全体を送ります.  PC 産業界では,
	    これらはパラレルデバイスとして知られています.</para>

	  <para>PC の標準的なシリアル通信ハードウェアは,
	    同期モードをサポートして いません.
	    ここで同期モードについて述べたのは, 非同期モードとの
	    比較のために過ぎません.</para>
	</sect4>

	<sect4>
	  <title>非同期シリアル転送</title>

	  <para>非同期転送は,
	    送信側がクロック信号を受信側に送らなくても
	    データを転送することができます. そのかわり,
	    送信側と受信側は
	    あらかじめタイミングパラメータや同期のために追加される
	    特別なビットについて
	    取り決めをおこなっておかなければなりません.</para>

	  <para>非同期転送をおこなうために UART
	    にデータが与えられると, 「スタートビット」
	    と呼ばれるビットが転送データの先頭に追加されます.
	    スタートビットはデータの転送開始を受信側に
	    知らせるために使われ,
	    これにより受信側のクロックを送信側のクロックに
	    同期させます.  この二つのクロックは,
	    転送データの残りのビットを転送する間に 10%
	    以上ふらつかないように正確なものでなければなりません.
	    (この条件は機械式テレタイプの時代に定められたものなので,
	    現代の電子装置であれば容易に満足させることができます).
	  </para>

	  <para>スタートビットが送られた後, データの各ビットが最下位
	    (LSB) から 順番に送られます.
	    転送されるビットの長さはすべて同じになっていて,
	    受信側はそれぞれのビットの中央部でそれが
	    <literal>1</literal> か <literal>0</literal>
	    かを判断します.  例えば, 仮に 1 ビットを送るのに 2
	    秒かかるとすると, 受信側は
	    スタートビットの始まりを認識した 1 秒後に信号が
	    <literal>1</literal> か <literal>0</literal> かを調べ,
	    その後 2
	    秒ごとに次のビットの値を調べるという動作を繰り返します.
	  </para>

	  <para>送信側は, いつ受信側がビットの値を <quote>見た</quote>
	    のかはわかりません. 送信側はクロックにしたがって
	    次々にビットを転送するだけです.</para>

	  <para>設定によっては, 1 ワードのデータ全体が送られたあとに
	    送信側が内部で生成したパリティビットを
	    付加する場合があります.
	    パリティビットは受信側で簡単なエラーチェックを
	    するために使われます.  その後に, 最低でも 1
	    ビットのストップビットが送られます.</para>

	  <para>1 ワードのすべてのビットを受信すると,
	    受信側がパリティビットの
	    チェックをおこなうように設定することができます.
	    (パリティビットを 使用するかどうか,
	    送信側と受信側であらかじめ取り決めておかなければ
	    なりません).
	    それから受信側はストップビットをチェックします.
	    もしもストップビットが期待通りの位置に存在しなければ, UART
	    は 転送エラーが発生したと判断して,
	    ホストがデータを読もうとした時に
	    フレーミングエラーが起きたと報告します. 通常,
	    フレーミングエラーは
	    送信側と受信側のクロックが一致していなかったり,
	    信号に割り込みが 入った時に起こります.</para>

	  <para>データが正しく受信されたかどうかにかかわらず,  UART
	    はスタート, パリティ, ストップビットを自動的に捨てます.
	    送信側と受信側で設定が正しく一致していれば,
	    これらのビットが
	    誤ってホストに転送されることはありません.</para>

	  <para>1
	    回の転送が終了する前に次のデータの転送準備ができていれば,
	    前のデータのストップビットを送った後, 間を空けずに
	    次のデータのスタートビットを送ることができます.</para>

	  <para>非同期転送データは<quote>自己同期</quote>なので,
	    転送するべきデータがない場合は
	    転送路は空き状態になります.</para>
	</sect4>

	<sect4>
	  <title>UART のその他の機能</title>

	  <para>転送のためにデータをパラレルからシリアルに変換し,
	    受信時に
	    シリアルからパラレルに戻すという基本的な機能の他に, UART
	    は通常,  転送路の状態を示したり,
	    リモートデバイスで次のデータを受けとる準備が
	    できていない場合にデータの流れを抑制するのに
	    使われる信号のための 付加回路も持っています.  例えば UART
	    に接続されているデバイスがモデムの場合, モデムは
	    回線上に搬送波 (carrier)
	    が存在していることを報告するかもしれません.  一方,
	    コンピュータはこれらの付加信号を操作することにより
	    モデムのリセットをおこなったり,
	    かかってきた電話を取らないように
	    モデムに指示するかもしれません.
	    これらの付加信号の機能はそれぞれ EIA RE232-C
	    規格で定義されています.</para>
	</sect4>

	<sect4>
	  <title>RS-232C と V.24 規格</title>

	  <para>ほとんどのコンピュータシステムでは, UART は EIA
	    RS-232C 規格に
	    準拠した信号を生成するための回路に接続されています.  また,
	    RS-232C の仕様を反映した, V.24 という CCITT 規格に
	    準拠したシステムも存在しています.</para>

	  <sect5>
	    <title>RS-232C のビット割り当て (マークとスペース)</title>

	    <para>RS-232C では, <literal>1</literal>
	      の値を<literal>マーク</literal>, <literal>0</literal>
	      の値を<literal>スペース</literal>と 呼びます.
	      通信路にデータが流れていない時,
	      回線は<quote>マーキング</quote> であるとか,
	      <literal>1</literal>
	      の値を連続して転送し続けているとか言われます.</para>

	    <para>スタートビットは常に <literal>0</literal> (スペース)
	      で,  ストップビットは常に <literal>1</literal> (マーク)
	      です.  このことは,
	      たとえ複数のデータが連続して転送されている場合でも,
	      それぞれのデータの転送開始時には必ず, マーク (1) から
	      スペース (0)
	      への遷移が回線上で起こるということを意味しています.</para>

	    <para>これによって,
	      転送されるデータビットの内容にかかわらず,
	      送信側と受信側の
	      クロックを同期させることができるのです.</para>

	    <para>ストップビットとスタートビットの間の空き時間は,
	      その通信路で 1
	      ビットを転送するのに必要な時間の正確な倍数である
	      必要はありません.  (倍数にはゼロを含みます). しかし,
	      ほとんどの UART では 設計の単純化のために,
	      倍数になるように設計されています.</para>

	    <para>RS-232C では, 「マーク」信号 (<literal>1</literal>)
	      は -2V から -12V の間の電圧で,  「スペース」信号
	      (<literal>0</literal>) は 0V から +12V
	      の間の電圧で示されます.  送信部は +12V または -12V
	      を送ることになっていて, 受信部では
	      長いケーブルによるいくらかの電圧ロスを
	      許容するように定められています.
	      (ポータブルコンピュータなどで使用されている)
	      低消費電力デバイスの 送信部では しばしば +5V と -5V
	      のみを使用していますが,  短いケーブルを使用するならば,
	      これらの電圧も RS-232C 受信部の
	      許容範囲に入っています.</para>
	  </sect5>

	  <sect5>
	    <title>RS-232C のブレーク信号</title>

	    <para>RS-232C は <literal>ブレーク</literal>
	      と呼ばれる信号についても定めています.  これは
	      (スタートビットもストップビットも無しで) 連続して
	      スペースの値を送ることで発生されます.
	      データ回路に電流が流れていない場合は, 回線は
	      <literal>ブレーク</literal>
	      を送り続けているものと解釈されます.</para>

	    <para><literal>ブレーク</literal> 信号は完全な 1
	      バイトとスタート, ストップ, パリティ
	      ビットを送るために必要な時間よりも
	      長い間続かなければなりません.  ほとんどの UART
	      はフレーミングエラーとブレークを区別することが
	      できますが, もしも これを区別できない UART があった場合,
	      フレーミングエラーの検出をブレークの識別のために
	      使用することができます.</para>

	    <para>テレタイプの時代には,
	      国中でおびただしい数のテレタイプが
	      (ニュースサービスなどで) 電線で直列に接続されていました.
	      任意のテレタイプユニットは,
	      電流が流れないように一時的に回路を オープンにすることで
	      <literal>ブレーク</literal>
	      信号を発生させることができました.  これは,
	      他のテレタイプが情報を送信している間に, 緊急ニュースを
	      送る必要のあるテレタイプが
	      割り込みをかけるために使われました.</para>

	    <para>現在のシステムでは,
	      ブレーク信号には二つのタイプがあります.
	      もしブレーク信号が 1.6 秒よりも長ければ, それは
	      「モデムブレーク」であると解釈されます.
	      モデムがこの信号を検出すると,
	      通信を終了して電話を切ったり, コマンドモードに入るように
	      プログラムされていることがあります.  もしブレーク信号が
	      1.6 秒よりも短ければ, それはデータブレークを 示します.
	      この信号に応答するのはリモートコンピュータの仕事です.
	      この形のブレークは,
	      しばしば注意喚起または割り込みのための信号として 使われ,
	      ASCII の CONTROL-C
	      文字の代用とされることもあります.</para>

	    <para>マークとスペースは紙テープシステムでの
	      <quote>穴空き</quote> と <quote>穴無し</quote> に
	      相当しています.</para>

	    <note>
	      <para>ブレーク信号は,
		紙テープまたはその他のバイト列から生成できない
		ことに注意してください.
		なぜならバイト列は常にスタートビットや
		ストップビットとともに送られるからです.  UART
		には通常, ホストプロセッサからの特別なコマンドにより
		連続したスペース信号を生成する能力があります.</para>
	    </note>
	  </sect5>

	  <sect5>
	    <title>RS-232C の DTE デバイスおよび DCE デバイス</title>

	    <para>RS-232C 規格は二つのタイプの装置を定めています:
	      それはデータターミナル装置 (DTE) とデータキャリア装置
	      (DCE) です.  通常, DTE デバイスはターミナル
	      (またはコンピュータ) で, DCE は モデムです.
	      電話回線を介した通信のもう一方の端である受信側のモデムも
	      また DCE デバイスで,
	      そのモデムに接続されているコンピュータは DTE
	      デバイスです. DCE デバイスが信号を受け取るピンは DTE
	      デバイスが 信号を送るピンであり,
	      また逆も同様です.</para>

	    <para>二つのデバイスがともに DTE であったり, ともに DCE
	      であって,
	      モデムやそれに類似したメディア変換装置を介さずに
	      接続する必要が ある場合, ヌルモデム (NULL modem)
	      を使わなければなりません.
	      ヌルモデムはケーブルを電気的に再配列し,
	      一方のデバイスの送信出力が
	      もう一方のデバイスの受信入力に接続され,
	      その逆もまた同様に 接続されるようにしてくれます.
	      同様の変換はすべての制御信号についておこなわれ,
	      それぞれのデバイスが 他方のデバイスからの DCE (または
	      DTE) 信号を受けとれるようになります.</para>

	    <para>DTE デバイスと DCE
	      デバイスで生成される信号の数は等しくありません.  DTE
	      デバイスが DCE デバイスのために生成する信号の数は,  DTE
	      デバイスが DCE デバイスから受けとる信号の数よりも
	      少なくなっています.</para>
	  </sect5>

	  <sect5>
	    <title>RS-232C のピン割当て</title>

	    <para>EIA の RS-232C 規格 (およびこれに相当する ITU の
	      V.24 規格) は 25 ピンのコネクタ (通常 DB25 が使われます)
	      を要求し, そのコネクタのほとんどのピンの
	      使用目的を定義しています.</para>

	    <para>IBM PC および類似のシステムでは, RS-232C
	      信号のサブセットが 9 ピンのコネクタ (DB9)
	      で提供されています.  主に同期モードで使用される信号は PC
	      のコネクタには含まれていませんが,  もともと
	      この転送モードは IBM が IBM PC で使用することにした UART
	      ではサポートされていません.</para>

	    <para>メーカーによっては RS-232C 用のコネクタに DB25 か
	      DB9,
	      またはその両タイプのコネクタを使っている場合があります.
	      (IBM PC はパラレルプリンタインタフェースにも DB25
	      コネクタを 使っているので, このことは
	      しばしば混乱を引き起こします.)</para>

	    <para>以下は DB25 および DB9 コネクタにおける RS-232C
	      信号の割り当て表です.</para>

	    <informaltable frame="none">
	      <tgroup cols="7">
		<thead>
		  <row>
		    <entry>DB25 RS232-C 端子</entry>
		    <entry>DB9 IBM PC 端子</entry>
		    <entry>EIA 回路符号</entry>
		    <entry>CCITT 回路符号</entry>
		    <entry>一般名称</entry>
		    <entry>信号源</entry>
		    <entry>説明</entry>
		  </row>
		</thead>

		<tbody>
		  <row>
		    <entry>1</entry>
		    <entry>-</entry>
		    <entry>AA</entry>
		    <entry>101</entry>
		    <entry>PG/FG</entry>
		    <entry>-</entry>
		    <entry>保安用接地</entry>
		  </row>

		  <row>
		    <entry>2</entry>
		    <entry>3</entry>
		    <entry>BA</entry>
		    <entry>103</entry>
		    <entry>TD</entry>
		    <entry>DTE</entry>
		    <entry>送信データ</entry>
		  </row>

		  <row>
		    <entry>3</entry>
		    <entry>2</entry>
		    <entry>BB</entry>
		    <entry>104</entry>
		    <entry>RD</entry>
		    <entry>DCE</entry>
		    <entry>受信データ</entry>
		  </row>

		  <row>
		    <entry>4</entry>
		    <entry>7</entry>
		    <entry>CA</entry>
		    <entry>105</entry>
		    <entry>RTS</entry>
		    <entry>DTE</entry>
		    <entry>送信要求</entry>
		  </row>

		  <row>
		    <entry>5</entry>
		    <entry>8</entry>
		    <entry>CB</entry>
		    <entry>106</entry>
		    <entry>CTS</entry>
		    <entry>DCE</entry>
		    <entry>送信可</entry>
		  </row>

		  <row>
		    <entry>6</entry>
		    <entry>6</entry>
		    <entry>CC</entry>
		    <entry>107</entry>
		    <entry>DSR</entry>
		    <entry>DCE</entry>
		    <entry>データセットレディ</entry>
		  </row>

		  <row>
		    <entry>7</entry>
		    <entry>5</entry>
		    <entry>AV</entry>
		    <entry>102</entry>
		    <entry>SG/GND</entry>
		    <entry>-</entry>
		    <entry>信号用接地</entry>
		  </row>

		  <row>
		    <entry>8</entry>
		    <entry>1</entry>
		    <entry>CF</entry>
		    <entry>109</entry>
		    <entry>DCD/CD</entry>
		    <entry>DCE</entry>
		    <entry>受信キャリア検出</entry>
		  </row>

		  <row>
		    <entry>9</entry>
		    <entry>-</entry>
		    <entry>-</entry>
		    <entry>-</entry>
		    <entry>-</entry>
		    <entry>-</entry>
		    <entry>予約 (テスト用)</entry>
		  </row>

		  <row>
		    <entry>10</entry>
		    <entry>-</entry>
		    <entry>-</entry>
		    <entry>-</entry>
		    <entry>-</entry>
		    <entry>-</entry>
		    <entry>予約 (テスト用)</entry>
		  </row>

		  <row>
		    <entry>11</entry>
		    <entry>-</entry>
		    <entry>-</entry>
		    <entry>-</entry>
		    <entry>-</entry>
		    <entry>-</entry>
		    <entry>未割当て</entry>
		  </row>

		  <row>
		    <entry>12</entry>
		    <entry>-</entry>
		    <entry>CI</entry>
		    <entry>122</entry>
		    <entry>SRLSD</entry>
		    <entry>DCE</entry>
		    <entry>従局受信キャリア検出</entry>
		  </row>

		  <row>
		    <entry>13</entry>
		    <entry>-</entry>
		    <entry>SCB</entry>
		    <entry>121</entry>
		    <entry>SCTS</entry>
		    <entry>DCE</entry>
		    <entry>従局送信可</entry>
		  </row>

		  <row>
		    <entry>14</entry>
		    <entry>-</entry>
		    <entry>SBA</entry>
		    <entry>118</entry>
		    <entry>STD</entry>
		    <entry>DTE</entry>
		    <entry>従局送信データ</entry>
		  </row>

		  <row>
		    <entry>15</entry>
		    <entry>-</entry>
		    <entry>DB</entry>
		    <entry>114</entry>
		    <entry>TSET</entry>
		    <entry>DCE</entry>
		    <entry>送信信号エレメントタイミング</entry>
		  </row>

		  <row>
		    <entry>16</entry>
		    <entry>-</entry>
		    <entry>SBB</entry>
		    <entry>119</entry>
		    <entry>SRD</entry>
		    <entry>DCE</entry>
		    <entry>従局受信データ</entry>
		  </row>

		  <row>
		    <entry>17</entry>
		    <entry>-</entry>
		    <entry>DD</entry>
		    <entry>115</entry>
		    <entry>RSET</entry>
		    <entry>DCE</entry>
		    <entry>受信信号エレメントタイミング</entry>
		  </row>

		  <row>
		    <entry>18</entry>
		    <entry>-</entry>
		    <entry>-</entry>
		    <entry>141</entry>
		    <entry>LOOP</entry>
		    <entry>DTE</entry>
		    <entry>ローカルループバック</entry>
		  </row>

		  <row>
		    <entry>19</entry>
		    <entry>-</entry>
		    <entry>SCA</entry>
		    <entry>120</entry>
		    <entry>SRS</entry>
		    <entry>DTE</entry>
		    <entry>従局送信要求</entry>
		  </row>

		  <row>
		    <entry>20</entry>
		    <entry>4</entry>
		    <entry>CD</entry>
		    <entry>108.2</entry>
		    <entry>DTR</entry>
		    <entry>DTE</entry>
		    <entry>データ端末レディ</entry>
		  </row>

		  <row>
		    <entry>21</entry>
		    <entry>-</entry>
		    <entry>-</entry>
		    <entry>-</entry>
		    <entry>RDL</entry>
		    <entry>DTE</entry>
		    <entry>リモートデジタルループバック</entry>
		  </row>

		  <row>
		    <entry>22</entry>
		    <entry>9</entry>
		    <entry>CE</entry>
		    <entry>125</entry>
		    <entry>RI</entry>
		    <entry>DCE</entry>
		    <entry>被呼表示</entry>
		  </row>

		  <row>
		    <entry>23</entry>
		    <entry>-</entry>
		    <entry>CH</entry>
		    <entry>111</entry>
		    <entry>DSRS</entry>
		    <entry>DTE</entry>
		    <entry>データ信号速度選択</entry>
		  </row>

		  <row>
		    <entry>24</entry>
		    <entry>-</entry>
		    <entry>DA</entry>
		    <entry>113</entry>
		    <entry>TSET</entry>
		    <entry>DTE</entry>
		    <entry>送信信号エレメントタイミング</entry>
		  </row>

		  <row>
		    <entry>25</entry>
		    <entry>-</entry>
		    <entry>-</entry>
		    <entry>142</entry>
		    <entry>-</entry>
		    <entry>DCE</entry>
		    <entry>テストモード</entry>
		  </row>
		</tbody>
	      </tgroup>
	    </informaltable>
	  </sect5>
	</sect4>

	<sect4>
	  <title>ビット, ボー, そしてシンボル</title>

	  <para>ボーとは非同期通信における転送速度の単位です.
	    モデム通信技術の進歩により, 新しいデバイスのデータ速度を
	    表記するにあたって, この用語が
	    しばしば誤って使われるようになりました.</para>

	  <para>ボーレートは伝統的に,
	    通信路を通して実際に送られるビットの数を 表します. ある
	    DTE デバイスからもう一方へと実際に移動した
	    データの量を表すものではありません.  ボーレートは, 送信側
	    UART で生成されて受信側 UART で取り除かれる スタート,
	    ストップ, パリティといったオーバーヘッドビットをも
	    含んでいます.  これは 1 ワード 7
	    ビットのデータを送るためには, 実際には 10 ビットの
	    データが完全に転送される必要があるということを意味します.
	    そのため, もしパリティを使い,
	    スタートビットとストップビットが それぞれ 1
	    ビットずつ存在する場合には, 1 秒あたり 300 ビットの
	    転送能力を持つモデムでは, 7 ビットのワードを通常 30 個しか
	    転送することができません.</para>

	  <para>もし 1 ワード 8
	    ビットのデータとパリティビットを使用する場合には,
	    データ転送速度は 1 秒あたり 27.27 ワードまで低下します.
	    なぜなら 8 ビットのワードを送るのに 11 ビットが必要で,
	    このモデムは 1 秒間に 300
	    ビットしか送ることができないからです.</para>

	  <para>1 秒あたりの転送バイト数をボーレートに変換したり,
	    その逆をおこなう 計算式は,
	    エラー訂正をおこなうモデムが現れるまでは単純でした.
	    エラー訂正をおこなうモデムは, ホストコンピュータの UART
	    から シリアルのビット列を受けとり,
	    それをバイト列に戻します.
	    (内蔵モデムを使用している場合でさえ, データは今まで通り
	    頻繁にシリアル化されます)
	    その後これらのバイトはパケットに変換され,
	    同期転送方式を用いて 電話回線を通じて送信されます.  これは
	    DTE (コンピュータ) 中の UART で追加されたストップ,
	    スタート およびパリティビットは,
	    モデムから送り出される前に, モデムによって
	    取り除かれるということを意味します.
	    これらのバイト列がリモートモデムに受信されると,
	    リモートモデムは スタート,
	    ストップおよびパリティビットを追加して, それらを
	    シリアル形式に変換し, リモートコンピュータの受信側 UART
	    に送ります.  そしてリモートコンピュータの UART はスタート,
	    ストップおよび パリティビットを取り除きます.</para>

	  <para>これらの特別な変換はすべて,
	    二つのモデムの間でエラー訂正が
	    実行できるようにするためおこなわれています.
	    エラー訂正とは, 受信側のモデムが正しいチェックサムで
	    受信できなかったデータブロックの再送を,
	    送信側のモデムに要求することができるということです.
	    この作業はモデムにより処理されて, DTE デバイスは
	    このようなプロセスがおこなわれていることに,
	    通常気がつきません.</para>

	  <para>スタート,
	    ストップおよびパリティビットを取り除くことにより,
	    エラー訂正のために二つのモデムの間で共有しなければならない
	    追加のビットを,
	    実効転送速度を低下させずに送ることができます.  そのため,
	    送受信 DTE にはエラー訂正がおこなわれているかどうかが
	    ほとんど見えなくなります.  例えば, もしモデムが 10 個の 7
	    ビットデータをもう一方のモデムに送る 際に, スタート,
	    ストップ, およびパリティビットを送る必要がなければ,
	    その分の 30 ビットの情報を,
	    真のデータの転送速度に影響を与えることなく
	    エラー訂正のために追加することができるわけです.</para>

	  <para>データ圧縮をおこなうモデムでは,
	    ボーという言葉の使い方は さらに混乱することになります.
	    例えば電話回線を通じて送られた二つの 8 ビットデータは,
	    送信側モデムに送られた 12
	    バイトのデータを表すかもしれません.
	    受信側モデムはそのデータを本来の内容に展開し, 受信側の DTE
	    に渡します.</para>

	  <para>また, 最近のモデムはバッファを内蔵しており, (DCE から
	    DCE へ) 電話線を 流れるデータの転送速度と, 両端の DTE と
	    DCE の間で流れるデータの
	    転送速度とを別々に設定することができます.
	    モデムによる圧縮を使用する場合, 通常は DTE と DCE
	    の間の速度を DCE と DCE
	    の間の速度より速くしておきます.</para>

	  <para>1 バイトを記述するのに必要なビットの数は,
	    二つのマシンの間でも DTE-DCE と DCE-DCE
	    のリンクでそれぞれ変化する場合がありますし,  そのうえ,
	    それぞれのビット転送速度が異なる場合もあります. そのため,
	    全体としての通信速度を表現するために
	    ボーという言葉を使うことは 問題でもありますし,
	    真の転送速度を正しく伝えない場合があります.  1
	    秒あたりの転送ビット数 (bps) は DCE と DCE
	    の間のインタフェースに
	    おける転送速度を記述するために使うなら正しい用語ですし,
	    ボーまたは 1 秒あたりのビット数は,
	    二つのシステムが電線で直接 接続されていたり,
	    エラー訂正や圧縮をおこなわないモデムが
	    使われている場合には, 許容可能な用語です.</para>

	  <para>最近の高速モデム (2400, 9600, 14,400, 19,200bps
	    などのもの) も,  実際には 2,400 ボー (正確には 2,400
	    シンボル/秒) か, それ以下の 速度で通信しています.
	    高速モデムでは, 複数のビットを一つのシンボルで
	    伝送する技術 (多値符合化など) を用いて, シンボル速度
	    (シンボル/秒) よりも 高い通信速度 (ビット/秒)
	    を達成しています. これが電話の限られた音声帯域で
	    高い伝送速度を得られる理由です.  28,800bps
	    やそれ以上のモデムでは, シンボル速度自体が
	    可変になっていますが,
	    それ以外は同様の技術が用いられています.</para>
	</sect4>

	<sect4>
	  <title>IBM PC の UART</title>

	  <para>元祖 IBM PC を設計した際に, IBM
	    はナショナル・セミコンダクタ社の INS8250 UART を IBM PC
	    パラレル/シリアルアダプタで使用することに
	    決めました.</para>

	  <para>IBM 自身やその他のベンダが作っている後継世代の AT
	    互換機でも,  INS8250
	    そのものやナショナル・セミコンダクタの UART ファミリの
	    改良版を使い続けられています.</para>

	  <sect5>
	    <title>ナショナル・セミコンダクタの UART
	      ファミリ系統図</title>

	    <para>INS8250 UART
	      にはいくつかのバージョンと後継の部品があります.
	      主要なバージョンを以下に示します.</para>
	    <!-- This should really be a graphic -->

	    <programlisting>INS8250  -&gt; INS8250B
    \
     \
      \-&gt; INS8250A -&gt; INS82C50A
	        \
	         \
		  \-&gt; NS16450 -&gt; NS16C450
			   \
		            \
			     \-&gt; NS16550 -&gt; NS16550A -&gt; PC16550D</programlisting>

	    <variablelist>
	      <varlistentry><term>INS8250</term>
		<listitem>
		  <para>この部品は元祖 IBM PC と IBM PC/XT で
		    使われていました.  この部品は本来 INS8250 ACE
		    (Asynchronous Communications Element) と
		    いう名前で, NMOS 技術で作られていました.</para>

		  <para>8250 は八つの I/O ポートを占有し, 送信バッファ
		    1 バイトと 受信バッファ 1 バイトを持っています.
		    この元祖の UART はいくつかの
		    競合状態などに関する欠陥を持っています.  元祖の
		    IBM BIOS
		    はこれらの欠陥を回避してうまく動くようなコードを
		    含んでいましたが, そのために BIOS
		    が欠陥の存在に依存するように なってしまいました.
		    このため, 元祖 IBM PC や IBM PC/XT では 8250A,
		    16450, または 16550 のような後継部品を使うことは
		    できませんでした.</para>
		</listitem>
	      </varlistentry>

	      <varlistentry><term>INS8250-B</term>
		<listitem>
		  <para>これは NMOS 技術で作られた INS8250
		    の低速版です.  これもオリジナルの INS8250
		    と同じ問題を含んでいます.</para>
		</listitem>
	      </varlistentry>

	      <varlistentry><term>INS8250A</term>
		<listitem>
		  <para>XMOS 技術を使い,
		    さまざまな機能的欠陥を修正した INS8250
		    の改良版です. INS8250A は当初,
		    <quote>クリーン</quote>な BIOS を 使用したベンダの
		    PC クローンで使用されていました.
		    なぜなら欠陥が修正されたことにより, この部品は
		    INS8250 や INS8250B の ために書かれた BIOS
		    で使うことはできなかったからです.</para>
		</listitem>
	      </varlistentry>

	      <varlistentry><term>INS82C50A</term>
		<listitem>
		  <para>これは INS8250A の CMOS 版 (低消費電力版) で,
		    INS8250A と同じ機能特性を持っています.</para>
		</listitem>
	      </varlistentry>

	      <varlistentry><term>NS16450</term>
		<listitem>
		  <para>より高速な CPU バスにも対応できるように
		    改良されたこと以外は NS8250A と同じです.  IBM
		    はこの部品を IBM AT で使うことに決め, もはや IBM
		    BIOS が INS8250
		    のバグに依存しなくなるように
		    変更をおこないました.</para>
		</listitem>
	      </varlistentry>

	      <varlistentry><term>NS16C450</term>
		<listitem>
		  <para>これは NS16450 の CMOS 版 (低消費電力版)
		    です.</para>
		</listitem>
	      </varlistentry>

	      <varlistentry><term>NS16550</term>
		<listitem>
		  <para>送信バッファと受信バッファをそれぞれ 16
		    バイトに 変更したこと以外は NS16450 と同じですが,
		    バッファの設計に 欠陥があるため,
		    信頼して使用することはできません.</para>
		</listitem>
	      </varlistentry>

	      <varlistentry><term>NS16550A</term>
		<listitem>
		  <para>バッファの欠陥が修正されたこと以外は NS16550
		    と 同じです. 割り込みへの反応が遅い OS
		    でも高い信頼性で高速なデータを
		    扱うことができることから, 16550A とその後継部品は
		    PC 産業界で 最も一般的に使われる UART
		    となりました.</para>
		</listitem>
	      </varlistentry>

	      <varlistentry><term>NS16C552</term>
		<listitem>
		  <para>これは 2 個の NS16C550A CMOS UARTを
		    一つのパッケージに入れた部品です.</para>
		</listitem>
	      </varlistentry>

	      <varlistentry><term>PC16550D</term>
		<listitem>
		  <para>ささいな欠陥が修正されたこと以外は NS16550A と
		    同じです. これは 16550 ファミリの D リビジョンで,
		    ナショナル・セミコンダクタ社から
		    提供されている最新の部品です.</para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </sect5>

	  <sect5>
	    <title>NS16550AFとPC16550Dは同じもの</title>

	    <para>( ここからは &a.jp.iwasaki; が翻訳を担当)</para>

	    <para>ナショナル・セミコンダクタは
	      数年前に部品番号体系を再編成して おり, NS16550AFN
	      という名称はもはや存在しません. (もしあなたが
	      NS16550AFN を持っていたら,
	      部品の日付コードを見てください. それは 通常 9
	      から始まる4桁の数字です. 最初の2桁の数字は年度, 次の2桁
	      は部品がパッケージされた年度の週です. あなたの持っている
	      NS16550AFN は, おそらく数年前のものでしょう.)</para>

	    <para>新しい番号は PC16550DV の様に,
	      パッケージ材料と形状により接尾辞 に小さな違いがあります
	      (番号体系についての記述は後述します).</para>

	    <para>ここで注意しなければいけないことがあります. 例えば,
	      ある店に行って 1990年製の NS16550AFN
	      を15米ドルで売っているとします. ところが,
	      そのすぐ隣には ナショナル・セミコンダクタが AFN
	      を生産開始してから それにマイナーな変更を加えて作った
	      PC16550DN があり, そちらは 最近
	      6ヶ月に作られたものなのに, 簡単に入手できるため
	      NS16550AFN の 半額 (たくさん一度に買うと
	      5米ドルまで下がることもあります) 位で
	      買えたりすることがあるのです.</para>

	    <para>NS16550AFN のチップ供給は減少し続けているため,
	      PC16550DN が古い
	      部品番号のものとまったく同じ機能を持っていることに,
	      より多くの人が 気付いて受け入れるまでは,
	      価格はおそらく上昇し続けるでしょう.</para>
	  </sect5>

	  <sect5>
	    <title>ナショナル・セミコンダクタの部品番号体系</title>

	    <para>古い NS<replaceable>nnnnnrqp</replaceable>
	      の部品番号は, 現在
	      PC<replaceable>nnnnnrgp</replaceable>
	      というフォーマットになっています.</para>

	    <para><replaceable>r</replaceable>
	      はリビジョンのフィールドです. 現在のナショナルセ
	      ミコンダクタの 16550
	      のリビジョンは<literal>D</literal>です.</para>

	    <para><replaceable>p</replaceable>
	      はパッケージタイプのフィールドです. タイプは以下
	      の通りです:</para>

	    <informaltable frame="none">
	      <tgroup cols="3">
		<tbody>
		  <row>
		    <entry>"F"</entry>
		    <entry>QFP</entry>
		    <entry>(quad flat pack) L lead type</entry>
		  </row>

		  <row>
		    <entry>"N"</entry>
		    <entry>DIP</entry>
		    <entry>(dual inline package) through hole straight
		      lead type</entry>
		  </row>

		  <row>
		    <entry>"V"</entry>
		    <entry>LPCC</entry>
		    <entry>(lead plastic chip carrier) J lead type</entry>
		  </row>
		</tbody>
	      </tgroup>
	    </informaltable>

	    <para>訳注: 具体的なパッケージ形状についての情報は <ulink
		url="http://www.national.com/packaging/plastic.html">http://www.national.com/packaging/plastic.html</ulink> を参照 してください.</para>

	    <para><replaceable>g</replaceable>
	      は製品グレードのフィールドです. もしパッケージタイ
	      プの文字の前に<literal>I</literal>があれば,
	      <quote>工業用</quote>グレード部品を表し, 標準
	      部品より高いスペックを持ちますが, Miltary 仕様 (Milspec)
	      ほど高 くはありません.
	      これは付加的なフィールドです.</para>

	    <para>私たちがかつて NS16550AFN (DIP パッケージ)
	      と呼んでいたものは, 現在 は PC16550DN または PC16550DIN
	      と呼ばれています.</para>
	  </sect5>
	</sect4>

	<sect4>
	  <title>他のベンダと類似の UART</title>

	  <para>長年に渡り, 8250, 8250A, 16450 そして 16550
	    はライセンスされ,
	    または他のチップベンダにコピーされてきました. 8250, 8250A
	    そして  16450 の場合は, そのものの回路
	    (<quote>megacell</quote>: LSIの中に組み込む
	    ことのできるライブラリ化された回路の大規模な物) が Western
	    Digital と Intel
	    を含むたくさんのベンダにライセンスされまし た.
	    他のベンダは部品を
	    リバースエンジニアリングした物か同じように
	    動作する互換品を製造しました.</para>

	  <para>内蔵モデムにおいては,
	    モデム設計者はモデムのマイクロプロセッサで  8250A/16450
	    をエミュレートすることはよくおこなわれます.
	    このエミュレート による (互換の) UART
	    は数百バイトの隠れたバッファを持つでしょう.
	    バッファのサイズのため,
	    このような互換品は高速データ処理の能力では  16550A
	    と変わらない信頼性を持つことができます. しかし, それでも
	    ほとんどのオペレーティングシステムは UART は 8250A か
	    16450 である と報告し, 特殊なドライバが使用されなければ
	    エミュレートによる UART の余分に存在する
	    バッファリングの効果的な使用はおこないません.</para>

	  <para>幾つかのモデムメーカーは,
	    市場における競争を有利にするために数百バ
	    イトのバッファを持ち 16550A
	    の置き換えができるはずの設計を, たとえ
	    性能が低下する事になったとしても
	    棄てざるを得なくなるような市場の圧
	    力を受けています.</para>

	  <para>一般的にある誤解は, <quote>16550A</quote>
	    と書かれたすべての部品が同じ性能であると いうことです.
	    それらは異なるものであり, 状況によってはまちがいなく
	    欠陥と呼べるものがこれらの 16550A
	    クローンのほとんどにあります.</para>

	  <para>NS16550 が開発された時に,
	    ナショナル・セミコンダクタは設計に関する
	    幾つかの特許を取得し,
	    彼らはライセンスを制限して他のベンダが類似
	    の特徴を持つチップを供給することを困難にしました.
	    特許のため, リバー
	    スエンジニアリングによる設計とエミュレーションは,
	    特許がカバーする
	    請求権を侵害を回避しなくてはなりませんでした. 結果として,
	    これらの コピーのほとんどは,
	    多くのコンピュータとモデムのメーカーは支払いた
	    くはない程の価格であった本物の部品の NS16550A または
	    PC16550D とまった
	    く同じような動作をさせることはできませんでした.</para>

	  <para>16550A のクローンに存在する相違点のうち
	    いくつかは些細なものですが,  そのほかに
	    特定のオペレーティングシステムやドライバでは
	    全然使いものにならないような相違が存在する場合もあります.
	    あるドライバでは問題なく動作しても,
	    別のドライバを使用した場合には
	    問題が発生することもありますし, Windows
	    のドライバにおいても
	    充分にテストや考慮がおこなわれなかったイベントの組合わせが
	    起こった場合には,
	    これらの相違点が明らかになるかもしれません.
	    これはほとんどのモデムベンダと 16550 クローンメーカーが,
	    NS16550A  との互換性のプライマリテストとして Windows for
	    Workgroups 3.11 と  Microsoft MS-DOS ユーティリティの
	    Microsoft ドライバを使用しているか らです.
	    この安易過ぎる規準は, もし異なるオペレーティングシステムが
	    使用されたらクローンと
	    本物の部品の微妙な違いのために問題が発生し得 る,
	    ということを意味しています.</para>

	  <para>ナショナル・セミコンダクタは, どんな OS
	    のドライバからも独立した互 換性テストを実行する
	    <application>COMTEST</application>
	    という名前の入手可能なプログラムを作 成しました.
	    このタイプのプログラムの目的は, 競合製品にある欠陥のデ
	    モンストレーションであることをおぼえておくべきです.
	    ですからそのプ ログラムは,
	    テスト中の部品の動作の重要な問題と極めてささいな相違を
	    同じように報告するでしょう.</para>

	  <para>この文書の著者が 1994
	    年に実行した一連のテストでは, ナショナルセミ コンダクタ,
	    TI, StarTech そして CMD が製造した部品は megacell 及び
	    COMTEST
	    でテストされた内蔵モデムに埋め込まれたエミュレーションと同
	    等です.
	    これらの部品の幾つかで注目される相違点を以下に示します.
	    これらのテストは1994年に実行されたので,
	    これらはベンダから供給さ
	    れた製品の現在の性能には反映されないでしょう.</para>

	  <para>極端に多くの問題やあるタイプの問題が検出された場合に,
	    COMTEST は通 常は実行を中止することに注意してください.
	    このテストの一部では, たと
	    え何回相違点に遭遇しても中止しないように COMTEST
	    を修正しました.</para>

	  <informaltable>
	    <tgroup cols="3">
	      <thead>
		<row>
		  <entry>ベンダ</entry>
		  <entry>部品番号</entry>
		  <entry>報告された「相違点」として知られるエラー</entry>
		</row>
	      </thead>

	      <tbody>
		<row>
		  <entry>National</entry>
		  <entry>(PC16550DV)</entry>
		  <entry>0</entry>
		</row>

		<row>
		  <entry>National</entry>
		  <entry>(NS16550AFN)</entry>
		  <entry>0</entry>
		</row>

		<row>
		  <entry>National</entry>
		  <entry>(NS16C552V)</entry>
		  <entry>0<!-- kuriyama - should be added "*" as footnote --></entry>
		</row>

		<row>
		  <entry>TI</entry>
		  <entry>(TL16550AFN)</entry>
		  <entry>3</entry>
		</row>

		<row>
		  <entry>CMD</entry>
		  <entry>(16C550PE)</entry>
		  <entry>19</entry>
		</row>

		<row>
		  <entry>StarTech</entry>
		  <entry>(ST16C550J)</entry>
		  <entry>23</entry>
		</row>

		<row>
		  <entry>Rockwell</entry>
		  <entry>Reference modem with internal 16550 or an
		    emulation (RC144DPi/C3000-25)</entry>
		  <entry>117</entry>
		</row>

		<row>
		  <entry>Sierra</entry>
		  <entry>Modem with an internal 16550
		    (SC11951/SC11351)</entry>
		  <entry>91</entry>
		</row>
	      </tbody>
	    </tgroup>
	  </informaltable>

	  <note>
	    <para>この文書の著者は今まで, COMTEST プログラムを
	      使用して相違点がゼロと報告されるナショナル・
	      セミコンダクタ以外の部品を一つも発見しませんでした.
	      ナショナル・セミコンダクタは長年に渡り 16550
	      の五つのバージョンを持っており, 最新の部品は
	      機能性のために, ベンチマークを考慮した古い
	      NS16550AFN と少し異なる振る舞いをすることに
	      注意するべきです.
	      COMTEST はナショナル・セミコンダクタの製品ラインの
	      相違点については見て見ぬふりをするようになり,
	      部品のリビジョン A, B そして C にあるバグが
	      記述されている公式な正誤表がある時でも,
	      (オリジナルの 16550 を除いては) ナショナル・
	      セミコンダクタの部品についてエラーを
	      報告しなくなったので, この COMTEST のひいきを
	      考慮にいれるべきです.</para>
	  </note>

	  <para>COMTEST からの相違点の単純なカウントが,
	    何の相違点が重要であり どれがそうでないのかについて
	    多くを明らかにしないことを 理解すること が大切です.
	    例えば, 内蔵の UART を持つ上記の二つのモデムで報告され
	    た相違点の約半分が,
	    5及び6ビットキャラクタモードをサポートしないク ローンの
	    UART によって引き起こされました. 本物の 16550, 16450 そし
	    て 8250 UART すべてはこれらのモードをサポートし, COMTEST
	    はこれらの モードの機能性をチェックするので,
	    50を越える相違点が報告されました.  しかし,
	    5及び6ビットキャラクタモードを
	    サポートするモデムは殆どなく,
	    特にこれらはエラー修正と圧縮機能付のものです.
	    これは5及び6ビット キャラクタモードに関連した相違点は
	    差し引いて考えることができること を意味しています.</para>

	  <para>COMTEST が報告した相違点の多くは,
	    タイミングに関する点でしょう.  多くのクローンの設計では,
	    ホストが一つのポートから読み込んだ時に他
	    のあるポートのステータスビットは,
	    <emphasis>本当の</emphasis> NS16550AFN と同じ
	    長さの時間内で更新されない (あるものは速く,
	    あるものは遅く) かもしれ ませんが, COMTEST
	    はこれらの相違点を探します. これは相違点の数は誤
	    解を招き易いものです.
	    あるデバイスには一つか二つの相違点しかありま
	    せんがそれらは非常に重大かもしれません.
	    また別のデバイスは基準部品 と比べて速くまたは遅く status
	    レジスタを更新するために (適切に書か
	    れたドライバの操作にはまったく影響しないかもしれません)
	    多くの相違点を 報告されるかもしれません.</para>

	  <para>COMTEST は問題を引き起こすかも知れない,
	    または特殊なケースとして処
	    理しなければならない潜在的に矛盾した部品の存在に対して,
	    管理者に警
	    告を出すスクリーニングツールとして使用できます.</para>

	  <para>もしモデムの中にある 16550
	    やシリアルポート接続されているモデムに 対して COMTEST
	    を実行する場合, モデムがテストキャラクタをエコーし
	    ないように最初に ATE0&amp;W
	    コマンドをモデムに発行する必要がありま す.
	    これをおこなうことを忘れた場合, COMTEST
	    は少なくともこの相違点を 報告するでしょう: </para>

	  <screen>Error (6)...Timeout interrupt failed: IIR = c1  LSR = 61</screen>
	</sect4>

	<sect4>
	  <title>8250/16450/16550 のレジスタ</title>

	  <para>8250/16450/16550 UART は八つの連続する I/O
	    ポートアドレスを予約 しています. IBM PC
	    ではこれらの八つのポートに対して二つの定義された
	    位置があり, それらは集合的に COM1 と COM2
	    として知られています. PC
	    クローンとアドオンカードのメーカーは COM3 と COM4
	    として知られる二つ の付加的な領域を作成しましたが,
	    幾つかのシステムではこれらの余分な  COM
	    ポートは他のハードウェアと衝突します. 最もよく起きるものは
	    IBM 8514
	    エミュレーションを提供するビデオアダプタとの衝突です.
	  </para>

	  <para>COM1 には 0x3f8 から 0x3ff が割り当てられ, 通常 IRQ 4
	    が使用されます. COM2 には 0x2f8 から 0x2ff が割り当てられ,
	    通常 IRQ 3 が使用されます. COM3 には 0x3e8 から 0x3ef
	    が割り当てられ, IRQ は標準化されていません. COM4 には
	    0x2e8 から 0x2ef が割り当てられ, IRQ
	    は標準化されていません.</para>

	  <para>8250/16450/16550 UART
	    のI/Oポートの詳細は以下に提供されています.</para>

	  <informaltable>
	    <tgroup cols="3">
	      <thead>
		<row>
		  <entry>I/O ポート</entry>
		  <entry>許可されたアクセス</entry>
		  <entry>説明</entry>
		</row>
	      </thead>

	      <tbody>
		<row>
		  <entry>+0x00</entry>
		  <entry>write (DLAB==0)</entry>
		  <entry><para>Transmit Holding Register (THR).</para><para>
		      このポートに書き込まれた情報は
		      データ命令として 処理され, UART
		      により送信されます.</para></entry>
		</row>

		<row>
		  <entry>+0x00</entry>
		  <entry>read (DLAB==0)</entry>
		  <entry><para>Receive Buffer Register (RBR).</para><para>
		      シリアル接続から UART
		      によって受信されたすべての データ命令は,
		      このポートを読むことによってホス
		      トによりアクセスされます.</para></entry>
		</row>

		<row>
		  <entry>+0x00</entry>
		  <entry>write/read (DLAB==1)</entry>
		  <entry><para>Divisor Latch LSB (DLL)</para><para>
		      マスタ入力クロックの周波数を
		      このレジスタに入っ ている値で割ることにより,
		      UART の周波数が決定 されます (IBM PCでは,
		      マスタクロックの周波数は 1.8432MHzです).
		      このレジスタには上記の除数の下
		      位8ビットが入っています.</para></entry>
		</row>

		<row>
		  <entry>+0x01</entry>
		  <entry>write/read (DLAB==1)</entry>
		  <entry><para>Divisor Latch MSB (DLH)</para><para>
		      マスタ入力クロックの周波数をこの
		      レジスタに入っ ている値で割ることにより, UART
		      の周波数が決定 されます (IBM PCでは,
		      マスタクロックの周波数は 1.8432MHzです).
		      このレジスタには上記の除数の上
		      位8ビットが入っています.</para></entry>
		</row>

		<row>
		  <entry>+0x01</entry>
		  <entry>write/read (DLAB==0)</entry>
		  <entrytbl cols="2">
		    <colspec colnum="1" colname="col1">
		    <colspec colnum="2" colname="col2">
		    <spanspec namest="col1" nameend="col2" spanname="1to2">
		    <tbody>
		      <row>
			<entry spanname="1to2"><para>Interrupt Enable
			    Register (IER)</para><para>
			    8250/16450/16550 の UART
			    はイベントを四つのカテ
			    ゴリの一つに分類します.
			    それぞれのカテゴリは設 定可能です.
			    それぞれのカテゴリは, どんな類のイ
			    ベントの発生時に割り込みを
			    生成するように設定可 能です.
			    8250/16450/16550 の UART は, 有効になっ
			    ているカテゴリ内でいくつの
			    イベントが発生してい るかに関わらず,
			    単一の外部割り込みシグナルを生 成します.
			    割り込みに応答し有効になっている割り
			    込みカテゴリ
			    (通常すべてのカテゴリが有効になって
			    いる割り込みを持ちます)
			    を割り込みの本当の原因
			    を決定するためにポーリングするかは,
			    ホストのプ
			    ロセッサ次第です.</para></entry>
		      </row>

		      <row>
			<entry>Bit 7</entry>
			<entry>予約済み, 常に 0. </entry>
		      </row>

		      <row>
			<entry>Bit 6</entry>
			<entry>予約済み, 常に 0. </entry>
		      </row>

		      <row>
			<entry>Bit 5</entry>
			<entry>予約済み, 常に 0. </entry>
		      </row>

		      <row>
			<entry>Bit 4</entry>
			<entry>予約済み, 常に 0. </entry>
		      </row>

		      <row>
			<entry>Bit 3</entry>
			<entry>Enable Modem Status Interrupt (EDSSI).
			  このビットを「1」に設定することで,
			  一つ以上の状態ラインで変更が発生した時
			  に, UART が割り込みを生成可能となりま
			  す. </entry>
		      </row>

		      <row>
			<entry>Bit 2</entry>
			<entry>Enable Receiver Line Status Interrupt (ELSI)
			  このビットを「1」に設定することで, 入っ
			  てくるデータにエラー (または BREAK シ
			  グナル) が検知された時に, UART が割り
			  込みを生成するようになります. </entry>
		      </row>

		      <row>
			<entry>Bit 1</entry>
			<entry>Enable Transmitter Holding Register
			  Empty Interrupt (ETBEI)
			  このビットを「1」に設定することで,  UART
			  に送信される一つ以上の付加的な文
			  字に対する空きが生じた時に, UART が割
			  り込みを生成するようになります. </entry>
		      </row>

		      <row>
			<entry>Bit 0</entry>
			<entry>Enable Received Data Available
			  Interrupt (ERBFI)
			  このビットを「1」に設定することで,  UART が
			  FIFO のトリガーレベルを越え
			  る十分な文字を受け取るか, FIFO のタイ
			  マが期限切れとなるか (古くなったデータ),
			  FIFO が無効の場合にシグナル文字が受信
			  された時に, UART が割り込みを生成する
			  ようになります. </entry>
		      </row>
		    </tbody>
		  </entrytbl>
		</row>

		<row>
		  <entry>+0x02</entry>
		  <entry>write</entry>
		  <entrytbl cols="4">
		    <colspec colnum="1" colname="col1">
		    <colspec colnum="2" colname="col2">
		    <colspec colnum="3" colname="col3">
		    <colspec colnum="4" colname="col4">
		    <spanspec namest="col1" nameend="col4" spanname="1to4">
		    <spanspec namest="col2" nameend="col4" spanname="2to4">

		    <tbody>
		      <row>
			<entry spanname="1to4">FIFO Control Register (FCR)
			  (このポートは 8250 と 16450 の UART では
			  存在しません.)</entry>
		      </row>

		      <row>
			<entry>Bit 7</entry>
			<entry spanname="2to4">Receiver Trigger Bit
			  #1</entry>
		      </row>

		      <row>
			<entry>Bit 6</entry>
			<entry spanname="2to4"><para>Receiver Trigger
			    Bit #0</para><para>この二つのビットは FIFO
			    が機能している
			    場合にレシーバがどの時点で割り込みを生
			    成するかを制御します.</para></entry>
		      </row>

		      <row>
			<entry colname="col2">7</entry>
			<entry colname="col3">6</entry>
			<entry
			  colname="col4">割り込み生成前にいくつの命令
			  が 受信されたか. </entry>
		      </row>

		      <row>
			<entry colname="col2">0</entry>
			<entry colname="col3">0</entry>
			<entry colname="col4">1</entry>
		      </row>

		      <row>
			<entry colname="col2">0</entry>
			<entry colname="col3">1</entry>
			<entry colname="col4">4</entry>
		      </row>

		      <row>
			<entry colname="col2">1</entry>
			<entry colname="col3">0</entry>
			<entry colname="col4">8</entry>
		      </row>

		      <row>
			<entry colname="col2">1</entry>
			<entry colname="col3">1</entry>
			<entry colname="col4">14</entry>
		      </row>

		      <row>
			<entry>Bit 5</entry>
			<entry spanname="2to4">予約済み, 常に 0. </entry>
		      </row>

		      <row>
			<entry>Bit 4</entry>
			<entry spanname="2to4">予約済み, 常に 0. </entry>
		      </row>

		      <row>
			<entry>Bit 3</entry>
			<entry spanname="2to4">DMA Mode Select. Bit 0
			  が「1」 (FIFO 有効) に設定されて いる場合,
			  このビットの設定は -RXRDY と  -TXRDY
			  の処理を Mode 0 から Mode 1 へ 変更します.
			</entry>
		      </row>

		      <row>
			<entry>Bit 2</entry>
			<entry spanname="2to4">Transmit FIFO Reset.
			  このビットに「1」が書き込まれている場 合,
			  FIFO の内容は破棄されます. 現在送
			  信されているすべての命令は損なわれずに送
			  られるでしょう. この機能は送信中止の場
			  合に役に立ちます. </entry>
		      </row>

		      <row>
			<entry>Bit 1</entry>
			<entry spanname="2to4">Receiver FIFO Reset.
			  このビットに「1」が書き込まれている場 合,
			  FIFO の内容は破棄されます. 現在  shift
			  レジスタ内で組み立てられているすべ
			  ての命令は損なわれずに受信されるでしょ う.
			</entry>
		      </row>

		      <row>
			<entry>Bit 0</entry>
			<entry spanname="2to4">16550 FIFO Enable.
			  設定されている場合, 送信 / 受信両方の  FIFO
			  が有効になります. holding レジス タ, shift
			  レジスタまたは FIFO 内のすべて の内容は,
			  FIFO が有効または無効になっ
			  た時点で失われます. </entry>
		      </row>
		    </tbody>
		  </entrytbl>
		</row>

		<row>
		  <entry>+0x02</entry>
		  <entry>read</entry>
		  <entrytbl cols="6">
		    <colspec colnum="1" colname="col1">
		    <colspec colnum="2" colname="col2">
		    <colspec colnum="3" colname="col3">
		    <colspec colnum="4" colname="col4">
		    <colspec colnum="5" colname="col5">
		    <colspec colnum="6" colname="col6">
		    <spanspec namest="col1" nameend="col6" spanname="1to6">
		    <spanspec namest="col2" nameend="col6" spanname="2to6">
		    <tbody>
		      <row>
			<entry spanname="1to6">Interrupt Identification
			  Register</entry>
		      </row>

		      <row>
			<entry>Bit 7</entry>
			<entry spanname="2to6">FIFO有効.
			  8250/16450 UART では, このビットはゼロ. </entry>
		      </row>

		      <row>
			<entry>Bit 6</entry>
			<entry spanname="2to6">FIFO有効.
			  8250/16450 UART では, このビットはゼロ. </entry>
		      </row>

		      <row>
			<entry>Bit 5</entry>
			<entry spanname="2to6">予約済み, 常に0. </entry>
		      </row>

		      <row>
			<entry>Bit 4</entry>
			<entry spanname="2to6">予約済み, 常に0. </entry>
		      </row>

		      <row>
			<entry>Bit 3</entry>
			<entry spanname="2to6">Interrupt ID Bit #2.
			  8250/16450 UART では, このビットはゼロ.
			</entry>
		      </row>

		      <row>
			<entry>Bit 2</entry>
			<entry spanname="2to6">Interrupt ID Bit #1</entry>
		      </row>

		      <row>
			<entry>Bit 1</entry>
			<entry spanname="2to6">Interrupt ID Bit #0.
			  これらの3つのビットは進行中の割り込み
			  を引き起こしたイベントのカテゴリを併せ
			  て報告します. これらのカテゴリは優先度
			  を持つため, イベントの複数のカテゴリが
			  同時に発生した場合, UART は最初に最も
			  重要なイベントを報告し, ホストは報告さ
			  れた順に解決するでしょう. 現在の割り込
			  みを引き起こしたすべてのイベントは, 新し
			  い割り込みが生成される前に解決されなけ
			  ればなりません (これは PC のアーキテク
			  チャの制限です).</entry>
		      </row>

		      <row>
			<entry colname="col2">2</entry>
			<entry colname="col3">1</entry>
			<entry colname="col4">0</entry>
			<entry colname="col5">優先度</entry>
			<entry colname="col6">説明</entry>
		      </row>

		      <row>
			<entry colname="col2">0</entry>
			<entry colname="col3">1</entry>
			<entry colname="col4">1</entry>
			<entry colname="col5">First</entry>
			<entry colname="col6">レシーバエラー (OE, PE, BI,
			  また FE)</entry>
		      </row>

		      <row>
			<entry colname="col2">0</entry>
			<entry colname="col3">1</entry>
			<entry colname="col4">0</entry>
			<entry colname="col5">Second</entry>
			<entry colname="col6">有効な受信データ</entry>
		      </row>

		      <row>
			<entry colname="col2">1</entry>
			<entry colname="col3">1</entry>
			<entry colname="col4">0</entry>
			<entry colname="col5">Second</entry>
			<entry colname="col6">トリガーレベル識別子
			  (受信バッファ中の古いデータ)</entry>
		      </row>

		      <row>
			<entry colname="col2">0</entry>
			<entry colname="col3">0</entry>
			<entry colname="col4">1</entry>
			<entry colname="col5">Third</entry>
			<entry colname="col6">トランスミッタに
			  命令用の空きがある
			  (THRE)</entry>
		      </row>

		      <row>
			<entry colname="col2">0</entry>
			<entry colname="col3">0</entry>
			<entry colname="col4">0</entry>
			<entry colname="col5">Fourth</entry>
			<entry colname="col6">モデムの状態が
			  変わった (-CTS,
			  -DSR, -RI, または
			  -DCD)</entry>
		      </row>

		      <row>
			<entry>Bit 0</entry>
			<entry spanname="2to6">Interrupt Pending Bit.
			  このビットが「0」に設定されている場合,
			  少なくとも一つの割り込みがペンディング
			  されています. </entry>
		      </row>
		    </tbody>
		  </entrytbl>
		</row>

		<row>
		  <entry>+0x03</entry>
		  <entry>write/read</entry>
		  <entrytbl cols="5">
		    <colspec colnum="1" colname="col1">
		    <colspec colnum="2" colname="col2">
		    <colspec colnum="3" colname="col3">
		    <colspec colnum="4" colname="col4">
		    <colspec colnum="5" colname="col5">
		    <spanspec namest="col1" nameend="col5" spanname="1to5">
		    <spanspec namest="col2" nameend="col5" spanname="2to5">
		    <spanspec namest="col4" nameend="col5" spanname="4to5">
		    <tbody>
		      <row>
			<entry spanname="1to5">Line Control
			  Register (LCR)</entry>
		      </row>

		      <row>
			<entry>Bit 7</entry>
			<entry spanname="2to5">Divisor Latch Access
			  Bit (DLAB). 設定されている場合,
			  transmit/receive register (THR/RBR) と
			  Interrupt Enable Register (IER)
			  へのアクセスが無効にな ります.
			  現在これらのポートへのすべてのア クセスは
			  Divisor Latch Register へリダ
			  イレクトされます. このビットの設定,  Divisor
			  Register のローディング, そし て DLAB
			  のクリアは割り込みが無効になっ
			  ている状態でおこなわれるべきです. </entry>
		      </row>

		      <row>
			<entry>Bit 6</entry>
			<entry spanname="2to5">Set Break.
			  「1」に設定されている場合, トランスミッ
			  タはこのビットが「0」に設定されるまで
			  スペースを切り目なく送信します. これは
			  送信されている文字のすべてのビットに優先
			  します. </entry>
		      </row>

		      <row>
			<entry>Bit 5</entry>
			<entry spanname="2to5">Stick Parity. parity
			  が有効になっている場合, このビッ
			  トの設定はビット4の値に基づき parity
			  を常に「1」か「0」にします. </entry>
		      </row>

		      <row>
			<entry>Bit 4</entry>
			<entry spanname="2to5">Even Parity Select
			  (EPS). parity が有効でビット5が「0」の場合,
			  このビットの設定は偶数 parity が送信そ
			  して要求されるようにします. そうでなけ
			  れば奇数 parity が使用されます. </entry>
		      </row>

		      <row>
			<entry>Bit 3</entry>
			<entry spanname="2to5">Parity Enable (PEN).
			  「1」に設定されている場合, データの最
			  後のビットとストップビットの間に  parity
			  ビットが挿入されます. また UART
			  は受信データに存在する parity を要求す
			  るでしょう. </entry>
		      </row>

		      <row>
			<entry>Bit 2</entry>
			<entry spanname="2to5">Number of Stop Bits
			  (STB). 「1」に設定されている場合, 5-bit デー
			  タ命令を使用して, 1.5の Stop ビットが
			  送信され各データ命令内に要求されま す. 6, 7
			  そして 8-bit データ命令に対し ては, 2つの
			  Stop ビットが送信され要求 されます.
			  このビットが「0」に設定され ている場合,
			  1つの Stop ビットが各デー
			  タ命令で使用されます. </entry>
		      </row>

		      <row>
			<entry>Bit 1</entry>
			<entry spanname="2to5">Word Length Select Bit #1
			  (WLSB1)</entry>
		      </row>

		      <row>
			<entry>Bit 0</entry>
			<entry spanname="2to5">Word Length Select Bit #0
			  (WLSB0)</entry>
		      </row>

		      <row>
			<entry colname="col2"
			  spanname="2to5">これらのビットは共に
			  各データ命令内のビッ トの数を指定します.
			</entry>
		      </row>

		      <row>
			<entry colname="col2">1</entry>
			<entry colname="col3">0</entry>
			<entry colname="col4" spanname="4to5">命令長</entry>
		      </row>

		      <row>
			<entry colname="col2">0</entry>
			<entry colname="col3">0</entry>
			<entry colname="col4" spanname="4to5">5 Data
			  Bits</entry>
		      </row>

		      <row>
			<entry colname="col2">0</entry>
			<entry colname="col3">1</entry>
			<entry colname="col4" spanname="4to5">6 Data
			  Bits</entry>
		      </row>

		      <row>
			<entry colname="col2">1</entry>
			<entry colname="col3">0</entry>
			<entry colname="col4" spanname="4to5">7 Data
			  Bits</entry>
		      </row>

		      <row>
			<entry colname="col2">1</entry>
			<entry colname="col3">1</entry>
			<entry colname="col4" spanname="4to5">8 Data
			  Bits</entry>
		      </row>
		    </tbody>
		  </entrytbl>
		</row>

		<row>
		  <entry>+0x04</entry>
		  <entry>write/read</entry>
		  <entrytbl cols="2">
		    <colspec colnum="1" colname="col1">
		    <colspec colnum="2" colname="col2">
		    <spanspec namest="col1" nameend="col2" spanname="1to2">
		    <tbody>
		      <row>
			<entry spanname="1to2">Modem Control Register
			  (MCR)</entry>
		      </row>

		      <row>
			<entry>Bit 7</entry>
			<entry>予約済み, 常に 0. </entry>
		      </row>

		      <row>
			<entry>Bit 6</entry>
			<entry>予約済み, 常に 0. </entry>
		      </row>

		      <row>
			<entry>Bit 5</entry>
			<entry>予約済み, 常に 0. </entry>
		      </row>

		      <row>
			<entry>Bit 4</entry>
			<entry>Loop-Back Enable.
			  「1」に設定されている場合, UART のトラ
			  ンスミッタとレシーバは診断処理のために
			  内部的に相互に接続されます. 付け加えて  UART
			  のモデム制御出力はモデム制御入力
			  に接続されます. CTS は RTS へ, DTR は
			  DSRへ, OUT 1 は R1 へ, OUT 2 は DCD へ
			  各々接続されます. </entry>
		      </row>

		      <row>
			<entry>Bit 3</entry>
			<entry>OUT 2. ホストのプロセッサが high または
			  low  に設定するであろう補助的な出力. IBM PC
			  のシリアルアダプタ (とクローンの殆ど)  では,
			  OUT 2 は 8250/16450/16550 UART
			  からの割り込み信号をハイインピーダンス
			  (無効) にするのに使用されます. </entry>
		      </row>

		      <row>
			<entry>Bit 2</entry>
			<entry>OUT 1. ホストのプロセッサが high または
			  low  に設定するであろう補助的な出力. IBM PC
			  のシリアルアダプタではこの出力は使用
			  されません. </entry>
		      </row>

		      <row>
			<entry>Bit 1</entry>
			<entry>Request to Send (RTS).
			  「1」に設定されている場合, UART の  -RTS
			  ラインの出力は Low (有効) となり ます.
			</entry>
		      </row>

		      <row>
			<entry>Bit 0</entry>
			<entry>Data Terminal Ready (DTR).
			  「1」に設定されている場合, UART の  -DTR
			  ラインの出力は Low (有効) となり ます.
			</entry>
		      </row>
		    </tbody>
		  </entrytbl>
		</row>

		<row>
		  <entry>+0x05</entry>
		  <entry>write/read</entry>
		  <entrytbl cols="2">
		    <colspec colnum="1" colname="col1">
		    <colspec colnum="2" colname="col2">
		    <spanspec namest="col1" nameend="col2" spanname="1to2">
		    <tbody>
		      <row>
			<entry spanname="1to2">Line Status Register
			  (LSR)</entry>
		      </row>

		      <row>
			<entry>Bit 7</entry>
			<entry>Error in Receiver FIFO. 8250/16450 UART
			  では, このビットはゼロ です.
			  FIFOの中に次のエラー条件が一つ以
			  上含まれている場合, このビットは「1」
			  に設定されます: PE, FE, または BI. </entry>
		      </row>

		      <row>
			<entry>Bit 6</entry>
			<entry>Transmitter Empty (TEMT).
			  「1」に設定されている場合, 送信 FIFO
			  または送信 shift レジスタ中に残ってい
			  る命令はありません. トランスミッタは完
			  全に働いていません. </entry>
		      </row>

		      <row>
			<entry>Bit 5</entry>
			<entry>Transmitter Holding Register Empty
			  (THRE). 「1」に設定されている場合, 現在 FIFO
			  (または holding レジスタ) には少なくと
			  も一つの送信される付加的な命令に対する
			  空きあります. このビットが「1」に設定
			  されている時は, 多分トランスミッタはま
			  だ送信しています. </entry>
		      </row>

		      <row>
			<entry>Bit 4</entry>
			<entry>Break Interrupt (BI). レシーバは Break
			  シグナルを検知しました. </entry>
		      </row>

		      <row>
			<entry>Bit 3</entry>
			<entry>Framing Error (FE). Start
			  ビットが検知されましたが, Stop
			  ビットは要求された時間内には現れません
			  でした. 受信された命令はおそらく勝手に
			  解釈されます. </entry>
		      </row>

		      <row>
			<entry>Bit 2</entry>
			<entry>Parity Error (PE). parity
			  ビットが受信された命令に対して 不正です.
			</entry>
		      </row>

		      <row>
			<entry>Bit 1</entry>
			<entry>Overrun Error (OE).
			  新しい命令が受信され, 受信バッファに空
			  きがありませんでした. shift レジスタに
			  新たに到着した命令は破棄されます.
			  8250/16450 UART では, holding レジスタ
			  内の命令は破棄され新たに到着した命令は
			  holding レジスタに置かれます. </entry>
		      </row>

		      <row>
			<entry>Bit 0</entry>
			<entry>Data Ready (DR)
			  一つ以上の命令がホストが読むであろう受 信
			  FIFO にあります. このビットが設定さ
			  れる前に, 命令は完全に受信され shift
			  レジスタから FIFO (または 8250/16450
			  の設計では holding レジスタ) へ移動さ
			  れなければなりません. </entry>
		      </row>
		    </tbody>
		  </entrytbl>
		</row>

		<row>
		  <entry>+0x06</entry>
		  <entry>write/read</entry>
		  <entrytbl cols="2">
		    <colspec colnum="1" colname="col1">
		    <colspec colnum="2" colname="col2">
		    <spanspec namest="col1" nameend="col2" spanname="1to2">
		    <tbody>
		      <row>
			<entry spanname="1to2">Modem Status Register
			  (MSR)</entry>
		      </row>

		      <row>
			<entry>Bit 7</entry>
			<entry>Data Carrier Detect (DCD). UART の DCD
			  ラインの状態を反映します. </entry>
		      </row>

		      <row>
			<entry>Bit 6</entry>
			<entry>Ring Indicator (RI). UART の RI
			  ラインの状態を反映します. </entry>
		      </row>

		      <row>
			<entry>Bit 5</entry>
			<entry>Data Set Ready (DSR). UART の DSR
			  ラインの状態を反映します. </entry>
		      </row>

		      <row>
			<entry>Bit 4</entry>
			<entry>Clear To Send (CTS). UART の CTS
			  ラインの状態を反映します. </entry>
		      </row>

		      <row>
			<entry>Bit 3</entry>
			<entry>Delta Data Carrier Detect (DDCD).
			  ホストによって MSR が最後に読み込まれ
			  た時点から, -DCD ラインが状態を一回以
			  上変えた場合に「1」に設定されます. </entry>
		      </row>

		      <row>
			<entry>Bit 2</entry>
			<entry>Trailing Edge Ring Indicator (TERI).
			  ホストによって MSR が最後に読み込まれ
			  た時点から, -RI ラインが low から high
			  へ移り変わった場合に「1」に設定されま
			  す.</entry>
		      </row>

		      <row>
			<entry>Bit 1</entry>
			<entry>Delta Data Set Ready (DDSR).
			  ホストによって MSR が最後に読み込まれ
			  た時点から, -DSR ラインが状態を一回以
			  上変えた場合に「1」に設定されます. </entry>
		      </row>

		      <row>
			<entry>Bit 0</entry>
			<entry>Delta Clear To Send (DCTS).
			  ホストによって MSR が最後に読み込まれ
			  た時点から, -CTS ラインが状態を一回以
			  上変えた場合に「1」に設定されます. </entry>
		      </row>
		    </tbody>
		  </entrytbl>
		</row>

		<row>
		  <entry>+0x07</entry>
		  <entry>write/read</entry>
		  <entry>Scratch Register (SCR). このレジスタは UART
		    では機能しません. この場所 には
		    どんな値でもホストによって書き込まれるこ とができ,
		    その後ホストによって読み込むことが可
		    能です.</entry>
		</row>
	      </tbody>
	    </tgroup>
	  </informaltable>
	</sect4>

	<sect4>
	  <title>16550A UART を越えて</title>

	  <para>ナショナル・セミコンダクタは付加的な機能を持つ 16550
	    と互換 性のある部品を提供していませんが,
	    色々な他のベンダがそれを持っ ています.
	    これらの部品の幾つかは以下に記述されています. 効果的
	    にこれらの改良を使用するためには,
	    殆どのポピュラーなオペレーティ ングシステムが 16550
	    が提供する機能以上のものをサポートしない ため,
	    ドライバはチップベンダから提供されなければならないことを
	    理解しておく必要があります.</para>

	  <variablelist>
	    <varlistentry><term>ST16650</term>
	      <listitem>
		<para>デフォルトではこの部品は NS16550A
		  と似ていますが, 拡
		  張された32バイトの送受信バッファを
		  オプションで有効にで きます. StarTech
		  により製造されました.</para>
	      </listitem>
	    </varlistentry>

	    <varlistentry><term>TIL16660</term>
	      <listitem>
		<para>デフォルトではこの部品は NS16550A
		  と類似した振舞いを しますが,
		  拡張された64バイトの送受信バッファをオプショ
		  ンで有効にできます. Texas Instruments
		  により製造されま した.</para>
	      </listitem>
	    </varlistentry>

	    <varlistentry><term>Hayes ESP</term>
	      <listitem>
		<para>この専売特許のプラグインカードは,
		  2048バイトの送受 信バッファを含み, 230.4Kbit/sec
		  のデータレートをサポー トします. Hayes
		  により製造されました.</para>
	      </listitem>
	    </varlistentry>
	  </variablelist>

	  <para>これらの<quote>ダム</quote>UART に加え,
	    たくさんのベンダがインテリジェ
	    ントシリアルコミニュケーションボードを製造しています. こ
	    のタイプの設計は通常マイクロプロセッサを提供しており,
	    このマイ クロプロセッサは幾つかの UART
	    へのインタフェースとなってデータ を処理 /
	    バッファリングし, そして必要な時にメインの PC のプロセッ
	    サへ警告を出します. UART
	    はこのタイプのコミニュケーションシ ステムにおいて PC
	    のプロセッサによって直接アクセスされないため,
	    ベンダにとっては 8250, 16450, または 16550 UART
	    と互換性のある  UART を使用する必要はありません.
	    これにより設計者は, より良い
	    性能特性を持つ部品が自由に利用できます.</para>
	</sect4>
      </sect3>

      <sect3 id="sio">
	<title><devicename>sio</devicename>ドライバの設定</title>

	<para><devicename>sio</devicename> ドライバは, NS8250-,
	  NS16450-, NS16550とNS16550A ベースの EIA RS-232C(CCITT V.24)
	  通信用インタフェースをサポートします.  ま た,
	  いくつかのマルチポートシリアルカードもサポートされています.
	  技術的 な詳細についてはマニュアル &man.sio.4;
	  を見てください.</para>

	<sect4>
	  <title>Digi International (DigiBoard) PC/8</title>

	  <para><emphasis>原作: &a.awebster;.<!-- <br> -->
	      1995年8月26日.</emphasis></para>

	  <para><emphasis>訳: &a.jp.masaki;.<!-- <br> -->6
	      September 1996.</emphasis></para>

	  <para>以下にDigi International
	    PC/8Dと16550チップを動作させるための, カーネ
	    ルconfigの部分を示します. このボードは,
	    8本の回線にすべてモデムを接続
	    した場合でも良好に動作します.</para>

	  <para><literal>options COM_MULTIPORT</literal>
	    を加えるのを忘れないでください. 忘れる
	    とうまく動作しません!</para>

	  <programlisting>device          sio4    at isa? port 0x100 tty flags 0xb05
device          sio5    at isa? port 0x108 tty flags 0xb05
device          sio6    at isa? port 0x110 tty flags 0xb05
device          sio7    at isa? port 0x118 tty flags 0xb05
device          sio8    at isa? port 0x120 tty flags 0xb05
device          sio9    at isa? port 0x128 tty flags 0xb05
device          sio10   at isa? port 0x130 tty flags 0xb05
device          sio11   at isa? port 0x138 tty flags 0xb05 irq 9 vector siointr</programlisting>

	  <para>ここで各 SIO
	    ポートが割り込みを共有する一つのグループであることを表現
	    するために, トリッキーな設定をしなければなりません. フラグ
	    (flags の後 ろの 16 進数) の下から 2
	    バイト目にこのグループの最後の SIO ポートの番
	    号を設定します. この例では 11 (16進数では 0x0b) ですから,
	    各デバイスの フラグは 0xb05 となります.</para>
	</sect4>

	<sect4>
	  <title>Boca 16</title>

	  <para><emphasis>寄稿: &a.whiteside;.<!-- <br> -->
	      1995年8月26日</emphasis></para>

	  <para>FreeBSD で Boca 16pord
	    のボードを動かすことは簡単ですが, そのた
	    めにはいくつかの作業が必要です. :</para>

	  <orderedlist>
	    <listitem>
	      <para>2.0.5 のデフォルトのカーネルは,
		マルチポートのサポートを<emphasis>して
		  いない</emphasis> ので,
		あなたは各ポート毎にデバイスエントリを追加する必要が
		あります. つまり必要なオプションを付けて,
		カーネルの再構築をしなければ なりません. そのためには,
		あなたのマシンにカーネルのソースコードが既に
		インストールされているか,
		あなたの替わりの誰かにカーネル再構築をやって
		もらう必要があります.</para>
	    </listitem>

	    <listitem>
	      <para>2番目に,
		あなたはカーネルオプションを正しく設定するために, あな
		たのBoca Boardの IO
		と割り込みの値を知っている必要があります.</para>
	    </listitem>
	  </orderedlist>

	  <para>ひとつ重要なことがあります.  Boca 16
	    に使われている実際の UART チップ は, Boca 16
	    のボードではなく,
	    外付けのコネクタボックスの中に存在します.
	    コネクタボックスを接続しないと,
	    ポートの検出に失敗するでしょう. 私は,
	    接続しないまま起動したり,
	    後から接続しなおしたりした時にどうなるかをテ
	    ストしていません.
	    どちらも実行しないようお奨めします.</para>

	  <para>もしあなたがカスタマイズ済みのカーネル
	    コンフィグレーションファイルを持っ ていなければ,
	    一般的な事柄については, <link
	      linkend="kernelconfig">FreeBSD
	      カーネルのコンフィグレーション</link>
	    を参考にしてください. 以下にBoca 16のボード
	    に関係する部分だけを記述します. この例では,
	    あなたがMYKERNELという名前 のカーネルを使っていて,
	    エディタには viを使っていることを仮定していま す.</para>

	  <procedure>
	    <step>
	      <para>次の1行をconfigファイルに追加してください.</para>

              <programlisting>options COM_MULTIPORT</programlisting>
	    </step>

	    <step>
	      <para>この <literal>device
		  sio<replaceable>n</replaceable></literal>という行を,
		必要に応じて 16 個のデバイス分を追加してください.
		最後のデバイスにだけ, このボード
		の割り込みベクタを記述します. (詳細は &man.sio.4;
		のマニュア ルページを参照してください.) 以下の例は,
		割り込み 3, ベース IO アドレス 100h の値を持つ Boca
		Board の場合です. 各ポートのための IO アドレスは,
		100h, 108h, 110h, ... のよ うに 16 進法で 8
		づつ加えていきます.</para>

	      <programlisting>device sio1 at isa? port 0x100 tty flags 0x1005
device sio2 at isa? port 0x108 tty flags 0x1005
device sio3 at isa? port 0x110 tty flags 0x1005
device sio4 at isa? port 0x118 tty flags 0x1005
&hellip;
device sio15 at isa? port 0x170 tty flags 0x1005
device sio16 at isa? port 0x178 tty flags 0x1005 irq 3 vector siointr</programlisting>

	      <para>フラグエントリは,
		あなたが全く同じsioの割り当てを使っていない限り
		<emphasis>必ず</emphasis>
		上記の例から変更してください. フラグは,
		次のように設定します. 0x <replaceable>M</replaceable>
		<replaceable>YY</replaceable>
		の<replaceable>M</replaceable>は, マスタポート (Boca
		16に搭載された最後
		のポート)のマイナー番号を指定します. さらに
		<replaceable>YY</replaceable> の部分はFIFOが
		有効または無効であること (この場合は有効), 割り込みを
		(ボード内で) 共 有しているか (この場合はYES), そして,
		AST/4 と互換性のある持つ割り込み
		制御レジスタを持っているか (この場合はNO)
		を指定します. この例では,</para>

	      <programlisting>flags 0x1005</programlisting>

	      <para>というフラグによって,
		マスタポートが sio16 であることを示します. も
		し同じボードをもう一枚追加し, sio17 から sio28
		を割り当てるなら, <emphasis>新しい方の</emphasis>
		ボードに対応する 16 個のポートのフラグはすべて 0x1C05
		に なります. 28 (== 0x1C)
		は新しいボードのマスタポートのマイナー番号で す.
		フラグの 05 の部分は変更しないでください.</para>
	    </step>

	    <step>
	      <para>カーネルコンフィグレーションファイルを
		保存してカーネルの設定を完了しま す.
		カーネルをコンパイル後, インストールし,
		新しいカーネルでリブートし てください.
		再コンパイルされたカーネルがうまくインストールされて,
		そのカーネルに正
		しいアドレスと割り込みが設定されていたならば,
		ブートメッセージは次の ように Boca
		ポートの検出に成功するはずです: (sioの番号,
		IOとIRQの値は, この例とは異なっているでしょう)</para>

	      <screen>sio1 at 0x100-0x107 flags 0x1005 on isa
sio1: type 16550A (multiport)
sio2 at 0x108-0x10f flags 0x1005 on isa
sio2: type 16550A (multiport)
sio3 at 0x110-0x117 flags 0x1005 on isa
sio3: type 16550A (multiport)
sio4 at 0x118-0x11f flags 0x1005 on isa
sio4: type 16550A (multiport)
sio5 at 0x120-0x127 flags 0x1005 on isa
sio5: type 16550A (multiport)
sio6 at 0x128-0x12f flags 0x1005 on isa
sio6: type 16550A (multiport)
sio7 at 0x130-0x137 flags 0x1005 on isa
sio7: type 16550A (multiport)
sio8 at 0x138-0x13f flags 0x1005 on isa
sio8: type 16550A (multiport)
sio9 at 0x140-0x147 flags 0x1005 on isa
sio9: type 16550A (multiport)
sio10 at 0x148-0x14f flags 0x1005 on isa
sio10: type 16550A (multiport)
sio11 at 0x150-0x157 flags 0x1005 on isa
sio11: type 16550A (multiport)
sio12 at 0x158-0x15f flags 0x1005 on isa
sio12: type 16550A (multiport)
sio13 at 0x160-0x167 flags 0x1005 on isa
sio13: type 16550A (multiport)
sio14 at 0x168-0x16f flags 0x1005 on isa
sio14: type 16550A (multiport)
sio15 at 0x170-0x177 flags 0x1005 on isa
sio15: type 16550A (multiport)
sio16 at 0x178-0x17f irq 3 flags 0x1005 on isa
sio16: type 16550A (multiport master)</screen>

	      <para>もしメッセージの表示が速くて読み取れないときは,

		<screen>&prompt.root; <userinput>dmesg | more</userinput></screen>

		とするとブート時のメッセージを
		ゆっくり見ることができます.</para>
	    </step>

	    <step>
	      <para>次に, root になってから,
		デバイスにあわせたエントリを
		<filename>/dev/MAKEDEV</filename>
		スクリプトを使って<filename>/dev</filename>
		に追加します. </para>

	      <screen>&prompt.root; <userinput>cd /dev</userinput>
&prompt.root; <userinput>./MAKEDEV tty1</userinput>
&prompt.root; <userinput>./MAKEDEV cua1</userinput>
<emphasis>(中略)</emphasis>
&prompt.root; <userinput>./MAKEDEV ttyg</userinput>
&prompt.root; <userinput>./MAKEDEV cuag</userinput></screen>

	      <para>もし, 何らかの理由で発信するデバイスが不要な場合,
		<filename>cua*</filename> デバ
		イスを作らないで済ますこともできます.</para>
	    </step>

	    <step>
	      <para>デバイスが確実に動作しているかどうか
		確認する手っ取り早い方法は,  あなたが (rootになって)
		各ポートにモデムを接続してみて, あなたが作成し
		た各デバイス毎に</para>

	      <screen>&prompt.root; <userinput>echo at&gt; ttyd*</userinput></screen>

	      <para>とやってみてください. 各ポー トが動作していれば
		RXの表示が光るのが見える<emphasis>はず</emphasis>
		です.</para>
	    </step>
	  </procedure>
	</sect4>

	<sect4>
	  <title>安価な Multi-UART カードのサポート</title>

	  <para><emphasis>寄稿: Helge Oldach
	    <email>hmo@sep.hamburg.com</email>, September
	      1999</emphasis></para>
	  
	  <para>二つ(またはもっと多くの) COM ポートを備えた
            20$ のマルチ I/O カードでの IRQ 共有が,
            FreeBSD でサポートされているか心配ですって?
            次のようにすれば使うことができます.</para>
	  
	  <para>通常, この種のボードをサポートする場合には,
            各ポートに対して個別に IRQ を割り当てて利用します.
            例えば, マザーボード上に <devicename>COM1</devicename> ポート
            (<devicename>sio0</devicename>&ndash;I/O アドレス 0x3F8, IRQ 4)
            があり, 二つの UART ポートがついている拡張カードがあるとしましょう.
            その場合, この二つのポートには, 二番目のポートを
            <devicename>COM2</devicename>(<devicename>sio1</devicename>&ndash;I/O
            アドレス 0x2F8, IRQ 3) に, 三番目のポート(<devicename>sio2</devicename>)を
            I/O アドレス 0x3E8, IRQ 5 に設定する必要があります.
            しかしすぐわかるとおり, この方法では IRQ 資源を無駄に浪費します.
            基本的に前セクションに記されている <literal>COM_MULTIPORT</literal>
            の設定に従えば, 拡張カード上の二つのポートで一つの IRQ を使用するように
            セットアップすることができます.</para>

	  <para>そのような安価な I/O ボードには大抵,
            次に示すような, COM ポートを選択する 4x3
            のジャンパマトリクスがついています.</para>

<programlisting>            o  o  o  *
Port A               |
            o  *  o  *
Port B         |
            o  *  o  o
IRQ         2  3  4  5</programlisting>

	  <para>これは, Port A が IRQ 5 に, Port B が IRQ 3
            に結線されていることを示しています.
            IRQ の並びはボードにより異なるでしょう&mdash;例えば, 他のボードは
            IRQ として 3,4,5,7 が選択できるようになっているかも知れません.</para>

	  <para>「ああ, IRQ を共有するには IRQ 3 の列にある 3
            つの接続点をつなぐようなジャンパ線を手作りして,
            両方のポートが IRQ 3 になるように結線すれば良いのか」と
            考えるかも知れませんが, それは正しくありません.
            UART の出力段は <quote>トーテムポール</quote> 接続(*)されているので,
            IRQ 3 に複数接続することはできないのです.
            そのため, もし UART のどれか一つが IRQ 3 を発行したとしても,
            それが期待するような動作になりません.
            拡張ボードやマザーボードの実装に依存することですが,
            IRQ 3 信号線は常時 H レベルか, L レベルを保っています.
            </para>

            <note>
              <para><emphasis>訳注:</emphasis>
              <quote>トーテムポール</quote> とは, ディジタル論理回路を構成する
              TTL ロジック IC の内部構造の一種です. トーテムポール型出力の場合には
              出力同士を接続すると短絡電流が流れてしまうため,
              CPU やメモリで使われている, いわゆるバス接続が使えないという特徴を持っています.
              IRQ 信号線が常時 H か L レベルに保たれる, というのは,
              割り込み信号線が正論理/負論理のどちらになっているかが実装に依存することによります.
              以降の解説は, 正論理を仮定して書かれていますのご注意下さい.</para>
            </note>

	  <para>したがって, 二つの UART の IRQ 出力を分離する必要があります.
            そのためには, どちらかの UART が IRQ を発行した時にだけ,
            ボード上の IRQ 信号線が H レベルになり,
            そうでない時には L レベルになるようにします.
            以下の解決法は, Joerg Wunsch
	    <email>j@ida.interface-business.de</email>
            から提案されたものです:
            二つのダイオード(ゲルマニウム, あるいはショットキー型を強く推奨)と
            1 キロオームの抵抗器一本で, ワイヤード OR を構成します.
            以下に示すのは, 上に示した 4x3 ジャンパの回路図です.</para>

<programlisting>                          Diode
                +---------->|-------+
               /                    |
            o  *  o  o              |     1 kOhm
Port A                              +----|######|-------+
            o  *  o  o              |                   |
Port B          `-------------------+                 ==+==
            o  *  o  o              |                 Ground
                \                   |
                 +--------->|-------+
IRQ         2  3  4  5    Diode</programlisting>

	  <para>各ダイオードのカソード側は接地点に,
            1 キロオームのプルダウン抵抗器と直列にして接続します.
            プルダウン抵抗を接続することはとても重要です.
            これはバス上の IRQ 信号線がフロート状態になるのを防ぎます.</para>

	  <para>さあ, これでカーネルの設定を変更する準備ができました.
            上に示すような例の場合, 次のような設定になります.</para>

	  <programlisting># standard on-board COM1 port
device          sio0    at isa? port "IO_COM1" tty flags 0x10
# patched-up multi-I/O extension board
options         COM_MULTIPORT
device          sio1    at isa? port "IO_COM2" tty flags 0x205
device          sio2    at isa? port "IO_COM3" tty flags 0x205 irq 3</programlisting>

	  <para><devicename>sio1</devicename> と
            <devicename>sio2</devicename> の <literal>flags</literal>
            設定は非常に重要です. 詳細は &man.sio.4; をご覧ください.
            (一般的には, "flags" 属性の <literal>2</literal> は,
            <devicename>sio</devicename>2 の IRQ
            を使用するということを示します.
            下位ニブル(訳注: 16 進数一桁のこと) は間違いなく
            <literal>5</literal> とするでしょう.)
            カーネルの verbose モードが ON になっていると,
            こんな風な出力が得られます.</para>

	  <screen>sio0: irq maps: 0x1 0x11 0x1 0x1
sio0 at 0x3f8-0x3ff irq 4 flags 0x10 on isa
sio0: type 16550A
sio1: irq maps: 0x1 0x9 0x1 0x1
sio1 at 0x2f8-0x2ff flags 0x205 on isa
sio1: type 16550A (multiport)
sio2: irq maps: 0x1 0x9 0x1 0x1
sio2 at 0x3e8-0x3ef irq 3 flags 0x205 on isa
sio2: type 16550A (multiport master)</screen>

	  <para><filename>/sys/i386/isa/sio.c</filename> は
            <quote>irq maps</quote> 配列を使っているために
            表示が少々難解なのですが, 基本的なアイデアは
            1,3,4 番目の場所に <literal>0x1</literal>
            があるかどうか調べる, というものです.
            これはつまり, 対応する IRQ が出力された時にセットされ,
            その後クリアされるという, ちょうど期待する動作が
            行なわれることを意味します.
            もし, カーネルがこのような表示を出力しない場合,
            大部分は結線の誤りによるものでしょう.</para>
	</sect4>
      </sect3>

      <sect3 id="cy">
	<title><devicename>cy</devicename> ドライバのコンフィグ</title>

	<para><emphasis>原作: Alex Nash.<!-- <br> -->
	    6 June 1996.</emphasis></para>

	<para><emphasis>訳: &a.jp.yuki;.<!-- <br> -->
	    6 September 1996.</emphasis></para>

	<para>Cyclades 社のマルチポートカードは,
	  他のマルチポートカードが 使う <devicename>sio</devicename>
	  の代わりに <devicename>cy</devicename>ドライバを使います.
	  コンフィグレーションは非常に簡単で,</para>

	<procedure>
	  <step>
	    <para><devicename>cy</devicename> デバイスをあなたの <link
		linkend="kernelconfig-config">カーネルの
		コンフィグレーション</link>に足します.  (注意.
	      あなたのirqやiomemの設定が違っているかもしれません)</para>

	    <programlisting>device cy0 at isa? tty irq 10 iomem 0xd4000 iosiz 0x2000 vector cyintr</programlisting>
	  </step>

	  <step>
	    <para>新しいカーネルの <link
		linkend="kernelconfig-building">再構成と
		インストール</link> をします.</para>
	  </step>

	  <step>
	    <para><link
		linkend="kernelconfig-nodes">デバイスノード</link>
	      を次(8ポートと仮定しています.)
	      のように打って作ります:</para>

	    <screen>&prompt.root; <userinput>cd /dev</userinput>
&prompt.root; <userinput>for i in 0 1 2 3 4 5 6 7;do ./MAKEDEV cuac$i ttyc$i;done</userinput></screen>
	  </step>

	  <step>
	    <para>もし, 必要なら シリアルデバイス
	      (<literal>ttyd</literal>) とそっくりにコピーして <link
		linkend="dialup">dialup</link>エントリを作り,
	      <literal>ttyd</literal>の代わりに
	      <literal>ttyc</literal>を使います. 例:</para>

	    <programlisting>ttyc0	"/usr/libexec/getty std.38400"	unknown	on insecure
ttyc1	"/usr/libexec/getty std.38400"	unknown	on insecure
ttyc2	"/usr/libexec/getty std.38400"	unknown	on insecure
&hellip;
ttyc7	"/usr/libexec/getty std.38400"	unknown	on insecure</programlisting>
	  </step>

	  <step>
	    <para>新しいカーネルで立ち上げます.</para>
	  </step>
	</procedure>
      </sect3>

      <sect3>
	<title><devicename>si</devicename> ドライバのコンフィグ</title>

	<para><emphasis>原作 &a.nsayer;. 25 March
	    1998.</emphasis></para>

	<para><emphasis>訳: &a.jp.yoshiaki;. 
	29 Apr 1999. </emphasis></para>

	<para>マルチポートカードのSpecialix SI/XIO と SX は
	  <devicename>si</devicename> ドライバを使います.
	  1台のマシンで4枚までのホストカードを使うことが
	  できます. 以下のホストカードがサポートされています:
	</para>

	<itemizedlist>
	  <listitem><para>ISA SI/XIO host card (2 versions)</para></listitem>
	  <listitem><para>EISA SI/XIO host card</para></listitem>
	  <listitem><para>PCI SI/XIO host card</para></listitem>
	  <listitem><para>ISA SX host card</para></listitem>
	  <listitem><para>PCI SX host card</para></listitem>
	</itemizedlist>

	<para>SX と SI/XIO ホストカードは明らかに違いがあるように見えますが
	  これらの機能は基本的には同じものです. ホストカードはI/O空間を
	  利用しませんが, 代りに32Kブロックのメモリ空間を使います.
	  ISAカードの工場出荷時の設定は<literal>0xd0000-0xd7fff</literal>
	  です.
	  これらはIRQを必要とします. PCIカードではもちろん自動設定されます.
	</para>

	<para>ホストカードには最大4個の外部モジュールが接続できます.
	  外部モジュールにはそれぞれ4/8本のシリアルポートが内蔵されています.
	  モジュールは以下の品種があります.</para>
	
	<itemizedlist>
	  <listitem><para>SI 4 ポート/ポート モジュール. ポートそれぞれ
		最大 57600 bps がサポートされます.</para></listitem>
	  
	  <listitem><para>XIO 8 ポートモジュール. ポートそれぞれ最大
		115200 bps がサポートされます. XIOモジュールには 7
		シリアルポートと1 パラレルポート のタイプもあります.
	  </para></listitem>
	  <listitem><para>SXDC, 8ポートモジュール.
	      ポートそれぞれ最大921600 bps がサポートされます. XIOと同様,
	      1つのパラレルポートを持つモデルがあります. </para></listitem>
	</itemizedlist>

	<para>ISA ホストカードを設定するには以下の行を
	  <link linkend="kernelconfig-config">カーネルコンフィグレーション
	   ファイル</link>に追加します. 数値は適当なものに変更してください.</para>
     
	<programlisting>device si0 at isa? tty iomem 0xd0000 irq 11</programlisting>
	
	<para>有効なIRQ番号は SX ISA ホストカードでは 9, 10, 11, 12, 15 で
	  SI/XIO ISAホストカードでは 11, 12, 15 です. </para>
     
	<para>EISAやPCIカードの設定は, 以下の行を使います: </para>
     
	<programlisting>device si0</programlisting>

	<para>コンフィグレーションエントリを追加した後で, 新しいカーネルの
	<link linkend="kernelconfig-building">再構築とインストール</link>
	 を行ないます.</para>
     
	<para>新しいカーネルで再起動した後に, <link
	 linkend="kernelconfig-nodes">デバイスノード</link> を /dev 以下に
	 作成する必要があります. <filename>MAKEDEV</filename>スクリプト
	 で注意深く行なってください. 利用するポートの数をタイプします:
	 </para>
     
	<screen>&prompt.root; <userinput>cd /dev</userinput>
&prompt.root; <userinput>./MAKEDEV ttyA<replaceable>nn</replaceable> cuaA<replaceable>nn</replaceable></userinput></screen>
     
	<para>(<replaceable>nn</replaceable> はポートの数に置き換えます.
	</para>
     
	<para>login プロンプトにこれらのポート番号を表示させたい場合
	は<link linkend="dialup"><filename>/etc/ttys</filename>
	</link>に以下の行を追加する必要があります:</para>

	<programlisting>ttyA01  "/usr/libexec/getty std.9600"   vt100   on insecure</programlisting>
     
	<para>ターミナルタイプは適当なものに変更してください.
	  例えばモデムの場合は<userinput>dialup</userinput> あるいは
	<userinput>unknown</userinput>が適当でしょう. </para>
       </sect3>
     </sect2>

    <sect2>
      <title>* パラレルカード</title>

      <para></para>
    </sect2>

    <sect2>
      <title>* モデム</title>

      <para></para>
    </sect2>

    <sect2>
      <title>* ネットワークカード</title>

      <para></para>
    </sect2>

    <sect2>
      <title>* キーボード</title>

      <para></para>
    </sect2>

    <sect2>
      <title>マウス</title>
	
      <para><emphasis>寄稿: Joel Sutton
  	  <email>jsutton@bbcon.com.au</email>, 2000 年 1 月.</emphasis></para>
      
      <para>FreeBSD は PS/2 ポート, シリアルポート, USB
        ポートを経由して様々な種類のマウスをサポートしています.
        mouse デーモンを使うとマウスを X
        とシステムコンソールの両方で利用することができるため,
        多くの人は mouse デーモンを使うことを選んでいます.
        mouse デーモンに関する詳細は, &man.moused.8; を参照してください.
        この章の例では, mouse デーモンが使われていることを前提にしています. 
      </para>
      
      <note>
        <para>この節に書かれている各種製品の名前は, 著者が FreeBSD 上で
          動作することを確認したものであり,
          ここに書かれていない他の同様のデバイスも動作する可能性があります.
        </para>
      </note>
      
      <sect3>
        <title>PS/2 マウス</title>
	
        <sect4>
          <title>システム設定</title>
          
	  <para>PS/2 マウスが mouse デーモンで正しく機能するように設定するには,
	    以下の行を <filename>/etc/rc.conf</filename>
	    に加える必要があります.</para>
          
          <programlisting>moused_enable="YES"
moused_type="ps/2"
moused_port="/dev/psm0"</programlisting>
        </sect4>

        <sect4>
          <title>利用できることが分かっている機器</title>

          <itemizedlist>
            <listitem>
              <para>Logitech First Mouse - 3 ボタン</para>
            </listitem>
	    
            <listitem>
              <para>マイクロソフト社製シリアル-PS/2 互換マウス</para>
            </listitem>
          </itemizedlist>
        </sect4>
      </sect3>

      <sect3>
        <title>シリアルマウス</title>

        <sect4>
          <title>システム設定</title>

	  <para>シリアルマウスが mouse デーモンで正しく機能するよう設定するには,
	    以下の行を <filename>/etc/rc.conf</filename>
	    に加える必要があります. この例では, マウスが
	    <devicename>COM1:</devicename> に接続されていて,
            そのマウスが mouse
            デーモンによって自動的に認識されることを前提としています.</para>

          <programlisting>moused_enable="YES"
moused_type="auto"
moused_port="/dev/cuaa0"</programlisting>

          <para>特定の種類のシリアルマウスで mouse
            デーモンを使用する設定に関しては, &man.moused.8;
            にある詳細な説明をご覧ください.</para>
        </sect4>

        <sect4>
          <title>利用できることが分かっている機器</title>
	  
          <itemizedlist>
            <listitem>
              <para>一般的なマイクロソフトマウス互換品</para>
            </listitem>

            <listitem>
              <para>Logitech First Mouse - 3 ボタン</para>
            </listitem>

            <listitem>
              <para>マイクロソフト社製シリアル-PS/2 互換マウス</para>
            </listitem>
          </itemizedlist>
        </sect4>
      </sect3>

      <sect3>
        <title>USB</title>
	
        <sect4>
          <title>システム設定</title>
	  
          <para>USB デバイスドライバは比較的最近 FreeBSD に追加されたもので,
	    まだ GENERIC カーネルには含まれていません.  以下の手順は,
	    典型的なシステムで関連するドライバをいかに組み込むかという一例です.</para>

          <procedure>
            <step>
       	      <para><devicename>ums</devicename> デバイスをあなたの
		<link linkend="kernelconfig-config">カーネルコンフィグレーション</link>
		の usb セクションに追加します.  たとえば, 次のようにします.
       	      </para>

	      <programlisting>controller usb0 controller uhci0 device ums0</programlisting>
	    </step>
       		
	    <step>
	      <para>新しいカーネルを<link linkend="kernelconfig-building">
		  再構築してインストール</link>します.</para>
	    </step>

       	    <step>
       	      <para><link linkend="kernelconfig-nodes">デバイスノード(device
		  node)</link> を作ります. それには, 以下のように入力します:</para>

	      <screen>&prompt.root; <userinput>cd /dev</userinput>
&prompt.root; <userinput>sh MAKEDEV ums0</userinput></screen>
	    </step>

	    <step>
	      <para>以下の内容を <filename>/etc/rc.conf</filename> に追加し,
		mouse デーモンが正しく動作するように設定します.</para>

	      <programlisting>moused_enable="YES"
moused_type="auto"
moused_port="/dev/ums0"</programlisting>
            </step>

            <step>
              <para>システムを再起動します.</para>
	      <screen>&prompt.root; <userinput>shutdown -r now</userinput></screen>
            </step>
          </procedure>
        </sect4>

        <sect4>
          <title>利用できることが分かっている機器</title>

          <itemizedlist>
            <listitem>
              <para>Logitech TrackMan - Marble Wheel</para>
            </listitem>
          </itemizedlist>
        </sect4>
      </sect3>
    </sect2>

<![ %not.published; [

    <sect2>
      <title>* その他</title>

      <para></para>
    </sect2>
  </sect1>

]]>


  <sect1 id="hw-storage">
    <title>記憶装置</title>

    <sect2 id="esdi">
      <title>ESDIハードディスクの使い方</title>

      <para><emphasis>原作および Copyright &copy; 1995, &a.wilko;.
	  <!-- <br> -->24 September 1995.</emphasis></para>

      <para><emphasis>訳: &a.jp.ts;<!-- <br> -->
	  2 September 1996.</emphasis></para>

      <para>ESDIとは Enhanced Small Device Interfaceの略語です.
	この技術は, 馴染み 深い ST506や
	ST412といったインタフェースに基づくものであり, 世界初の普 及型
	5.25インチのウィンチェスタディスクを造ったSeagate
	Technology社に よって最初に作られました.</para>

      <para>ESDIの Eは拡張 (Enhanced) を表しており,
	実際そのとおりです. まず, イン タフェースの速度は速く, 10
	ないし 15Mビット/秒であり, ST412インタフェー
	スに接続したドライブの 5Mビット/秒よりも高速です. また,
	上位レベルのコ マンドがいくつか追加されて,
	オペレーティングシステムレベルのドライバ作 成者にとって,
	ESDIインタフェースはある程度インテリジェントなものとなり
	ました. ただし SCSIほどにインテリジェントではありません.
	ESDIは ANSIが 標準化をおこなっています.</para>

      <para>トラックごとのセクタ数を増やすことで,
	ESDIドライブの記憶容量は引き上げ られました. 通常,
	トラックあたり 35セクタですが, 今までに筆者がみたド
	ライブの中で大容量のものは, トラックあたり
	54セクタもありました.</para>

      <para>ESDIは IDEや
	SCSIといったインタフェースの普及によって消えつつあります が,
	無料あるいは在庫処分の 格安なドライブが入手可能であることを
	考えると,  少ない (もしくは現状の)
	予算で縛られたシステムにとって, ESDIドライブは
	理想的です.</para>

      <sect3>
	<title>ESDIのコンセプト</title>

	<sect4>
	  <title>物理的な接続</title>

	  <para>ESDIインタフェースでは,
	    ドライブごとに2つのケーブルを接続します. 第 1
	    のケーブルは34ピンのフラットケーブルエッジコネクタで,
	    コントローラとド ライブ間のコマンドおよびステータスの
	    両信号のやりとりのためのものです.  コマンド用ケーブルは,
	    すべての ESDIドライブをデイジーチェーンで結び ますから,
	    すべてのドライブを接続したバスを構成することに
	    なります.</para>

	  <para>第 2 のケーブルは 20 ピンのフラットケーブル
	    エッジコネクタで, ドライブへの データ入出力に使います.
	    このケーブルは放射状に接続しますから, ドライブ
	    ごとにコントローラへの専用接続を持つことに
	    なるわけです.</para>

	  <para>筆者の経験によれば, PC向け ESDI コントローラには,
	    コントローラあたり最 大 2
	    台までのデバイス接続が可能という制限がありました. これは,
	    ドライ ブのアドレス割り当てのために,
	    単一ビットだけを用意したという WD1003 か
	    ら持ち越された互換 (?) 機能なのだと思われます.</para>
	</sect4>

	<sect4>
	  <title>デバイスのアドレス指定</title>

	  <para>1本のコマンドケーブルには最大で 7つのデバイスと
	    1つのコントローラを接 続することができます.
	    どのドライブをコントローラがアドレスしているのか
	    を個別に認識できるようにするために, ESDIデバイスは,
	    デバイスアドレスを
	    設定するためのジャンパかスイッチを備えています.</para>

	  <para>PC向けコントローラでは,
	    最初のドライブにはアドレス0を設定し, 第2番目の
	    ディスクへはアドレス1を設定します.
	    <emphasis>いつも留意すべきことは, </emphasis>
	    ディスクごとに固有のアドレスを必ず設定するということです!
	    つまり, コン トローラあたり最大2台のドライブというような
	    PC向けのものでは, 第1 ドラ イブは第0番ドライブで,
	    第2ドライブは第1番ドライブだということです.</para>
	</sect4>

	<sect4>
	  <title>ターミネート処理 (termination)</title>

	  <para>デイジーチェーン接続用コマンドケーブル
	    (34ピンのケーブルであることを覚 えていますか? ) では,
	    最後のチェーン接続ドライブでターミネートしなけれ
	    ばなりません. このために,
	    ESDIドライブにはターミネート用抵抗ネットワー
	    クが付属しており,
	    ターミネートする必要がないときにはその抵抗をドライブ
	    から外したり, またはジャンパで無効 (disable)
	    にすることができるようになっ ています.</para>

	  <para>したがって, ひとつのドライブ,
	    すなわちコマンドケーブルの最終端に位置す
	    るドライブ<emphasis>だけ</emphasis>が,
	    そのターミネート用抵抗を有効 (installまたは enable)
	    にすることができます.
	    コントローラは自動的にコマンドケーブルのもう一方
	    の端のターミネート用抵抗を有効にします.
	    ご注意いただきたいのは, コント
	    ローラは必ずコマンドケーブルのいずれかの
	    端に位置しなければならず, けっ
	    して途中に位置するようにしては
	    <emphasis>いけない</emphasis> ということです.</para>
	</sect4>
      </sect3>

      <sect3>
	<title>ESDIディスクの FreeBSDでの使い方</title>

	<para>ESDI を初めて動かすようにすることが,
	  どうしてこうも大変なことなのでしょ うか ?</para>

	<para>ESDIディスクを FreeBSD
	  で動かそうと試みた人たちが激烈なイライラを募らせ
	  たことは知られています. 今までまったく
	  ESDIを知らない場合には, 複数の 要因の組み合わせが悪く働いて,
	  ESDIへの理解を妨げることになるかもしれま せん.</para>

	<para>このことは, ESDIと
	  FreeBSDの組み合わせは選んではいけないという俗説も生
	  み出しました. 以下の節において, 落し穴のすべてとその解決策を
	  述べてみようと思います.</para>

	<sect4>
	  <title>ESDI速度の違い</title>

	  <para>すでに簡単に紹介したように,
	    ESDIは2種類の速度を持っています. 旧式のド
	    ライブとコントローラは 10Mビット/秒のデータ転送速度ですが,
	    新しいもの では 15Mビット/秒が利用できます.</para>

	  <para>仮に 10Mビット/秒のコントローラへ
	    15Mビット/秒のドライブを接続したよ
	    うな場合に問題が生じることを予想することは簡単です.
	    したがって必ず, コ ントローラ <emphasis>および</emphasis>
	    ドライブのマニュアルを参照して, それぞれの 転送速度が
	    一致しているかどうかを調べるようにしてください.</para>
	</sect4>

	<sect4>
	  <title>トラックについて</title>

	  <para>主流の ESDIドライブは,
	    トラックあたり34ないし36個のセクタを持ちます.
	    しかし大部分の (古い)
	    コントローラは36個以上のセクタを扱うことができま
	    せん.</para>

	  <para>新しい大容量のドライブでは,
	    トラックごとにさらに多くの数のセクタを持つ ことができます.
	    たとえば筆者の 670MBのドライブは, トラックあたり 54セ
	    クタも持たせることができます.</para>

	  <para>筆者のコントローラは 54
	    セクタ数をサポートしていませんでしたが, トラック あたり 35
	    セクタという設定で, 問題なく動作しました. しかし,
	    これが意味す
	    るのは大量のディスク容量を失うということです.</para>

	  <para>もう一度,
	    詳しい情報についてハードウェアのドキュメントを
	    調べてください.
	    この例のような仕様からはずれた設定をしたときには,
	    うまく動くかもしれま せんが, 動かないこともあります.
	    そのようなときには, 別のより多くの機能
	    をもつコントローラで試してみるようにしてください.</para>
	</sect4>

	<sect4>
	  <title>ハードセクタとソフトセクタ</title>

	  <para>多くの ESDIドライブでは,
	    ハードセクタまたはソフトセクタによる処理を,
	    ジャンパ設定で指定することができます. ハードセクタとは,
	    新しいセクタの 開始位置において,
	    ESDIドライブにセクタパルス (sector pulse) を発生させ
	    ることです. コントローラはこのパルスを利用して,
	    書き込みや読み取りのタ イミングを指示します.</para>

	  <para>ハードセクタではセクタのサイズを選ぶことができます
	    (通常はフォーマット 後セクタあたり256, 512,
	    および1024バイト). FreeBSDは512バイトのセクタ
	    サイズを使います. トラックあたりのセクタ数は,
	    同じように選択に幅があり ますが,
	    フォーマット後のセクタのバイト数はすべて同じです.
	    セクタごとの  <emphasis>未フォーマット</emphasis>
	    のバイト数は, コントローラがどの程度の調整用の
	    バイト数を必要とするかによって異なります.
	    トラックあたりのセクタ数を多 くすれば記憶容量は増えますが,
	    もしドライブから与えられるバイト数よりも
	    多くのものをコントローラが必要とするのであれば,
	    問題を生じることがあり ます.</para>

	  <para>ソフトセクタでは,
	    コントローラ自身が読み書きの始まりと終りの位置を決め ます.
	    なお, ESDI (筆者が知り得たものすべて) では,
	    ハードセクタがデフォ ルトのようです.
	    ソフトセクタを試みる必要性は感じたことがありません.</para>

	  <para>通常, FreeBSDをインストールする以前に,
	    まずセクタ処理の設定を試される ことをおすすめします.
	    というのも, セクタ処理の設定を変えるたびに, 物理
	    フォーマット (low-level format)
	    をしなければならないからです.</para>
	</sect4>

	<sect4>
	  <title>物理フォーマット処理</title>

	  <para>ESDIドライブは, 使い始める前に,
	    物理フォーマットをおこなう必要があります.
	    もしトラックあたりのセクタ数を変えたり,
	    ドライブの物理的な設置方法 (水 平や垂直方向)
	    を変えたときには, ふたたびフォーマットする必要があります
	    から, よく検討した後でフォーマットしてください.
	    フォーマット処理の所要 時間を短く予想してはいけません.
	    大容量のディスクでは数時間を要します.</para>

	  <para>物理フォーマットが終わったならば, サーフィススキャン
	    (surface scan) を おこない,
	    バッドセクタの検出とフラグの処理をします.
	    ほとんどのディスクには,
	    メーカが作成したバッドブロックリストを
	    記録した用紙またはステッカーが付 いています. さらに,
	    ほとんどのディスク内にもバッドブロックリストが記録
	    されています.
	    メーカが作成したリストを利用するようにしてください. この
	    時点で不良部分をマップし直す方が,
	    FreeBSDのインストール後におこなうよりも,
	    はるかに簡単です.</para>

	  <para>物理フォーマットプログラムのなかでも,
	    トラックの中にひとつでもバッドセ クタがあれば,
	    同じトラック内の残りのすべてのセクタを不良とするようなプ
	    ログラムがありますから,
	    そのようなものは利用しないようにしてください.
	    ディスクスペースの浪費だけでなく, より重大な
	    bad144と関連した悲劇の原 因にもなるからです
	    (bad144の節を参照のこと).</para>
	</sect4>

	<sect4>
	  <title>トランスレーション</title>

	  <para>トランスレーションが,
	    ESDIだけに限定された問題ではないにもかかわらず,
	    重大な困難になることがあります.
	    トランスレーションにはいくつかの側面が あります.
	    多くに共通なものは, IBM
	    PC/ATのオリジナルの設計に起因するディ
	    スクジオメトリに関する制限を,
	    うまく回避するような調整を試みるものです  (IBM に感謝 !
	    ).</para>

	  <para>まずはじめに,  1024シリンダに関する (悪)
	    名高い制限があります. すなわ ち,
	    ブート可能なシステムについて, システム関連ファイルは
	    (オペレーティ ングシステムがどのようなものであっても) ,
	    ディスクの先頭部分の 1024シ リンダ内になければいけない,
	    という制限です. シリンダ番号を表すためには
	    10ビットしか与えられていません. セクタの総数については,
	    上限は 64 (0か ら 63) です. この1024シリンダの制限を,
	    16ヘッドの制限 (これも ATの仕様 による) と組み合わせると,
	    かなり限定されたディスク容量しか利用できませ ん.</para>

	  <para>この難点を解消するために, PC 向け
	    ESDIコントローラのメーカは, 自社のコ ントローラボードへ
	    BIOS PROM拡張を施しました. この BIOS拡張の内容は,
	    ブート時のディスクI/Oを (OSによっては
	    <emphasis>すべて</emphasis> のディスクI/Oも)  ,
	    トランスレーションを用いておこなうというものです.
	    すなわち, 大容量のディ スクを, あたかも 32
	    ヘッドかつトラックあたり 64 セクタであるようなデバイス
	    として OSへ知らせるのです. この結果, 総シリンダー数は
	    1024よりも少なく なりますから,
	    上記の難点などなかったものとして大容量ディスクを使うこと
	    ができるようになります. なお, 注目いただきたいことは,
	    FreeBSDカーネル の起動以降, FreeBSDはこの
	    BIOS拡張機能を使わないということです. 詳しく
	    は後ほどご説明いたします.</para>

	  <para>トランスレーションの第 2 の存在理由は,
	    多くの旧いシステムBIOSが, トラッ クあたり 17
	    セクタのドライブだけしか扱えない (ST412 という古い仕様)
	    から,  というものです. 比較的新しい BIOSは通常,
	    自由な値を設定できるドライブ タイプ
	    (多くの場合ドライブタイプ47) を持っています.</para>

	  <warning>
	    <para>この文書を読み終えられた後で,
	      どのようにトランスレーションを利用す るにせよ,
	      ぜひご留意いただきたいことがあります. もし複数の
	      OSをひとつ のディスクにインストールするときには,
	      必ず同じトランスレーションを使わ なければなりません.
	    </para>
	  </warning>

	  <para>トランスレーションに関して,
	    筆者が使用したコントローラは, ひとつのドラ
	    イブを複数のパーティションに論理的に
	    分けることができる機能を BIOS のオ
	    プションとして持っていました
	    (このような製品はいくつかあると思われる).  しかし,
	    ひとつのドライブにはひとつのパーティションに限定しました.
	    なぜ なら, このコントローラはパーティション情報を
	    ディスクへ書き出すからです.  つまり, 電源を入れると,
	    コントローラはこの情報を読み取り, OSに対してディ
	    スクから読みとった情報に基づくデバイスとして
	    知らせるからです.</para>
	</sect4>

	<sect4>
	  <title>代替セクタ処理</title>

	  <para>多くの ESDI コントローラはバッドセクタを
	    取り替える機能を備えています.
	    ディスクの物理フォーマット処理の途中もしくは終了時に,
	    バッドセクタであ ることを記録して,
	    代わりのセクタを壊れたセクタの位置へ (論理的に) 置き
	    ます.</para>

	  <para>通常この置き換え処理は, トラック内の N-1
	    個のセクタを実際のデータ記録に 使い,
	    第N番目のセクタだけを代替セクタとすることで実現します.
	    ここでNと いう値はトラック内の物理的セクタの総数です.
	    このアイデアが生まれた背景 は,
	    オペレーティングシステムが壊れたセクタを持たない 「完全」
	    なディスク を想定している, というものです. しかし
	    FreeBSDではこのアイデアを使うこ とはできません.</para>

	  <para>理由は, <emphasis>使用不可 (bad)</emphasis> から
	    <emphasis>使用可能</emphasis> への変換をおこなう のが
	    ESDIコントローラ上の BIOSだからなのです. FreeBSDは, 真の
	    32ビット のオペレーティングシステムであるために,
	    ブート後には BIOSを使いません.  代わりに
	    FreeBSDが使うのは,
	    ハードウェアと直接「対話」するデバイスドラ
	    イバというものです.</para>

	  <para><emphasis>結論:
	      代替セクタ処理やバッドブロックマッピングなど,
	      コントローラ・ メーカがなんと呼ぶかは判りませんが,
	      それらに似た機能を FreeBSDのディス
	      クへは使わないでください. </emphasis></para>
	</sect4>

	<sect4>
	  <title>バッドブロックの取り扱い</title>

	  <para>前節から残された問題があります. すなわち,
	    コントローラによるバッドブロッ
	    ク処理は利用できない状況であるにもかかわらず,
	    FreeBSDのファイルシステ
	    ムが想定しているのはあくまで完全無欠なディスクである,
	    という問題で す. これを解消するために, FreeBSDは
	    <command>bad144</command> というツールを採用 しています.
	    この <command>bad144</command> (この名前は
	    DEC社の標準となったバッドブロック 処理に由来している) は,
	    FreeBSDのスライスごとにバッドブロックを調べま す.
	    バッドブロックを見つけ出すと, <command>bad144</command>
	    は傷ついたブロック番号によるテー ブルを
	    FreeBSDスライスの末尾へ書き込みます.</para>

	  <para>ディスクが動作し始めると,
	    ディスクから読みとられたテーブルを基に, ディ
	    スクアクセスを調べます. この <command>bad144</command>
	    リストに記録されたブロック番号への 要求が起こると,
	    代わりのブロック (同じく FreeBSDスライスの末尾に位置す る)
	    を使います. このように, <command>bad144</command>
	    による置換手続きによって 「完全」 なディ スクを FreeBSD
	    ファイルシステムへ提供しているのです.</para>

	  <para><command>bad144</command>
	    の使用により陥るかもしれない落し穴があります. まず,
	    ひとつのス ライスには 126
	    個以上のバッドセクタを持てません. もしドライブに 126
	    個以上 のバッドセクタがあったときには, 複数の FreeBSD
	    のスライスに分けて, 各ス ライスのバッドセクタが 126
	    個以下となるようにする必要があります. くれぐ れも,
	    ひとつのトラック内にたったひとつの欠陥セクタが
	    見つかっただけで,  そのトラック内セクタ
	    <emphasis>すべて</emphasis>
	    を傷ついたものとして記録するよう
	    な物理フォーマットプログラムを使わないようにしてください.
	    簡単にお解り いただけると思いますが,
	    このような物理フォーマットをおこなえば, 126個の制
	    限は短時間で達成してしまいます.</para>

	  <para>次に, もしスライスが root
	    ファイルシステムを含んでいるときには, 1024シ
	    リンダ以内という BIOSの制限を守っていなければなりません.
	    ブート処理の ときですから, bad144 リストは BIOS
	    を使って読み取りますので, このリスト が 1024
	    シリンダ限界以内に位置していなければ読みとれません.</para>

	  <note>
	    <para>この制限は root
	      <emphasis>ファイルシステム</emphasis> だけ
	      が1024シリンダ限界以内にあれば十分ということではなく,
	      rootシステムを含 んだ <emphasis>スライス</emphasis>
	      全体が1024シリンダ限界以内におさまっている必要
	      があります.</para>
	  </note>
	</sect4>

	<sect4>
	  <title>カーネルのコンフィグレーション</title>

	  <para>ESDIディスクを扱うドライバは, IDEや ST412
	    MFMディスクなどと同じ  <literal>wd</literal> ドライバです.
	    この <literal>wd</literal> ドライバは, すべての WD1003
	    互換インタフェースにも利用できるはずです.</para>

	  <para>大部分のハードウェアは, ジャンパの設定によって,
	    ふたつの I/Oアドレス範 囲と IRQ 値のうちから,
	    それぞれひとつを選ぶことができます. したがって, wd
	    タイプのふたつのコントローラを
	    ひとつのシステムで使うことができます.</para>

	  <para>もし設定しようとしているハードウェアが
	    標準以外の割り当てをサポートして いれば,
	    適切な設定情報をカーネルのコンフィグレーションファイルに
	    記述す ることで, この非標準割り当てを利用できます.
	    次にカーネルのコンフィグレー ションファイルの例を示します
	    (このファイルがあるディレクトリは
	    <filename>/sys/i386/conf</filename> である).</para>

	  <programlisting># First WD compatible controller
controller      wdc0    at isa? port "IO_WD1" bio irq 14 vector wdintr
disk            wd0     at wdc0 drive 0
disk            wd1     at wdc0 drive 1

# Second WD compatible controller
controller      wdc1    at isa? port "IO_WD2" bio irq 15 vector wdintr
disk            wd2     at wdc1 drive 0
disk            wd3     at wdc1 drive 1</programlisting>
	</sect4>
      </sect3>

      <sect3>
	<title>ESDIハードウェアの例</title>

	<sect4>
	  <title>Adaptec 2320コントローラ</title>

	  <para>筆者は, ACB-2320でコントロールされた ESDIディスクへ,
	    FreeBSDをインストー ルすることができました. なお,
	    このディスクには他のオペレーティングシス
	    テムをインストールしていません.</para>

	  <para>インストールするために, まず,
	    <command>NEFMT.EXE</command> (<hostid
	      role="fqdn">www.adaptec.com</hostid> から
	    <command>ftp</command>可能)
	    でディスクを物理フォーマットし, かつトラックを代替セ
	    クタとともにフォーマットするかどうかの設問に
	    NOと答えました. また  ACB-2320の
	    BIOSは使わないように設定しました. そしてシステム
	    BIOSがブー トできるように, システム
	    BIOSの<literal>自由に設定可能</literal>
	    オプションを使いまし た.</para>

	  <para>実は, <command>NEFMT.EXE</command>を使う以前に, まず
	    ACB-2320 の BIOSに組み込まれているフォー
	    マットプログラムでディスクをフォーマットしてみましたが,
	    使えないことが 判りました. なぜなら,
	    代替セクタの処理をおこなわないようにするオプションが
	    用意されていないからです.
	    代替セクタ処理をおこなうようにすると, FreeBSDの
	    インストール作業は
	    <command>bad144</command>の実行の段階で失敗しました.</para>

	  <para>もし ACB-232<replaceable>xy</replaceable>
	    をお持ちであれば, そのバージョン番号に注意してください.
	    文字 <replaceable>x</replaceable> には
	    <literal>0</literal> か <literal>2</literal> が入りまして,
	    ボード上にフロッピーコントローラがあるかど
	    うかを見分けることができます.</para>
	  <!-- kuriyama - y should replaceable? -->

	  <para>文字 <literal>y</literal>はさらに興味深いもので,
	    ブランクか, <literal>A-8</literal>か, または
	    <literal>D</literal>のいずれかで す. ブランクは,
	    単純な10Mビット/秒のコントローラであることを表します.
	    <literal>A-8</literal>は, 15Mビット/秒のコントローラで,
	    かつ 52セクタ/トラックをサポート
	    しているものであることを表します. <literal>D</literal>は,
	    15Mビット/秒のコントローラで,  かつ 36セクタ/トラック以上
	    (52セクタも可能か?) のドライブをサポートし
	    ているものであることを表します.</para>

	  <para>このコントローラのすべてのバージョンはインターリーブ比
	    1:1に対応してい るはずです. FreeBSDは充分高速なので, ぜひ
	    1:1と指定してください.</para>
	</sect4>

	<sect4>
	  <title>Western Digital WD1007コントローラ</title>

	  <para>筆者は, WD1007でコントロールされた ESDIディスクへ,
	    FreeBSDをインストー ルすることができました. 正確には
	    WD1007-WA2というコントローラでした.
	    これ以外の複数のバージョンも WD1007にあります.</para>

	  <para>利用できるようにするために,
	    セクタトランスレーションとWD1007の BIOSと
	    を使わないように設定しました. この設定の意味は,
	    BIOSに組み込まれた物理
	    フォーマットプログラムを使えないようにしたということです.
	    代わりに,  <hostid role="fqdn">www.wdc.com</hostid>から
	    <command>WDFMT.EXE</command>を入手して,
	    ディスクをフォーマットし ました. 以後,
	    順調に動いています.</para>
	</sect4>

	<sect4>
	  <title>Ultrastor U14Fコントローラ</title>

	  <para>ネットに流れたいくつかの報告によれば, Ultrastorの
	    ESDIボードも FreeBSD で動作するようです.
	    実際の設定についての詳しい情報はありません.</para>
	</sect4>
      </sect3>

      <sect3 id="esdi-further-reading">
	<title>追加資料</title>

	<para>本格的に ESDIのプログラミングを計画している方は,
	  次の公式規格仕様書を 入手なさることをおすすめします.</para>

	<para>最新の ANSI X3T10 委員会の文書は次のものです：

	  Enhanced Small Device Interface (ESDI)
	  [X3.170-1990/X3.170a-1991]   [X3T10/792D Rev 11]</para>

	<para>USENETのニュースグループ <ulink
	    url="news:comp.periphs">comp.periphs</ulink> は,
	  詳しい情報を得ることができる注目すべきもので す.</para>

	<para>World Wide Web (WWW) もまた便利な情報源です. Adaptec社の
	  ESDIコントロー ラについては <ulink
	    url="http://www.adaptec.com/">http://www.adaptec.com/</ulink> を参照ください.  Western Digital 社のコントローラについては <ulink url="http://www.wdc.com/">http://www.wdc.com/</ulink> を参照ください. </para>
      </sect3>

      <sect3>
	<title>感謝</title>

	<para>Andrew Gordon氏より, テスト用の Adaptec
	  2320コントローラと ESDIディス
	  クを送っていただきました.</para>
      </sect3>
    </sect2>

    <sect2 id="scsi">
      <title>SCSIとは?</title>

      <para><emphasis>原作:&a.wilko;. <!-- <br> -->
	  July 6, 1996.</emphasis></para>

      <para><emphasis>訳: &a.jp.yoshiaki;. <!-- <br> -->
	  4 November 1996. </emphasis></para>

      <para>SCSI は Small Computer Systems Interface
	(小規模コンピュータシステムインタフェース)
	の頭文字をとったものです.
	これは ANSI 規格の一つであり, コンピュータ業界において最もよく使われる
        I/O バスの一つになっています. SCSI はシュガート社
	(ミニフロッピーディ スクを世界で最初に販売しました) の開発した
	SASI (Shugart Associates Standard Interface)
	バスを元に規格化されました.</para>

      <para>その後の業界の努力により,
	異なるベンダのデバイスが混在して使えるよう,
        より厳密な規格へと規格化されました.
        その結果, 認可されたのが ANSI の SCSI-1 規格です.
        SCSI-1 仕様の規格化が行なわれたのは 1985 年前後です.
	(訳注: SCSI-1 の最終案決定は 1985 年,
        ANSI の標準規格としての認可は 1986 年です)
	この規格は, すでに現在では時代遅れのものになっており,
        現在の標準は SCSI-2
        (<link linkend="scsi-further-reading">さらに詳しい情報</link>
	を参照してください) で, これもまもなく SCSI-3
        へ移行していくでしょう.</para>

      <para>物理的な相互接続の規格に加えて,
	SCSIではディスクドライブに不可欠な論理的な規格
	(コマンドセット) も定義しています.
	この規格は標準コマンドセット (CCS; Common Command Set)
	と呼ばれ,  ANSI の SCSI-1 とほぼ同時期に制定されました.
	SCSI-2 には (改定された) CCS が規格の一部として組み込まれました.
	コマンドは, デバイスの種類によって変わります.
	たとえばスキャナにおいて, Write コマンドは意味がありません.</para>

      <para>SCSI バスは多くの種類があるパラレルバスです.  最も古く,
	最も利用されているのが 8 bit 幅, シングルエンド (不平衡) 信号,
	50線の信号線のバスです
	(もしシングルエンドの意味が分からなくても気にすることはありません.
        この文書は, まさにそのような人たちのために書かれているからです).
        より新しい設計では 16bit 幅で平衡信号のバスを使います.
        この場合, 転送速度は
	20Mbytes/second まで, ケーブルの長さは 25m まで可能です.
	SCSI-2では追加のケーブルを使った最大 32bit
        のバス幅までが定義されています.
        最近急速に増えているものに Ultra SCSI
	(Fast-20 とも呼ばれます) があります.
        また, SCSI-2には Ultra2 (Fast-40 とも呼ばれます)
        というものも定義されています.
	Fast-20 は 1 秒間に 2000 万回の転送 (8bit バスで 20Mbytes/sec),
	Fast-40 は 1 秒間に 4000 万回の転送 (8bit バスで 40Mbytes/sec)
	を行ないます.
        最近売られているハードディスクのほとんどは,
        不平衡信号の Ultra SCSI (8bit または 16bit) です.</para>

      <note>
	<para>訳注: ここでは電気的な用語としては平衡, 不平衡を用いて,
	  バスの名称としては基本的にはシングルエンド,
	  ディファレンシャルとしました.</para>
      </note>

      <para>もちろん SCSI バスにはデータ信号だけではなく,
	多くのコントロール信号線があります.
	複数のデバイスがバスを効率よく共有するための
	複雑なプロトコルも規格の一部です.
	SCSI-2 ではデータは常に独立したパリティ信号を使ってチェックされます.
	SCSI-2 以前では, パリティチェックはオプションでした.</para>

      <para>SCSI-3 ではさらに高速なバスタイプが導入され,
	それと共にケーブルの線数を減らし,
	より最大バス長を伸ばしたシリアル SCSI が導入されます.
        SSA や Fiberchannelといった名前を聞いたことはありませんか?
	シリアルバスは現在では, まだいずれの方式も普及していません
	(特に一般的な FreeBSD 環境では).
	このためシリアルバスタイプについては,
        ここではこれ以上は触れません.</para>

      <para>今までの記述から想像されるように,
	SCSI デバイスはインテリジェントです.
        これは SCSIの規格
        (この文書は 2 インチ以上の厚さがあります)
	と切り離すことはできません.
	このため, たとえばハードディスクでは特定のブロックを指す場合は,
	ヘッド / シリンダ / セクタによって決めるのではなく,
        単に必要なブロック番号を指定します.
	巧妙なキャッシュ動作や, 不正ブロックの自動置き換えなどの機能は,
        この「インテリジェントデバイス」のアプローチによって可能になっています.</para>

      <para>SCSI バスでは任意のデバイスの組で通信することが可能です
	(訳注: 任意のデバイスがイニシエータになれるという意味です).
	デバイスの機能がそれを許すかどうかはまた別の問題ですが,
	規格では禁止されていません.
	その場合は信号の衝突を防ぐために,
        2 つのデバイスがバスを使う前に調停 (arbitrate)
        を行なう必要があります.</para>

      <para>SCSI では,
        古い規格のデバイスと新しい規格のデバイスが
        同じバスの上で動くように規格を作っています.
        したがって, 古い SCSI-1の デバイスは SCSI-2
        バス上でも普通は動きます.
        普通は, と断った理由は,
	ある古いデバイスが (古い) 規格に対して,
        新しいバスでも問題ない程に十分規格に準拠した実装になっているかどうかを
        絶対的に保証することはできない, ということです.
	一般に, 最近のデバイスはよりうまく動作します.
	その理由は規格化がより厳密になり,
	またメーカーがデバイスの製造において,
        よりきちんと規格に従うようになってきているからです.</para>

      <para>一般的に言って, 単一のバス上で動かすデバイスは SCSI-2
	あるいはより新しいデバイスであれば
	うまく動く可能性は高いと言えます. これは新しい
	2GBのディスクを手に入れたとしたら
	古いデバイスを捨ててしまわなければならないという
	意味ではありません. 私のシステムでは SCSI-1以前のディスク,
	SCSI-2の QICテープユニット,
	SCSI-1のヘリカルスキャンテープユニット (訳注:
	VTRのような回転ヘッドを 持ったテープ装置のことです.
	DATテープドライブもその一つです),  2台の SCSI-1
	ディスクが一緒に問題なく動いています.
	ただし効率の点から古いデバイスと新しい (= 速い)
	デバイスを分けたいかもしれません. (訳注: 古いデバイスの中には
	disconnectをサポートしないために一連のコマンド実行中に
	SCSIバスを占有してしまうデバイスもあります.)</para>

      <sect3>
	<title>SCSI の構成要素</title>

	<para>先に述べたように, SCSI デバイスはインテリジェントです.
	  つまりハードウェア細部にからむ知識は SCSI デバイス自身が
	  持っています.  そのためホストシステムは,
          あるハードディスクがいくつのヘッドを持っているのかとか,
          指定したテープデバイスがいくつのトラックを持つか,
          というようなことを知る必要はありません.
          もしあなたが知りたいのであれば,
          規格で定義されているコマンドを使って,
          デバイスにハードウェアの詳細について問い合わせることができます.</para>

	<para>インテリジェントデバイスの利点は明らかです.
	  ホストのデバイスドライバはより一般的に書くことができ,
	  新しいデバイスを導入する場合でも変更の必要がありません.
	</para>

	<sect4>
	  <title>接続でおこなうべきこと, してはならないこと</title>

	  <para>ケーブルの接続には鉄則があります.
	    よい部品を使うことです. バスの速度を上げることができ,
	    多くの災難を防ぐことができます.</para>

	  <para>ですから, 金メッキのコネクタ, シールドケーブル,
	    固定器具付きの頑丈なコネクタカバーなどを
	    選ぶのは正しいことです. 2つ目の鉄則は,
	    ケーブルを必要以上に長くしないことです.
	    私は以前にあるマシンでトラブルの 原因を探すのに
	    3日間悩んでいましたが, SCSIバスを 1m 短く
	    することで問題を解決したことがあります. もちろん,
	    元のバスの長さでもSCSIの仕様はきちんと
	    満たしていたのですが.</para>
	</sect4>
      </sect3>

      <sect3>
	<title>SCSI バスのタイプ</title>

	<para>電気的に互換性のない 2種類のバスのタイプがあります.
	  シングルエンドとディファレンシャルのバスです.  これは SCSI
	  デバイスとコントローラは同一のバス上に混在することのできない
	  2つのグループに大きく分けられるということを意味しています.
	  しかし, 特別なハードウェアを使えばシングルエンドバスを
	  ディファレンシャルバスに (その逆も) 変換することはできます.
	  これらのバスのタイプの違いは次のセクションで説明します.
	</para>

	<para>SCSI関連のドキュメントでは
	  異なるタイプのバスを一種の用語とし て略語で表します.
	  これを次の表に示します.</para>

	<itemizedlist>
	  <listitem>
	    <para>FWD:	Fast Wide Differential (高速 ワイド 平衡)</para>
	  </listitem>

	  <listitem>
	    <para>FND:	Fast Narrow Differential (高速 ナロー 平衡)</para>
	  </listitem>

	  <listitem>
	    <para>SE:	Single Ended (不平衡)</para>
	  </listitem>

	  <listitem>
	    <para>FN:	Fast Narrow (高速 ナロー)</para>
	  </listitem>

	  <listitem>
	    <para>etc.</para>
	  </listitem>
	</itemizedlist>

	<para>少し想像力を働かせればどのような
	  意味であるかはわかるでしょう.</para>

	<para>ワイド (Wide) はいくらか曖昧で, 16 または 32
	  bitのバスを示します. 私の知る限りでは, 32 bit
	  のインタフェースは (まだ) 使われていませんので Wide は通常
	  16 bitを意味します.</para>

	<para>高速 (Fast) はバスのタイミングがいくつかの点で異なり,
	  ナロー  (8 bit) バスでは 低速 (slow) SCSIバスの 5 Mbytes/sec
	  に対して 10 Mbytes/sec の能力があります. 前にも述べたように,
	  20Mbytes/sec や 40Mbytes/sec
	  のバス速度を持つものも現れてきています (Fast-20 == Ultra
	  SCSI で Fast-40 == Ultra2 SCSI です).</para>

	<note>
	  <para>データ線の上位 (&gt; 8)
	    はデータの転送とデバイスの指定だけに利用されています.
	    コマンドの送出とステータスメッセージ等は下位側の 8
	    bitのデータ線のみを使います. この規格により
	    ナローデバイスはワイドバス上でも 動作する事ができます.
	    利用できるバスの幅はデバイス間で調停 (ネゴシエーション)
	    されます. デバイスの
	    IDについてはワイドとナローが混在する時には
	    気をつけなければなりません.</para>
	</note>

	<sect4>
	  <title>シングルエンドバス (不平衡バス)</title>

	  <para>シングルエンド SCSIバスは 5Vと 0Vの電圧
	    (つまりTTLレベルです) を信号として使い,
	    それらは共通のグラウンド (GND) レベルを基準 にします.
	    シングルエンド SCSI 8 bitバスは約25本のグラウンド線
	    を持ち, すべてのデバイスを「直線状」に接続します.
	    基準ではシングルエンドバスは最大の長さは 6mです. Fast-SCSI
	    デバイスを使う場合には, この最大長さは 3mに短くなります.
	    Fast-SCSIでは 5Mbytes/sec ではなく 10Mbytes/sec の転送速度
	    が可能になります.</para>

	  <para>Fast-20 (Ultra SCSI) と
	    Fast-40ではそれぞれ1秒間に2000万 (20M) ないしは 4000万
	    (40M) 回の転送ができます. したがって, Fast-20では
	    8bitバスで 20Mbytes/sec, 16bitバスで 40Mbytes/secとなりま
	    す. Fast-20ではバスの最大の長さは 1.5m, Fast-40では
	    0.75mに なります. Fast-20は限界を相当に広げるものなので
	    SCSIバス
	    に雑音が多い場合はその影響を即座に受けます.</para>

	  <note>
	    <para>バス上のいずれかのデバイスが 「高速の」
	      転送を利用する場合は
	      Fastバスの長さの制限を受けます.</para>
	  </note>

	  <para>最近の Fast-SCSI デバイスではバスの長さが実際の問題に
	    なりつつあるのが明らかになっています.
	    これがディファレンシャル
	    SCSIバスがSCSI-2の規格に導入された理由です.</para>

	  <para>コネクタのピン配置やコネクタの種類については
	    SCSI-2の規格 (<link
	      linkend="scsi-further-reading">さらに詳しい情報</link>)
	    を参照してください.コネクタ等について
	    詳細なリストがあります.</para>

	  <para>非標準のケーブルを使うデバイスに気をつけてください.
	    例えば  Apple (の Macintosh は) 25pin の D-type のコネクタ
	    (シリアルポートやパラレルプリンタに使われているコネクタ --
	    訳注: 日本では一般的に D-sub 25pinと言っています)
	    を使っています. 公式なSCSIバスでは50 pin
	    が必要である事からこのコネクタでは
	    「独創的なピン配置」が必要な事が想像できるでしょう. ここ
	    でおこなわれているようにグラウンド線の数を
	    減らすことはよい考え ではありません. SCSIの規格通りの 50
	    pinの接続の方が望まし いです.  Fast-20 や 40
	    でこのようなケーブルを使おうなんて
	    考えてはいけません.</para>
	  <!-- kuriyama - use mdash -->
	</sect4>

	<sect4>
	  <title>ディファレンシャル (平衡) バス</title>

	  <para>ディファレンシャル SCSIバスは最大長が 25m です.
	    シングルエンド Fast-SCSIバスの 3mとはまったく違います.
	    平衡信号の背景と なっている考え方は,
	    それぞれのバスの信号はそれぞれ
	    独立したリターン信号線を持つというものです.  つまり,
	    それぞれの信号は (できればより線の) ペアの信号線で
	    伝えられます.
	    これら2つの信号線の差分の電圧で信号が「真」(assert) で
	    あるか「偽」(de-assert) であるか判定されます.
	    かなりの電圧
	    がグラウンド電位と信号線ペアの間にかかったとしても影響があ
	    りません (だからといって 10kVの電圧をかけてみたりしないで
	    ください.. ).</para>

	  <para>なぜ平衡信号が よいのかについての説明は
	    このドキュメントの 範囲を越えています.
	    電気的に平衡信号はノイズマージンの点で
	    非常に優れたものとして利用されているということを
	    受け入れて ください.
	    ディファレンシャルバスは普通は外部接続に 利用されています.
	    これは低コストのシングルエンドバスが筐体内の短
	    い距離のバスでは非常に多く利用されているからです.</para>

	  <para>FreeBSDを使うにおいて, FreeBSD でサポートされている
	    デバイスドライバがあるのであれば
	    ディファレンシャルバスの利用で 問題になることは
	    何もありません. 例をあげれば, アダプテックの
	    AHA1740はシングルエンドで,
	    AHA1744はディファレンシャルです.
	    双方のソフトウェアインタフェースはまったく同一です.</para>
	</sect4>

	<sect4>
	  <title>ターミネータ</title>

	  <para>SCSIにおける用語でのターミネータとはインピーダンスの
	    マッチングを正確におこなうための抵抗ネットワークです.
	    インピーダンス マッチングは反射やリンギングを抑え,
	    バスの信号をきれいにす る重要なものです.  たとえば,
	    あまり状態のよくない回線で長距
	    離の電話をかけた時にあなたは反射をどんなものか
	    感じるかもしれません. 20Mbytes/sec で信号の伝わる
	    SCSIバスでは信号のエコーはありがたくありません.</para>

	  <para>訳注:
	    電気信号のパルスは進行波としての性格を持っています.
	    このため, 一般的には信号線の両端で反射が起きます.
	    3mのバスの端からパルスを入れた場合,
	    反対の端からの反射波は 20ns後 - 本当は電線中の信号の伝達は
	    光速よりも少し遅くなるのでもう少し時間がかかりますが -
	    に返ってきます. 低速のバスの場合タイミング的な余裕があり,
	    反射を繰り返しているうちに反射波は減衰してしまうのですが
	    高速のバスの場合は, 反射波の影響が落ち着く前に信号の
	    読み込みなどを行うために波形の乱れが誤動作の原因に
	    なる場合があります.
	    このためターミネータを使用して反射波の発生をできるだけ
	    おさえます.</para>

	  <para>ターミネータはいろいろな -
	    洗練されたものもそうでないものも - 実現方法があります.
	    もちろん, 内蔵のものと外部という区別もあります. 多くの
	    SCSIデバイスにはいくつかのソケットがあり,
	    その中には抵抗ネットワーク (集合抵抗) が
	    入っているものもあるかもしれません (いや, おそらく
	    間違いなくあるでしょう). ターミネータを
	    デバイスから外す時は大事にしまっておいてください. SCSIの接
	    続の変更をしようと思った時に必要になるかもしれません.  ま
	    た,
	    それらしい抵抗ネットワークが見つからないこともあります.
	    この場合, SCSIデバイスは内蔵ターミネータの有効と無効を切替
	    えるジャンパがあります.  フラットケーブルに取り付ける特別
	    なターミネータもあります. 他には外部コネクタのような形をし
	    たものやケーブルのないコネクタヘッドだけのものもあります.
	    いろいろと見られるように多くの選択があります.</para>
	  <!-- kuriyama - mdash -->

	  <para>どのような場合に単純な抵抗 (パッシブ) ターミネータから
	    アクティブターミネータへ切替えるかという問題があります.
	    アクティブターミネータはいくらか精巧な回路が信号をより
	    きれいにするために入っています.
	    一般的に受け入れられている意見としては, 長いバスを使ったり
	    高速なデバイスを使う場合はアクティブターミネータの
	    有効性は増加すると言えます.  SCSI バスですでに問題が起きて
	    いるならアクティブターミネータを試すことを考えていいで
	    しょう.  まず借りることができないか探してみてください.
	    アクティブターミネータは非常に高価だそうですから.</para>

	  <para>ディファレンシャルと
	    シングルエンドバスのターミネータは互換
	    性がないということを覚えておいてください. これらの2つの種
	    類を
	    <emphasis>混在させることはできません</emphasis>.</para>

	  <para>OK, ではあなたは
	    ターミネータをどこに入れればいいでしょうか? これは
	    SCSIで最も多く誤解されているところです. しかし, これ
	    は極めて単純なことです..  ここでのルールは
	    <emphasis>SCSIバスの線 一本一本は必ず両端に
	      2個のターミネータを入れる</emphasis> ということです.
	    つまり 2個であって1個でも3個でもありません.
	    このルールを受け入れてしたがってください. そうすれば終りの
	    ない苦しみから救われるでしょう.
	    なぜなら間違ったターミネーションは不可解なバグを引き起こす
	    可能性が非常に高いからです. (ここの <quote>可能性</quote>
	    に注意; 一見動いているように見える
	    ことがあるのがやっかいです.)</para>

	  <para>よく陥りやすい落し穴はマシンの内部 (フラット)
	    ケーブルと外部
	    ケーブルがコントローラにつながっている場合です. よく見られ
	    るのはコントローラのターミネータを外すのを忘れることです.
	    ターミネータは最後の外部デバイスで必要で, コントローラ
	    には必要ありません! 一般的に, SCSIバスの接続の変更をする場
	    合はこのようなことに注意をしなければなりません.</para>

	  <note>
	    <para>ターミネータの位置は
	      信号線ごとに決まることに注意して下さい.
	      ナローとワイドのケーブルを
	      両方コントローラにつないでいる場 合には,
	      ケーブルの両端とともにコントローラ上ではバスの上位
	      8ビットをターミネートしないといけません.</para>
	  </note>

	  <para>私自身は,
	    すべてのデバイスとコントローラのターミネータを外し
	    ています. 2個の外部ターミネータをセントロニクスタイプ
	    (訳注: 日本ではケーブルに対してこういう言い方は
	    あまりしないのでは ないでしょうか)
	    外部ケーブルと内部フラットケーブルの
	    コネクタの両端に接続しています.
	    こうすることにより接続の変更はかなり簡単になります.</para>

	  <para>最近のデバイスは,
	    ICターミネータが使われることもあります.
	    コントロールピンにより無効 / 有効を設定できる 特別の IC
	    があります.
	    これは物理的にデバイスから外す必要がありません.
	    新しいホストアダプタではセットアップツール等を使って
	    ソフトウェア的に設定をおこなう場合があります.
	    また, 中には端子に接続されたケーブルを検出して
	    ターミネータ を必要に応じて自動的に
	    有効にするものもあります. いずれにしろ, マニュアルを見てく
	    ださい.</para>
	</sect4>

	<sect4>
	  <title>ターミネータの電源</title>

	  <para>ここまでの章で議論したターミネータは
	    正常に動作するためには 電源が必要です.
	    SCSIバス上にはこの目的のために利用される線があります.
	    だから特に気にする必要はないと思いますか?</para>

	  <para>ところがそうではないのです.
	    それぞれのデバイスはデバイス上
	    にあるターミネータソケットに電源を供給することはできます.
	    けれども外部ターミネータがある場合やSCSIバスにターミネータ
	    の電源を供給するデバイスのスイッチがオフになっているような
	    場合にはトラブルが起きるかもしれません.</para>

	  <para>イニシエータ (ここではバスの動作を開始-initiate-させる
	    デバイスを指します -- 訳注:
	    簡単に言えばホスト側のアダプタですがSCSIの 規格によれば,
	    例えばディスク側がコマンドを発行するような
	    システムがあってもかまわないことになっているので
	    こういう言い方をしています) は
	    ターミネータ電源を供給しなければなりません.
	    すべてのSCSIデバイスはターミネータの電源を供給することが
	    できます (必ずしも供給しなければならないというわけ
	    ではありません).</para>
	  <!-- kuriyama - mdash -->

	  <para>スイッチがオフになっているデバイスが
	    バス上に存在することを 許すために,
	    ターミネータの電源はダイオードを通して供給され
	    なければなりません.  これはスイッチを切ったデバイスに電流
	    が逆流することを防ぐためです.</para>

	  <para>最悪の事態を避けるために,
	    ターミネータの電源は普通はヒューズが入っています.
	    当然ヒューズは飛ぶかもしれません. この
	    場合でもバスが機能停止するとは限りません. 複数のデバイスが
	    ターミネータの電源を供給しているのであれば, ヒューズが一つ
	    飛んでも全体の機能には影響しません. ただ一つの供給線の
	    ヒューズが飛んだのであれば確かに問題になるでしょう.
	    外部ターミネータによっては LED でターミネータ電源
	    が与えられていることを示すものもあります.</para>

	  <para>最新の設計ではある程度の時間がたつと 「リセット」され
	    自動復帰するヒューズが使われることもあります.</para>
	</sect4>

	<sect4>
	  <title>デバイス アドレッシング</title>

	  <para>SCSIバスでは接続された異なるデバイスを区別して指定
	    できなければなりません.</para>

	  <para>これには SCSIではターゲットIDが使われます.
	    それぞれのデバイ スは特定のターゲットIDを持ちます.
	    デバイスの IDはジャンパや DIPスイッチなどで設定できます.
	    ブート時のメニューからIDを
	    変更できるようになっているコントローラもあります. (また,
	    IDを 7から変えることができないコントローラもあります.)
	    より詳しい情報はデバイスのマニュアルを見てください.</para>

	  <para>複数のデバイスを使う場合は
	    IDの重複に気をつけてください.
	    重複すると普通は混乱状態になります. 同じ IDを共有している
	    デバイスのうちの一つがI/Oリクエストに答えられたりすると
	    非常にやっかいなことになります.</para>

	  <para>8 bitバスでは, 最大8台のターゲットまで可能です.
	    最大8台で ある理由は,
	    バスの8本のデータ線がデバイスの選択に使われる からです.
	    ワイドなバスでは使えるデバイスの数は増えます
	    (通常は16になるわけです).</para>

	  <note>
	    <para>ナロー SCSI デバイスは 8 以上のターゲット ID
	      を持つデバイスとは 通信できないことに注意してください.
	      ですから, コントローラ
	      のターゲットIDを8以上にするのはあまりいい考えとは
	      いえません (CDROMが使えなくなったりします).</para>
	  </note>

	  <para>同時にバス使用の要求が発生した場合, 最も
	    IDの大きいデバイス が優先されるという調停がおこなわれます.
	    このことは SCSIホストアダプタの
	    IDは通常7番が使われる理由でもあり ます. ただし,
	    ワイドバスでは下位8ビットが上位8ビットより優
	    先度が高いことに注意してください. つまり, ワイドSCSIのシス
	    テムではターゲットIDの優先度は高い順に [7 6 .. 1 0 15 14
	    .. 9 8] となります.
	    (どうして下位8ビットの方が優先度が高いかは,
	    一つ前の段落を読んで考えてみて下さい.)</para>

	  <para>さらにサブユニットとして, 規格では ロジカルユニット,
	    短縮形で LUNを持つことができます.
	    一つのターゲットIDが複数の LUNを 持つことができます.
	    例えば, テープチェンジャを持つテープ ドライブは LUN
	    0をテープドライブ自身, LUN 1を テープチェンジャ
	    に与えることができます.  このようにして,
	    ホストシステムはテープチェンジャの目的の
	    テープユニットの部分を指定することができます.</para>
	</sect4>

	<sect4>
	  <title>バスの形状</title>

	  <para>SCSIバスは直線状です.  つまり, Y接続, スター接続,
	    円形, クモの巣状の接続などの直線以外の接続ではありません.
	    初心者が
	    よくやる間違いとしてはワイドSCSIのコントローラの端子3つと
	    もにケーブルをつないでしまうというものがあります. (外部,
	    内部ナロー, 内部ワイド.)
	    よほど運がよければこんなトポロジー
	    でもちゃんと動くように見えるかもしれませんが, えてしてこう
	    いうシステムは一番大切な時に使えなくなったりするものです
	    (これを<quote>マーフィーの法則</quote>といいます).</para>

	  <para>先に議論したターミネータの問題は直線状以外の場合では
	    より困難になるだろうということに注意してください. また,
	    内部バス用の ケーブルの端子の数よりデバイスの
	    数の方が少ない場合には,
	    必ず両端の端子にはデバイスをつなぐようにしてください.
	    内側の端子を使ってケーブルの端を余らせておくと,
	    ターミネータの効果が半減します.</para>

	  <para>電気的特性はそのノイズマージンや全体の信頼性において,
	    直線状のバスのルールに強く依存しています.</para>

	  <para><emphasis>直線状バスであるというルールに
	      したがってください!</emphasis></para>
	</sect4>
      </sect3>

      <sect3>
	<title>FreeBSD で SCSIを使う</title>
	<sect4>
	  <title>トランスレーション, BIOS, そしてマジック...</title>

	  <para>まず始める前に,
	    電気的に問題のないバスであるか調べておいてく
	    ださい.</para>

	  <para>SCSIディスクをPCでブートディスクとして使う場合に, PC
	    BIOSに 関する気まぐれについて知っておく必要があります. PC
	    BIOSは ハードディスクへの低レベル物理インタフェースを
	    利用するように 実現されています.   したがって, BIOSに
	    (セットアップツールやBIOSビルトイン  セットアップを使って)
	    ディスクの物理パラメータを教えてやる 必要があります.
	    これはヘッドの数, シリンダの数,
	    トラックあたりのセクタなどがあり,
	    プリコンペンセーションや書き込み電流を 減少させるトラック,
	    などのあまりよく知られていないものもあります.</para>

	  <para>SCSIディスクはこれらのことをユーザは
	    気にする必要がないはず だと考えるかもしれません.  しかし,
	    不思議なことに (これらの項 目の)
	    セットアップはいまだにあるのです. システム BIOSはブート
	    時にFreeBSDのカーネルを読み込むためにSCSIディスクに
	    /ヘッド/シリンダ/セクタ を指定する方法でアクセスするため,
	    パラメータを知る必要があるのです.</para>

	  <para>AT/EISA/PCIバスなどにあり, ディスクに接続される
	    SCSIホストアダプタや SCSIコントローラは
	    それ自身のオンボードBIOSを持っています.
	    システムの起動時に, SCSI BIOSは
	    システムBIOSのハードディスクの
	    インタフェースルーチンを乗っ取ります.
	    システムBIOSをごまかすために
	    システムセットアップでは普通は `No hard disk' とします.
	    簡単ですね?</para>

	  <para>訳注: BIOS で `No hard disk' という設定をおこなうのは
	    SCSI ドライブから直接起動させるためのテクニックです.
	    現在のマザーボードでは SCSI ドライブから起動させるための
	    オプションを持つ BIOS を使用しているものもあります. また,
	    ブートセレクタを使って IDEドライブのブートブロックから
	    SCSIドライブ上の FreeBSDをブートすることもできます.</para>

	  <para>SCSI BIOS はドライブの
	    <emphasis>トランスレーション</emphasis> と呼ばれる
	    機能を持ちます.
	    これはPCがブートするために作られたドライブテー
	    ブルをごまかすものです. このトランスレーションは多くは
	    (すべての場合ではありません)
	    トラックあたり64あるいは32個のヘッドを
	    持つ仮想的なドライブを使います.
	    シリンダの数を変更することで  SCSI BIOS
	    は実際のドライブのサイズに適合させます. 総セクタ数 を 32 *
	    64 / 2 で割った結果がメガバイト単位のドライブのサイズ
	    になります.  2で割っているのは, 通常 512バイトのサイズの
	    セクタを kByte 単位に変換するためです.</para>

	  <para>ではこれですべてうまくいくのでしょうか. いいえ,
	    そういう訳で はありません.
	    ブート可能なハードディスクのシリンダ数は 1024よ
	    り多くすることはできないのです.
	    トランスレーションを使った 場合でもディスクの
	    1GB以上の領域は見えません. ディスクの容量
	    がどんどん増加していくにつれこれは問題になってきました.
	  </para>

	  <para>幸いにして, 単純な解決方法があります.
	    単に別のトランスレーショ ンを使えばよいのです. 例えば,
	    32個に代わり, 128個のヘッドを使います. ほとんどの場合,
	    古いSCSIホストアダプタをアップグレードす
	    るための新しいバージョンの SCSI BIOS が用意されています.
	    新しいアダプタではジャンパ やセットアップソフトによって
	    SCSI BIOSの使う
	    トランスレーションを選択できる物もあります.</para>

	  <para>ここで非常に重要なことは,
	    ディスク上の<emphasis>すべての</emphasis>
	    オペレーティングシステムが
	    <emphasis>同一のトランスレーション</emphasis>を使って
	    正しいパーティションを得ることです.  つまり
	    FreeBSDをインストールする時に,
	    ヘッド/シリンダなどについての
	    質問にあなたのホストアダプタが
	    使用しているトランスレートされた
	    値を使わなくてはなりません.</para>

	  <para>トランスレーションに関する失敗でよく見られるものは,
	    ブートしないシステムができたり, 他のパーティションを
	    上書きしてしまうことです. すべてのシステムが見えるように
	    fdiskを使うべきです.</para>

	  <para>あなたはデバイスについて
	    これとは食い違った話を聞いたことが あるかもしれません.
	    古い FreeBSDのカーネルはブートする時に SCSI
	    ディスクのジオメトリ情報を報告していました.
	    私のシステムの一つの例を示しましょう.</para>

	  <screen>aha0 targ 0 lun 0: &lt;MICROP  1588-15MB1057404HSP4&gt;
	sd0: 636MB (1303250 total sec), 1632 cyl, 15 head, 53 sec, bytes/sec 512</screen>

	  <para>最近のカーネルは, 普通はこのような情報を報告しません.
	    たとえば, このようになっています.</para>

	  <screen>(bt0:0:0): "SEAGATE ST41651 7574" type 0 fixed SCSI 2
	 sd0(bt0:0:0): Direct-Access 1350MB (2766300 512 byte sectors)</screen>

	  <para>なぜこのように変わったのでしょう?</para>

	  <para>この情報は SCSIディスク自身から得られます.
	    最近のディスクで はよくゾーンビット記録方式 (zone bit
	    recording) という 技術が使われています.
	    これはドライブの外側のシリンダは
	    内側よりもスペースが広いのでトラックあたりのセクタ数を
	    増やすことができるというアイディアです.  この結果,
	    外側のシリンダ上のトラックの容量は内側の
	    シリンダよりも大きくなり,
	    全体ではより大きな容量となります. この場合,
	    ドライブのジオメトリについての報告は,
	    最善のものかどうか疑わしく,
	    ほとんどの場合誤解を招くものであ ることがわかるでしょう.
	    ジオメトリを調べる場合, ほとんどの場合は BIOSの用い
	    ている値を与える方がよい結果となり,
	    <emphasis>BIOSがそのディスクに
	      ついてまったく関知しないのであれば</emphasis>
	    (例えばブートディスクで はないなら)
	    都合のよい仮想のジオメトリを与えればいいでしょう.</para>
	</sect4>

	<sect4>
	  <title>SCSI サブシステムの設計</title>

	  <para>FreeBSDでは階層的な SCSIサブシステムを用いています.
	    それぞれ 異なるコントローラカードの
	    デバイスドライバが書かれています.
	    このドライバはコントローラのハードウェアの
	    詳細を知っています. ドライバは
	    SCSIサブシステムのより上位の階層のコマンドを受け取り,
	    ステータスを報告するインタフェースを持ちます.</para>

	  <para>カードのドライバの最上位には, デバイスのクラスのための
	    いくつかの一般的なドライバがあります. 具体的にいうと,
	    テープドライブのためのドライバ (略号は: st), 磁気ディスク
	    (sd), CDROM (cd) などです. これらのソースコードは
	    <filename>/sys/scsi</filename>にあります.
	    マニュアルページ (man) のセクション 4 にはより詳しい内容が
	    あるので見てください.</para>

	  <para>多階層の設計は低レベルとより高位の
	    レベルを分離させることが できます.
	    新たに他の種類のハードウェアのサポートを加えることを
	    より処理しやすい問題にします.</para>
	</sect4>

	<sect4>
	  <title>カーネルコンフィグレーション</title>

	  <para>あなたのハードウェア構成にしたがって, カーネルの
	    コンフィグファイルに ホストアダプタについて
	    1行あるいは数行程度の記述をする 必要があります. これには
	    I/O アドレスや割り込みなどについての内容も 含みます.
	    あなたのアダプタのドライバについてのマニュアルページ
	    にはより多くの情報があるのでよく読んでください.
	    これとは別に  <filename>/sys/i386/conf/LINT</filename>
	    にはカーネルコンフィグファイルについての 概要があります.
	    <filename>LINT</filename>
	    には一般的なものについては可能なすべての
	    オプションが含まれています. ただし,
	    <filename>LINT</filename>
	    では実際に動作するカーネルを作ることは
	    <emphasis>できません</emphasis>.</para>

	  <para>当然のことを言うようで恐縮ですが,
	    カーネルコンフィグファイルは実際のハードウェア構成を
	    反映すべきです. そのように割り込みやI/Oアドレス等に
	    合わせてカーネルコンフィグファイルを書か
	    なければなりません.
	    システムのブート時のメッセージは実際に
	    見つけたハードウェアの設定を表示します.</para>

	  <note>
	    <para>ほとんどの EISA/PCI 用のドライバ (具体的には
	      <devicename>ahb</devicename>,
	      <devicename>ahc</devicename>,
	      <devicename>ncr</devicename> と
	      <devicename>amd</devicename>です)
	      はブート時にコントローラから直接パラメータ
	      を読みこみます. これらについては, 何も引数をつ
	      けずにただ <literal>controller ahc0</literal>
	      のように書けば大丈夫で す.</para>
	  </note>

	  <para>例として FreeBSD 2.2.5-Releaseのいくつかのコメント
	    ([]の中) をつけた <filename>LINT</filename>
	    カーネルコンフィグファイルを示 します.</para>

	  <programlisting># SCSI host adapters: `aha', `ahb', `aic', `bt', `nca'
#
# aha: Adaptec 154x
# ahb: Adaptec 174x
# ahc: Adaptec 274x/284x/294x
# aic: Adaptec 152x and sound cards using the Adaptec AIC-6360 (slow!)
# amd: AMD 53c974 based SCSI cards (e.g., Tekram DC-390 and 390T)
# bt: Most Buslogic controllers
# nca: ProAudioSpectrum cards using the NCR 5380 or Trantor T130
# ncr: NCR/Symbios 53c810/815/825/875 etc based SCSI cards
# uha: UltraStore 14F and 34F
# sea: Seagate ST01/02 8 bit controller (slow!)
# wds: Western Digital WD7000 controller (no scatter/gather!).
#

[ Adaptec AHA274x/284x/294x/394x などのコントローラ]
controller	ahc0

[ NCR/Symbios 53c875 コントローラ]
controller	ncr0

[Ultrastor アダプタ]
controller	uha0	at isa? port "IO_UHA0" bio irq ? drq 5 vector uhaintr

# Map SCSI buses to specific SCSI adapters
controller	scbus0	at ahc0
controller	scbus2  at ncr0
controller	scbus1  at uha0

# The actual SCSI devices
disk sd0 at scbus0 target 0 unit 0	[SCSI ディスク 0 は scbus 0, LUN 0]
disk sd1 at scbus0 target 1		[unit を省略すると暗黙で LUN 0]
disk sd2 at scbus1 target 3		[uha0 上の SCSIディスク]
disk sd3 at scbus2 target 4		[ncr0 上の SCSIディスク]
tape st1 at scbus0 target 6		[SCSI テープ は ターゲット (ID)6]
device cd0 at scbus?			[最初に見つけた CDROM, 固定にしない]</programlisting>

	  <para>上の例では カーネルは ahc (Adaptec 274x)
	    コントローラをまず探し, その次に NCR/Symbios
	    のボードというように順番に探して 行きます.  その下の行の
	    controller の記述ではデバイスの詳細 を記述して,
	    対応するバスでターゲット ID と LUN が指定された
	    ものと一致する場合<emphasis>だけ
	    </emphasis>認識するようにカーネルに 伝えています.</para>

	  <para>固定された (Wired down) デバイスは
	    <quote>最初に</quote>ユニット番号が 与えられるので,
	    <quote>固定</quote>されていないデバイスは同じ種類の
	    <quote>固定</quote>されたユニット
	    番号の最も大きい番号の1つ上の番号から割り当てられます.
	    したがって, ターゲットID 2の SCSIテープを加えると,
	    ターゲットID 6
	    のテープがユニット番号1に固定されているので,
	    それはst2に設定 されるでしょう.</para>

	  <note>
	    <para>ブート時に見つからなくても<emphasis>固定されたデバ
		イスにはユニット番号が常に割り当てられます</emphasis>.
	      固定のデバイスに 割り当てられたユニット番号は,
	      もしそのデバイスのスイッチが
	      ブート時に切られていてもそのデバイスに
	      リザーブされています.  これは,
	      電源を入れて接続した時のユニット番号が与えられます.
	      デバイスのユニット番号は SCSIバスのターゲットID とは
	      <emphasis>何の関係もない</emphasis>
	      ことに注意してください.</para>
	  </note>

	  <para>下の例は FreeBSD のバージョン 2.0.5 以前の
	    カーネルコンフィ グファイルです.
	    最初の例との違いはデバイスの<quote>固定 (wired
	    down)</quote> がないことです. <quote>固定</quote>
	    によりどのSCSIターゲットをどの
	    デバイスに割り当てるかを記述できるようになりました.</para>

	  <para>下のコンフィグファイルにより
	    構築されたカーネルでは最初に見つ けた SCSIディスクが
	    sd0になり, 次に見つけたディスクが sd1に,
	    という具合に割り当てられます.
	    もしディスクの削除や追加をおこなう と,
	    他の同じタイプのデバイス (この場合はディスク) のすべてが
	    「移動して」しまうかもしれません. これによりそのたびに
	    <filename>/etc/fstab</filename>
	    を変更する必要があります.</para>

	  <para>古いスタイルでも動きますが,
	    新しいスタイルを使うことが<emphasis>強 く</emphasis>
	    推奨されています. これにより SCSIバスのハードウェアを
	    どのように変更した場合でもトラブルを避けることができます.
	    ですから, 2.0.5.R以前の
	    FreeBSDからアップグレードした後に古い
	    信頼できるコンフィグファイルを再利用する時はこの部分を
	    チェックして直してください.</para>

	  <programlisting>[Adaptec 174x用のドライバ]
controller      ahb0    at isa? bio irq 11 vector ahbintr
[Adaptec 154x用のドライバ ]
controller      aha0    at isa? port "IO_AHA0" bio irq 11 drq 5 vector ahaintr
[Seagate ST01/02インタフェースのドライバ]
controller      sea0    at isa? bio irq 5 iomem 0xc8000 iosiz 0x2000 vector seaintr
controller      scbus0

device          sd0	[4台のSCSI ディスクのサポート, sd0 から sd3]

device          st0	[2台の SCSI テープのサポート]

[CDROMのドライバ]
device          cd0     #Only need one of these, the code dynamically grows</programlisting>

	  <para>両方の例で SCSIディスクがサポートされています.
	    ブート中に 「固定」の記述がされているタイプ(例えば sd
	    ディスク) のデバ イスで記述より多くのデバイスが見つかると,
	    システムは単純に最後の <quote>固定</quote>
	    のデバイスの番号より
	    1つずつ増加させた番号をデバイスに割り当てて行きます. もし
	    <quote>固定</quote> のデバイスがなければユニット番号は 0
	    から始まります.</para>

	  <para><command>man 4 scsi</command> によって
	    SCSIサブシステムの最新の情報を チェックしてください.
	    より詳細なホストアダプタドライバの使い 方は, たとえば
	    Adaptec 294xドライバの場合は<command>man 4 ahc</command>
	    にあります.</para>
	</sect4>

	<sect4>
	  <title>カーネルセットアップでの SCSI チューニング</title>

	  <para>経験的に SCSIバスリセット (ブート時におきます)
	    後のINQUIRYコマ
	    ンドに対して応答が遅くなるデバイスがあります.
	    INQUIRYコマンドは ブート時にカーネルがどの種類のデバイス
	    (ディスク, テープ, CDROMなど)
	    がどのターゲットIDに接続されているかを調べるために
	    発行します. ちなみにこのプロセスをデバイスプロービング
	    (デバイス検出) と言います.</para>

	  <para>「応答の遅いデバイス」の問題を解決するために,
	    FreeBSDは  SCSIバスをリセットした後に SCSIデバイスの検出を
	    おこなうまでのディレイタイムを調整することができます.
	    カーネルコンフィグレーションファイルの下に示すような
	    行にディレイタイムを設定してください.</para>

	  <programlisting>options         SCSI_DELAY=15         #Be pessimistic about Joe SCSI device</programlisting>

	  <para>この行ではディレイタイムは 15秒です. 私のシステムでは,
	    信頼できる古い
	    CDROMが認識できるように3秒の値を使っています. もし
	    デバイスの認識で問題が起きる時は大きな値 (30秒であるとか)
	    から 始めてください. うまく動いたら,
	    値を減らしてちょうどよい値
	    にチューニングしてください.</para>
	</sect4>

	<sect4 id="scsi-rogue-devices">
	  <title>Rogue な SCSI デバイス</title>
	  <para>(訳注: rogue は有名なゲーム, ではなくて 悪党,
	    群から離れた, 凶暴な, という意味)</para>

	  <para>SCSI の規定は完全で簡潔なものにしようという
	    努力はされましたが,  複雑な規定となり,
	    正確に実現するのは簡単なことではありません.
	    いくつかのベンダは他よりもよい仕事をしています.</para>

	  <para>ここで <quote>イカレた</quote>
	    デバイスが現れることになります. このような デバイスは
	    FreeBSD のカーネルにいくらか標準的
	    ではない振舞をするものと認識されます.
	    <quote>イカレた</quote>デバイスは
	    ブート時にカーネルによって報告されます. 次の例は私の2つの
	    カートリッジテープユニットです.</para>

	  <screen>Feb 25 21:03:34 yedi /kernel: ahb0 targ 5 lun 0: &lt;TANDBERG TDC 3600       -06:&gt;
Feb 25 21:03:34 yedi /kernel: st0: Tandberg tdc3600 is a known rogue

Mar 29 21:16:37 yedi /kernel: aha0 targ 5 lun 0: &lt;ARCHIVE VIPER 150  21247-005&gt;
Mar 29 21:16:37 yedi /kernel: st1: Archive  Viper 150 is a known rogue</screen>

	  <para>例えば,
	    あるターゲットIDから実際には1つのデバイスしかないの
	    にすべての
	    LUNからの応答があるようなデバイスがあるとします. カー
	    ネルはその特定のターゲットIDに8個の
	    LUNがあると誤解してしまう かもしれません.
	    このような混乱の起きる原因については読者へ
	    の課題にしておきます.</para>

	  <para>FreeBSDの SCSIサブシステムは 検出時の
	    INQUIRYの応答を見て
	    悪い習慣を持つデバイスの認識をしています.
	    INQUIRYの応答には
	    デバイスのファームウェアのバージョン番号が含まれるため,
	    異なる 動作をするファームウェアのバージョンを
	    区別することも可能です. 例えば,
	    <filename>/sys/scsi/st.c</filename> や
	    <filename>/sys/scsi/scsiconf.c</filename> を 見てください.
	    どのように行っているか, より多くの情報があります.</para>

	  <para>この方法はうまく行きますが,
	    もちろん既知のデバイスがつながっ
	    ている場合だけうまくいくということに
	    気をつける必要があります.  もしあなた以前に Mumbletech
	    SCSI CDROM (訳注: 架空のメーカ のデバイスです)
	    を接続した人がいないとしたら, どんな 「ワザ」
	    を使ってそれを使うか自分で見つけないと
	    いけないかもしれません.</para>

	  <para>あなたの Mubletech を動かすことができたらその成果を
	    FreeBSDの 次のリリースへ含めるために
	    FreeBSD開発チームへ送ってくださ い. 他の
	    Mumbletechの利用者たちはあなたに感謝するでしょう.</para>
	</sect4>

	<sect4>
	  <title>複数の LUNを持つデバイス</title>

	  <para>単一の SCSI ID上に複数の論理ユニット (LUN)
	    を持つデバイスを使う ような場合もあるかもしれません.
	    多くの場合では FreeBSDは LUN 0 のみを検出します.
	    このような例としては2台の SCSIではないハード ディスクを
	    SCSIバスにつなぐブリッジボード (例えば古い Sunシステ
	    ムに見られる Emulex MD21) があります.</para>

	  <para>LUN
	    が0ではないデバイスは普通はシステムブート時の検出では
	    見つかりません. この問題にうまく対処するには
	    /sys/scsi/scsiconf.c
	    に適切なエントリを加えてカーネルを再構築
	    しなければなりません.</para>

	  <para>以下のように初期化されている構造体を探します.</para>

	  <programlisting>{
	T_DIRECT, T_FIXED, "MAXTOR", "XT-4170S", "B5A",
	"mx1", SC_ONE_LU
}</programlisting>

	  <para>LUNが複数あるあなたの Mumbletech BRIDGE2000
	    はハードディスク として働きます.
	    またファームウェアのリビジョン123などを次のよ
	    うに書き加えます.</para>

	  <programlisting>{
	T_DIRECT, T_FIXED, "MUMBLETECH", "BRIDGE2000", "123",
	"sd", SC_MORE_LUS
}</programlisting>

	  <para>訳注: 複数 LUNに対応するためには構造体の最後の要素を
	    SC_MORE_LUSにします. エントリを作る必要がある場合は
	    scsiconf.c にある
	    MBR-7等のエントリを参考にするといいでしょう.</para>

	  <para>カーネルは
	    INQUIRYに一致するデータをブート時にテーブルから
	    探してこれにしたがってふるまいます. より多くの情報は
	    ソースコードを見てください.</para>
	</sect4>

	<sect4>
	  <title>タグ コマンド キューイング</title>

	  <para>最近の SCSI デバイス, 特に磁気ディスクではタグ
	    コマンド キューイング (tagged command queuing: TCQ)
	    がサポートされています.</para>

	  <para>要約すれば, TCQ は複数の I/O
	    リクエストを同時に受けることを可能 にすることです.
	    デバイスはインテリジェントですから,リクエスト
	    キューにある処理 (ヘッドのポジショニングなど) の最適化を
	    おこなうことができます. RAID (Redundant Array of
	    Independent Disks)
	    のようなSCSIデバイスではTCQ機能はデバイスの持つ並列性の
	    利点を生かすために不可欠です.</para>

	  <para>各々の I/O リクエストは単一の <quote>tag</quote> (タグ
	    コマンド キューイン グの名前の由来) が与えられます.
	    FreeBSDはこの tagによりデバ イスドライバのキューの中のどの
	    I/Oリクエストが完了したかの 識 別をおこないます.</para>

	  <para>TQC のリクエストはデバイスドライバが
	    サポートしていたとしても
	    あるデバイスのファームウェアではインプリメントが
	    <quote>正しくない</quote> かもしれません.
	    このような問題に出会うと非常に不可解な問題に つながります.
	    このような場合は TCQ を無効にしてみてください.</para>
	</sect4>

	<sect4>
	  <title>バスマスタ ホストアダプタ</title>

	  <para>すべてではありませんが多くの SCSIホストアダプタは
	    バスマスタコントローラです. これはホストCPUにデータ転送の
	    負荷をかけず, ボード自身がI/Oをおこないます.</para>

	  <para>これは
	    FreeBSDのようなマルチタスクのオペレーティングシステム
	    では大きな利点になります. しかし,
	    何らかの問題の起きることも あります.</para>

	  <para>例えば Adaptec 1542 コントローラは ホストバス
	    (ここでは ISA  または AT バス)
	    を異なった転送速度に設定できます.  コントローラが
	    異なるレートに設定できるのは すべてのマザーボードで
	    高速な転送が できるわけではないからです.
	    マザーボードに合っていない高速の
	    データ転送速度を用いた時には,
	    ハングアップやデータの損傷等の
	    問題が起きるかもしれません.</para>

	  <para>これを解決する方法は明らかです.
	    より低いデータ転送速度に設定
	    してうまく動くか確かめることです.</para>

	      <para>Adaptec 1542 の場合,
	    可能な限り高速な転送レートを動的に読み取って,
	    正しい決定をおこなうためのオプションを
	    カーネルコンフィグファイルに 追加することができます.
	    このオプションはデフォルトでは無効に なっています.</para>

	  <programlisting>options        "TUNE_1542"             #dynamic tune of bus DMA speed</programlisting>

	  <para>あなたの使うホストアダプタについてのマニュアルページを
	    チェックしてください.
	    また最終的な手段としては究極のドキュメントを
	    使ってください
	    (つまりドライバのソースを読んでくださいというこ
	    とです).</para>

	  <para>訳注: 2.1.5R
	    の時点ではすべてのドライバに関してマニュアルページ
	    があるわけではありません. また上の例の
	    TUNE_1542のオプション も <emphasis remap=tt>man aha
	    </emphasis>にはないようです. ソースのコメントだけで
	    も一度見ておいてもいいかもしれません.</para>
	</sect4>
      </sect3>

      <sect3>
	<title>問題を突き止める</title>

	<para>以下は SCSI
	  で一般的に問題が起きた場合に解決をするためのチェッ
	  クリストの試みです. これは完全な物ではありません.</para>

	<itemizedlist>
	  <listitem>
	    <para>コネクタとケーブルがゆるんでいないかチェックする.
	    </para>
	  </listitem>

	  <listitem>
	    <para>ターミネータの場所と数を念には念を入れて
	      チェックする.</para>
	  </listitem>

	  <listitem>
	    <para>少なくとも 1
	      つのターミネータの電源の供給源があるかチェック する
	      (特に外部ターミネータを使う場合).</para>
	  </listitem>

	  <listitem>
	    <para>ターゲットIDが重複していないかチェックする.</para>
	  </listitem>

	  <listitem>
	    <para>使用するすべてのデバイスの電源が ON
	      になっているかチェックする.</para>
	  </listitem>

	  <listitem>
	    <para>必要最小限のデバイスだけの構成を試してみる.</para>
	  </listitem>

	  <listitem>
	    <para>可能であれば,
	      ホストアダプタのスピードを遅くする.</para>
	  </listitem>

	  <listitem>
	    <para>問題をより単純にするために,
	      タグコマンドキューイングを可能 であれば無効にする.
	      (NCRベースのホストアダプタについては  man ncrcontrol
	      を見てください)</para>
	  </listitem>

	  <listitem>
	    <para>カーネルのコンパイルができるのであれば,
	      <literal>SCSIDEBUG</literal>オプショ ンをつけて
	      makeして, デバイスをデバッグモードにしてアクセ
	      スしてみてください.  もしそれでも起動時にデバイスが検出
	      されないのであれば, デバイスの設定アドレスが間違っている
	      のかもしれません. また, <emphasis
		remap=tt>/sys/scsi/scsidebug.h </emphasis>に
	      あるデバッグレベルを変えてみてください.  検出はされるが
	      動かないのであれば, &man.scsi.8; コマンドで
	      (<literal>SCSIDEBUG</literal> をつけてmakeした)
	      カーネルが動いている状態で動的にデバッグ
	      レベルを設定することができます. これは guru (UNIXの達人)
	      で も混乱してしまうほどの非常に大量のデバッグ情報を
	      出すでしょ う. <command>man 4 scsi
	      </command>にはより正確な情報があります. また<command>man
		8 scsi</command> も見てください.</para>
	  </listitem>
	</itemizedlist>
      </sect3>

      <sect3 id="scsi-further-reading">
	<title>さらに詳しい情報</title>

	<para>もしあなたがいくらかは本気で
	  SCSIハッキングをする気があるなら
	  たぶん正規の規格を持っていたくなるでしょう.</para>

	<para>承認ずみのアメリカ工業規格は ANSI から購入できます.
	  住所と電話番号は

	  <address>
	    <otheraddr>13th Floor</otheraddr>
	    <street>11 West 42nd Street</street>
	    <city>New York</city>
	    <state>NY</state> <postcode>10036</postcode>
	    Sales Dept: <phone>(212) 642-4900</phone>
	  </address>

	    です.</para>

	<para>また, ANSIの規格および委員会の規格案 (ドラフト)
	  のほとんどは Global Engineering Documents
	  より買うことができます. 連絡先は

	  <address>
	    <street>15 Inverness Way East</street>
	    <city>Englewood</city>
	    <state>CO</state>, <postcode>80112-5704</postcode>
	    Phone: <phone>(800) 854-7179</phone>
	    Outside USA and Canada: <phone>(303) 792-2181</phone>
	    Fax: <fax>(303) 792- 2192</fax>
	  </address>

	  です.</para>

	<para>X3T10 のドラフトの多くは電子的に利用できる形で SCSI BBS
	  (719-574-0424) と <hostid
	    role="fqdn">ncrinfo.ncr.com</hostid> の Anonymous FTP
	  サイトから得ることができます.</para>

	<para>最新の X3T10 委員会の文書は:</para>

	<itemizedlist>
	  <listitem>
	    <para>AT Attachment (ATA or IDE) [X3.221-1994]
	      (<emphasis>Approved</emphasis>)</para>
	  </listitem>

	  <listitem>
	    <para>ATA Extensions (ATA-2) [X3T10/948D Rev 2i]</para>
	  </listitem>

	  <listitem>
	    <para>Enhanced Small Device Interface (ESDI)
	      [X3.170-1990/X3.170a-1991]
	      (<emphasis>Approved</emphasis>)</para>
	  </listitem>

	  <listitem>
	    <para>Small Computer System Interface &mdash;
	      2 (SCSI-2) [X3.131-1994] (<emphasis>Approved</emphasis>)</para>
	  </listitem>

	  <listitem>
	    <para>SCSI-2 Common Access Method Transport and
	      SCSI Interface Module (CAM)
	      [X3T10/792D Rev 11]</para>
	  </listitem>
	</itemizedlist>

	<para>追加情報を得ることのできる出版物は:</para>

	<itemizedlist>
	  <listitem>
	    <para><quote>SCSI: Understanding the Small Computer
	      System Interface</quote>, NCR社
	      編.  出版: Prentice Hall, Englewood Cliffs, NJ, 07632
	      Phone: (201) 767-5937 ISBN 0-13-796855-8</para>
	  </listitem>

	  <listitem>
	    <para><quote>Basics of SCSI</quote>,
	      a SCSI tutorial, Ancot Corporation 編
	      Ancot の連絡先:
	      Phone: (415) 322-5322  Fax: (415) 322-0455</para>
	  </listitem>

	  <listitem>
	    <para><quote>SCSI Interconnection Guide Book</quote>,
	      AMP社の出版物 (発行 4/93, カ
	      タログ 65237) 色々な
	      SCSI コネクタのリスト と ケーブル接続方法のガイド.
	      AMP 社より入手可能. (800) 522-6752
	      または (717) 564-0100</para>
	  </listitem>

	  <listitem>
	    <para><quote>Fast Track to SCSI</quote>,
	      富士通によるプロダクトガイド,
	      入手先: Prentice Hall, Englewood Cliffs, NJ, 07632
	      電話: (201) 767-5937 ISBN 0-13-307000-X</para>
	  </listitem>

	  <listitem>
	    <para><quote>The SCSI Bench Reference</quote>,
	      <quote>The SCSI Encyclopedia</quote>,  <quote>SCSI Tutor</quote>,
	      ENDL Publications, 14426 Black Walnut Court, Saratoga CA, 95070
	      電話: (408) 867-6642</para>
	  </listitem>

	  <listitem>
	    <para><quote>Zadian SCSI Navigator</quote>
	      (クイックリファレンス) および
	      <quote>Discover the Power of SCSI</quote>
	      (最初の本は1時間のビデオとチュートリアルが付属),
	      Zadian Software,
	      Suite 214, 1210 S. Bascom Ave.,
	      San Jose, CA 92128, (408) 293-0800</para>
	  </listitem>
	</itemizedlist>

	<para>Usenet のニュースグループ <ulink
	    url="news:comp.periphs.scsi">comp.periphs.scsi</ulink> と
	  <ulink url="news:comp.periphs">comp.periphs</ulink>
	  は特により多くの情報を得るには注目すべき場所です.
	  また定期的に ポストされる
	  SCSI-FAQをここから得ることができます.</para>

	<para>多くの主要な SCSIデバイスとホストアダプタの供給元は FTP
	  サイト や BBSを開いています.
	  これらはあなたの持っているデバイスに関す
	  る貴重な情報源となるでしょう.</para>
      </sect3>
    </sect2>

    <sect2 id="hw-storage-controllers">
      <title>* ディスク/テープ コントローラ</title>

      <sect3>
	<title>* SCSI</title>

	<para></para>
      </sect3>

      <sect3>
	<title>* IDE</title>

	<para></para>
      </sect3>

      <sect3>
	<title>* フロッピー</title>

	<para></para>
      </sect3>
    </sect2>

    <sect2>
      <title>ハードディスクドライブ</title>

      <sect3>
	<title>SCSI ハードディスク装置</title>

	<para><emphasis>寄稿: &a.asami; .<!-- <br> -->
	    17 February 1998.</emphasis></para>

	<para><emphasis>訳: &a.jp.miyasita;.<!-- <br> -->
	    20 February 1998.</emphasis></para>

	<para><link linkend="scsi">SCSI</link> の章で述べたように,
	  実際, 現在販売されている SCSI ハードディスク装置はすべて
	  SCSI-2 互換であり, サポートされている SCSI ホストアダプタに
	  接続すればそれらは正常に動作するでしょう.
	  人々が直面する問題の多くは, ケーブル接続が間違っていたり
	  (ケーブルが長過ぎる, スター型接続になっている, など),
	  ケーブル終端の処理が不十分だったり,
	  部品が故障していたりのうちのどれかです.
	  SCSI ハードディスク装置が動作しないときには, まず
	  <link linkend="scsi">SCSI</link> の章を参照して下さい.
	  しかし SCSI ハードディスク装置を購入するときに
	  気を付けておきたいことがふたつあります.</para>

	<sect4>
	  <title>回転速度</title>

	  <para>現在販売されている SCSI ドライブの回転速度の範囲は
	    4,500RPM から 10,000RPM であり, その大部分は 5,400RPM か
	    7,200RPM です. 一般的に 7,200RPM
	    のドライブの方がデータ転送は速いのですが, 5,400RPM
	    の同容量のものと比べてとても熱くなります.
	    現在のディスク装置の故障の大半は熱によるものです. もし PC
	    のケースの中が非常によく冷却されていなければ, 5,400RPM
	    かそれ以下のドライブにしておいた方がよいでしょう.</para>

	  <para>より高密度で記録するようになっている新しいドライブは
	    以前のものに比べてより多くのビットを
	    各回転毎に転送することが
	    できるということに気をつけて下さい. 現在, 5,400RPM
	    の最高級機種では 1, 2 世代前の 7,200RPM の
	    ドライブに匹敵する転送速度が出せます.
	    仕様一覧からバンド幅の数値を探すには <quote>内部データ
	    (または転送) 速度</quote> という欄を見て下さい.
	    通常その数値は Mbits/s で書かれているので, それを 8
	    で割ればそのドライブで出せる速度が Mbytes/s で
	    おおよそ見当をつけることができます.</para>

	  <para>(もしあなたがスピード狂で,
	    あなたの愛する小さなパソコンちゃんに 10,000RPM
	    のドライブを載せたいのならそうしても構いませんが,
	    そのようなドライブはものすごく熱くなります. ドライブへ
	    <emphasis>直接</emphasis> 風を当てられるようなファンや
	    きちんと換気されているディスク区画を持っていないときには
	    そういうことは考えない方がよいでしょう.)</para>

	  <para>最新の 10,000RPM のドライブや 7,200RPM
	    のドライブは当然 最新の 5,400RPM
	    のドライブよりも多くのデータを転送することが できますから,
	    絶対的なバンド幅がアプリケーションにとって 必要ならば,
	    より速いドライブを選ぶしかありません. また,
	    レイテンシを小さくする必要があるときも,
	    より速いドライブが適当です. なぜなら,
	    より速いドライブの方が平均シーク時間が 少ないだけでなく,
	    回転遅延という尺度において
	    低回転速度のドライブが高回転速度のものに
	    勝ることはないからです. (平均回転レイテンシはディスクが 1
	    回転するために要する時間を半分に したものです. すなわち,
	    10,000RPM のドライブでは 3 ms, 7,200RPM のドライブでは 4.2
	    ms, 5,400RPM のドライブでは 5.6 ms となります.)
	    レイテンシはシーク時間と回転遅延との和になります.
	    しかしここで, レイテンシの少ないドライブが欲しいのか, 1
	    秒あたりのアクセス数を増やす方がよいのかを
	    はっきりさせておかなければいけません. 後者の場合 (例 :
	    ニュースサーバ) では, 大きな速いドライブを 1
	    つ購入することは最適解とはならないでしょう.
	    遅いドライブを複数個使ってストライピングされた
	    ディスクアレイを 作る ccd (連結ディスク)
	    ドライバを用いることによって,
	    全体に必要な費用の点で同様かまたはより
	    良い結果を得ることができます.</para>

	  <para>ドライブのまわりに適切な空気の
	    流れを作るようにする必要が あります.
	    高回転速度のドライブを使おうとしているときには特に
	    注意してください. 一般的に, ドライブの上下には少なくとも
	    1/2 インチ (1.25cm) の すき間が必要です. PC
	    のケース内の空気がどんなふうに流れているか
	    理解しておいてください.
	    多くのケースには背面から空気を吸い込む電源が付いています.
	    どこから空気が入ってくるかを確かめて, まわりに最大量の
	    冷たい空気が流れるようにドライブを設置してください.
	    効果的に冷却するためには, 不要な穴をいくつか塞いだり
	    新しいファンを追加する必要があるかも知れません.</para>

	  <para>もうひとつ考慮するべき事柄は騒音です. 7,200RPM
	    やそれより速い回転速度のドライブの多くは高い周波数の
	    音を発生し, この音は多くの人をとても不快にします.
	    それに加えて, 冷却のために追加されたファンによっても,
	    7,200RPM
	    やそれより速い回転速度のドライブはオフィスや家の環境に
	    そぐわないものになるかもしれません.</para>
	</sect4>

	<sect4>
	  <title>形状</title>

	  <para>現在販売されている大部分の SCSI ドライブは 3.5
	    インチの 大きさです. それらは高さが 1.6 インチ
	    (<quote>ハーフハイト</quote>) のものと 1 インチ
	    (<quote>ロープロファイル</quote>) のものとの 2
	    種類に分類されます. ハーフハイトのドライブは CDROM
	    ドライブと同じ高さです. しかし前節で述べたすき間についての
	    ルールを忘れないでください. 3.5 インチドライブ用のベイが 3
	    段用意されているときに, ハーフハイトのドライブ 3 個を
	    (焦がすことなく)
	    そこに設置することはできないでしょう.</para>
	</sect4>

	<sect4>
	  <title>インタフェース</title>

	  <para>現在売られている SCSI ハードドライブの多くは Ultra
	    または Ultra-wide SCSI です. Ultra SCSI の最大バンド幅は
	    20MB/s, Ultra-wide SCSI の場合は 40MB/s です. Ultra と
	    Ultra-wide の間にケーブル最大長の相違はありませんが,
	    同一バスに接続されるデバイスが増えれば増えるほど
	    早い時期にバスの整理に関する問題を
	    抱えることになるでしょう.
	    うまく設計されたディスク区画を持っているのでなければ, 5
	    個か 6 個以上の Ultra SCSI ドライブを 1 本のバスに
	    接続することは容易なことではありません.</para>

	  <para>一方, 多数のドライブを接続する必要があるときに
	    Fast-wide SCSI を利用することは悪くないアイデアでしょう.
	    これは Ultra (narrow) SCSI
	    と同じ最大バンド幅であると同時に <quote>正しく</quote>
	    接続することが電気的にとても容易です.
	    アドバイスとしてはこのようになるでしょうか :
	    ディスクを多数接続したいときには wide SCSI のドライブを
	    選んで下さい. 通常 wide SCSI の方が少し高価ですが,
	    将来きっと役に立ちます. (なお,
	    価格差を補う余裕がないときにはディスクアレイを
	    作るべきではありません.)</para>

	  <para>wide SCSI ドライブには 68 ピンのものと 80ピン SCA
	    (単コネクタ型) のものとの 2 種類があります. SCA
	    ドライブには 4 ピンの電源コネクタがなく, SCSI ID も 80
	    ピンコネクタを通じて設定されます.
	    真面目に大規模な記憶システムを作成するような場合には, SCA
	    ドライブと SCA 筺体 (2
	    種類の電圧が供給できる電源と少なくとも 1
	    個のファンが付いたもの) を使ってください. その方が 68
	    ピンの同様のドライブよりも電気的に優れています. なぜなら,
	    68 ピンのドライブで作ったディスクアレイに 見られるような
	    SCSI バスの <quote>スタブ</quote>
	    がディスクキャニスタの内部に 存在しないからです.
	    それらはより簡単に設置することができます
	    (キャニスタの中にドライブをねじで固定すればよいだけで,
	    (SCSI ID やディスクアクセス LED 用の線のような)
	    細かいケーブルを全部持ち上げるために狭いところへ指を入れて
	    握らなくてもよいのです).</para>
	</sect4>
      </sect3>

      <sect3>
	<title>* IDE ハードディスクドライブ</title>

	<para></para>
      </sect3>
    </sect2>

    <sect2>
      <title>テープドライブ</title>

      <para><emphasis>原作: &a.jmb;.<!-- <br> -->
	  2 July 1996.</emphasis></para>

      <para><emphasis>訳: &a.jp.yoshiaki;.<!-- <br> -->
	  13 October 1996.</emphasis></para>

      <sect3>
	<title>一般的なテープアクセスコマンド</title>

	<para>&man.mt.1; はテープドライブへの一般的なアクセス方法を提
	  供します. <command>rewind</command>,
	  <command>erase</command>, <command>status</command>など
	  の共通コマンドがあります. マニュアルページの &man.mt.1; を見
	  てください. より詳しい解説があります.</para>
      </sect3>

      <sect3>
	<title>コントローラインタフェース</title>

	<para>テープドライブにはいくつかの異なったインタフェースがあり
	  ます. SCSI, IDE, フロッピー, パラレルポートのインタフェース
	  です.
	  非常に多くの種類のテープドライブがこれらのインタフェー
	  スで使えます.  コントローラについての議論は<link
	    linkend="hw-storage-controllers">ディスク/テープ
	    のコントローラ</link>にあります(訳注:現在未完成です).</para>
      </sect3>

      <sect3>
	<title>SCSI ドライブ</title>

	<para>&man.st.4; ドライバは 8mm (Exabyte), 4mm (DAT: Digital
	  Audio Tape), QIC (1/4インチカートリッジ),
	  DLT (デジタルリニアテープ),
	  QIC ミニカートリッジ, 9トラック (大きなリールがハリウッドの
	  コンピュータルームで回っているのを見たことがあるでしょう)
	  をサポートします.
	    &man.st.4; マニュアルページにより詳しい解説があります.
	</para>

	<para>以下のドライブリストは現在 FreeBSDコミュニティのメンバが
	  使っているものです. これらだけが FreeBSDで動くドライブという
	  わけではありません.
	  これらは単にたまたま私たちのうちの誰かが使っ
	  ているというだけです.</para>

	<sect4>
	  <title>4mm (DAT: Digital Audio Tape )</title>

	  <para><link linkend="hw-storage-python-28454">Archive Python
	      28454</link></para>

	  <para><link linkend="hw-storage-python-04687">Archive Python
	      04687</link></para>
	  
	  <para><link linkend="hw-storage-hp1533a">HP C1533A</link></para>
	  <para><link linkend="hw-storage-hp1534a">HP C1534A</link></para>
	  <para><link linkend="hw-storage-hp35450a">HP 35450A</link></para>
	  <para><link linkend="hw-storage-hp35470a">HP 35470A</link></para>
	  <para><link linkend="hw-storage-hp35480a">HP 35480A</link></para>
	  <para><link linkend="hw-storage-sdt5000">SDT-5000</link></para>
	  <para><link linkend="hw-storage-wangtek6200">Wangtek 6200</link></para>
	</sect4>

	<sect4>
	  <title>8mm (Exabyte)</title>

	  <para><link linkend="hw-storage-exb8200">EXB-8200</link></para>
	  <para><link linkend="hw-storage-exb8500">EXB-8500</link></para>
	  <para><link linkend="hw-storage-exb8505">EXB-8505</link></para>
	</sect4>

	<sect4>
	  <title>QIC (1/4 インチカートリッジ)</title>

	  <para><link linkend="hw-storage-anaconda">Archive Anaconda 2750</link></para>
	  <para><link linkend="hw-storage-viper60">Archive Viper 60</link></para>
	  <para><link linkend="hw-storage-viper150">Archive Viper 150</link></para>
	  <para><link linkend="hw-storage-viper2525">Archive Viper 2525</link></para>
	  <para><link linkend="hw-storage-tandberg3600">Tandberg TDC 3600</link></para>
	  <para><link linkend="hw-storage-tandberg3620">Tandberg TDC 3620</link></para>
	  <para><link linkend="hw-storage-tandberg3800">Tandberg TDC 3800</link></para>
	  <para><link linkend="hw-storage-tandberg4222">Tandberg TDC 4222</link></para>
	  <para><link linkend="hw-storage-wangtek5525es">Wangtek 5525ES</link></para>
	</sect4>

	<sect4>
	  <title>DLT (Digital Linear Tape)</title>

	  <para><link linkend="hw-storage-dectz87">Digital TZ87</link></para>
	</sect4>

	<sect4>
	  <title>Mini-Cartridge</title>

	  <para><link linkend="hw-storage-ctms3200">Conner CTMS 3200</link></para>
	  <para><link linkend="hw-storage-exb2501">Exabyte 2501</link></para>
	</sect4>

	<sect4>
	  <title>Autoloaders/Changers</title>

	  <para><link linkend="hw-storage-hp1553a">Hewlett-Packard HP C1553A Autoloading DDS2</link></para>
	</sect4>
      </sect3>

      <sect3>
	<title>* IDE ドライブ</title>

	<para></para>
      </sect3>

      <sect3>
	<title>フロッピードライブ</title>

	<para><link linkend="hw-storage-conner420r">Conner 420R</link></para>
      </sect3>

      <sect3>
	<title>* パラレルポートドライブ</title>

	<para></para>
      </sect3>

      <sect3>
	<title>詳細な情報</title>

	<sect4 id="hw-storage-anaconda">
	  <title>Archive Anaconda 2750</title>

	  <para>このドライブのブートメッセージの識別子は
	    <literal>ARCHIVE ANCDA 2750 28077 -003 type 1 removable
	      SCSI 2</literal> です.</para>

	  <para>これは QIC テープドライブです.</para>

	  <para>QIC-1350テープを利用した場合の標準の容量は 1.35GBです.
	    このドライブは QIC-150 (DC6150), QIC-250 (DC6250), QIC-525
	    (DC6525) の
	    テープを問題なく読み書きすることができます.</para>

	  <para>&man.dump.8; を使った時のデータ転送レートは
	    350kB/sです. <link
	      linkend="backups-programs-amanda">Amanda</link>
	    における転送レートは  530kB/sと報告されています.</para>

	  <para>このドライブは既に生産中止になっています.</para>

	  <para>このテープドライブの
	    SCSIバスコントローラは他のほとんどの
	    SCSIドライブとピン配置が逆です. Anaconda
	    テープドライブの前後でSCSIケー
	    ブルを1/2ひねることができるくらい SCSI
	    ケーブルが長いことを確認しておく か, 他の
	    SCSIデバイスのピン配置を入れ換えておく必要
	    があります.</para>

	  <para>そして, このドライブではカーネルコードの変更が
	    2箇所必要です. そ のままではうまく動かないでしょう.</para>

	  <para>SCSI-2コントローラを持っているなら, ジャンパの
	    6番をショート してください. そうしないとこのドライブは
	    SCSI-1として働きます. SCSI-1の デバイスとして動作する時,
	    このドライブはテープのfsf (早送り), rewind (巻
	    戻し),rewoffl (巻戻してオフラインにする)
	    等を含む操作を行っている間,
	    SCSIバスを<quote>ロック</quote>します.</para>

	  <para>NCR SCSIコントローラを使う場合,
	    <filename>/usr/src/sys/pci/ncr.c</filename> (以
	    下を参照してください)にパッチを行って, カーネルを作り直し,
	    新しいカーネ ルをインストールしてください.</para>

	  <programlisting>*** 4831,4835 **** }; !               if (np-&gt;latetime&gt;4) { /*
	    **      Although we tried to wake it up, --- 4831,4836
	    ---- }; !               if (np-&gt;latetime&gt;1200) { /*
	    **      Although we tried to wake it up,</programlisting>

	  <para>報告者: &a.jmb;</para>
	</sect4>

	<sect4 id="hw-storage-python-28454">
	  <title>Archive Python 28454</title>

	  <para>このドライブのブートメッセージの識別子は
	    <literal>ARCHIVE Python 28454-XXX4ASB</literal>
	    <literal>type 1 removable SCSI 2</literal>
	    <literal>density code 0x8c, 512-byte blocks</literal>
	    です.</para>

	  <para>これは DDS-1 テープドライブです.</para>

	  <para>90m テープを使った場合の標準容量は 2.5GBです.</para>

	  <para>データ転送速度は不明です.</para>

	  <para>このドライブは Sun マイクロシステムが再パッケージして
	    model 595-3067として出しています.</para>

	  <para>報告者: Bob Bishop <email>rb@gid.co.uk</email></para>

	  <para>スループットは 1.5 MByte/sec クラスですが,
	    ディスクとテープが同じ SCSI コントローラに接続されている
	    場合には遅くなってしまいます.</para>

	  <para>報告者: Robert E. Seastrom
	    <email>rs@seastrom.com</email></para>
	</sect4>

	<sect4 id="hw-storage-python-04687">
	  <title>Archive Python 04687</title>

	  <para>このドライブのブートメッセージの識別子は<literal>ARCHIVE 
	      Python 04687-XXX 6580</literal> <literal>Removable Sequential
	      Access SCSI-2 device</literal>です.</para>

	  <para>これは DAT-DDS-2 ドライブです.</para>

	  <para>120m テープを使った場合の標準容量は 2.5GBです.</para>

	  <para>このドライブはハードウェアデータ圧縮をサポートしています.
            スイッチ4は MRS (Media Recognition System:メディア認識システム
            )をコントロールします. MRSテープの透明なテープリーダー部分には
            しま模様があります. スイッチ 4 を<emphasis>off</emphasis>
	    にすると MRS が有効に, <emphasis>on</emphasis> にすると MRS
            が無効になります.</para>

	  <para>パリティはスイッチ 5 でコントロールされます.  スイッチ 5 を
	    <emphasis>on</emphasis> にするとパリティが有効になります. 圧縮は
	    スイッチ 6 <emphasis>off</emphasis> で有効です.  圧縮については
	    <literal>SCSI MODE SELECT</literal> コマンド (see &man.mt.1;)
            の指定が優先されます.</para>

	  <para>データ転送レートは 800kB/s です.</para>
	</sect4>

	<sect4 id="hw-storage-viper60">
	  <title>Archive Viper 60</title>

	  <para>このドライブのブートメッセージ識別子は
	    <literal>ARCHIVE VIPER 60 21116 -007</literal>
	    <literal>type 1 removable SCSI 1</literal> です.</para>

	  <para>これは QICテープドライブです.</para>

	  <para>標準の容量は 60MB です.</para>

	  <para>データ転送レートは不明です.</para>

	  <para>このドライブは生産中止になっています.</para>

	  <para>報告者: Philippe Regnauld <email>regnauld@hsc.fr</email></para>
	</sect4>

	<sect4 id="hw-storage-viper150">
	  <title>Archive Viper 150</title>

	  <para>このドライブのブートメッセージの識別子は
	    <literal>ARCHIVE VIPER 150 21531 -004</literal>
	    <literal>Archive Viper 150 is a known rogue</literal>
	    <literal>type 1 removable SCSI 1</literal>です.
	    このドライブのファームウェアには多くのリビジョ
	    ンがあります.
	    あなたのドライブではことなった数字が表示されるかもしれま
	    せん(例えば <literal>21247 -005</literal>).</para>

	  <para>これは QICテープドライブです.</para>

	  <para>標準容量は 150/250MBです.  150MB (DC6150) テープと
	    250MB (DC6250)テープの記録フォーマットがあります.
	    250MBテープは およそ67% 150MBテープより長いです.
	    このドライブは 120MBのテープを問題 なく読むことができます.
	    120MBテープに書き込むことはできません.</para>

	  <para>データ転送レートは100kB/sです.</para>

	  <para>このドライブは DC6150 (150MB) と DC6250 (250MB)
	    テープの読み 書きができます.</para>

	  <para>このドライブの奇妙な癖は
	    SCSIテープデバイスドライバはあら かじめ (&man.st.4;)
	    にあらかじめ組み込まれています.</para>

	  <para>FreeBSD 2.2-CURRENTでは,
	    ブロックサイズの設定を設定するため<command>mt blocksize
	      512</command>としてください. (ファームウェアリビジョンが
	    21247 -005 である場合の問題です.
	    他のリビジョンのファームウェアでは異 なる場合があります.)
	    これ以前の
	    FreeBSDバージョンにはこの問題はありません.</para>

	  <para>このドライブは生産中止になっています.</para>

	  <para>報告者: Pedro A M Vazquez
	    <email>vazquez@IQM.Unicamp.BR</email></para>

	  <para>&a.msmith;</para>
	</sect4>

	<sect4 id="hw-storage-viper2525">
	  <title>Archive Viper 2525</title>

	  <para>このドライブのブートメッセージの識別子は
	    <literal>ARCHIVE VIPER 2525 25462 -011</literal>
	    <literal>type 1 removable SCSI 1</literal>です.</para>

	  <para>これは QICテープドライブです.</para>

	  <para>標準容量は 525MBです.</para>

	  <para>データ転送レートは 90inch/secの場合で 180kB/sです.</para>

	  <para>QIC-525, QIC-150, QIC-120,
	    QIC-24のテープを読むことができま す. QIC-525, QIC-150,
	    QIC-120 に書き込むことができます.</para>

	  <para>ファームウェアのリビジョンが <literal>25462
	      -011</literal> 以前の物はバグが 多く,
	    正しく機能しません.</para>

	  <para>このドライブは生産中止になっています.</para>
	</sect4>

	<sect4 id="hw-storage-conner420r">
	  <title>Conner 420R</title>

	  <para>このドライブのブートメッセージの識別子は
	    <literal>Conner tape</literal> です.</para>

	  <para>これはフロッピーコントローラを
	    使うミニカートリッジテープド ライブです.</para>

	  <para>標準容量は不明です.</para>

	  <para>データ転送レートは不明です.</para>

	  <para>このドライブは QIC-80テープドライブを使います.</para>

	  <para>報告者: Mark Hannon <email>mark@seeware.DIALix.oz.au</email></para>
	</sect4>

	<sect4 id="hw-storage-ctms3200">
	  <title>Conner CTMS 3200</title>

	  <para>このドライブのブートメッセージの識別子は
	    <literal>CONNER CTMS  3200 7.00</literal> <literal>type 1
	      removable SCSI 2</literal> です.</para>

	  <para>これはミニカートリッジテープドライブです.</para>

	  <para>標準容量は不明です.</para>

	  <para>データ転送レートは不明です.</para>

	  <para>このドライブは QIC-3080テープカートリッジを使います.</para>

	  <para>報告者: Thomas S. Traylor <email>tst@titan.cs.mci.com</email></para>
	</sect4>

	<sect4 id="hw-storage-dectz87">
	  <title><ulink url="http://www.digital.com/info/Customer-Update/931206004.txt.html">DEC TZ87</ulink></title>

	  <para>このドライブのブートメッセージの識別子は <literal>DEC
	      TZ87 (C) DEC 9206</literal> <literal>type 1 removable
	      SCSI 2</literal> <literal>density code 0x19</literal>
	    です.</para>

	  <para>これは DLTテープドライブです.</para>

	  <para>標準容量は 10GBです.</para>

	  <para>このドライブはハードウェアデータ圧縮の機能があります.</para>

	  <para>データ転送レートは 1.2MB/sです.</para>

	  <para>このドライブは Quantum DLT2000と同一の物です.
	    このドライブ のファームウェアは Exabyteの
	    8mmドライブ等のよく知られたいくつかのドラ
	    イブのエミュレートをおこなうよう設定ができます.</para>

	  <para>報告者: &a.wilko;</para>
	</sect4>

	<sect4 id="hw-storage-exb2501">
	  <title><ulink url="http://www.Exabyte.COM:80/Products/Minicartridge/2501/Rfeatures.html">Exabyte EXB-2501</ulink></title>

	  <para>このドライブのブートメッセージ識別子は
	    <literal>EXABYTE EXB-2501</literal>です.</para>

	  <para>これはミニカートリッジテープドライブです.</para>

	  <para>MC3000XLミニカートリッジを使った時の標準容量は 1GBです.</para>

	  <para>データ転送レートは不明です.</para>

	  <para>このドライブは DC2300 (550MB), DC2750 (750MB), MC3000
	    (750MB), MC3000XL (1GB)
	    ミニカートリッジの読み書きができます.</para>

	  <para>注意: このドライブは SCSI-2の仕様に適合していません.
	    このドライブは, フォーマット済みのテープ以外を入れた場合,
	    SCSI MODE_SELCTコマンドで完全にロックアップしてしまいます.
	    このドライブを使 う前に,
	    テープブロックサイズを次のように設定します.</para>

	  <screen>&prompt.root; <userinput>mt -f /dev/st0ctl.0 blocksize 1024</userinput></screen>

	  <para>ミニカートリッジは最初に使う前に
	    フォーマットしなければなりません. FreeBSD 2.1.0-RELEASE
	    およびそれ以前の場合は</para>

	  <screen>&prompt.root; <userinput>/sbin/scsi -f /dev/rst0.ctl -s 600 -c "4 0 0 0 0 0"</userinput></screen>

	  <para>(あるいは, FreeBSD 2.1.5/2.2から
	    <command>scsiformat</command>シェルスクリプトを
	    コピーして持ってきた場合と) FreeBSD
	    2.1.5およびそれ以降の場合は <screen>&prompt.root;
	      <userinput>/sbin/scsiformat -q -w
		/dev/rst0.ctl</userinput></screen> とします.</para>

	  <para>今のところ,
	    FreeBSDではこのドライブはあまりおすすめできません.</para>

	  <para>報告者: Bob Beaulieu <email>ez@eztravel.com</email></para>
	</sect4>

	<sect4 id="hw-storage-exb8200">
	  <title>Exabyte EXB-8200</title>

	  <para>このドライブのブートメッセージの識別子は
	    <literal>EXABYTE EXB-8200 252X</literal> <literal>type 1
	      removable SCSI 1</literal>です.</para>

	  <para>これは8mmテープドライブです.</para>

	  <para>標準容量は 2.3GBです.</para>

	  <para>データ転送レートは 270kB/sです.</para>

	  <para>このドライブはブート時の
	    SCSIバスへの応答はわりあい遅いです.
	    カスタムカーネルが必要かもしれません (SCSI_DELAYを
	    10秒に設定しましょう). 訳注: GENERICカーネルの設定では
	    15秒になっています.</para>

	  <para>このドライブには非常に多くのファームウェアの
	    構成があります.
	    あるドライブでは特定のベンダのハードウェアに
	    カスタマイズしてあります. ファームウェアは
	    EPROMを置き換えることで変更できます.</para>

	  <para>このドライブは生産中止になっています.</para>

	  <para>報告者: &a.msmith;</para>
	</sect4>

	<sect4 id="hw-storage-exb8500">
	  <title>Exabyte EXB-8500</title>

	  <para>このドライブのブートメッセージの識別子は
	    <literal>EXABYTE EXB-8500-85Qanx0 0415</literal>
	    <literal>type 1 removable SCSI 2</literal> です.</para>

	  <para>これは 8mmテープドライブです.</para>

	  <para>標準容量は 5GBです.</para>

	  <para>データ転送レートは 300kB/sです.</para>

	  <para>報告者: Greg Lehey <email>grog@lemis.de</email></para>
	</sect4>

	<sect4 id="hw-storage-exb8505">
	  <title><ulink url="http://www.Exabyte.COM:80/Products/8mm/8505XL/Rfeatures.html">Exabyte EXB-8505</ulink></title>

	  <para>このドライブのブートメッセージ識別子は
	    <literal>EXABYTE EXB-85058SQANXR1 05B0</literal>
	    <literal>type 1 removable SCSI 2</literal>です.</para>

	  <para>これは 圧縮機能を持った 8mmテープドライブで, EXB-5200
	    と  EXB-8500に対する上位互換品です.</para>

	  <para>標準容量は 5GBです.</para>

	  <para>このドライブは
	    ハードウェアデータ圧縮機能があります.</para>

	  <para>データ転送レートは 300kB/sです.</para>

	  <para>報告者: Glen Foster <email>gfoster@gfoster.com</email></para>
	</sect4>

	<sect4 id="hw-storage-hp1533a">
	  <title>Hewlett-Packard HP C1533A</title>

	  <para>このドライブのブートメッセージの識別子は <literal>HP
	      C1533A 9503</literal> <literal>type 1 removable SCSI
	      2</literal>です.</para>

	  <para>これはDDS-2テープドライブです.  DDS-2
	    とはデータ容量を増や すためにハードウェア圧縮と
	    狭いトラックを採用したものです.</para>

	  <para>120mテープを使った場合の標準容量は4GBです.
	    このドライブは
	    ハードウェアデータ圧縮機能があります.</para>

	  <para>データ転送レートは510kB/sです.</para>

	  <para>このドライブはヒューレットパッカード社の 6000eU および
	    6000i テー プドライブ, C1533A DDS-2 DAT
	    ドライブに使われています.</para>

	  <para>このドライブは 8接点のディップスイッチがあります.
	    FreeBSDで の適切な設定は 1 ON; 2 ON; 3 OFF; 4 ON; 5 ON; 6
	    ON; 7 ON; 8 ON です. </para>

	  <informaltable frame="none">
	    <tgroup cols="3">
	      <thead>
		<row>
		  <entry>スイッチ 1</entry>
		  <entry>スイッチ 2</entry>
		  <entry>結果</entry>
		</row>
	      </thead>

	      <tbody>
		<row>
		  <entry>On</entry>
		  <entry>On</entry>
		  <entry>電源投入時に圧縮 ON,
		    ホストによるコントロール可能</entry>
		</row>

		<row>
		  <entry>On</entry>
		  <entry>Off</entry>
		  <entry>電源投入時に圧縮 ON,
		    ホストによるコントロール不可</entry>
		</row>

		<row>
		  <entry>Off</entry>
		  <entry>On</entry>
		  <entry>電源投入時に圧縮 OFF,
		    ホストによるコントロール可能</entry>
		</row>

		<row>
		  <entry>Off</entry>
		  <entry>Off</entry>
		  <entry>電源投入時に圧縮 OFF,
		    ホストによるコントロール不可</entry>
		</row>
	      </tbody>
	    </tgroup>
	  </informaltable>

	  <para>スイッチ 3 は MRS (Media Recognition System
	    :メディア認識システ ム) をコントロールします.  MRS
	    テープは透明なテープリーダ部分にしま模 様があります.
	    これはテープが DDS (Digital Data Storage) グレードである
	    ことを示します.
	    しま模様のないテープはライトプロテクトされたものとして
	    扱います. スイッチ3をOFFにすると MRSが有効になります.
	    スイッチ3をONに すると MRSは無効になります.</para>

	  <para>訳注: 安価な音楽用のDATテープを使うには
	    MRSをOFFにしておきます</para>

	  <para>このドライブの設定についてのより詳しい情報は  <ulink
	      url="http://www.hp.com/tape/c_intro.html">HP SureStore
	      Tape Products</ulink> および  <ulink
	      url="http://www.impediment.com/hp/hp_technical.html">Hewlett-Packard Disk and Tape Technical Information</ulink> をご覧ください.</para>

	  <para><emphasis>注意:</emphasis>
	    これらのドライブの品質管理は非常に幅がありま す.  ある
	    FreeBSDコアチームのメンバは
	    このドライブを2つ返品しました.</para>

	  <para>報告者: &a.se;</para>
	</sect4>

	<sect4 id="hw-storage-hp1534a">
	  <title>Hewlett-Packard HP 1534A</title>

	  <para>このドライブのブートメッセージの識別子は <literal>HP
	      HP35470A T503</literal> <literal>type 1 removable SCSI
	      2</literal> <literal>Sequential-Access density code
	      0x13, variable blocks</literal>です.</para>

	  <para>これは DDS-1テープドライブです.  DDS-1 は最初の DAT
	    テープフォーマットです.</para>

	  <para>90m テープを使った場合の標準容量は 2GBです.</para>

	  <para>データ転送レートは 183kB/sです.</para>

	  <para>ヒューレットパッカード社の SureStore <ulink
	      url="http://www.dmo.hp.com/tape/sst2000.htm"> 2000i
	    </ulink> テープドライブ, C35470A DDS フォーマット
	    DATドライブ, C1534A DDS フォーマット DATドライブ, HP
	    C1536A DDS フォーマット DATドライブと
	    同じ機構を使用しています.</para>

	  <para>HP C1534A DDSフォーマット
	    DATドライブはグリーンと黄色(アンバー)
	    の2つの表示ランプがあります. グリーンのランプは動作状
	    態を示し, ローディング中はゆっくり点滅,
	    ローディングが終了すると点灯,
	    read/write動作中は速く点滅します. 黄色のランプは警告灯で,
	    クリーニング
	    が必要であるかまたはテープが寿命に近くなるとゆっくり点滅,
	    致命的なエラー
	    の場合は点灯します(工場での修理が必要かもしれません).
	  </para>

	  <para>報告者:Gary Crutcher
	    <email>gcrutchr@nightflight.com</email></para>
	</sect4>

	<sect4 id="hw-storage-hp1553a">
	  <title>Hewlett-Packard HP C1553A Autoloading DDS2</title>

	  <para>このドライブのブートメッセージの識別子は未確認です.
	  </para>

	  <para>これはテープチェンジャ付の DDS-2テープドライブです.
	    DDS-2 とはデータ容量を増や
	    すためにハードウェア圧縮と狭いトラックを
	    採用したものです.</para>

	  <para>120mテープを使用した場合の標準容量は 24GB です.
	    このドライブはハードウェアデータ圧縮機能があります.</para>

	  <para>データ転送レートは510kB/s (標準) です.</para>

	  <para>このドライブはヒューレットパッカード社の SureStore
	    <ulink url="http://www.dmo.hp.com/tape/sst12000.htm">
	      12000e </ulink> テープドライブに使われています.</para>

	  <para>このドライブはリアパネルに2つの選択スイッチがあります.
	    ファンに近いスイッチは SCSI IDです. もうひとつは
	    7に設定しておきます.</para>

	  <para>内部に 4個のスイッチがあります. これらは  1 ON; 2 ON;
	    3 ON; 4 OFF に設定しておきましょう.</para>

	  <para>現在のカーネルドライバはボリュームの終りで
	    自動的にテープを 交換しません. ここに示す
	    shellスクリプトでテープを交換できます.</para>

	  <programlisting>#!/bin/sh
PATH="/sbin:/usr/sbin:/bin:/usr/bin"; export PATH

usage()
{
      echo "Usage: dds_changer [123456ne] raw-device-name
      echo "1..6 = Select cartridge"
      echo "next cartridge"
      echo "eject magazine"
      exit 2
}

if [ $# -ne 2 ] ; then
    usage
fi

cdb3=0
cdb4=0
cdb5=0

case $1 in
     [123456])
       cdb3=$1
       cdb4=1
       ;;
     n)
       ;;
     e)
       cdb5=0x80
       ;;
     ?)
       usage
       ;;
esac

scsi -f $2 -s 100 -c "1b 0 0 $cdb3 $cdb4 $cdb5"</programlisting>
	</sect4>

	<sect4 id="hw-storage-hp35450a">
	  <title>Hewlett-Packard HP 35450A</title>

	  <para>このドライブのブートメッセージの識別子は <literal>HP
	      HP35450A -A C620</literal> <literal>type 1 removable
	      SCSI 2</literal> <literal>Sequential-Access density code
	      0x13</literal> です.</para>

	  <para>これは DDS-1テープドライブです.  DDS-1 は最初の DAT
	    テープフォーマットです.</para>

	  <para>標準容量は 1.2GBです.</para>

	  <para>データ転送レートは 160kB/sです.</para>

	  <para>報告者: Mark Thompson
	    <email>mark.a.thompson@pobox.com</email></para>
	</sect4>

	<sect4 id="hw-storage-hp35470a">
	  <title>Hewlett-Packard HP 35470A</title>

	  <para>このドライブのブートメッセージの識別子は <literal>HP
	      HP35470A 9 09</literal> <literal>type 1 removable SCSI
	      2</literal>です.</para>

	  <para>これは DDS-1テープドライブです.  DDS-1は最初の DAT
	    テープフォーマットです.</para>

	  <para>90mテープを使用した時の標準容量は 2GBです.</para>

	  <para>データ転送レートは 183kB/sです.</para>

	  <para>これはヒューレットパッカード社の SureStore <ulink
	      url="http://www.dmo.hp.com/tape/sst2000.htm"> 2000i
	    </ulink> テープドライブ, C35470A
	    DDSフォーマットDATドライブ, C1534A
	    DDSフォーマットDATドライブ, HP C1536A DDS
	    フォーマットDATドライブと同 じ機構が使われています.</para>

	  <para><emphasis>注意:</emphasis>
	    これらのドライブの品質管理には非常に大き な幅があります.
	    ある FreeBSDコアチームのメンバは 5台のドライブを返品し
	    ました. 9ヶ月以上もったものはありません.</para>

	  <para>報告者: David Dawes
	    <email>dawes@rf900.physics.usyd.edu.au</email> (9 09)</para>
	</sect4>

	<sect4 id="hw-storage-hp35480a">
	  <title>Hewlett-Packard HP 35480A</title>

	  <para>このドライブのブートメッセージの識別子は <literal>HP
	      HP35480A 1009</literal> <literal>type 1 removable SCSI
	      2</literal> <literal>Sequential-Access density code
	      0x13</literal> です.</para>

	  <para>これは DDS-DCテープドライブです.
	    DDS-DCはハードウェアデータ 圧縮のついたDDS-1です.
	    DDS-1は最初のDATテープフォーマットです.</para>

	  <para>90mテープを使った場合の標準容量は 2GBです.
	    120mテープは使用 できません.
	    このドライブはハードウェア圧縮機能があります.
	    適切なスイッチ設定に関しては, <link
	      linkend="hw-storage-hp1533a">HP C1533A</link>
	    の節を参照してください.</para>

	  <para>データ転送レートは 183kB/sです.</para>

	  <para>このドライブはヒューレットパッカード社の SureStore
	    <ulink url="http://www.dmo.hp.com/tape/sst5000.htm">
	      5000eU </ulink> , <ulink
	      url="http://www.dmo.hp.com/tape/sst5000.htm"> 5000i
	    </ulink> テープドラ イブ,  C35480A DDS フォーマット DAT
	    ドライブと同じ機構を使っています.</para>

	  <para>このドライブは時々, テープの eject操作 (<command>mt
	      offline</command>)
	    を行っている時にハングアップすることがあります.
	    テープをejectさせたり,
	    ドライブを回復させるにはフロントパネルのボタンを
	    押してください.</para>

	  <para>注意: HP 35480-03110 では特有の問題がありました.
	    少なくとも2回, FreeBSD 2.1.0 で IBM Server 320に 2940W
	    SCSIコントローラ
	    をつけてこのドライブを使っている時にすべての
	    SCSIディスクのパーティショ ンが失われたことがあります.
	    この問題は解析も解決もできていません.</para>
	</sect4>

	<sect4 id="hw-storage-sdt5000">
	      <title><ulink url="http://www.sel.sony.com/SEL/ccpg/storage/tape/t5000.html">Sony SDT-5000</ulink></title>

	  <para>これらには少なくとも DDS-1のものと
	    DDS-2のものの2つのモデルが あります. DDS-1のものは
	    <literal>SDT-5000 3.02</literal>です. DDS-2のものは
	    <literal>SONY SDT-5000 327M</literal> です.
	    DDS-2バージョンには 1MBのキャッシュがあります. この
	    キャッシュによりあらゆる状況で
	    テープのデータの流れを途切れさせません.</para>

	  <para>このドライブのブートメッセージの識別子は <literal>SONY
	      SDT-5000 3.02</literal> <literal>type 1 removable SCSI
	      2</literal> <literal>Sequential-Access density code
	      0x13</literal>です.</para>

	  <para>120mテープを使用した場合の標準容量は 4GBです.
	    このドライブ
	    はハードウェアデータ圧縮機能があります.</para>

	  <para>データ転送レートはドライブのモデルによります.
	    <literal>SONY SDT-5000 327M</literal>
	    でデータ圧縮を行った場合のレートは 630kB/s  です.
	    <literal>SONY SDT-5000 3.02</literal>では
	    225kB/sです.</para>

	  <para>Kenneth Merry
	    <email>ken@ulc199.residence.gatech.edu</email> の報告によれば
	    このドライブからデータを読むためには, ブロックサイズを
	    512バイトにしま す (<command>mt blocksize
	      512</command>).</para>

	  <para><literal>SONY SDT-5000 327M</literal> の情報は Charles
	    Henrich <email>henrich@msu.edu</email> による報告です.</para>

	  <para>報告者: &a.jmz;</para>
	</sect4>

	<sect4 id="hw-storage-tandberg3600">
	  <title>Tandberg TDC 3600</title>

	  <para>このドライブのブートメッセージの識別子は
	    <literal>TANDBERG  TDC 3600 =08:</literal> <literal>type 1
	      removable SCSI 2</literal>です.</para>

	  <para>このドライブはQIC テープドライブです.</para>

	  <para>標準容量は150/250MBです.</para>

	  <para>このドライブには奇妙な癖があることが知られていますが,
	    SCSIテープドライバ (&man.st.4;)
	    には問題なく動くコードが含まれてい
	    ます. 問題の修整とSCSI
	    2へのコンパチビリティを得るためにファームウェ アをある
	    (具体的には不明の) バージョンより上にしてください.</para>

	  <para>データ転送レートは80kB/sです.</para>

	  <para>IBMと Emerald製品のユニットは動かないでしょう.
	    問題を解決するためにファームウェア
	    EPROMを交換してください.</para>

	  <para>報告者: &a.msmith;</para>
	</sect4>

	<sect4 id="hw-storage-tandberg3620">
	  <title>Tandberg TDC 3620</title>

	  <para>これは <link
	      linkend="hw-storage-tandberg3600">Tandberg TDC
	      3600</link>ドライ ブに非常によく似ています.</para>

	  <para>報告者: &a.joerg;</para>
	</sect4>

	<sect4 id="hw-storage-tandberg3800">
	  <title>Tandberg TDC 3800</title>

	  <para>このドライブのブートメッセージの識別子は
	    <literal>TANDBERG TDC 3800 =04Y</literal> <literal>Removable
	      Sequential Access SCSI-2 device</literal>
	    です.</para>
	      
	  <para>これは QIC テープドライブです.</para>
	  
	  <para>標準容量は 525MB です.</para>
	  
	  <para>報告者: &a.jhs;</para>
	</sect4>
	
	<sect4 id="hw-storage-tandberg4222">
	  <title>Tandberg TDC 4222</title>

	  <para>このドライブのブートメッセージの識別子は
	    <literal>TANDBERG  TDC 4222 =07</literal> <literal>type 1
	      removable SCSI 2</literal>です.</para>

	  <para>これは QICテープドライブです.</para>

	  <para>標準容量は2.5GBです. このドライブは 60M (DC600A)
	    以上のすべての カートリッジを読むことができ, 150MB
	    (DC6150) 以上のすべてのカートリッジを 読み書きできます.
	    ハードウェア圧縮は 2.5GB カートリッジを使用した時の
	    オプションとしてサポートされています.</para>

	  <para>このドライブには奇妙な癖がありますが, FreeBSD の
	    2.2-CURRENT以降の SCSIテープデバイスドライバ (&man.st.4;)
	    には対応が組み込まれています. それ以前のバージョンの
	    FreeBSDでは<command>mt</command>を用いてテープから1ブロッ
	    ク読み, テープを巻戻してからバックアッププログラムを
	    実行してください. (<command>mt fsr 1; mt rewind; dump
	      ...</command>).</para>

	  <para>データ転送レートは 600kB/s
	    (データ圧縮時のベンダによる公称) で, start/stop モードでも
	    350kB/s にはなります. 容量の小さいカー
	    トリッジを使った場合にはレートは下がります.</para>

	  <para>報告者: &a.joerg;</para>
	</sect4>

	<sect4 id="hw-storage-wangtek5525es">
	       <title>Wangtek 5525ES</title>

	  <para>このドライブのブートメッセージの識別子は
	    <literal>WANGTEK 5525ES SCSI REV7 3R1</literal>
	    <literal>type 1 removable SCSI 1</literal>
	    <literal>density code 0x11, 1024-byte
	      blocks</literal>です.</para>

	  <para>これは QICテープドライブです.</para>

	  <para>標準容量は 525MBです.</para>

	  <para>データ転送レートは 180kB/sです.</para>

	  <para>60, 120, 150, 525MB のテープを読むことができます. 60MB
	    (DC600カートリッジ) には書き込むことはできません.
	    120および150テー プに確実に上書きするには,
	    先にテープを消去 (<command>mt erase</command>) します.
	    120および 150のテープは
	    525MBのテープより幅の広いトラックを使用してい
	    ます(テープ当たりのトラック数は少なくなります).
	    トラックの幅の<quote>外側</quote>には上書きされませんので,
	    テープが消去されない限り 両側に古いデータが残ったまま
	    新しいデータが置かれることになります.</para>

	  <para>このドライブの奇妙な癖は知られていて, SCSI
	    テープドライバ (&man.st.4;) に組み込まれています.</para>

	  <para>他のファームウェアのリビジョンで動くことが
	    確認されているも のは M75Dです.</para>

	  <para>報告者: Marc van Kempen
	    <email>marc@bowtie.nl</email>  <literal>REV73R1</literal>
	    Andrew Gordon <email>Andrew.Gordon@net-tel.co.uk</email>
	    <literal>M75D</literal></para>
	</sect4>

	<sect4 id="hw-storage-wangtek6200">
	  <title>Wangtek 6200</title>

	  <para>このドライブのブートメッセージの識別子は
	    <literal>WANGTEK 6200-HS 4B18</literal> <literal>type 1
	      removable SCSI 2</literal> <literal>Sequential-Access
	      density code 0x13</literal>です.</para>

	  <para>これは DDS-1テープドライブです.</para>

	  <para>90mテープを使用した場合の標準容量は 2GBです.</para>

	  <para>データ転送レートは 150kB/sです.</para>

	  <para>報告者: Tony Kimball <email>alk@Think.COM</email></para>
	</sect4>
      </sect3>

      <sect3>
	<title>* 問題のあるドライブ</title>

	<para></para>
      </sect3>
    </sect2>

    <sect2>
      <title>CDROM ドライブ</title>

      <para><emphasis>原作: &a.obrien;.<!-- <br> -->
	  23 November 1997.</emphasis></para>

      <para><link linkend="hw-jordans-picks-cdrom"> Jordan
	  氏の選んだ組合せ</link> でふれられているように
	<emphasis>FreeBSD プロジェクト</emphasis>では一般的には IDE
	CDROM よりも SCSI CDROM の方が好まれています. しかし全ての
	SCSI  CDROM ドライブが同じであるというわけではありません.
	いくつかの SCSI CDROM ドライブの品質は IDE CDROM
	ドライブよりも 低いものであると感じている人もいます.
	東芝は信頼性が高いという評判が ありましたが, 12倍速の XM-5701A
	は, SCSI メーリングリストでは ( オーディオ CDROM の再生で)
	何種類かのオーディオ再生ソフトウェアで
	ボリュームのコントロールができない, という不満のメールを大量に
	見ることがありました.</para>

      <para>SCSI CDROM のメーカー間の競争のもう一つの局面は,  <link
	  linkend="scsi-further-reading">SCSI
	  規格</link>に対する忠実度です.  多くの SCSI CDROM は
	ターゲットアドレス(ID)の <link
	  linkend="scsi-rogue-devices">マルチ LUN</link> に応答します.
	既知の規格違反デバイスにはティアックの6倍速ドライブ CD-56S
	1.0D があります.</para>
    </sect2>

    <sect2>
      <title>* その他</title>

      <para></para>
    </sect2>
  </sect1>

  <sect1 id="hw-other">
    <title>* その他</title>

    <sect2>
      <title>* PCMCIA</title>

      <para></para>
    </sect2>
  </sect1>
</appendix>

<!--
     Local Variables:
     mode: sgml
     sgml-declaration: "../appendix.decl"
     sgml-indent-data: t
     sgml-omittag: nil
     sgml-always-quote-attributes: t
     sgml-parent-document: ("../book.sgml" "part" "appendix")
     End:
-->
