<!--
     The FreeBSD Documentation Project

     $FreeBSD$
     Original revision: 1.58
-->

<chapter id="users">
  <chapterinfo>
    <authorgroup>
      <author>
        <firstname>Neil</firstname>
	<surname>Blakey-Milner</surname>
	<contrib>Contributed by </contrib>
      </author>
    </authorgroup>
    <!-- Feb 2000 -->
  </chapterinfo>

  <title>使用者與基本帳號管理</title>
  
  <sect1 id="users-synopsis">
    <title>概述</title>
    
    <para>FreeBSD 允許多個使用者同時使用電腦。  當然，
      這並不是很多人同時坐在同一台電腦前
      <footnote>
	<para>Well..除非您連接 multiple terminals，這種情況我們會在 <xref
 	  linkend="serialcomms"> 講到。</para>
      </footnote>，而是其他使用者可以透過網路來使用同一台電腦以完成他們的工作。
	要使用系統的話，那麼每個人都得有一個帳號。</para>
    
    <para>讀完這章，您將了解：</para>

    <itemizedlist>
      <listitem>
	<para>在 FreeBSD 系統上不同帳號之間的區別。</para>
      </listitem>

      <listitem>
	<para>如何增加帳號。</para>
      </listitem>

      <listitem>
	<para>如何刪除帳號。</para>
      </listitem>

      <listitem>
	<para>如何更改帳號的基本資料，像是帳號全名，或是使用的 shell
	  種類。</para>
      </listitem>

      <listitem>
	<para>如何針對帳號、群組來設限，比如：允許存取記憶體或 CPU
	  資源多寡等。</para>
      </listitem>

      <listitem>
	<para>如何運用群組，來更容易地管理帳號。</para>
      </listitem>
    </itemizedlist>

    <para>在開始閱讀這章之前，您需要：</para>

    <itemizedlist>
      <listitem>
	<para>瞭解 &unix; 及 FreeBSD (<xref
	    linkend="basics">)的基礎概念。</para>
      </listitem>
    </itemizedlist>
  </sect1>

  <sect1 id="users-introduction">
    <title>介紹</title>

    <para>系統的所有存取是經由帳號來進行，而所有的程式 process
      是由使用者來進行，所以使用者及帳號的管理，乃是 FreeBSD
      系統上不可或缺的重點。</para>

    <para>所有於 FreeBSD 系統中的帳號皆包含下列相關資訊用來辨識身份。</para>

    <variablelist>
      <varlistentry>
	<term>使用者名稱</term>

	<listitem>
	  <para>使用者名稱要輸入在 <prompt>login:</prompt> 提示出現後。
	    使用者名稱必須是獨一無二，
	    不能有重複的使用者名稱。
	    至於如何建立有效使用者名稱的規則，請參閱 &man.passwd.5; 說明，
	    通常使用者名稱是以八個以內的小寫字母所組成。</para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term>密碼</term>

	<listitem>
	  <para>每個帳號都可擁有一組密碼。  密碼也可以不設，
	    如此就不需密碼即可登入系統，但通常這並非妙策，
	    每個帳號都應設定一組密碼。</para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term>使用者代號 (User ID, UID)</term>

	<listitem>
	  <para>UID 是系統用來辨識使用者的數字，通常範圍是從 0 到 65535 <footnote id="users-largeuidgid">
	      <para>UID/GID 最大可使用至 4294967295，但這樣的 ID
		可能會對已假設範圍的軟體造成嚴重問題。</para>
	  </footnote>。  FreeBSD 內部是使用 UID 來辨識使用者 &mdash; 
	  FreeBSD 在執行任何指定使用者的指令之前，都會先把使用者名稱轉換為
	  UID。  也就是說，比如可以有數個不同的使用者名稱，
	  但是都使用同一個 UID，對 FreeBSD 來說，這些帳號都只代表同一使用者。
	  不過，實際上需要這樣做的可能性不大。</para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term>群組代號 (Group ID, GID)</term>

	<listitem>
	  <para>GID 是系統用來辨識使用者所屬群組的數字，通常範圍是從 0 到 65535<footnoteref linkend="users-largeuidgid">
	    。  用群組來控制資源存取，可有效減少一些設定檔的大小。
	    此外，使用者還可以同時屬於多個不同的群組。</para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term>登入分類(Login classes)</term>

	<listitem>
	  <para>
	    登入分類是群組的延伸機制，
	    提供了不同的使用者更彈性的。</para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term>密碼變更期限</term>

	<listitem>
		<para>FreeBSD 預設並不要求使用者週期性的更改密碼。您可以強制某些或
		全部的使用者在指定的期間過後必須更改密碼。</para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term>帳號期限</term>


	<listitem>
	  <para>FreeBSD 的帳號沒有預設的期限，如果您已知道帳號的使用期限，
		例如，學校中提供學生使用的帳號，可在建立帳號時指定帳號的期限。
		當帳號過期後會無法登入系統，但該帳號的目錄及檔案則會保留。</para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term>使用者全名</term>

	<listitem>
	  <para>FreeBSD 的帳號使用使用者名稱用來辨識，但使用者名稱並不一定代表
	    真實使用者的姓名。為帳號所需的相關資訊。</para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term>家目錄</term>

	<listitem>
	  <para>家目錄為使用者登入系統時的所在目錄的完整路徑。
	   通常會將所有使用者的家目錄放置於
	    <filename>/home/<replaceable>使用者名稱</replaceable></filename>
	    或 <filename>/usr/home/<replaceable>使用者名稱</replaceable></filename>。
	    使用者可以將其個人的資料放置於其家目錄之中，並可以在此目錄底下
		建立新的目錄</para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term>使用者 Shell</term>

	<listitem>
	  <para>Shell 提供預設的環境讓使用者與系統互動。
		Shell 擁有數種不同的種類, 可供進階使用者依使用習慣選擇。</para>
	</listitem>
      </varlistentry>
    </variablelist>
	<!--
		Superuser: 系統管理者帳號
		System users: 系統帳號
		user accounts: 使用者帳號
	-->
    <para>帳號主要分為下列三類: <link
	linkend="users-superuser">系統管理者帳號</link>, <link
	linkend="users-system">系統帳號</link>，及 <link
	linkend="users-user">使用者帳號</link>。 系統管理者帳號的帳號
	  通常為 <username>root</username>，擁有最大的權限來管理系統。
      系統帳號用來執行伺服器服務。最後，使用者帳號供真正的使用者使用，
	  可登入、讀信等等。</para>
  </sect1>
    
  <sect1 id="users-superuser">
    <title>系統管理者帳號</title>
    
    <indexterm>
      <primary>accounts</primary>
      <secondary>superuser (root)</secondary>
    </indexterm>
    <para>The superuser account, usually called
      <username>root</username>, comes preconfigured to facilitate
      system administration, and should not be used for day-to-day
      tasks like sending and receiving mail, general exploration of
      the system, or programming.</para>
      
    <para>This is because the superuser, unlike normal user accounts,
      can operate without limits, and misuse of the superuser account
      may result in spectacular disasters.  User accounts are unable
      to destroy the system by mistake, so it is generally best to use
      normal user accounts whenever possible, unless you especially
      need the extra privilege.</para>

    <para>You should always double and triple-check commands you issue
      as the superuser, since an extra space or missing character can
      mean irreparable data loss.</para>

    <para>So, the first thing you should do after reading this
      chapter is to create an unprivileged user account for yourself
      for general usage if you have not already.  This applies equally
      whether you are running a multi-user or single-user machine.
      Later in this chapter, we discuss how to create additional
      accounts, and how to change between the normal user and
      superuser.</para>
  </sect1>
    
  <sect1 id="users-system">
    <title>系統帳號</title>

    <indexterm>
      <primary>accounts</primary>
      <secondary>system</secondary>
    </indexterm>
    <para>System users are those used to run services such as DNS,
      mail, web servers, and so forth.  The reason for this is
      security; if all services ran as the superuser, they could
      act without restriction.</para>

    <indexterm>
      <primary>accounts</primary>
      <secondary><username>daemon</username></secondary>
    </indexterm>
    <indexterm>
      <primary>accounts</primary>
      <secondary><username>operator</username></secondary>
    </indexterm>
    <para>Examples of system users are <username>daemon</username>,
      <username>operator</username>, <username>bind</username> (for
      the Domain Name Service), <username>news</username>, and
      <username>www</username>.</para>

    <indexterm>
      <primary>accounts</primary>
      <secondary><username>nobody</username></secondary>
    </indexterm>
    <para><username>nobody</username> is the generic unprivileged
      system user.  However, it is important to keep in mind that the
      more services that use <username>nobody</username>, the more
      files and processes that user will become associated with, and
      hence the more privileged that user becomes.</para>
  </sect1>

  <sect1 id="users-user">
    <title>使用者帳號</title>

    <indexterm>
      <primary>accounts</primary>
      <secondary>user</secondary>
    </indexterm>
    <para>User accounts are the primary means of access for real
      people to the system, and these accounts insulate the user and
      the environment, preventing the users from damaging the system
      or other users, and allowing users to customize their
      environment without affecting others.</para>

    <para>Every person accessing your system should have a unique user
      account.  This allows you to find out who is doing what, prevent
      people from clobbering each others' settings or reading each
      others' mail, and so forth.</para>

    <para>Each user can set up their own environment to accommodate
      their use of the system, by using alternate shells, editors, key
      bindings, and language.</para>
  </sect1>

  <sect1 id="users-modifying">
    <title>更改帳號</title>

    <indexterm>
      <primary>accounts</primary>
      <secondary>modifying</secondary>
    </indexterm>

    <para>在 &unix; 的環境之中提供了各式不同的指令管理使用者帳號，
	  以下為較常使用的指令摘要及更詳細的使用範例。
	 </para>

    <informaltable frame="none" pgwide="1">
      <tgroup cols="2">
	<colspec colwidth="1*">
	<colspec colwidth="2*">

	<thead>
	  <row>
	    <entry>指令</entry>
	    <entry>摘要</entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry>&man.adduser.8;</entry>
	    <entry>新增使用者。</entry>
	  </row>
	  <row>
	    <entry>&man.rmuser.8;</entry>
	    <entry>移除使用者。</entry>
	  </row>
	  <row>
	    <entry>&man.chpass.1;</entry>
	    <entry>更改使用者資料。</entry>
	  </row>
	  <row>
	    <entry>&man.passwd.1;</entry>
	    <entry>更改使用者密碼。</entry>
	  </row>
	  <row>
	    <entry>&man.pw.8;</entry>
	    <entry>修改使用者的各種資料。</entry>
	  </row>
	</tbody>
      </tgroup>
    </informaltable>

    <sect2 id="users-adduser">
      <title><command>adduser</command></title>

      <indexterm>
        <primary>accounts</primary>
        <secondary>adding</secondary>
      </indexterm>
      <indexterm>
        <primary><command>adduser</command></primary>
      </indexterm>
      <indexterm>
        <primary><filename class="directory">/usr/share/skel</filename></primary>
      </indexterm>
      <indexterm><primary>skeleton directory</primary></indexterm>
      <para>&man.adduser.8; 是一支新增使用者的簡單程式。
	它會建立資料於系統的	<filename>passwd</filename> 與
	<filename>group</filename>
	檔案之中。 同時也會建立使用者的家目錄，從 <filename>
	/usr/share/skel</filename> 複製預設的組態檔(<quote>dotfiles</quote>)，
	並可以選擇性的郵件通知新使用者歡迎訊息。</para>

      <example>
	<title>在 &os; 內新增使用者</title>

	<screen>&prompt.root; <userinput>adduser</userinput>
Username: <userinput>jru</userinput>
Full name: <userinput>J. Random User</userinput>
Uid (Leave empty for default):
Login group [jru]:
Login group is jru. Invite jru into other groups? []: <userinput>wheel</userinput>
Login class [default]:
Shell (sh csh tcsh zsh nologin) [sh]: <userinput>zsh</userinput>
Home directory [/home/jru]:
Use password-based authentication? [yes]:
Use an empty password? (yes/no) [no]:
Use a random password? (yes/no) [no]:
Enter password:
Enter password again:
Lock out the account after creation? [no]:
Username   : jru
Password   : ****
Full Name  : J. Random User
Uid        : 1001
Class      :
Groups     : jru wheel
Home       : /home/jru
Shell      : /usr/local/bin/zsh
Locked     : no
OK? (yes/no): <userinput>yes</userinput>
adduser: INFO: Successfully added (jru) to the user database.
Add another user? (yes/no): <userinput>no</userinput>
Goodbye!
&prompt.root;</screen>
      </example>

      <note>
	<para>您輸入的密碼並不會回應到螢幕，所以不會以星號顯示
	。  請確定您所輸入的密碼無誤。</para>
      </note>
    </sect2>

    <sect2 id="users-rmuser">
      <title><command>rmuser</command></title>

      <indexterm><primary><command>rmuser</command></primary></indexterm>
      <indexterm>
        <primary>accounts</primary>
        <secondary>removing</secondary>
      </indexterm>

      <para>您可以使用 &man.rmuser.8; 來將使用者從系統之中完全移除
	&man.rmuser.8; 會執行以下動作:</para>

      <procedure>
	<step>
	  <para>移除該使用者的 &man.crontab.1; 資料 (如果存在)。</para>
	</step>
	<step>
	  <para>移除所有屬於該使用者的 &man.at.1; 工作。</para>
	</step>
	<step>
	  <para>中止所有該使用者擁有的程序。</para>
	</step>
	<step>
	  <para>移除系統本機密碼檔中該使用者的資料。</para>
	</step>
	<step>
	  <para>移除該使用者的家目錄 (如果為該使用者所有)。</para>
	</step>
	<step>
	  <para>移除 <filename>/var/mail</filename> 中屬於該使用者的郵件。</para>
	</step>
	<step>
	  <para>移除暫存空間 (如: <filename>/tmp</filename>) 中所有屬於該使用者的檔案。</para>
	</step>
	<step>
	  <para>最後，在 <filename>/etc/group</filename> 檔內移除該使用者帳號。
	    </para>

	    <note>
	      <para>若該群組已無成員，或者是群組名稱與該使用者名稱相同時，
		則群組將會被移除；  此操作會與 &man.adduser.8;
		所建立的帳號群組相對應。</para>
	    </note>
	</step>
      </procedure>

      <para>&man.rmuser.8; 無法移除系統管理者帳號帳號，
	  因為這即代表嚴重的破壞行為。</para>

      <para>為了確認您的操作，預設採互動模式。</para>

      <example>
	<title><command>rmuser</command> 帳號移除</title>

	<screen>&prompt.root; <userinput>rmuser jru</userinput>
Matching password entry:
jru:*:1001:1001::0:0:J. Random User:/home/jru:/usr/local/bin/zsh
Is this the entry you wish to remove? <userinput>y</userinput>
Remove user's home directory (/home/jru)? <userinput>y</userinput>
Updating password file, updating databases, done.
Updating group file: trusted (removing group jru -- personal group is empty) done.
Removing user's incoming mail file /var/mail/jru: done.
Removing files belonging to jru from /tmp: done.
Removing files belonging to jru from /var/tmp: done.
Removing files belonging to jru from /var/tmp/vi.recover: done.
&prompt.root;</screen>
      </example>
    </sect2>

    <sect2 id="users-chpass">
      <title><command>chpass</command></title>

      <indexterm><primary><command>chpass</command></primary></indexterm>
      <para>&man.chpass.1; 可更改使用者資料如: 密碼、Shell及個人資訊。</para>

      <para>僅系統管理者即系統管理者帳號可利用 &man.chpass.1; 更改其他使用者的資訊及密碼</para>

      <para>除了指定使用者名稱，當不加參數時，&man.chpass.1; 會將使用者資訊顯示於編輯器當中。
	並於使用者離開編輯器時更新使用者資訊。</para>

      <note>
	<para>若您並非系統管理者帳號，在離開編輯器前會詢問您的密碼。</para>
      </note>

      <example>
	<title>系統管理者帳號 <command>chpass</command></title>

	<screen>#Changing user database information for jru.
Login: jru
Password: *
Uid [#]: 1001
Gid [# or name]: 1001
Change [month day year]:
Expire [month day year]:
Class:
Home directory: /home/jru
Shell: /usr/local/bin/zsh
Full Name: J. Random User
Office Location:
Office Phone:
Home Phone:
Other information:</screen>
      </example>

      <para>一般使用者僅可更改自己的少部份資訊。</para>

      <example>
	<title>一般使用者 <command>chpass</command></title>

	<screen>#Changing user database information for jru.
Shell: /usr/local/bin/zsh
Full Name: J. Random User
Office Location:
Office Phone:
Home Phone:
Other information:</screen>
      </example>

      <note>
	<para>&man.chfn.1; 與 &man.chsh.1; 即為 &man.chpass.1;，也同 
	  &man.ypchpass.1;、&man.ypchfn.1; 與 &man.ypchsh.1;。
	  NIS 支援是自動的，所以無需在指令前加上 <literal>yp</literal>。
	  若這會困擾您，請不必擔心，<xref linkend="network-servers"> 將函蓋 NIS 的部份的說明。</para>
      </note>
    </sect2>
    <sect2 id="users-passwd">
      <title><command>passwd</command></title>

      <indexterm><primary><command>passwd</command></primary></indexterm>
      <indexterm>
        <primary>accounts</primary>
        <secondary>changing password</secondary>
      </indexterm>
      <para>&man.passwd.1; 是更改密碼常用的方式，除了超級管理者可更改其他使用者的密碼外
	  使用者僅能更改自己的密碼。</para>

      <note>
	<para>為了避免意外或未經同意的修改，在更新密碼前需輸入原密碼。</para>
      </note>

      <example>
	<title>更改您的密碼</title>

	<screen>&prompt.user; <userinput>passwd</userinput>
Changing local password for jru.
Old password:
New password:
Retype new password:
passwd: updating the database...
passwd: done</screen>
      </example>

      <example>
	<title>以系統管理者帳號去更改其他使用者的密碼</title>

        <screen>&prompt.root; <userinput>passwd jru</userinput>
Changing local password for jru.
New password:
Retype new password:
passwd: updating the database...
passwd: done</screen>
      </example>

      <note>
	<para>&man.chpass.1;、
	  &man.yppasswd.1; 即為 &man.passwd.1;，皆支援 NIS。</para>
      </note>
    </sect2>


    <sect2 id="users-pw">
      <title><command>pw</command></title>
      <indexterm><primary><command>pw</command></primary></indexterm>

      <para>&man.pw.8; 用來建立、移除、修改及查詢使用者及群組。
	其功能即為系統使用者及群組檔案的前端。&man.pw.8; 擁有大量的指令參數
	較適合使用於 shell script 中，對新手來說會此指令較其他指令複雜許多。
	</para>
    </sect2>


  </sect1>

  <sect1 id="users-limiting">
    <title>使用者資源限制</title>

    <indexterm><primary>limiting users</primary></indexterm>
    <indexterm>
      <primary>accounts</primary>
      <secondary>limiting</secondary>
    </indexterm>
	<!--
		login class: 登入分級
		login capability: 登入容量
	-->
    <para>
	  若您擁有許多使用者，接下會想到該如何限制使用的資源。
	  FreeBSD 提供管理者許多方法來限制系統的資源給每個人使用。
	  這些限制分為兩個部份: 磁碟限額，以及其他資源限制。
	 </para>

    <indexterm><primary>quotas</primary></indexterm>
    <indexterm>
      <primary>limiting users</primary>
      <secondary>quotas</secondary>
    </indexterm>
    <indexterm><primary>disk quotas</primary></indexterm>
    <para>磁碟限額可以限制使用者的磁碟用量，
	  它提供了一種方法可以快速的檢查並計算用量
	  而不需每次重新計算，
	  關於磁碟限額將於 <xref linkend="quotas"> 會討論。</para>

    <para>其他資源限制包含了 CPU、記憶體、以及其他每個使用者可使用
	  的資源做限制，這些限制可使用 Login class 來定義並於在本章討論。</para>

    <indexterm>
      <primary><filename>/etc/login.conf</filename></primary>
    </indexterm>
    <para>Login class 定義於
      <filename>/etc/login.conf</filename>。 明確語意不會在本節說明
	  但詳細的描述會在 &man.login.conf.5; 文件中。 每使用者預設被
	  分配到一個 Login class 中 (預設為 <literal>default</literal>)，
	  而每個 Login class 都有其資源的限制(Login capabilitiy)。
	  Login capabilitiy 以 <literal><replaceable>名稱</replaceable>=<replaceable>值</replaceable></literal> 成對，
	  <replaceable>名稱</replaceable> 代表資源的種類，而 <replaceable>值</replaceable>
	  為任意的字串，為對應名稱的參數。 設定 Login class 及 Login capability 相當簡單，並同樣在
	  &man.login.conf.5; 中詳細說明。</para>
      
    <note>
      <para>系統不會直接讀取 <filename>/etc/login.conf</filename> 的組態
	  而是讀取提供查詢較快的 <filename>/etc/login.conf.db</filename> 資料庫檔。
	  要從 <filename>/etc/login.conf</filename> 產生 <filename>/etc/login.conf.db</filename> 
	  需要執行以下指令:</para>

      <screen>&prompt.root; <userinput>cap_mkdb /etc/login.conf</userinput></screen>
    </note>

    <para>資源限制於一般的 Login capability 有兩點不同。
	  第一，每種限制分為軟性限制及硬性限制。
	  軟性限制可由使用者或應用程式調整，但不能高於硬性限制。
	  後者限制可被使用者降低，但無法再提高。
	  第二，多數資源限制是針對每個使用者的個別行程限制，而不是使用者的所有行程。
	  注意，這些差異是由指定的限制程式托管，並非實作於 Login capability 的架構
	  (例如，這些不是 <emphasis>真正</emphasis> 登入容量的特例)。</para>

    <para>另外，為了避免麻煩，以下為幾個常用的資源限制
	  (剩下及其他的 Login capability 可在 &man.login.conf.5; 中找到說明)。</para>

    <variablelist>
      <varlistentry>
        <term><literal>coredumpsize</literal></term>

	<listitem>
    <indexterm><primary>coredumpsize</primary></indexterm>
    <indexterm>
      <primary>limiting users</primary>
      <secondary>coredumpsize</secondary>
    </indexterm>
	  <para>The limit on the size of a core file generated by a program
	  is, for obvious reasons, subordinate to other limits on disk
	  usage (e.g., <literal>filesize</literal>, or disk quotas).
	  Nevertheless, it is often used as a less-severe method of
	  controlling disk space consumption: since users do not generate
	  core files themselves, and often do not delete them, setting this
	  may save them from running out of disk space should a large
	  program (e.g., <application>emacs</application>) crash.</para>
	</listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>cputime</literal></term>

	<listitem>
    <indexterm><primary>cputime</primary></indexterm>
    <indexterm>
      <primary>limiting users</primary>
      <secondary>cputime</secondary>
    </indexterm>
	  <para>This is the maximum amount of CPU time a user's process may
	    consume.  Offending processes will be killed by the kernel.</para>

	    <note>
	      <para>This is a limit on CPU <emphasis>time</emphasis>
	        consumed, not percentage of the CPU as displayed in some
	        fields by &man.top.1; and &man.ps.1;.  A limit on the
	        latter is, at the time of this writing, not possible, and
	        would be rather useless: a compiler&mdash;probably a
	        legitimate task&mdash;can easily use almost 100% of a CPU
	        for some time.</para>
	    </note>
	</listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>filesize</literal></term>

	<listitem>
    <indexterm><primary>filesize</primary></indexterm>
    <indexterm>
      <primary>limiting users</primary>
      <secondary>filesize</secondary>
    </indexterm>
	  <para>This is the maximum size of a file the user may possess.
	    Unlike <link linkend="quotas">disk quotas</link>, this limit is
	    enforced on individual files, not the set of all files a user
	    owns.</para>
	</listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>maxproc</literal></term>

	<listitem>
    <indexterm><primary>maxproc</primary></indexterm>
        <indexterm>
      <primary>limiting users</primary>
      <secondary>maxproc</secondary>
    </indexterm>
	  <para>This is the maximum number of processes a user may be
	    running.  This includes foreground and background processes
	    alike.  For obvious reasons, this may not be larger than the
	    system limit specified by the <varname>kern.maxproc</varname>
	    &man.sysctl.8;.  Also note that setting this 
	    too small may hinder a
	    user's productivity: it is often useful to be logged in
	    multiple times or execute pipelines.  Some tasks, such as
	    compiling a large program, also spawn multiple processes (e.g.,
	    &man.make.1;, &man.cc.1;, and other intermediate
	    preprocessors).</para>
	</listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>memorylocked</literal></term>

	<listitem>
    <indexterm><primary>memorylocked</primary></indexterm>
    <indexterm>
      <primary>limiting users</primary>
      <secondary>memorylocked</secondary>
    </indexterm>
	  <para>This is the maximum amount a memory a process may have
	    requested to be locked into main memory (e.g., see
	    &man.mlock.2;).  Some system-critical programs, such as
            &man.amd.8;, lock into main memory such that in the event
	    of being swapped out, they do not contribute to
	    a system's trashing in time of trouble.</para>
	</listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>memoryuse</literal></term>

	<listitem>
    <indexterm><primary>memoryuse</primary></indexterm>
    <indexterm>
      <primary>limiting users</primary>
      <secondary>memoryuse</secondary>
    </indexterm>
	  <para>This is the maximum amount of memory a process may consume
	    at any given time.  It includes both core memory and swap
	    usage.  This is not a catch-all limit for restricting memory
	    consumption, but it is a good start.</para>
	</listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>openfiles</literal></term>

	<listitem>
    <indexterm><primary>openfiles</primary></indexterm>
    <indexterm>
      <primary>limiting users</primary>
      <secondary>openfiles</secondary>
    </indexterm>
	  <para>This is the maximum amount of files a process may have
	    open.  In FreeBSD, files are also used to represent sockets and
	    IPC channels; thus, be careful not to set this too low.  The
	    system-wide limit for this is defined by the
	    <varname>kern.maxfiles</varname> &man.sysctl.8;.</para>
	</listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>sbsize</literal></term>

	<listitem>
    <indexterm><primary>sbsize</primary></indexterm>
    <indexterm>
      <primary>limiting users</primary>
      <secondary>sbsize</secondary>
    </indexterm>
	  <para>This is the limit on the amount of network memory, and thus
	    mbufs, a user may consume.  This originated as a response to an
	    old DoS attack by creating a lot of sockets, but can be
	    generally used to limit network communications.</para>
	</listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>stacksize</literal></term>

	<listitem>
    <indexterm><primary>stacksize</primary></indexterm>
    <indexterm>
      <primary>limiting users</primary>
      <secondary>stacksize</secondary>
    </indexterm>
	  <para>This is the maximum size a process' stack may grow to.
	    This alone is not sufficient to limit the amount of memory a
	    program may use; consequently, it should be used in conjunction
	    with other limits.</para>
	</listitem>
      </varlistentry>
    </variablelist>

    <para>There are a few other things to remember when setting resource
      limits.  Following are some general tips, suggestions, and
      miscellaneous comments.</para>

    <itemizedlist>
      <listitem>
        <para>Processes started at system startup by
          <filename>/etc/rc</filename> are assigned to the
          <literal>daemon</literal> login class.</para>
      </listitem>

      <listitem>
        <para>Although the <filename>/etc/login.conf</filename> that comes
          with the system is a good source of reasonable values for most
          limits, only you, the administrator, can know what is appropriate
          for your system.  Setting a limit too high may open your system
          up to abuse, while setting it too low may put a strain on
          productivity.</para>
      </listitem>

      <listitem>
        <para>Users of the X Window System (X11) should probably be granted
	  more resources than other users.  X11 by itself takes a lot of
	  resources, but it also encourages users to run more programs
	  simultaneously.</para>
      </listitem>

      <listitem>
        <para>Remember that many limits apply to individual processes, not
          the user as a whole.  For example, setting 
	  <varname>openfiles</varname> to 50 means
          that each process the user runs may open up to 50 files.  Thus,
          the gross amount of files a user may open is the value of
          <literal>openfiles</literal> multiplied by the value of
          <literal>maxproc</literal>.  This also applies to memory
          consumption.</para>
      </listitem>
    </itemizedlist>

    <para>For further information on resource limits and login classes and
      capabilities in general, please consult the relevant manual pages:
      &man.cap.mkdb.1;, &man.getrlimit.2;, &man.login.conf.5;.</para>
  </sect1>

  <sect1 id="users-groups">
    <title>群組</title>

    <indexterm><primary>groups</primary></indexterm>
    <indexterm>
      <primary><filename>/etc/groups</filename></primary>
    </indexterm>
    <indexterm>
      <primary>accounts</primary>
      <secondary>groups</secondary>
    </indexterm>
    <para>A group is simply a list of users.  Groups are identified by
      their group name and GID (Group ID).  In FreeBSD (and most other &unix; like
      systems), the two factors the kernel uses to decide whether a process
      is allowed to do something is its user ID and list of groups it
      belongs to.  Unlike a user ID, a process has a list of groups
      associated with it.  You may hear some things refer to the <quote>group ID</quote>
      of a user or process; most of the time, this just means the first
      group in the list.</para>

    <para>The group name to group ID map is in
      <filename>/etc/group</filename>.  This is a plain text file with four
      colon-delimited fields.  The first field is the group name, the
      second is the encrypted password, the third the group ID, and the
      fourth the comma-delimited list of members.  It can safely be edited
      by hand (assuming, of course, that you do not make any syntax
      errors!).  For a more complete description of the syntax, see the
      &man.group.5; manual page.</para>

    <para>If you do not want to edit <filename>/etc/group</filename>
      manually, you can use the &man.pw.8; command to add and edit groups.
      For example, to add a group called <groupname>teamtwo</groupname> and
      then confirm that it exists you can use:</para>

    <example>
      <title>Adding a Group Using &man.pw.8;</title>

      <screen>&prompt.root; <userinput>pw groupadd teamtwo</userinput>
&prompt.root; <userinput>pw groupshow teamtwo</userinput>
teamtwo:*:1100:</screen>
    </example>

    <para>The number <literal>1100</literal> above is the group ID of the
      group <groupname>teamtwo</groupname>.  Right now,
      <groupname>teamtwo</groupname> has no members, and is thus rather
      useless.  Let's change that by inviting <username>jru</username> to
      the <groupname>teamtwo</groupname> group.</para>

    <example>
      <title>Adding Somebody to a Group Using &man.pw.8;</title>

      <screen>&prompt.root; <userinput>pw groupmod teamtwo -M jru</userinput>
&prompt.root; <userinput>pw groupshow teamtwo</userinput>
teamtwo:*:1100:jru</screen>
    </example>

    <para>The argument to the <option>-M</option> option is a
      comma-delimited list of users who are members of the group.  From the
      preceding sections, we know that the password file also contains a
      group for each user.  The latter (the user) is automatically added to
      the group list by the system; the user will not show up as a member
      when using the <option>groupshow</option> command to &man.pw.8;,
      but will show up when the information is queried via &man.id.1; or
      similar tool.  In other words, &man.pw.8; only manipulates the
      <filename>/etc/group</filename> file; it will never attempt to read
      additionally data from <filename>/etc/passwd</filename>.</para>

    <example>
      <title>Using &man.id.1; to Determine Group Membership</title>

      <screen>&prompt.user; <userinput>id jru</userinput>
uid=1001(jru) gid=1001(jru) groups=1001(jru), 1100(teamtwo)</screen>
    </example>

    <para>As you can see, <username>jru</username> is a member of the
      groups <groupname>jru</groupname> and
      <groupname>teamtwo</groupname>.</para>

    <para>For more information about &man.pw.8;, see its manual page, and
      for more information on the format of
      <filename>/etc/group</filename>, consult the &man.group.5; manual
      page.</para>
  </sect1>
</chapter>

<!-- 
     Local Variables:
     mode: sgml
     sgml-declaration: "../chapter.decl"
     sgml-indent-data: t
     sgml-omittag: nil
     sgml-always-quote-attributes: t
     sgml-parent-document: ("../book.sgml" "part" "chapter")
     End:
-->
