<!--
     The FreeBSD Documentation Project
     The FreeBSD German Documentation Project

     $FreeBSD$
     $FreeBSDde: de-docproj/books/developers-handbook/secure/chapter.sgml,v 1.16 2010/12/18 13:28:29 jkois Exp $
     basiert auf: 1.30
-->

<chapter id="secure">
  <chapterinfo>
    <authorgroup>
      <author>
	<firstname>Murray</firstname>
	<surname>Stokely</surname>
	<contrib>Contributed by </contrib>
      </author>
    </authorgroup>
    <authorgroup>
      <author>
	<firstname>Hagen</firstname>
	<surname>K&uuml;hl</surname>
	<contrib>&Uuml;bersetzt von </contrib>
      </author>
    </authorgroup>
  </chapterinfo>

  <title>Sicheres Programmieren</title>

  <sect1 id="secure-synopsis">
    <title>Zusammenfassung</title>

    <para>Dieses Kapitel beschreibt einige Sicherheitsprobleme, die
      &unix;-Programmierer seit Jahrzehnten qu&auml;len, und
      inzwischen verf&uuml;gbare Werkzeuge, die Programmierern helfen,
      Sicherheitsl&uuml;cken in ihrem Quelltext zu vermeiden.</para>
  </sect1>

  <sect1 id="secure-philosophy">
    <title>Methoden des sicheren Entwurfs</title>

    <para>Sichere Anwendungen zu schreiben erfordert eine sehr
      skeptische und pessimistische Lebenseinstellung. Anwendungen
      sollten nach dem Prinzip der <quote>geringsten
      Privilegien</quote> ausgef&uuml;hrt werden, sodass kein Prozess
      mit mehr als dem absoluten Minimum an Zugriffsrechten arbeitet,
      die er zum Erf&uuml;llen seiner Aufgabe ben&ouml;tigt. Wo es
      m&ouml;glich ist, sollte Quelltext, der bereits
      &uuml;berpr&uuml;ft wurde, wiederverwendet werden, um
      h&auml;ufige Fehler, die andere schon korrigiert haben, zu
      vermeiden.</para>

    <para>Eine der Stolperfallen der &unix;-Umgebung ist, dass es
      sehr einfach ist Annahmen &uuml;ber die Konsistenz der Umgebung
      zu machen. Anwendungen sollten Nutzereingaben (in allen Formen)
      niemals trauen, genauso wenig wie den System-Ressourcen,
      der Inter-Prozess-Kommunikation oder dem zeitlichen Ablauf von
      Ereignissen. &unix;-Prozesse arbeiten nicht synchron. Daher sind
      logische Operationen selten atomar.</para>
  </sect1>

  <sect1 id="secure-bufferov">
    <title>Puffer-&Uuml;berl&auml;ufe</title>

    <para>Puffer-&Uuml;berl&auml;ufe gibt es schon seit den
      Anf&auml;ngen der Von-Neuman-Architektur <xref linkend="COD">.

      <indexterm><primary>Puffer-&Uuml;berlauf</primary></indexterm>
      <indexterm><primary>Von-Neuman</primary></indexterm>

      Sie erlangten zum ersten Mal durch den Internetwurm Morris im
      Jahre 1988 &ouml;ffentliche Bekanntheit. Ungl&uuml;cklicherweise

      <indexterm><primary>Morris Internetwurm</primary></indexterm>

      funktioniert der gleiche grundlegende Angriff noch heute.  Die bei weitem
      h&auml;ufigste Form eines Puffer-&Uuml;berlauf-Angriffs basiert darauf, 
      den Stack zu korrumpieren.</para>

    <indexterm><primary>Stack</primary></indexterm>
    <indexterm><primary>Arguments</primary></indexterm>

    <para>Die meisten modernen Computer-Systeme verwenden einen
      Stack, um Argumente an Prozeduren zu &uuml;bergeben und
      lokale Variablen zu speichern. Ein Stack ist ein
      last-in-first-out-Puffer (LIFO) im hohen Speicherbereich
      eines Prozesses. Wenn ein Programm eine Funktion

      <indexterm><primary>LIFO</primary></indexterm>
      <indexterm>
	<primary>Prozessabbild</primary>
	<secondary>Stack-Pointer</secondary>
      </indexterm>

      aufruft wird ein neuer "Stackframe" erzeugt. Dieser besteht aus
      den Argumenten, die der Funktion &uuml;bergeben wurden und
      einem variabel grossem Bereich f&uuml;r lokale Variablen. Der
      "Stack-Pointer" ist ein Register, dass die

      <indexterm><primary>Stack-Frame</primary></indexterm>
      <indexterm><primary>Stack-Pointer</primary></indexterm>

      aktuelle Adresse der Stack-Spitze enth&auml;lt.
      Da sich dieser Wert oft &auml;ndert, wenn neue Werte
      auf dem Stack abgelegt werden, bieten viele Implementierungen
      einen "Frame-Pointer", der nahe am Anfang des Stack-Frames
      liegt und es so leichter macht lokale Variablen relativ zum
      aktuellen Stackframe zu adressieren. <xref linkend="COD">
      Die R&uuml;cksprungadresse

      <indexterm><primary>Frame-Pointer</primary></indexterm>
      <indexterm>
	<primary>Prozessabbild</primary>
	<secondary>Frame-Pointer</secondary>
      </indexterm>
      <indexterm><primary>R&uuml;cksprungadresse</primary></indexterm>
      <indexterm><primary>Stack-&Uuml;berlauf</primary></indexterm>

      der Funktionen werden ebenfalls auf dem Stack
      gespeichert und das ist der Grund f&uuml;r
      Stack-&Uuml;berlauf-Exploits. Denn ein b&ouml;swilliger Nutzer
      kann die R&uuml;cksprungadresse der Funktion &uuml;berschreiben
      indem er eine lokale Variable in der Funktion
      &uuml;berlaufen l&auml;sst, wodurch es ihm m&ouml;glich ist
      beliebigen Code auszuf&uuml;hren.</para>

    <para>Obwohl Stack-basierte Angriffe bei weitem die
      H&auml;ufigsten sind, ist es auch m&ouml;glich den Stack mit
      einem Heap-basierten (malloc/free) Angriff zu
      &uuml;berschreiben.</para>

    <para>Die C-Programmiersprache f&uuml;hrt keine automatischen
      Bereichs&uuml;berpr&uuml;fungen bei Feldern oder Zeigern durch, wie
      viele andere Sprachen das tun. Au&szlig;erdem enth&auml;lt
      die C-Standardbibliothek eine Handvoll sehr
      gef&auml;hrlicher Funktionen.</para>

    <informaltable frame="none" pgwide="1">
      <tgroup cols="2">
	<tbody>
	  <row>
	    <entry><function>strcpy</function>(char *dest, const
	      char *src)</entry>
	    <entry><simpara>Kann den Puffer dest &uuml;berlaufen
	      lassen</simpara></entry>
	  </row>

	  <row>
	    <entry><function>strcat</function>(char *dest, const
	      char *src)</entry>
	    <entry><simpara>Kann den Puffer dest &uuml;berlaufen
	      lassen</simpara></entry>
	  </row>

	  <row>
	    <entry><function>getwd</function>(char *buf)</entry>
	    <entry><simpara>Kann den Puffer buf &uuml;berlaufen
	      lassen</simpara></entry>
	  </row>

	  <row>
	    <entry><function>gets</function>(char *s)</entry>
	    <entry><simpara>Kann den Puffer s &uuml;berlaufen
	      lassen</simpara></entry>
	  </row>

	  <row>
	    <entry><function>[vf]scanf</function>(const char
	      *format, ...)</entry>
	    <entry><simpara>Kann sein Argument &uuml;berlaufen
	      lassen</simpara></entry>
	  </row>

	  <row>
	    <entry><function>realpath</function>(char *path,
	      char resolved_path[])</entry>
	    <entry><simpara>Kann den Puffer path &uuml;berlaufen
	      lassen</simpara></entry>
	  </row>

	  <row>
	    <entry><function>[v]sprintf</function>(char *str,
	      const char *format, ...)</entry>
	    <entry><simpara>Kann den Puffer str &uuml;berlaufen
	      lassen</simpara></entry>
	  </row>
	</tbody>
      </tgroup>
    </informaltable>

    <sect2>
      <title>Puffer-&Uuml;berlauf Beispiel</title>

      <para>Das folgende Quellcode-Beispiel enth&auml;lt einen
	Puffer-&Uuml;berlauf, der darauf ausgelegt ist die
	R&uuml;cksprungadresse zu &uuml;berschreiben und die
	Anweisung direkt nach dem Funktionsaufruf zu
	&uuml;berspringen. (Inspiriert durch
	<xref linkend="Phrack">)</para>

      <programlisting>#include &lt;stdio.h&gt;

void manipulate(char *buffer) {
char newbuffer[80];
strcpy(newbuffer,buffer);
}

int main() {
char ch,buffer[4096];
int i=0;

while ((buffer[i++] = getchar()) != '\n') {};

i=1;
manipulate(buffer);
i=2;
printf("The value of i is : %d\n",i);
return 0;
}</programlisting>

      <para>Betrachten wir nun, wie das Speicherabbild dieses
	Prozesses aussehen w&uuml;rde, wenn wir 160 Leerzeichen
	in unser kleines Programm eingeben, bevor wir Enter
	dr&uuml;cken.</para>

      <para>[XXX figure here!]</para>

      <para>Offensichtlich kann man durch b&ouml;swilligere Eingaben
	bereits kompilierten Programmtext ausf&uuml;hren (wie z.B.
	exec(/bin/sh)).</para>
    </sect2>

    <sect2>
      <title>Puffer-&Uuml;berl&auml;ufe vermeiden</title>

      <para>Die direkteste L&ouml;sung, um
	Stack-&Uuml;berl&auml;ufe zu vermeiden, ist immer
	gr&ouml;ssenbegrenzten Speicher und String-Copy-Funktionen
	zu verwenden.
	<function>strncpy</function> und <function>strncat</function>
	sind Teil der C-Standardbibliothek.

	<indexterm>
	  <primary>Zeichenketten-Kopierfunktioen</primary>
	  <secondary>strncpy</secondary>
	</indexterm>
	<indexterm>
	  <primary>Zeichenketten-Kopierfunktionen</primary>
	  <secondary>strncat</secondary>
	</indexterm>

	Diese Funktionen akzeptieren einen L&auml;ngen-Parameter. Dieser
	Wert sollte nicht gr&ouml;&szlig;er sein als die L&auml;nge
	des Zielpuffers. Die Funktionen kopieren dann bis zu
	`length' Bytes von der Quelle zum Ziel. Allerdings gibt es
	einige Probleme. Keine der Funktionen garantiert, dass
	die Zeichenkette NUL-terminiert ist, wenn die
	Gr&ouml;&szlig;e

	<indexterm><primary>NUL-Terminierung</primary></indexterm>

	des Eingabepuffers so gro&szlig; ist wie das Ziel.
	Au&szlig;erdem wird der Parameter length zwischen strncpy
	und strncat inkonsistent definiert, weshalb Programmierer
	leicht bez&uuml;glich der korrekten Verwendung durcheinander
	kommen k&ouml;nnen. Weiterhin gibt es einen sp&uuml;rbaren
	Leistungsverlust im Vergleich zu
	<function>strcpy</function>, wenn eine kurze Zeichenkette in
	einen gro&szlig;en Puffer kopiert wird. Denn
	<function>strncpy</function> f&uuml;lt den Puffer bis zur
	angegebenen L&auml;nge mit NUL auf.
      </para>

      <para>In OpenBSD wurde eine weitere M&ouml;glichkeit zum

	<indexterm><primary>OpenBSD</primary></indexterm>

	kopieren von Speicherbereichen implementiert, die dieses
	Problem umgeht. Die Funktionen <function>strlcpy</function>
	und <function>strlcat</function> garantieren, dass das Ziel
	immer NUL-terminiert wird, wenn das Argument length ungleich
	null ist. F&uuml;r weitere Informationen &uuml;ber diese
	Funktionen lesen Sie bitte <xref linkend="OpenBSD">. Die
	OpenBSD-Funktionen <function>strlcpy</function> und
	<function>strlcat</function> sind seit Version 3.3 auch in
	FreeBSD verf&uuml;gbar.</para>

      <indexterm>
	<primary>Zeichenketten-Kopierfunktionen</primary>
	<secondary>strlcpy</secondary>
      </indexterm>

      <indexterm>
	<primary>Zeichenketten-Kopierfunktionen</primary>
	<secondary>strlcat</secondary>
      </indexterm>

      <sect3>
	<title>Compiler-basierte Laufzeit&uuml;berpr&uuml;fung
	  von Grenzen</title>

	<indexterm>
	  <primary>Pr&uuml;fung von Grenzen</primary>
	  <secondary>Compiler-basiert</secondary>
	</indexterm>

	<para>Ungl&uuml;cklicherweise gibt es immer noch sehr viel
	  Quelltext, der allgemein verwendet wird und blind Speicher
	  umherkopiert, ohne eine der gerade besprochenen Funktionen,
	  die Begrenzungen unterst&uuml;tzen, zu verwenden.
	  Gl&uuml;cklicherweise gibt es einen Weg, um solche Angriffe zu 
	  verhindern -  &Uuml;berpr&uuml;fung der Grenzen zur Laufzeit, die in
	  verschiedenen C/C++ Compilern eingebaut ist.</para>

	<indexterm><primary>ProPolice</primary></indexterm>
	<indexterm><primary>StackGuard</primary></indexterm>
	<indexterm><primary>GCC</primary></indexterm>

	<para>ProPolice ist eine solche Compiler-Eigenschaft und ist in den
	  &man.gcc.1; Versionen 4.1 und h&ouml;her integriert.  Es ersetzt und
	  erweitert die &man.gcc.1; StackGuard-Erweiterung von 
	  fr&uuml;her.</para>
	
	<para>ProPolice sch&uuml;tzt gegen stackbasierte 
	  Puffer&uuml;berl&auml;ufe und andere Angriffe durch das Ablegen von
	  Pseudo-Zufallszahlen in Schl&uuml;sselbereichen des Stacks bevor es
	  irgendwelche Funktionen aufruft.  Wenn eine Funktion beendet wird, 
	  werden diese <quote>Kanarienv&ouml;gel</quote> &uuml;berpr&uuml;ft
	  und wenn festgestellt wird, dass diese ver&auml;ndert wurden wird das
	  Programm sofort abgebrochen.  Dadurch wird jeglicher Versuch, die
	  R&uuml;cksprungadresse oder andere Variablen, die auf dem Stack
	  gespeichert werden, durch die Ausf&uuml;hrung von Schadcode zu
	  manipulieren, nicht funktionieren, da der Angreifer auch die 
	  Pseudo-Zufallszahlen unber&uuml;hrt lassen m&uuml;sste.</para>

	<indexterm><primary>Puffer-&Uuml;berlauf</primary></indexterm>

	<para>Ihre Anwendungen mit ProPolice neu zu kompilieren ist
	  eine effektive Ma&szlig;nahme, um sie vor den meisten
	  Puffer-&Uuml;berlauf-Angriffen zu sch&uuml;tzen, aber die
	  Programme k&ouml;nnen noch immer kompromittiert werden.</para>
      </sect3>

      <sect3>
	<title>Bibliotheks-basierte Laufzeit&uuml;berpr&uuml;fung
	  von Grenzen</title>

	<indexterm>
	  <primary>Pr&uuml;fung von Grenzen</primary>
	  <secondary>Bibliotheks-basiert</secondary>
	</indexterm>

	<para>Compiler-basierte Mechanismen sind bei Software,
	  die nur im Bin&auml;rformat vertrieben wird, und die somit
	  nicht neu kompiliert werden kann v&ouml;llig nutzlos.
	  F&uuml;r diesen Fall gibt es einige Bibliotheken, welche
	  die unsicheren Funktionen der C-Bibliothek
	  (<function>strcpy</function>, <function>fscanf</function>,
	  <function>getwd</function>, etc..) neu implementieren und
	  sicherstellen, dass nicht hinter den Stack-Pointer
	  geschrieben werden kann.</para>

	<itemizedlist>
	  <listitem><simpara>libsafe</simpara></listitem>
	  <listitem><simpara>libverify</simpara></listitem>
	  <listitem><simpara>libparanoia</simpara></listitem>
	</itemizedlist>

	<para>Leider haben diese Bibliotheks-basierten
	  Verteidigungen mehrere Schw&auml;chen. Diese Bibliotheken
	  sch&uuml;tzen nur vor einer kleinen Gruppe von
	  Sicherheitsl&uuml;cken und sie k&ouml;nnen das
	  eigentliche Problem nicht l&ouml;sen. Diese
	  Ma&szlig;nahmen k&ouml;nnen versagen, wenn die Anwendung
	  mit -fomit-frame-pointer kompiliert wurde.
	  Au&szlig;erdem kann der Nutzer die Umgebungsvariablen
	  LD_PRELOAD und LD_LIBRARY_PATH &uuml;berschreiben oder
	  l&ouml;schen.</para>
      </sect3>
    </sect2>
  </sect1>

  <sect1 id="secure-setuid">
    <title>SetUID-Themen</title>

    <indexterm><primary>seteuid</primary></indexterm>

    <para>Es gibt zu jedem Prozess mindestens sechs verschiedene
      IDs, die diesem zugeordnet sind. Deshalb m&uuml;ssen Sie
      sehr vorsichtig mit den Zugriffsrechten sein, die Ihr Prozess
      zu jedem Zeitpunkt besitzt. Konkret bedeutet dass, das alle
      seteuid-Anwendungen ihre Privilegien abgeben sollten, sobald
      sie diese nicht mehr ben&ouml;tigen.</para>

    <indexterm>
      <primary>Benutzer-IDs</primary>
      <secondary>reale Benutzer-ID</secondary>
    </indexterm>
    <indexterm>
      <primary>Benutzer-IDs</primary>
      <secondary>effective Benutzer-ID</secondary>
    </indexterm>

    <para>Die reale Benutzer-ID kann nur von einem
      Superuser-Prozess ge&auml;ndert werden. Das Programm
      <application>login</application> setzt sie, wenn sich ein
      Benutzer am System anmeldet, und sie wird nur selten
      ge&auml;ndert.</para>

    <para>Die effektive Benutzer-ID wird von der Funktion
      <function>exec()</function> gesetzt, wenn ein Programm
      das seteuid-Bit gesetzt hat. Eine Anwendung kann
      <function>seteuid()</function> jederzeit aufrufen, um die
      effektive Benutzer-ID entweder auf die reale Benutzer-ID oder
      die gespeicherte set-user-ID zu setzen. Wenn eine der
      <function>exec()</function>-Funktionen die effektive
      Benutzer-ID setzt, wird der vorherige Wert als
      gespeicherte set-user-ID abgelegt.</para>
  </sect1>

  <sect1 id="secure-chroot">
    <title>Die Umgebung ihrer Programme einschr&auml;nken</title>

    <indexterm><primary>chroot()</primary></indexterm>

    <para>Die herk&ouml;mmliche Methode, um einen Prozess
      einzuschr&auml;nken, besteht in dem Systemaufruf
      <function>chroot()</function>. Dieser Aufruf
      &auml;ndert das Wurzelverzeichnis, auf das sich alle
      Pfadangaben des Prozesses und jegliche Kind-Prozesse beziehen.
      Damit dieser Systemaufruf gelingt, muss der Prozess
      Ausf&uuml;hrungsrechte (Durchsuchungsrechte) f&uuml;r das
      Verzeichnis haben, auf das er sich bezieht. Die neue Umgebung
      wird erst wirksam, wenn Sie mittels
      <function>chdir()</function> in Ihre neue Umgebung wechseln.
      Es sollte erw&auml;hnt werden, dass ein Prozess recht einfach
      aus der chroot-Umgebung ausbrechen kann, wenn er root-Rechte
      besitzt. Das kann man erreichen, indem man Ger&auml;tedateien
      anlegt, um Kernel-Speicher zu lesen, oder indem man einen
      Debugger mit einem Prozess au&szlig;erhalb seiner
      &man.chroot.8;-Umgebung verbindet, oder auf viele andere
      kreative Wege.</para>

    <para>Das Verhalten des Systemaufrufs
      <function>chroot()</function> kann durch die
      kern.chroot.allow_open_directories
      <command>sysctl</command>-Variable beeinflusst werden. Wenn
      diese auf 0 gesetzt ist, wird <function>chroot()</function>
      mit EPERM fehlschlagen, wenn irgendwelche Verzeichnisse
      ge&ouml;ffnet sind. Wenn die Variable auf den Standardwert 1
      gesetzt ist, wird <function>chroot()</function> mit EPERM
      fehlschlagen, wenn irgendwelche Verzeichnisse ge&ouml;ffnet
      sind und sich der Prozess bereits in einer
      <function>chroot()</function>-Umgebung befindet. Bei jedem
      anderen Wert wird die &Uuml;berpr&uuml;fung auf
      ge&ouml;ffnete Verzeichnisse komplett umgangen.</para>

    <sect2>
      <title>Die Jail-Funktionalit&auml;t in FreeBSD</title>

      <indexterm><primary>Jail</primary></indexterm>

      <para>Das Konzept einer Jail (Gef&auml;ngnis) erweitert
	<function>chroot()</function>, indem es die Macht des
	Superusers einschr&auml;nkt, um einen echten 'virtuellen
	Server' zu erzeugen. Wenn ein solches Gef&auml;ngnis einmal
	eingerichtet ist, muss die gesamte Netzwerkkommunikation
	&uuml;ber eine bestimmte IP-Adresse erfolgen und die
	"root-Privilegien" innerhalb der Jail sind sehr stark
	eingeschr&auml;nkt.</para>

      <para>Solange Sie sich in einer Jail befinden, werden alle
	Tests auf Superuser-Rechte durch den Aufruf von
	<function>suser()</function> fehlschlagen. Allerdings wurden
	einige Aufrufe von <function>suser()</function>
	abge&auml;ndert, um die neue
	<function>suser_xxx()</function>-Schnittstelle zu
	implementieren. Diese Funktion ist daf&uuml;r verantwortlich,
	festzustellen, ob bestimmte Superuser-Rechte einem
	eingesperrten Prozess zur Verf&uuml;gung stehen.</para>

      <para>Ein Superuser-Prozess innerhalb einer Jail darf
	folgendes:</para>

      <itemizedlist>
	<listitem>
	  <simpara>Berechtigungen ver&auml;ndern mittels:
	    <function>setuid</function>,
	    <function>seteuid</function>,
	    <function>setgid</function>,
	    <function>setegid</function>,
	    <function>setgroups</function>,
	    <function>setreuid</function>,
	    <function>setregid</function>,
	    <function>setlogin</function></simpara>
	</listitem>

	<listitem>
	  <simpara>Ressourcenbegrenzungen setzen mittels
	    <function>setrlimit</function></simpara>
	</listitem>

	<listitem>
	  <simpara>Einige sysctl-Variablen (kern.hostname)
	    ver&auml;ndern</simpara>
	</listitem>

	<listitem>
	  <simpara><function>chroot()</function></simpara>
	</listitem>

	<listitem>
	  <simpara>Ein Flag einer vnode setzen:
	    <function>chflags</function>,
	    <function>fchflags</function></simpara>
	</listitem>

	<listitem>
	  <simpara>Attribute einer vnode setzen wie Dateiberechtigungen,
	    Eigent&uuml;mer, Gruppe, Gr&ouml;&szlig;e, Zugriffszeit
	    und Modifikationszeit</simpara>
	</listitem>

	<listitem>
	  <simpara>Binden eines Prozesses an einen &ouml;ffentlichen
	    privilegierten Port (ports &lt; 1024)</simpara>
	</listitem>
      </itemizedlist>

      <para><function>Jail</function>s sind ein m&auml;chtiges
	Werkzeug, um Anwendungen in einer sicheren Umgebung
	auszuf&uuml;hren, aber sie haben auch ihre Nachteile.
	Derzeit wurden die IPC-Mechanismen noch nicht an
	<function>suser_xxx</function> angepasst, so dass Anwendungen
	wie MySQL nicht innerhalb einer Jail ausgef&uuml;hrt werden
	k&ouml;nnen. Der Superuser-Zugriff hat in einer Jail nur eine
	sehr eingeschr&auml;nkte Bedeutung, aber es gibt keine
	M&ouml;glichkeit zu definieren was
	"sehr eingeschr&auml;nkt" hei&szlig;t.</para>
    </sect2>

    <sect2>
      <title>&posix;.1e Prozess Capabilities</title>

      <indexterm><primary>POSIX.1e Process
	Capabilities</primary></indexterm>
      <indexterm><primary>TrustedBSD</primary></indexterm>

      <para>&posix; hat einen funktionalen Entwurf (Working Draft)
	herausgegeben, der Ereignis&uuml;berpr&uuml;fung,
	Zugriffskontrolllisten, feiner einstellbare Privilegien,
	Informationsmarkierung und verbindliche Zugriffskontrolle
	enth&auml;lt.</para>

      <para>Dies ist im Moment in Arbeit und das Hauptziel des <ulink
	url="http://www.trustedbsd.org/">TrustedBSD</ulink>-Projekts.
	Ein Teil der bisherigen Arbeit wurde in &os.current;
	&uuml;bernommen (cap_set_proc(3)).</para>
    </sect2>
  </sect1>

  <sect1 id="secure-trust">
    <title>Vertrauen</title>

    <para>Eine Anwendung sollte niemals davon ausgehen, dass
      irgendetwas in der Nutzerumgebung vern&uuml;nftig ist.
      Das beinhaltet (ist aber sicher nicht darauf
      beschr&auml;nkt): Nutzereingaben, Signale,
      Umgebungsvariablen, Ressourcen, IPC, mmaps, das
      Arbeitsverzeichnis im Dateisystem, Dateideskriptoren,
      die Anzahl ge&ouml;ffneter Dateien, etc..</para>

    <indexterm><primary>positive Filterung</primary></indexterm>
    <indexterm><primary>Datenvalidierung</primary></indexterm>

    <para>Sie sollten niemals annehmen, dass Sie jede Art von
      inkorrekten Eingaben abfangen k&ouml;nnen, die ein Nutzer
      machen kann. Stattdessen sollte Ihre Anwendung positive
      Filterung verwenden, um nur eine bestimmte Teilmenge an
      Eingaben zuzulassen, die Sie f&uuml;r sicher halten.
      Ungeeignete Daten&uuml;berpr&uuml;fung ist die Ursache
      vieler Exploits, besonders f&uuml;r CGI-Skripte im Internet.
      Bei Dateinamen m&uuml;ssen Sie besonders vorsichtig sein,
      wenn es sich um Pfade ("../", "/"), symbolische
      Verkn&uuml;pfungen und Shell-Escape-Sequenzen handelt.</para>

    <indexterm><primary>Perl Taint-Modus</primary></indexterm>

    <para>Perl bietet eine wirklich coole Funktion, den sogenannten
      "Taint"-Modus, der verwendet werden kann, um zu verhindern,
      dass Skripte Daten, die von au&szlig;erhalb des Programmes
      stammen, auf unsichere Art und Weise verwenden. Dieser
      Modus &uuml;berpr&uuml;ft Kommandozeilenargumente,
      Umgebungsvariablen, Lokalisierungsinformationen, die
      Ergebnisse von Systemaufrufen
      (<function>readdir()</function>,
      <function>readlink()</function>,
      <function>getpwxxx()</function>)
      und alle Dateieingaben.</para>
  </sect1>

  <sect1 id="secure-race-conditions">
    <title>Race-Conditions</title>

    <para>Eine Race-Condition ist ein unnormales Verhalten, das von
      einer unerwarteten Abh&auml;ngigkeit beim Timing von Ereignissen
      verursacht wird. Mit anderen Worten hei&szlig;t das, ein
      Programmierer nimmt irrt&uuml;mlicher Weise an, dass ein
      bestimmtes Ereignis immer vor einem anderen stattfindet.</para>

    <indexterm><primary>Race-Conditions</primary>
    <secondary>Signale</secondary></indexterm>

    <indexterm><primary>Race-Conditions</primary>
    <secondary>Zugriffspr&uuml;fungen</secondary></indexterm>

    <indexterm><primary>Race-Conditions</primary>
    <secondary>&Ouml;ffnen von Dateien</secondary></indexterm>

    <para>Einige der h&auml;ufigsten Ursachen f&uuml;r
      Race-Conditions sind Signale, Zugriffspr&uuml;fungen und das
      &Ouml;ffnen von Dateien. Signale sind von Natur aus
      asynchrone Ereignisse, deshalb ist besondere Vorsicht im
      Umgang damit geboten. Das Pr&uuml;fen des Zugriffs mittels
      der Aufrufe <function>access(2)</function> gefolgt von
      <function>open(2)</function> ist offensichtlich nicht atomar.
      Benutzer k&ouml;nnen zwischen den beiden Aufrufen Dateien
      verschieben. Stattdessen sollten privilegierte Anwendungen
      <function>seteuid()</function> direkt gefolgt von
      <function>open()</function> aufrufen. Auf die gleiche Art
      sollte eine Anwendung immer eine korrekte Umask vor dem
      Aufruf von <function>open()</function> setzen, um
      st&ouml;rende Aufrufe von <function>chmod()</function> zu
      umgehen.</para>
  </sect1>
</chapter>
