<?xml version="1.0" encoding="iso-8859-1"?>
<!--
Recently I suggested to myself that this should become a profiling
and debugging chapter, which covers things like ktrace(1) and
using other debugging (like -x in shell scripts).  But then I
realized that, over time and while DTrace becomes better supported,
that might make this chapter too large.
-->
<!--
     The FreeBSD Documentation Project
     $FreeBSD$
     $FreeBSDde: de-docproj/books/handbook/dtrace/chapter.xml,v 1.4 2009/08/22 18:54:15 bcr Exp $
     basiert auf: r47550
-->
<!-- XXXTR: Should probably put links and resources here.  I'm
        nervous about this chapter as it may require a partial
	re-write and large modification once DTrace is complete, but
	at least we can get everyone started ... -->
<chapter xmlns="http://docbook.org/ns/docbook"
  xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0"
  xml:id="dtrace">
  <info>
    <title>&dtrace;</title>

    <authorgroup>
      <author>
	<personname>
	  <firstname>Tom</firstname>
	  <surname>Rhodes</surname>
	</personname>
	<contrib>Written by </contrib></author>
    </authorgroup>

    <authorgroup>
      <author>
	<personname>
	  <firstname>Benedict</firstname>
	  <surname>Reuschling</surname>
	</personname>
	<contrib>Übersetzt von </contrib>
      </author>
      <author>
	<personname>
	  <firstname>Christoph</firstname>
	  <surname>Sold</surname>
	</personname>
      </author>
    </authorgroup>
  </info>

  <sect1 xml:id="dtrace-synopsis">
    <title>Überblick</title>

    <indexterm><primary>&dtrace;</primary></indexterm>
    <indexterm>
      <primary>&dtrace; support</primary>
      <see>&dtrace;</see>
    </indexterm>

    <para>&dtrace;, auch bekannt als Dynamic Tracing, wurde von &sun;
      als ein Werkzeug zur Analyse von Performance-Problemen in
      Produktiv- und Entwicklungssystemen entwickelt.  Zusätzlich zur
      Diagnose von Performance-Problemen kann &dtrace; auch verwendet
      werden, um bei der Untersuchung und Behebung von unerwartetem
      Verhalten im &os;-Kernel und den Anwenderprogrammen zu
      helfen.</para>

    <para>&dtrace; ist ein bemerkenswertes Werkzeug zur
      Profilerstellung, mit einer beeindruckenden Palette von
      Eigenschaften zur Diagnose von Systemereignissen.  Es kann auch
      dazu verwendet werden, bestehende Skripte ablaufen zu lassen, um
      einen Nutzen aus deren Möglichkeiten zu ziehen.  Nutzer können
      mittels der Programmiersprache D von &dtrace; ihre eigenen
      Hilfsmittel schreiben, was es ermöglicht, die eigenen Profile
      nach Ihren Bedürfnissen anzupassen.</para>

    <para>Die &dtrace;-Implementierung in &os; bietet experimentelle
      Unterstützung für &dtrace; im Userland.  Userland &dtrace;
      erlaubt es Anwendern, function boundary tracing für
      Anwendungsprogramme über den <literal>pid</literal>-Provider
      hinweg vorzunehmen und um statische Sonden in
      Anwendungsprogramme für die spätere Aufzeichnung einzufügen.
      Manche Ports, wie beispielsweise
      <package>databases/postgres-server</package> und
      <package>lang/php56</package> besitzen eine &dtrace;-Option, um
      statische Sonden zu aktivieren.  &os;&nbsp;10.0-RELEASE besitzt
      eine verhältnismässig gute Unterstützung für &dtrace; im
      Anwendungsbereich, wird jedoch noch nicht als produktionsreif
      angesehen.  Insbesondere ist es möglich, dass Programme während
      der Aufzeichnung abstürzen.</para>

    <para>Eine offizielle Anleitung für &dtrace; wird vom Illumos
      Projekt im <uri xlink:href="http://dtrace.org/guide">
	DTrace Guide</uri> bereitgestellt.</para>

    <para>Nachdem Sie dieses Kapitel gelesen haben, werden Sie
      Folgendes wissen:</para>

    <itemizedlist>
      <listitem>
	<para>Was &dtrace; ist und welche Funktionen es zur Verfügung
	  stellt.</para>
      </listitem>

      <listitem>
	<para>Unterschiede zwischen der &solaris; &dtrace;
	  Implementierung und derjenigen, die &os;
	  bereitstellt.</para>
      </listitem>

      <listitem>
	<para>Wie man &dtrace; auf &os; aktiviert und
	  verwendet.</para>
      </listitem>
    </itemizedlist>

    <para>Bevor Sie dieses Kapitel lesen, sollten Sie:</para>

    <itemizedlist>
      <listitem>
	<para>&unix; und &os; Grundlagen verstehen (<xref
	    linkend="basics"/>).</para>
      </listitem>

      <listitem>
	<para>Vertraut sein mit Sicherheitsaspekten und wie diese
	  &os; betreffen (<xref linkend="security"/>).</para>
      </listitem>
    </itemizedlist>

    <warning>
      <para>Diese Funktion ist als experimentell anzusehen.  Manche
	Einstellungen enthalten möglicherweise nicht alle
	Funktionalitäten, andere Teile könnten gar nicht laufen.  Mit
	der Zeit, wenn diese Funktion als für den Produktivbetrieb
	geeignet erscheint, wird auch diese Dokumentation geändert, um
	diesem Umstand gerecht zu werden.</para>
    </warning>
  </sect1>

  <sect1 xml:id="dtrace-implementation">
    <title>Unterschiede in der Implementierung</title>

    <para>Obwohl &dtrace; in &os; sehr ähnlich zu dem in &solaris;
      ist, existieren doch Unterschiede.  Der Hauptunterschied besteht
      darin, dass in &os; &dtrace; als eine Menge von Kernelmodulen
      implementiert ist und &dtrace; nicht verwendet werden kann, bis
      diese Module geladen wurden.  Um alle nötigen Module zu laden,
      geben Sie ein:</para>

    <screen>&prompt.root; <userinput>kldload dtraceall</userinput></screen>

    <para>Beginnend mit &os; 10.0-RELEASE werden die Module
      automatisch geladen, sobald <command>dtrace</command> aufgerufen
      wird.</para>

    <para>&os; verwendet die Kerneloption <literal>DDB_CTF</literal>,
      um die Unterstützung im Kernel für das Laden von
      <acronym>CTF</acronym>-Daten aus Kernelmodulen und dem Kernel
      selbst zu ermöglichen.  <acronym>CTF</acronym> ist das Compact C
      Type Format von &solaris;, welches eine reduzierte Form von
      Debug-Informationen kapselt, ähnlich zu <acronym>DWARF</acronym>
      und den antiken Stabs.  Diese <acronym>CTF</acronym>-Daten
      werden dem Binärcode von den <command>ctfconvert</command> und
      <command>ctfmerge</command> Befehlen den Werkzeugen zum Bauen
      des Systems hinzugefügt.  Das
      <command>ctfconvert</command>-Dienstprogramm parst die vom
      Compiler erstellten <acronym>DWARF</acronym>
      <acronym>ELF</acronym> Debug-Abschnitte und
      <command>ctfmerge</command> vereint <acronym>CTF</acronym>
      <acronym>ELF</acronym>-Abschnitte aus Objekten, entweder in
      ausführbare Dateien oder Shared-Libraries.</para>

    <para>Einige Provider in &os; unterscheiden sich von der
      &solaris;-Implementierung.  Am deutlichsten wird das beim
      <literal>dtmalloc</literal>-Provider, welcher das Aufzeichnen
      von <function>malloc()</function> nach Typen im &os;-Kernel
      ermöglicht.  Manche der Provider in &solaris; wie
      <literal>cpc</literal> und <literal>mib</literal> sind in &os;
      nicht vorhanden.  Diese können in zukünftigen &os;-Versionen
      auftauchen.  Weiterhin sind manche der Provider in beiden
      Betriebssystemen nicht zueinander kompatibel, in dem Sinne daß
      deren Sonden unterschiedliche Argumenttypen aufweisen.  Dadurch
      können <acronym>D</acronym>-Skripte, die unter &solaris;
      geschrieben wurden, evtl. unter &os; funktionieren oder auch
      nicht, umgekehrt ist das genauso.</para>

    <para>In &os; darf &dtrace; wegen unterschiedlicher
      Sicherheitskonzepte nur von <systemitem
      class="username">root</systemitem> verwendet werden.  &solaris;
      besitzt ein paar Audit-Funktionen auf den unteren Ebenen, die
      noch nicht in &os; implementiert sind.  Deshalb kann nur
      <systemitem class="username">root</systemitem> auf
      <filename>/dev/dtrace/dtrace</filename> zugreifen.</para>

    <para>Zum Schluss muss noch erwähnt werden, dass die
      &dtrace;-Software unter die <acronym>CDDL</acronym> Lizenz
      fällt.  Die <literal>Common Development and Distribution
      License</literal> wird von &os; mitgeliefert, sehen Sie sich
      dazu
      <filename>/usr/src/cddl/contrib/opensolaris/OPENSOLARIS.LICENSE</filename>
      an, oder lesen Sie die Online-Version unter <uri
	xlink:href="http://opensource.org/licenses/CDDL-1.0">
	http://opensource.org/licenses/CDDL-1.0</uri>.  Während der
      &os;-Kernel mit den &dtrace;-Optionen immer noch
      <acronym>BSD</acronym>-lizenziert ist, tritt die
      <acronym>CDDL</acronym> in Kraft, wenn Module in Binärform
      vertrieben werden oder die Binärdateien geladen werden.</para>
  </sect1>

  <sect1 xml:id="dtrace-enable">
    <title>Die &dtrace; Unterstützung aktivieren</title>

    <para>In &os; 9.2 und 10.0 ist die Unterstützung von &dtrace; im
      <filename>GENERIC</filename>-Kernel bereits eingebaut.  Nutzer
      von früheren Versionen sollten die folgenden Zeilen in eine
      eigene Kernelkonfigurationsdatei einfügen und den Kernel mittels
      der Anleitung in <xref linkend="kernelconfig"/> neu
      übersetzen:</para>

    <programlisting>options         KDTRACE_HOOKS
options         DDB_CTF
makeoptions         DEBUG=-g
makeoptions         WITH_CTF=1</programlisting>

    <para>Besitzer der AMD64-Architektur werden wahrscheinlich noch
      die folgende Zeile zur Kernelkonfigurationsdatei
      hinzufügen:</para>

    <programlisting>options         KDTRACE_FRAME</programlisting>

    <para>Diese Option liefert die Unterstützung für die
      <acronym>FBT</acronym>-Eigenschaft.  &dtrace; wird auch ohne
      diese Option funktionieren; jedoch wird dann Function Boundary
      Tracing nur eingeschränkt unterstützt.</para>

    <para>Sobald &os; in den neuen Kernel gebootet oder die
      &dtrace;-Kernelmodule mittels <command>kldload
      dtraceall</command> geladen wurden, benötigt das System
      Unterstützung für die Korn-Shell, da &dtrace; mehrere
      Dienstprogramme enthält, die in <command>ksh</command>
      implementiert sind.  Vergewissern Sie sich, dass das Paket oder
      der Port <package>shells/ksh93</package> installiert ist.  Es
      ist auch möglich, diese Werkzeuge unter
      <package>shells/pdksh</package> oder
      <package>shells/mksh</package> laufen zu lassen.</para>

    <para>Zum Schluss sollten Sie noch den aktuellen
      &dtrace;-Werkzeugsatz beschaffen.  Die &dtrace;-Werkzeugsammlung
      enthält gebrauchsfertige Skripte, um Systeminformationen zu
      sammeln.  Es gibt Skripte zum Überprüfen von offenen Dateien,
      Speicher- und <acronym>CPU</acronym>-Gebrauch und noch viel
      mehr.  &os; 10 installiert ein paar dieser Skripte in
      <filename>/usr/share/dtrace</filename>.  Für andere
      &os;-Versionen oder um die volle &dtrace;-Werkzeugsammlung zu
      installieren, verwenden Sie den
      <package>sysutils/DTraceToolkit</package> Port oder das
      Paket.</para>

    <note>
      <para>Die Skripte in <filename>/usr/share/dtrace</filename>
	wurden speziell für &os; portiert.  Nicht alle Skripte
	in der &dtrace;-Werkzeugsammlung werden in &os; unverändert
	funktionieren und manche Skript benötigen einigen Aufwand,
	damit diese auf &os; funktionieren.</para>
    </note>

    <para>Der &dtrace;-Werkzeugsatz beinhaltet viele Skripte in der
      speziellen Sprache von &dtrace;.  Diese Sprache wird die
      D-Sprache genannt und ist sehr ähnlich zu C++.  Eine
      detaillierte Beschreibung dieser Sprache würde den Rahmen
      dieses Dokuments sprengen.  In <uri
	xlink:href="http://wikis.oracle.com/display/DTrace/Documentation">
	http://wikis.oracle.com/display/DTrace/Documentation</uri>
      wird diese Sprache ausführlich beschrieben.</para>
  </sect1>

  <sect1 xml:id="dtrace-using">
    <title>&dtrace; verwenden</title>

    <para>&dtrace;-Skripte bestehen aus einer Liste von einer oder
      mehreren <firstterm>Sonden</firstterm> oder
      Instrumentationspunkten, an denen jede Sonde mit einer Aktion
      verknüpft ist.  Jedesmal, wenn die Bedingung für eine Sonde
      zutrifft, wird die verknüpfte Aktion ausgeführt.  Beispielsweise
      könnte eine Aktion ausgeführt werden, wenn eine Datei geöffnet,
      ein Prozess gestartet oder eine Codezeile ausgeführt wird.  Die
      Aktion könnte die Protokollierung von Informationen sein oder
      die Änderung von Kontextvariablen.  Das Lesen und Schreiben von
      Kontextvariablen erlaubt es den Sonden, Informationen
      auszutauschen und kooperativ die Korrelation bestimmter
      Ereignisse zu analysieren.</para>

    <para>Um alle Sonden anzuzeigen, kann der Administrator nun den
      folgenden Befehl eingeben:</para>

    <screen>&prompt.root; <userinput>dtrace -l | more</userinput></screen>

    <para>Jede Sonde besitzt eine <literal>ID</literal>, einen
      <literal>PROVIDER</literal> (dtrace oder fbt), ein
      <literal>MODULE</literal> und einen <literal>FUNCTION
	NAME</literal>. Lesen Sie &man.dtrace.1; für weitere
      Informationen zu diesem Kommando.</para>

    <para>Die Beispiele in diesem Abschnitt geben einen Überblick, wie
      man zwei dieser voll funktionsfähigen Skripte aus der
      &dtrace;-Werkzeugsammlung verwendet: die Skripte
      <filename>hotkernel</filename> und
      <filename>procsystime</filename>.</para>

    <para>Das <filename>hotkernel</filename> Skript wurde entworfen,
      um zu identifizieren, welche Funktion die meiste Kernelzeit
      beansprucht.  Es wird es Ausgaben ähnlich der Folgenden
      produzieren:</para>

    <screen>&prompt.root; <userinput>cd /usr/share/dtrace/toolkit</userinput>
&prompt.root; <userinput>./hotkernel</userinput>
Sampling... Hit Ctrl-C to end.</screen>

    <para>Verwenden Sie wie angegeben die Tastenkombination <keycombo
	action="simul"><keycap>Ctrl</keycap><keycap>C</keycap></keycombo>
      drücken, um den Prozess zu stoppen.  Nach dem Abbruch wird das
      Skript eine Liste von Kernelfunktionen und Zeitmessungen
      ausgeben, aufsteigend sortiert nach den Zeiten:</para>

    <screen>kernel`_thread_lock_flags                                   2   0.0%
0xc1097063                                                  2   0.0%
kernel`sched_userret                                        2   0.0%
kernel`kern_select                                          2   0.0%
kernel`generic_copyin                                       3   0.0%
kernel`_mtx_assert                                          3   0.0%
kernel`vm_fault                                             3   0.0%
kernel`sopoll_generic                                       3   0.0%
kernel`fixup_filename                                       4   0.0%
kernel`_isitmyx                                             4   0.0%
kernel`find_instance                                        4   0.0%
kernel`_mtx_unlock_flags                                    5   0.0%
kernel`syscall                                              5   0.0%
kernel`DELAY                                                5   0.0%
0xc108a253                                                  6   0.0%
kernel`witness_lock                                         7   0.0%
kernel`read_aux_data_no_wait                                7   0.0%
kernel`Xint0x80_syscall                                     7   0.0%
kernel`witness_checkorder                                   7   0.0%
kernel`sse2_pagezero                                        8   0.0%
kernel`strncmp                                              9   0.0%
kernel`spinlock_exit                                       10   0.0%
kernel`_mtx_lock_flags                                     11   0.0%
kernel`witness_unlock                                      15   0.0%
kernel`sched_idletd                                       137   0.3%
0xc10981a5                                              42139  99.3%</screen>

    <!-- XXXTR: I attempted to use objdump and nm on /boot/kernel/kernel
        to find 0xc10981a5, but to no avail.  It would be nice to know
	how we should look that up. -->

    <para>Dieses Skript funktioniert auch mit Kernelmodulen.  Um diese
      Eigenschaft zu verwenden, starten Sie das Skript mit
      <option>-m</option>:</para>

    <screen>&prompt.root; <userinput>./hotkernel -m</userinput>
Sampling... Hit Ctrl-C to end.
^C
MODULE                                                  COUNT   PCNT
0xc107882e                                                  1   0.0%
0xc10e6aa4                                                  1   0.0%
0xc1076983                                                  1   0.0%
0xc109708a                                                  1   0.0%
0xc1075a5d                                                  1   0.0%
0xc1077325                                                  1   0.0%
0xc108a245                                                  1   0.0%
0xc107730d                                                  1   0.0%
0xc1097063                                                  2   0.0%
0xc108a253                                                 73   0.0%
kernel                                                    874   0.4%
0xc10981a5                                             213781  99.6%</screen>

    <!-- XXXTR: I was unable to match these up with output from
        kldstat and kldstat -v and grep.  Maybe I'm missing something
	seriously obvious.  It is 5AM btw. -->

    <para>Das <filename>procsystime</filename> Skript fängt die
      Systemaufruf-Zeiten für eine gegebene
      Prozess-<acronym>ID</acronym> (<acronym>PID</acronym>) oder
      einen Prozessnamen ab und gibt diese aus.  Im folgenden Beispiel
      wurde eine neue Instanz von <filename>/bin/csh</filename>
      erzeugt.  Dann wurde <filename>procsystime</filename> ausgeführt
      und verbleibt so, während ein paar Befehle in die andere Instanz
      von <command>csh</command> eingegeben werden.  Dies sind die
      Ergebnisse dieses Versuchs:</para>

    <screen>&prompt.root; <userinput>./procsystime -n csh</userinput>
Tracing... Hit Ctrl-C to end...
^C

Elapsed Times for processes csh,

         SYSCALL          TIME (ns)
          getpid               6131
       sigreturn               8121
           close              19127
           fcntl              19959
             dup              26955
         setpgid              28070
            stat              31899
       setitimer              40938
           wait4              62717
       sigaction              67372
     sigprocmask             119091
    gettimeofday             183710
           write             263242
          execve             492547
           ioctl             770073
           vfork            3258923
      sigsuspend            6985124
            read         3988049784</screen>

    <para>Wie aus der Ausgabe ersichtlich ist, verbraucht der
      <function>read()</function>-Systemaufruf die meiste Zeit in
      Nanosekunden, während der Systemaufruf
      <function>getpid()</function> hingegen am schnellsten
      läuft.</para>
  </sect1>
</chapter>
