# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR The FreeBSD Project
# This file is distributed under the same license as the FreeBSD Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: FreeBSD Documentation VERSION\n"
"POT-Creation-Date: 2022-07-07 23:23-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title =
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:1
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:16
#, no-wrap
msgid "Programming Tools"
msgstr ""

#. type: YAML Front Matter: title
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:1
#, no-wrap
msgid "Chapter 2. Programming Tools"
msgstr ""

#. type: Title ==
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:56
#, no-wrap
msgid "Synopsis"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:63
msgid ""
"This chapter is an introduction to using some of the programming tools "
"supplied with FreeBSD, although much of it will be applicable to many other "
"versions of UNIX(R).  It does _not_ attempt to describe coding in any "
"detail.  Most of the chapter assumes little or no previous programming "
"knowledge, although it is hoped that most programmers will find something of "
"value in it."
msgstr ""

#. type: Title ==
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:65
#, no-wrap
msgid "Introduction"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:72
msgid ""
"FreeBSD offers an excellent development environment.  Compilers for C and C+"
"+ and an assembler come with the basic system, not to mention classic "
"UNIX(R) tools such as `sed` and `awk`.  If that is not enough, there are "
"many more compilers and interpreters in the Ports collection.  The following "
"section, <<tools-programming,Introduction to Programming>>, lists some of "
"the available options.  FreeBSD is very compatible with standards such as "
"POSIX(R) and ANSI C, as well with its own BSD heritage, so it is possible to "
"write applications that will compile and run with little or no modification "
"on a wide range of platforms."
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:76
msgid ""
"However, all this power can be rather overwhelming at first if you have "
"never written programs on a UNIX(R) platform before.  This document aims to "
"help you get up and running, without getting too deeply into more advanced "
"topics.  The intention is that this document should give you enough of the "
"basics to be able to make some sense of the documentation."
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:78
msgid ""
"Most of the document requires little or no knowledge of programming, "
"although it does assume a basic competence with using UNIX(R) and a "
"willingness to learn!"
msgstr ""

#. type: Title ==
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:80
#, no-wrap
msgid "Introduction to Programming"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:86
msgid ""
"A program is a set of instructions that tell the computer to do various "
"things; sometimes the instruction it has to perform depends on what happened "
"when it performed a previous instruction.  This section gives an overview of "
"the two main ways in which you can give these instructions, or \"commands\" "
"as they are usually called.  One way uses an _interpreter_, the other a "
"_compiler_.  As human languages are too difficult for a computer to "
"understand in an unambiguous way, commands are usually written in one or "
"other languages specially designed for the purpose."
msgstr ""

#. type: Title ===
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:87
#, no-wrap
msgid "Interpreters"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:92
msgid ""
"With an interpreter, the language comes as an environment, where you type in "
"commands at a prompt and the environment executes them for you.  For more "
"complicated programs, you can type the commands into a file and get the "
"interpreter to load the file and execute the commands in it.  If anything "
"goes wrong, many interpreters will drop you into a debugger to help you "
"track down the problem."
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:97
msgid ""
"The advantage of this is that you can see the results of your commands "
"immediately, and mistakes can be corrected readily.  The biggest "
"disadvantage comes when you want to share your programs with someone.  They "
"must have the same interpreter, or you must have some way of giving it to "
"them, and they need to understand how to use it.  Also users may not "
"appreciate being thrown into a debugger if they press the wrong key! From a "
"performance point of view, interpreters can use up a lot of memory, and "
"generally do not generate code as efficiently as compilers."
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:102
msgid ""
"In my opinion, interpreted languages are the best way to start if you have "
"not done any programming before.  This kind of environment is typically "
"found with languages like Lisp, Smalltalk, Perl and Basic.  It could also be "
"argued that the UNIX(R) shell (`sh`, `csh`) is itself an interpreter, and "
"many people do in fact write shell \"scripts\" to help with various "
"\"housekeeping\" tasks on their machine.  Indeed, part of the original "
"UNIX(R) philosophy was to provide lots of small utility programs that could "
"be linked together in shell scripts to perform useful tasks."
msgstr ""

#. type: Title ===
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:103
#, no-wrap
msgid "Interpreters Available with FreeBSD"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:106
msgid ""
"Here is a list of interpreters that are available from the FreeBSD Ports "
"Collection, with a brief discussion of some of the more popular interpreted "
"languages."
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:108
msgid ""
"Instructions on how to get and install applications from the Ports "
"Collection can be found in the extref:{handbook}[Ports section, ports-using] "
"of the handbook."
msgstr ""

#. type: Labeled list
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:109
#, no-wrap
msgid "BASIC"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:113
msgid ""
"Short for Beginner's All-purpose Symbolic Instruction Code.  Developed in "
"the 1950s for teaching University students to program and provided with "
"every self-respecting personal computer in the 1980s, BASIC has been the "
"first programming language for many programmers.  It is also the foundation "
"for Visual Basic."
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:115
msgid ""
"The Bywater Basic Interpreter can be found in the Ports Collection as "
"package:lang/bwbasic[] and the Phil Cockroft's Basic Interpreter (formerly "
"Rabbit Basic) is available as package:lang/pbasic[]."
msgstr ""

#. type: Labeled list
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:116
#, no-wrap
msgid "Lisp"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:120
msgid ""
"A language that was developed in the late 1950s as an alternative to the "
"\"number-crunching\" languages that were popular at the time.  Instead of "
"being based on numbers, Lisp is based on lists; in fact, the name is short "
"for \"List Processing\".  It is very popular in AI (Artificial Intelligence) "
"circles."
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:122
msgid ""
"Lisp is an extremely powerful and sophisticated language, but can be rather "
"large and unwieldy."
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:127
msgid ""
"Various implementations of Lisp that can run on UNIX(R) systems are "
"available in the Ports Collection for FreeBSD.  GNU Common Lisp can be found "
"as package:lang/gcl[].  CLISP by Bruno Haible and Michael Stoll is available "
"as package:lang/clisp[].  For CMUCL, which includes a highly-optimizing "
"compiler too, or simpler Lisp implementations like SLisp, which implements "
"most of the Common Lisp constructs in a few hundred lines of C code, package:"
"lang/cmucl[] and package:lang/slisp[] are available respectively."
msgstr ""

#. type: Labeled list
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:128
#, no-wrap
msgid "Perl"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:130
msgid ""
"Very popular with system administrators for writing scripts; also often used "
"on World Wide Web servers for writing CGI scripts."
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:132
msgid ""
"Perl is available in the Ports Collection as package:lang/perl5.24[] for all "
"FreeBSD releases."
msgstr ""

#. type: Labeled list
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:133
#, no-wrap
msgid "Scheme"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:137
msgid ""
"A dialect of Lisp that is rather more compact and cleaner than Common Lisp.  "
"Popular in Universities as it is simple enough to teach to undergraduates as "
"a first language, while it has a high enough level of abstraction to be used "
"in research work."
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:140
msgid ""
"Scheme is available from the Ports Collection as package:lang/elk[] for the "
"Elk Scheme Interpreter.  The MIT Scheme Interpreter can be found in package:"
"lang/mit-scheme[] and the SCM Scheme Interpreter in package:lang/scm[]."
msgstr ""

#. type: Labeled list
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:141
#, no-wrap
msgid "Icon"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:144
msgid ""
"Icon is a high-level language with extensive facilities for processing "
"strings and structures.  The version of Icon for FreeBSD can be found in the "
"Ports Collection as package:lang/icon[]."
msgstr ""

#. type: Labeled list
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:145
#, no-wrap
msgid "Logo"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:148
msgid ""
"Logo is a language that is easy to learn, and has been used as an "
"introductory programming language in various courses.  It is an excellent "
"tool to work with when teaching programming to smaller age groups, as it "
"makes creation of elaborate geometric shapes an easy task."
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:150
msgid ""
"The latest version of Logo for FreeBSD is available from the Ports "
"Collection in package:lang/logo[]."
msgstr ""

#. type: Labeled list
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:151
#, no-wrap
msgid "Python"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:154
msgid ""
"Python is an Object-Oriented, interpreted language.  Its advocates argue "
"that it is one of the best languages to start programming with, since it is "
"relatively easy to start with, but is not limited in comparison to other "
"popular interpreted languages that are used for the development of large, "
"complex applications (Perl and Tcl are two other languages that are popular "
"for such tasks)."
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:156
msgid ""
"The latest version of Python is available from the Ports Collection in "
"package:lang/python[]."
msgstr ""

#. type: Labeled list
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:157
#, no-wrap
msgid "Ruby"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:160
msgid ""
"Ruby is an interpreter, pure object-oriented programming language.  It has "
"become widely popular because of its easy to understand syntax, flexibility "
"when writing code, and the ability to easily develop and maintain large, "
"complex programs."
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:162
msgid "Ruby is available from the Ports Collection as package:lang/ruby25[]."
msgstr ""

#. type: Labeled list
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:163
#, no-wrap
msgid "Tcl and Tk"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:166
msgid ""
"Tcl is an embeddable, interpreted language, that has become widely used and "
"became popular mostly because of its portability to many platforms.  It can "
"be used both for quickly writing small, prototype applications, or (when "
"combined with Tk, a GUI toolkit) fully-fledged, featureful programs."
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:169
msgid ""
"Various versions of Tcl are available as ports for FreeBSD.  The latest "
"version, Tcl 8.5, can be found in package:lang/tcl87[]."
msgstr ""

#. type: Title ===
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:170
#, no-wrap
msgid "Compilers"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:177
msgid ""
"Compilers are rather different.  First of all, you write your code in a file "
"(or files) using an editor.  You then run the compiler and see if it accepts "
"your program.  If it did not compile, grit your teeth and go back to the "
"editor; if it did compile and gave you a program, you can run it either at a "
"shell command prompt or in a debugger to see if it works properly.footnote:"
"[If you run it in the shell, you may get a core dump.]"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:184
msgid ""
"Obviously, this is not quite as direct as using an interpreter.  However it "
"allows you to do a lot of things which are very difficult or even impossible "
"with an interpreter, such as writing code which interacts closely with the "
"operating system-or even writing your own operating system! It is also "
"useful if you need to write very efficient code, as the compiler can take "
"its time and optimize the code, which would not be acceptable in an "
"interpreter.  Moreover, distributing a program written for a compiler is "
"usually more straightforward than one written for an interpreter-you can "
"just give them a copy of the executable, assuming they have the same "
"operating system as you."
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:188
msgid ""
"As the edit-compile-run-debug cycle is rather tedious when using separate "
"programs, many commercial compiler makers have produced Integrated "
"Development Environments (IDEs for short).  FreeBSD does not include an IDE "
"in the base system, but package:devel/kdevelop[] is available in the Ports "
"Collection and many use Emacs for this purpose.  Using Emacs as an IDE is "
"discussed in <<emacs>>."
msgstr ""

#. type: Title ==
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:190
#, no-wrap
msgid "Compiling with `cc`"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:195
msgid ""
"This section deals with the clang compiler for C and C++, as it's installed "
"with the FreeBSD base system.  Starting with FreeBSD 10.X `clang` is "
"installed as `cc`; the GNU compiler package:lang/gcc[gcc] is available in "
"the Ports Collection.  The details of producing a program with an "
"interpreter vary considerably between interpreters, and are usually well "
"covered in the documentation and on-line help for the interpreter."
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:198
msgid ""
"Once you have written your masterpiece, the next step is to convert it into "
"something that will (hopefully!) run on FreeBSD.  This usually involves "
"several steps, each of which is done by a separate program."
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:201
msgid ""
"Pre-process your source code to remove comments and do other tricks like "
"expanding macros in C."
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:202
msgid ""
"Check the syntax of your code to see if you have obeyed the rules of the "
"language. If you have not, it will complain!"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:203
msgid ""
"Convert the source code into assembly language-this is very close to machine "
"code, but still understandable by humans. Allegedly."
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:204
msgid ""
"Convert the assembly language into machine code-yep, we are talking bits and "
"bytes, ones and zeros here."
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:205
msgid ""
"Check that you have used things like functions and global variables in a "
"consistent way. For example, if you have called a non-existent function, it "
"will complain."
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:206
msgid ""
"If you are trying to produce an executable from several source code files, "
"work out how to fit them all together."
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:207
msgid ""
"Work out how to produce something that the system's run-time loader will be "
"able to load into memory and run."
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:208
msgid "Finally, write the executable on the filesystem."
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:211
msgid ""
"The word _compiling_ is often used to refer to just steps 1 to 4-the others "
"are referred to as _linking_.  Sometimes step 1 is referred to as _pre-"
"processing_ and steps 3-4 as _assembling_."
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:213
msgid ""
"Fortunately, almost all this detail is hidden from you, as `cc` is a front "
"end that manages calling all these programs with the right arguments for "
"you; simply typing"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:217
#, no-wrap
msgid "% cc foobar.c\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:221
msgid ""
"will cause [.filename]#foobar.c# to be compiled by all the steps above.  If "
"you have more than one file to compile, just do something like"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:225
#, no-wrap
msgid "% cc foo.c bar.c\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:230
msgid ""
"Note that the syntax checking is just that - checking the syntax.  It will "
"not check for any logical mistakes you may have made, like putting the "
"program into an infinite loop, or using a bubble sort when you meant to use "
"a binary sort.footnote:[In case you did not know, a binary sort is an "
"efficient way of sorting things into order and a bubble sort is not.]"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:233
msgid ""
"There are lots and lots of options for `cc`, which are all in the manual "
"page.  Here are a few of the most important ones, with examples of how to "
"use them."
msgstr ""

#. type: Labeled list
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:234
#, no-wrap
msgid "`-o _filename_`"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:236
msgid ""
"The output name of the file. If you do not use this option, `cc` will "
"produce an executable called [.filename]#a.out#.footnote:[The reasons for "
"this are buried in the mists of history.]"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:241
#, no-wrap
msgid ""
"% cc foobar.c               executable is a.out\n"
"% cc -o foobar foobar.c     executable is foobar\n"
msgstr ""

#. type: Labeled list
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:243
#, no-wrap
msgid "`-c`"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:246
msgid ""
"Just compile the file, do not link it.  Useful for toy programs where you "
"just want to check the syntax, or if you are using a [.filename]#Makefile#."
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:250
#, no-wrap
msgid "% cc -c foobar.c\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:254
msgid ""
"This will produce an _object file_ (not an executable) called [."
"filename]#foobar.o#.  This can be linked together with other object files "
"into an executable."
msgstr ""

#. type: Labeled list
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:255
#, no-wrap
msgid "`-g`"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:261
msgid ""
"Create a debug version of the executable.  This makes the compiler put "
"information into the executable about which line of which source file "
"corresponds to which function call.  A debugger can use this information to "
"show the source code as you step through the program, which is _very_ "
"useful; the disadvantage is that all this extra information makes the "
"program much bigger.  Normally, you compile with `-g` while you are "
"developing a program and then compile a \"release version\" without `-g` "
"when you are satisfied it works properly."
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:266
#, no-wrap
msgid "% cc -g foobar.c\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:269
msgid ""
"This will produce a debug version of the program. footnote:[Note, we did not "
"use the -o flag to specify the executable name, so we will get an executable "
"called a.out. Producing a debug version called foobar is left as an exercise "
"for the reader!]"
msgstr ""

#. type: Labeled list
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:270
#, no-wrap
msgid "`-O`"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:274
msgid ""
"Create an optimized version of the executable.  The compiler performs "
"various clever tricks to try to produce an executable that runs faster than "
"normal.  You can add a number after the `-O` to specify a higher level of "
"optimization, but this often exposes bugs in the compiler's optimizer."
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:278
#, no-wrap
msgid "% cc -O -o foobar foobar.c\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:281
msgid "This will produce an optimized version of [.filename]#foobar#."
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:284
msgid ""
"The following three flags will force `cc` to check that your code complies "
"to the relevant international standard, often referred to as the ANSI "
"standard, though strictly speaking it is an ISO standard."
msgstr ""

#. type: Labeled list
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:285
#, no-wrap
msgid "`-Wall`"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:288
msgid ""
"Enable all the warnings which the authors of `cc` believe are worthwhile.  "
"Despite the name, it will not enable all the warnings `cc` is capable of."
msgstr ""

#. type: Labeled list
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:289
#, no-wrap
msgid "`-ansi`"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:292
msgid ""
"Turn off most, but not all, of the non-ANSI C features provided by `cc`.  "
"Despite the name, it does not guarantee strictly that your code will comply "
"to the standard."
msgstr ""

#. type: Labeled list
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:293
#, no-wrap
msgid "`-pedantic`"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:295
msgid "Turn off _all_ ``cc``'s non-ANSI C features."
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:300
msgid ""
"Without these flags, `cc` will allow you to use some of its non-standard "
"extensions to the standard.  Some of these are very useful, but will not "
"work with other compilers - in fact, one of the main aims of the standard is "
"to allow people to write code that will work with any compiler on any "
"system.  This is known as _portable code_."
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:303
msgid ""
"Generally, you should try to make your code as portable as possible, as "
"otherwise you may have to completely rewrite the program later to get it to "
"work somewhere else - and who knows what you may be using in a few years "
"time?"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:307
#, no-wrap
msgid "% cc -Wall -ansi -pedantic -o foobar foobar.c\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:310
msgid ""
"This will produce an executable [.filename]#foobar# after checking [."
"filename]#foobar.c# for standard compliance."
msgstr ""

#. type: Labeled list
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:311
#, no-wrap
msgid "`-l__library__`"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:313
msgid "Specify a function library to be used at link time."
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:316
msgid ""
"The most common example of this is when compiling a program that uses some "
"of the mathematical functions in C.  Unlike most other platforms, these are "
"in a separate library from the standard C one and you have to tell the "
"compiler to add it."
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:320
msgid ""
"The rule is that if the library is called [.filename]#libsomething.a#, you "
"give `cc` the argument `-l__something__`.  For example, the math library is "
"[.filename]#libm.a#, so you give `cc` the argument `-lm`.  A common \"gotcha"
"\" with the math library is that it has to be the last library on the "
"command line."
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:324
#, no-wrap
msgid "% cc -o foobar foobar.c -lm\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:327
msgid "This will link the math library functions into [.filename]#foobar#."
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:330
msgid ""
"If you are compiling C++ code, use {c-plus-plus-command}.  {c-plus-plus-"
"command} can also be invoked as {clang-plus-plus-command} on FreeBSD."
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:334
#, no-wrap
msgid "% c++ -o foobar foobar.cc\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:337
msgid ""
"This will both produce an executable [.filename]#foobar# from the C++ source "
"file [.filename]#foobar.cc#."
msgstr ""

#. type: Title ===
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:338
#, no-wrap
msgid "Common `cc` Queries and Problems"
msgstr ""

#. type: Title ====
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:340
#, no-wrap
msgid "I compiled a file called foobar.c and I cannot find an executable called foobar. Where has it gone?"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:344
msgid ""
"Remember, `cc` will call the executable [.filename]#a.out# unless you tell "
"it differently.  Use the `-o _filename_` option:"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:348
#, no-wrap
msgid "% cc -o foobar foobar.c\n"
msgstr ""

#. type: Title ====
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:350
#, no-wrap
msgid "OK, I have an executable called foobar, I can see it when I run ls, but when I type in foobar at the command prompt it tells me there is no such file. Why can it not find it?"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:354
msgid ""
"Unlike MS-DOS(R), UNIX(R) does not look in the current directory when it is "
"trying to find out which executable you want it to run, unless you tell it "
"to.  Type `./foobar`, which means \"run the file called [.filename]#foobar# "
"in the current directory.\""
msgstr ""

#. type: Title ===
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:355
#, no-wrap
msgid "I called my executable test, but nothing happens when I run it. What is going on?"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:359
msgid ""
"Most UNIX(R) systems have a program called `test` in [.filename]#/usr/bin# "
"and the shell is picking that one up before it gets to checking the current "
"directory.  Either type:"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:363
#, no-wrap
msgid "% ./test\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:366
msgid "or choose a better name for your program!"
msgstr ""

#. type: Title ====
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:367
#, no-wrap
msgid "I compiled my program and it seemed to run all right at first, then there was an error and it said something about core dumped. What does that mean?"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:371
msgid ""
"The name _core dump_ dates back to the very early days of UNIX(R), when the "
"machines used core memory for storing data.  Basically, if the program "
"failed under certain conditions, the system would write the contents of core "
"memory to disk in a file called [.filename]#core#, which the programmer "
"could then pore over to find out what went wrong."
msgstr ""

#. type: Title ====
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:372
#, no-wrap
msgid "Fascinating stuff, but what I am supposed to do now?"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:375
msgid "Use a debugger to analyze the core (see <<debugging>>)."
msgstr ""

#. type: Title ====
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:376
#, no-wrap
msgid "When my program dumped core, it said something about a segmentation fault. What is that?"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:380
msgid ""
"This basically means that your program tried to perform some sort of illegal "
"operation on memory; UNIX(R) is designed to protect the operating system and "
"other programs from rogue programs."
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:382
msgid "Common causes for this are:"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:384
msgid "Trying to write to a NULL pointer, eg"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:389
#, no-wrap
msgid ""
"char *foo = NULL;\n"
"strcpy(foo, \"bang!\");\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:392
msgid "Using a pointer that has not been initialized, eg"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:397
#, no-wrap
msgid ""
"char *foo;\n"
"strcpy(foo, \"bang!\");\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:401
msgid ""
"The pointer will have some random value that, with luck, will point into an "
"area of memory that is not available to your program and the kernel will "
"kill your program before it can do any damage.  If you are unlucky, it will "
"point somewhere inside your own program and corrupt one of your data "
"structures, causing the program to fail mysteriously."
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:402
msgid "Trying to access past the end of an array, eg"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:407
#, no-wrap
msgid ""
"int bar[20];\n"
"bar[27] = 6;\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:410
msgid "Trying to store something in read-only memory, eg"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:415
#, no-wrap
msgid ""
"char *foo = \"My string\";\n"
"strcpy(foo, \"bang!\");\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:418
msgid ""
"UNIX(R) compilers often put string literals like `\"My string\"` into read-"
"only areas of memory."
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:419
msgid "Doing naughty things with `malloc()` and `free()`, eg"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:424
#, no-wrap
msgid ""
"char bar[80];\n"
"free(bar);\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:427
msgid "or"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:433
#, no-wrap
msgid ""
"char *foo = malloc(27);\n"
"free(foo);\n"
"free(foo);\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:438
msgid ""
"Making one of these mistakes will not always lead to an error, but they are "
"always bad practice.  Some systems and compilers are more tolerant than "
"others, which is why programs that ran well on one system can crash when you "
"try them on an another."
msgstr ""

#. type: Title ====
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:439
#, no-wrap
msgid "Sometimes when I get a core dump it says bus error. It says in my UNIX(R) book that this means a hardware problem, but the computer still seems to be working. Is this true?"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:443
msgid ""
"No, fortunately not (unless of course you really do have a hardware "
"problem...).  This is usually another way of saying that you accessed memory "
"in a way you should not have."
msgstr ""

#. type: Title ====
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:444
#, no-wrap
msgid "This dumping core business sounds as though it could be quite useful, if I can make it happen when I want to. Can I do this, or do I have to wait until there is an error?"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:447
msgid "Yes, just go to another console or xterm, do"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:451
#, no-wrap
msgid "% ps\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:454
msgid "to find out the process ID of your program, and do"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:458
#, no-wrap
msgid "% kill -ABRT pid\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:461
msgid "where `_pid_` is the process ID you looked up."
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:464
msgid ""
"This is useful if your program has got stuck in an infinite loop, for "
"instance.  If your program happens to trap SIGABRT, there are several other "
"signals which have a similar effect."
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:467
msgid ""
"Alternatively, you can create a core dump from inside your program, by "
"calling the `abort()` function.  See the manual page of man:abort[3] to "
"learn more."
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:470
msgid ""
"If you want to create a core dump from outside your program, but do not want "
"the process to terminate, you can use the `gcore` program.  See the manual "
"page of man:gcore[1] for more information."
msgstr ""

#. type: Title ==
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:472
#, no-wrap
msgid "Make"
msgstr ""

#. type: Title ===
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:474
#, no-wrap
msgid "What is `make`?"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:477
msgid ""
"When you are working on a simple program with only one or two source files, "
"typing in"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:481
#, no-wrap
msgid "% cc file1.c file2.c\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:484
msgid ""
"is not too bad, but it quickly becomes very tedious when there are several "
"files-and it can take a while to compile, too."
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:487
msgid ""
"One way to get around this is to use object files and only recompile the "
"source file if the source code has changed.  So we could have something like:"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:491
#, no-wrap
msgid "% cc file1.o file2.o … file37.c …\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:495
msgid ""
"if we had changed [.filename]#file37.c#, but not any of the others, since "
"the last time we compiled.  This may speed up the compilation quite a bit, "
"but does not solve the typing problem."
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:497
msgid ""
"Or we could write a shell script to solve the typing problem, but it would "
"have to re-compile everything, making it very inefficient on a large project."
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:499
msgid ""
"What happens if we have hundreds of source files lying about? What if we are "
"working in a team with other people who forget to tell us when they have "
"changed one of their source files that we use?"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:502
msgid ""
"Perhaps we could put the two solutions together and write something like a "
"shell script that would contain some kind of magic rule saying when a source "
"file needs compiling.  Now all we need now is a program that can understand "
"these rules, as it is a bit too complicated for the shell."
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:507
msgid ""
"This program is called `make`.  It reads in a file, called a _makefile_, "
"that tells it how different files depend on each other, and works out which "
"files need to be re-compiled and which ones do not.  For example, a rule "
"could say something like \"if [.filename]#fromboz.o# is older than [."
"filename]#fromboz.c#, that means someone must have changed [."
"filename]#fromboz.c#, so it needs to be re-compiled.\" The makefile also has "
"rules telling make _how_ to re-compile the source file, making it a much "
"more powerful tool."
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:510
msgid ""
"Makefiles are typically kept in the same directory as the source they apply "
"to, and can be called [.filename]#makefile#, [.filename]#Makefile# or [."
"filename]#MAKEFILE#.  Most programmers use the name [.filename]#Makefile#, "
"as this puts it near the top of a directory listing, where it can easily be "
"seen.footnote:[They do not use the MAKEFILE form as block capitals are often "
"used for documentation files like README.]"
msgstr ""

#. type: Title ===
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:511
#, no-wrap
msgid "Example of Using `make`"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:514
msgid "Here is a very simple make file:"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:519
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:545
#, no-wrap
msgid ""
"foo: foo.c\n"
"\tcc -o foo foo.c\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:522
msgid "It consists of two lines, a dependency line and a creation line."
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:529
msgid ""
"The dependency line here consists of the name of the program (known as the "
"_target_), followed by a colon, then whitespace, then the name of the source "
"file.  When `make` reads this line, it looks to see if [.filename]#foo# "
"exists; if it exists, it compares the time [.filename]#foo# was last "
"modified to the time [.filename]#foo.c# was last modified.  If [."
"filename]#foo# does not exist, or is older than [.filename]#foo.c#, it then "
"looks at the creation line to find out what to do.  In other words, this is "
"the rule for working out when [.filename]#foo.c# needs to be re-compiled."
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:533
msgid ""
"The creation line starts with a tab (press kbd:[tab]) and then the command "
"you would type to create [.filename]#foo# if you were doing it at a command "
"prompt.  If [.filename]#foo# is out of date, or does not exist, `make` then "
"executes this command to create it.  In other words, this is the rule which "
"tells make how to re-compile [.filename]#foo.c#."
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:537
msgid ""
"So, when you type `make`, it will make sure that [.filename]#foo# is up to "
"date with respect to your latest changes to [.filename]#foo.c#.  This "
"principle can be extended to [.filename]#Makefile#'s with hundreds of "
"targets-in fact, on FreeBSD, it is possible to compile the entire operating "
"system just by typing `make world` in the appropriate directory!"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:540
msgid ""
"Another useful property of makefiles is that the targets do not have to be "
"programs.  For instance, we could have a make file that looks like this:"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:548
#, no-wrap
msgid ""
"install:\n"
"\tcp foo /home/me\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:551
msgid "We can tell make which target we want to make by typing:"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:555
#, no-wrap
msgid "% make target\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:559
msgid ""
"`make` will then only look at that target and ignore any others.  For "
"example, if we type `make foo` with the makefile above, make will ignore the "
"`install` target."
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:562
msgid ""
"If we just type `make` on its own, make will always look at the first target "
"and then stop without looking at any others.  So if we typed `make` here, it "
"will just go to the `foo` target, re-compile [.filename]#foo# if necessary, "
"and then stop without going on to the `install` target."
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:566
msgid ""
"Notice that the `install` target does not actually depend on anything! This "
"means that the command on the following line is always executed when we try "
"to make that target by typing `make install`.  In this case, it will copy [."
"filename]#foo# into the user's home directory.  This is often used by "
"application makefiles, so that the application can be installed in the "
"correct directory when it has been correctly compiled."
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:571
msgid ""
"This is a slightly confusing subject to try to explain.  If you do not quite "
"understand how `make` works, the best thing to do is to write a simple "
"program like \"hello world\" and a make file like the one above and "
"experiment.  Then progress to using more than one source file, or having the "
"source file include a header file.  `touch` is very useful here-it changes "
"the date on a file without you having to edit it."
msgstr ""

#. type: Title ===
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:572
#, no-wrap
msgid "Make and include-files"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:576
msgid ""
"C code often starts with a list of files to include, for example stdio.h.  "
"Some of these files are system-include files, some of them are from the "
"project you are now working on:"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:581
#, no-wrap
msgid ""
"#include <stdio.h>\n"
"#include \"foo.h\"\n"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:583
#, no-wrap
msgid "int main(....\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:586
msgid ""
"To make sure that this file is recompiled the moment [.filename]#foo.h# is "
"changed, you have to add it in your [.filename]#Makefile#:"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:590
#, no-wrap
msgid "foo: foo.c foo.h\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:597
msgid ""
"The moment your project is getting bigger and you have more and more own "
"include-files to maintain, it will be a pain to keep track of all include "
"files and the files which are depending on it.  If you change an include-"
"file but forget to recompile all the files which are depending on it, the "
"results will be devastating.  `clang` has an option to analyze your files "
"and to produce a list of include-files and their dependencies: `-MM`."
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:599
msgid "If you add this to your Makefile:"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:604
#, no-wrap
msgid ""
"depend:\n"
"\tcc -E -MM *.c > .depend\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:607
msgid ""
"and run `make depend`, the file [.filename]#.depend# will appear with a list "
"of object-files, C-files and the include-files:"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:611
#, no-wrap
msgid "foo.o: foo.c foo.h\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:614
msgid ""
"If you change [.filename]#foo.h#, next time you run `make` all files "
"depending on [.filename]#foo.h# will be recompiled."
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:616
msgid ""
"Do not forget to run `make depend` each time you add an include-file to one "
"of your files."
msgstr ""

#. type: Title ===
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:617
#, no-wrap
msgid "FreeBSD Makefiles"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:623
msgid ""
"Makefiles can be rather complicated to write.  Fortunately, BSD-based "
"systems like FreeBSD come with some very powerful ones as part of the "
"system.  One very good example of this is the FreeBSD ports system.  Here is "
"the essential part of a typical ports [.filename]#Makefile#:"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:628
#, no-wrap
msgid ""
"MASTER_SITES=   ftp://freefall.cdrom.com/pub/FreeBSD/LOCAL_PORTS/\n"
"DISTFILES=      scheme-microcode+dist-7.3-freebsd.tgz\n"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:630
#, no-wrap
msgid ".include <bsd.port.mk>\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:633
msgid ""
"Now, if we go to the directory for this port and type `make`, the following "
"happens:"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:636
msgid ""
"A check is made to see if the source code for this port is already on the "
"system."
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:637
msgid ""
"If it is not, an FTP connection to the URL in MASTER_SITES is set up to "
"download the source."
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:638
msgid ""
"The checksum for the source is calculated and compared it with one for a "
"known, good, copy of the source. This is to make sure that the source was "
"not corrupted while in transit."
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:639
msgid ""
"Any changes required to make the source work on FreeBSD are applied-this is "
"known as _patching_."
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:640
msgid ""
"Any special configuration needed for the source is done. (Many UNIX(R) "
"program distributions try to work out which version of UNIX(R) they are "
"being compiled on and which optional UNIX(R) features are present-this is "
"where they are given the information in the FreeBSD ports scenario)."
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:641
msgid ""
"The source code for the program is compiled. In effect, we change to the "
"directory where the source was unpacked and do `make`-the program's own make "
"file has the necessary information to build the program."
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:642
msgid ""
"We now have a compiled version of the program. If we wish, we can test it "
"now; when we feel confident about the program, we can type `make install`. "
"This will cause the program and any supporting files it needs to be copied "
"into the correct location; an entry is also made into a `package database`, "
"so that the port can easily be uninstalled later if we change our mind about "
"it."
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:644
msgid ""
"Now I think you will agree that is rather impressive for a four line script!"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:648
msgid ""
"The secret lies in the last line, which tells `make` to look in the system "
"makefile called [.filename]#bsd.port.mk#.  It is easy to overlook this line, "
"but this is where all the clever stuff comes from-someone has written a "
"makefile that tells `make` to do all the things above (plus a couple of "
"other things I did not mention, including handling any errors that may "
"occur) and anyone can get access to that just by putting a single line in "
"their own make file!"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:652
msgid ""
"If you want to have a look at these system makefiles, they are in [."
"filename]#/usr/share/mk#, but it is probably best to wait until you have had "
"a bit of practice with makefiles, as they are very complicated (and if you "
"do look at them, make sure you have a flask of strong coffee handy!)"
msgstr ""

#. type: Title ===
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:653
#, no-wrap
msgid "More Advanced Uses of `make`"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:658
msgid ""
"`Make` is a very powerful tool, and can do much more than the simple example "
"above shows.  Unfortunately, there are several different versions of `make`, "
"and they all differ considerably.  The best way to learn what they can do is "
"probably to read the documentation-hopefully this introduction will have "
"given you a base from which you can do this."
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:661
msgid ""
"The version of make that comes with FreeBSD is the Berkeley make; there is a "
"tutorial for it in [.filename]#/usr/src/share/doc/psd/12.make#.  To view it, "
"do"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:665
#, no-wrap
msgid "% zmore paper.ascii.gz\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:668
msgid "in that directory."
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:672
msgid ""
"Many applications in the ports use GNU make, which has a very good set of "
"\"info\" pages.  If you have installed any of these ports, GNU make will "
"automatically have been installed as `gmake`.  It is also available as a "
"port and package in its own right."
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:675
msgid ""
"To view the info pages for GNU make, you will have to edit [.filename]#dir# "
"in the [.filename]#/usr/local/info# directory to add an entry for it.  This "
"involves adding a line like"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:679
#, no-wrap
msgid " * Make: (make).                 The GNU Make utility.\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:682
msgid ""
"to the file. Once you have done this, you can type `info` and then select [."
"guimenuitem]#make# from the menu (or in Emacs, do `C-h i`)."
msgstr ""

#. type: Title ==
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:684
#, no-wrap
msgid "Debugging"
msgstr ""

#. type: Title ===
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:686
#, no-wrap
msgid "Introduction to Available Debuggers"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:692
msgid ""
"Using a debugger allows running the program under more controlled "
"circumstances.  Typically, it is possible to step through the program a line "
"at a time, inspect the value of variables, change them, tell the debugger to "
"run up to a certain point and then stop, and so on.  It is also possible to "
"attach to a program that is already running, or load a core file to "
"investigate why the program crashed.  It is even possible to debug the "
"kernel, though that is a little trickier than the user applications we will "
"be discussing in this section."
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:695
msgid ""
"This section is intended to be a quick introduction to using debuggers and "
"does not cover specialized topics such as debugging the kernel.  For more "
"information about that, refer to crossref:kerneldebug[kerneldebug,Kernel "
"Debugging]."
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:699
msgid ""
"The standard debugger supplied with FreeBSD {rel121-current} is called "
"`lldb` (LLVM debugger).  As it is part of the standard installation for that "
"release, there is no need to do anything special to use it.  It has good "
"command help, accessible via the `help` command, as well as https://lldb."
"llvm.org/[a web tutorial and documentation]."
msgstr ""

#. type: delimited block = 4
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:704
msgid ""
"The `lldb` command is available for FreeBSD {rel113-current} extref:"
"{handbook}[from ports or packages, ports-using] as package:devel/llvm[].  "
"This will install the default version of lldb (currently 9.0)."
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:711
msgid ""
"The other debugger available with FreeBSD is called `gdb` (GNU debugger).  "
"Unlike lldb, it is not installed by default on FreeBSD {rel121-current}; to "
"use it, extref:{handbook}#ports-using/[install] package:devel/gdb[] from "
"ports or packages.  The version installed by default on FreeBSD {rel113-"
"current} is old; instead, install package:devel/gdb[] there as well.  It has "
"quite good on-line help, as well as a set of info pages."
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:716
msgid ""
"Which one to use is largely a matter of taste.  If familiar with one only, "
"use that one.  People familiar with neither or both but wanting to use one "
"from inside Emacs will need to use `gdb` as `lldb` is unsupported by Emacs.  "
"Otherwise, try both and see which one you prefer."
msgstr ""

#. type: Title ===
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:717
#, no-wrap
msgid "Using lldb"
msgstr ""

#. type: Title ====
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:719
#, no-wrap
msgid "Starting lldb"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:722
msgid "Start up lldb by typing"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:726
#, no-wrap
msgid "% lldb -- progname\n"
msgstr ""

#. type: Title ====
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:728
#, no-wrap
msgid "Running a Program with lldb"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:733
msgid ""
"Compile the program with `-g` to get the most out of using `lldb`.  It will "
"work without, but will only display the name of the function currently "
"running, instead of the source code.  If it displays a line like:"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:737
#, no-wrap
msgid "Breakpoint 1: where = temp`main, address = …\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:740
msgid ""
"(without an indication of source code filename and line number) when setting "
"a breakpoint, this means that the program was not compiled with `-g`."
msgstr ""

#. type: delimited block = 4
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:745
msgid ""
"Most `lldb` commands have shorter forms that can be used instead.  The "
"longer forms are used here for clarity."
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:750
msgid ""
"At the `lldb` prompt, type `breakpoint set -n main`.  This will tell the "
"debugger not to display the preliminary set-up code in the program being run "
"and to stop execution at the beginning of the program's code.  Now type "
"`process launch` to actually start the program- it will start at the "
"beginning of the set-up code and then get stopped by the debugger when it "
"calls `main()`."
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:754
msgid ""
"To step through the program a line at a time, type `thread step-over`.  When "
"the program gets to a function call, step into it by typing `thread step-"
"in`.  Once in a function call, return from it by typing `thread step-out` or "
"use `up` and `down` to take a quick look at the caller."
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:757
msgid ""
"Here is a simple example of how to spot a mistake in a program with `lldb`.  "
"This is our program (with a deliberate mistake):"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:761
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:1035
#, no-wrap
msgid "#include <stdio.h>\n"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:763
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:1037
#, no-wrap
msgid "int bazz(int anint);\n"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:766
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:1040
#, no-wrap
msgid ""
"main() {\n"
"\tint i;\n"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:771
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:1045
#, no-wrap
msgid ""
"\tprintf(\"This is my program\\n\");\n"
"\tbazz(i);\n"
"\treturn 0;\n"
"}\n"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:776
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:1050
#, no-wrap
msgid ""
"int bazz(int anint) {\n"
"\tprintf(\"You gave me %d\\n\", anint);\n"
"\treturn anint;\n"
"}\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:779
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:1053
msgid ""
"This program sets i to be `5` and passes it to a function `bazz()` which "
"prints out the number we gave it."
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:781
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:1055
msgid "Compiling and running the program displays"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:788
#, no-wrap
msgid ""
"% cc -g -o temp temp.c\n"
"% ./temp\n"
"This is my program\n"
"anint = -5360\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:791
msgid "That is not what was expected! Time to see what is going on!"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:802
#, no-wrap
msgid ""
"% lldb -- temp\n"
"(lldb) target create \"temp\"\n"
"Current executable set to 'temp' (x86_64).\n"
"(lldb) breakpoint set -n main\t\t\t\tSkip the set-up code\n"
"Breakpoint 1: where = temp`main + 15 at temp.c:8:2, address = 0x00000000002012ef\tlldb puts breakpoint at main()\n"
"(lldb) process launch\t\t\t\t\tRun as far as main()\n"
"Process 9992 launching\n"
"Process 9992 launched: '/home/pauamma/tmp/temp' (x86_64)\tProgram starts running\n"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:836
#, no-wrap
msgid ""
"Process 9992 stopped\n"
"* thread #1, name = 'temp', stop reason = breakpoint 1.1\tlldb stops at main()\n"
"    frame #0: 0x00000000002012ef temp`main at temp.c:8:2\n"
"   5\tmain() {\n"
"   6\t\tint i;\n"
"   7\n"
"-> 8\t\tprintf(\"This is my program\\n\");\t\t\tIndicates the line where it stopped\n"
"   9\t\tbazz(i);\n"
"   10\t\treturn 0;\n"
"   11\t}\n"
"(lldb) thread step-over\t\t\tGo to next line\n"
"This is my program\t\t\t\t\t\tProgram prints out\n"
"Process 9992 stopped\n"
"* thread #1, name = 'temp', stop reason = step over\n"
"    frame #0: 0x0000000000201300 temp`main at temp.c:9:7\n"
"   6\t\tint i;\n"
"   7\n"
"   8\t\tprintf(\"This is my program\\n\");\n"
"-> 9\t\tbazz(i);\n"
"   10\t\treturn 0;\n"
"   11\t}\n"
"   12\n"
"(lldb) thread step-in\t\t\tstep into bazz()\n"
"Process 9992 stopped\n"
"* thread #1, name = 'temp', stop reason = step in\n"
"    frame #0: 0x000000000020132b temp`bazz(anint=-5360) at temp.c:14:29\tlldb displays stack frame\n"
"   11\t}\n"
"   12\n"
"   13\tint bazz(int anint) {\n"
"-> 14\t\tprintf(\"You gave me %d\\n\", anint);\n"
"   15\t\treturn anint;\n"
"   16\t}\n"
"(lldb)\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:839
msgid ""
"Hang on a minute! How did anint get to be `-5360`? Was it not set to `5` in "
"`main()`? Let us move up to `main()` and have a look."
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:853
#, no-wrap
msgid ""
"(lldb) up\t\tMove up call stack\n"
"frame #1: 0x000000000020130b temp`main at temp.c:9:2\t\tlldb displays stack frame\n"
"   6\t\tint i;\n"
"   7\n"
"   8\t\tprintf(\"This is my program\\n\");\n"
"-> 9\t\tbazz(i);\n"
"   10\t\treturn 0;\n"
"   11\t}\n"
"   12\n"
"(lldb) frame variable i\t\t\tShow us the value of i\n"
"(int) i = -5360\t\t\t\t\t\t\tlldb displays -5360\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:857
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:1098
msgid ""
"Oh dear! Looking at the code, we forgot to initialize i.  We meant to put"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:863
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:1104
#, no-wrap
msgid ""
"...\n"
"main() {\n"
"\tint i;\n"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:867
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:1108
#, no-wrap
msgid ""
"\ti = 5;\n"
"\tprintf(\"This is my program\\n\");\n"
"...\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:872
msgid ""
"but we left the `i=5;` line out.  As we did not initialize i, it had "
"whatever number happened to be in that area of memory when the program ran, "
"which in this case happened to be `-5360`."
msgstr ""

#. type: delimited block = 4
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:878
msgid ""
"The `lldb` command displays the stack frame every time we go into or out of "
"a function, even if we are using `up` and `down` to move around the call "
"stack.  This shows the name of the function and the values of its arguments, "
"which helps us keep track of where we are and what is going on.  (The stack "
"is a storage area where the program stores information about the arguments "
"passed to functions and where to go when it returns from a function call.)"
msgstr ""

#. type: Title ====
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:880
#, no-wrap
msgid "Examining a Core File with lldb"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:885
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:1126
msgid ""
"A core file is basically a file which contains the complete state of the "
"process when it crashed.  In \"the good old days\", programmers had to print "
"out hex listings of core files and sweat over machine code manuals, but now "
"life is a bit easier.  Incidentally, under FreeBSD and other 4.4BSD systems, "
"a core file is called [.filename]#progname.core# instead of just [."
"filename]#core#, to make it clearer which program a core file belongs to."
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:888
msgid ""
"To examine a core file, specify the name of the core file in addition to the "
"program itself.  Instead of starting up `lldb` in the usual way, type `lldb -"
"c _progname_.core -- _progname_`"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:890
msgid "The debugger will display something like this:"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:897
#, no-wrap
msgid ""
"% lldb -c [.filename]#progname.core# -- [.filename]#progname#\n"
"(lldb) target create \"[.filename]#progname#\" --core \"[.filename]#progname#.core\"\n"
"Core file '/home/pauamma/tmp/[.filename]#progname.core#' (x86_64) was loaded.\n"
"(lldb)\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:903
msgid ""
"In this case, the program was called [.filename]#progname#, so the core file "
"is called [.filename]#progname.core#.  The debugger does not display why the "
"program crashed or where.  For this, use `thread backtrace all`.  This will "
"also show how the function where the program dumped core was called."
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:912
#, no-wrap
msgid ""
"(lldb) thread backtrace all\n"
"* thread #1, name = 'progname', stop reason = signal SIGSEGV\n"
"  * frame #0: 0x0000000000201347 progname`bazz(anint=5) at temp2.c:17:10\n"
"    frame #1: 0x0000000000201312 progname`main at temp2.c:10:2\n"
"    frame #2: 0x000000000020110f progname`_start(ap=<unavailable>, cleanup=<unavailable>) at crt1.c:76:7\n"
"(lldb)\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:917
msgid ""
"`SIGSEGV` indicates that the program tried to access memory (run code or "
"read/write data usually) at a location that does not belong to it, but does "
"not give any specifics.  For that, look at the source code at line 10 of "
"file temp2.c, in `bazz()`.  The backtrace also says that in this case, "
"`bazz()` was called from `main()`."
msgstr ""

#. type: Title ====
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:918
#, no-wrap
msgid "Attaching to a Running Program with lldb"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:923
msgid ""
"One of the neatest features about `lldb` is that it can attach to a program "
"that is already running.  Of course, that requires sufficient permissions to "
"do so.  A common problem is stepping through a program that forks and "
"wanting to trace the child, but the debugger will only trace the parent."
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:925
msgid ""
"To do that, start up another `lldb`, use `ps` to find the process ID for the "
"child, and do"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:929
#, no-wrap
msgid "(lldb) process attach -p pid\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:932
msgid "in `lldb`, and then debug as usual."
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:934
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:1189
msgid ""
"For that to work well, the code that calls `fork` to create the child needs "
"to do something like the following (courtesy of the `gdb` info pages):"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:942
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:1197
#, no-wrap
msgid ""
"...\n"
"if ((pid = fork()) < 0)\t\t/* _Always_ check this */\n"
"\terror();\n"
"else if (pid == 0) {\t\t/* child */\n"
"\tint PauseMode = 1;\n"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:948
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:1203
#, no-wrap
msgid ""
"\twhile (PauseMode)\n"
"\t\tsleep(10);\t/* Wait until someone attaches to us */\n"
"\t...\n"
"} else {\t\t\t/* parent */\n"
"\t...\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:951
msgid ""
"Now all that is needed is to attach to the child, set PauseMode to `0` with "
"`expr PauseMode = 0` and wait for the `sleep()` call to return."
msgstr ""

#. type: Title ===
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:952
#, no-wrap
msgid "Remote Debugging Using LLDB"
msgstr ""

#. type: delimited block = 4
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:958
msgid ""
"The described functionality is available starting with LLDB version 12.0.0.  "
"Users of FreeBSD releases containing an earlier LLDB version may wish to use "
"the snapshot available in extref:{handbook}[ports or packages, ports-using], "
"as package:devel/llvm-devel[]."
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:962
msgid ""
"Starting with LLDB 12.0.0, remote debugging is supported on FreeBSD.  This "
"means that `lldb-server` can be started to debug a program on one host, "
"while the interactive `lldb` client connects to it from another one."
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:964
msgid ""
"To launch a new process to be debugged remotely, run `lldb-server` on the "
"remote server by typing"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:968
#, no-wrap
msgid "% lldb-server g host:port -- progname\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:971
msgid ""
"The process will be stopped immediately after launching, and `lldb-server` "
"will wait for the client to connect."
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:973
msgid ""
"Start `lldb` locally and type the following command to connect to the remote "
"server:"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:977
#, no-wrap
msgid "(lldb) gdb-remote host:port\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:981
msgid ""
"`lldb-server` can also attach to a running process.  To do that, type the "
"following on the remote server:"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:985
#, no-wrap
msgid "% lldb-server g host:port --attach pid-or-name\n"
msgstr ""

#. type: Title ===
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:987
#, no-wrap
msgid "Using gdb"
msgstr ""

#. type: Title ====
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:989
#, no-wrap
msgid "Starting gdb"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:992
msgid "Start up gdb by typing"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:996
#, no-wrap
msgid "% gdb progname\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:1000
msgid "although many people prefer to run it inside Emacs.  To do this, type:"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:1004
#, no-wrap
msgid " M-x gdb RET progname RET\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:1007
msgid ""
"Finally, for those finding its text-based command-prompt style off-putting, "
"there is a graphical front-end for it (package:devel/xxgdb[]) in the Ports "
"Collection."
msgstr ""

#. type: Title ====
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:1008
#, no-wrap
msgid "Running a Program with gdb"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:1013
msgid ""
"Compile the program with `-g` to get the most out of using `gdb`.  It will "
"work without, but will only display the name of the function currently "
"running, instead of the source code.  A line like:"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:1017
#, no-wrap
msgid "... (no debugging symbols found) ...\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:1020
msgid "when `gdb` starts up means that the program was not compiled with `-g`."
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:1024
msgid ""
"At the `gdb` prompt, type `break main`.  This will tell the debugger to skip "
"the preliminary set-up code in the program being run and to stop execution "
"at the beginning of the program's code.  Now type `run` to start the "
"program- it will start at the beginning of the set-up code and then get "
"stopped by the debugger when it calls `main()`."
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:1028
msgid ""
"To step through the program a line at a time, press `n`.  When at a function "
"call, step into it by pressing `s`.  Once in a function call, return from it "
"by pressing `f`, or use `up` and `down` to take a quick look at the caller."
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:1031
msgid ""
"Here is a simple example of how to spot a mistake in a program with `gdb`.  "
"This is our program (with a deliberate mistake):"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:1062
#, no-wrap
msgid ""
"% cc -g -o temp temp.c\n"
"% ./temp\n"
"This is my program\n"
"anint = 4231\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:1065
msgid "That was not what we expected! Time to see what is going on!"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:1077
#, no-wrap
msgid ""
"% gdb temp\n"
"GDB is free software and you are welcome to distribute copies of it\n"
" under certain conditions; type \"show copying\" to see the conditions.\n"
"There is absolutely no warranty for GDB; type \"show warranty\" for details.\n"
"GDB 4.13 (i386-unknown-freebsd), Copyright 1994 Free Software Foundation, Inc.\n"
"(gdb) break main\t\t\t\tSkip the set-up code\n"
"Breakpoint 1 at 0x160f: file temp.c, line 9.\tgdb puts breakpoint at main()\n"
"(gdb) run\t\t\t\t\tRun as far as main()\n"
"Starting program: /home/james/tmp/temp\t\tProgram starts running\n"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:1084
#, no-wrap
msgid ""
"Breakpoint 1, main () at temp.c:9\t\tgdb stops at main()\n"
"(gdb) n\t\t\t\t\t\tGo to next line\n"
"This is my program\t\t\t\tProgram prints out\n"
"(gdb) s\t\t\t\t\t\tstep into bazz()\n"
"bazz (anint=4231) at temp.c:17\t\t\tgdb displays stack frame\n"
"(gdb)\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:1087
msgid ""
"Hang on a minute! How did anint get to be `4231`? Was it not set to `5` in "
"`main()`? Let us move up to `main()` and have a look."
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:1094
#, no-wrap
msgid ""
"(gdb) up\t\t\t\t\tMove up call stack\n"
"#1  0x1625 in main () at temp.c:11\t\tgdb displays stack frame\n"
"(gdb) p i\t\t\t\t\tShow us the value of i\n"
"$1 = 4231\t\t\t\t\tgdb displays 4231\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:1113
msgid ""
"but we left the `i=5;` line out.  As we did not initialize i, it had "
"whatever number happened to be in that area of memory when the program ran, "
"which in this case happened to be `4231`."
msgstr ""

#. type: delimited block = 4
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:1119
msgid ""
"The `gdb` command displays the stack frame every time we go into or out of a "
"function, even if we are using `up` and `down` to move around the call "
"stack.  This shows the name of the function and the values of its arguments, "
"which helps us keep track of where we are and what is going on.  (The stack "
"is a storage area where the program stores information about the arguments "
"passed to functions and where to go when it returns from a function call.)"
msgstr ""

#. type: Title ====
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:1121
#, no-wrap
msgid "Examining a Core File with gdb"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:1129
msgid ""
"To examine a core file, start up `gdb` in the usual way.  Instead of typing "
"`break` or `run`, type"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:1133
#, no-wrap
msgid "(gdb) core progname.core\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:1136
msgid ""
"If the core file is not in the current directory, type `dir /path/to/core/"
"file` first."
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:1138
msgid "The debugger should display something like this:"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:1152
#, no-wrap
msgid ""
"% gdb [.filename]#progname#\n"
"GDB is free software and you are welcome to distribute copies of it\n"
" under certain conditions; type \"show copying\" to see the conditions.\n"
"There is absolutely no warranty for GDB; type \"show warranty\" for details.\n"
"GDB 4.13 (i386-unknown-freebsd), Copyright 1994 Free Software Foundation, Inc.\n"
"(gdb) core [.filename]#progname.core#\n"
"Core was generated by `[.filename]#progname#'.\n"
"Program terminated with signal 11, Segmentation fault.\n"
"Cannot access memory at address 0x7020796d.\n"
"#0  0x164a in bazz (anint=0x5) at temp.c:17\n"
"(gdb)\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:1156
msgid ""
"In this case, the program was called [.filename]#progname#, so the core file "
"is called [.filename]#progname.core#.  We can see that the program crashed "
"due to trying to access an area in memory that was not available to it in a "
"function called `bazz`."
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:1160
msgid ""
"Sometimes it is useful to be able to see how a function was called, as the "
"problem could have occurred a long way up the call stack in a complex "
"program.  `bt` causes `gdb` to print out a back-trace of the call stack:"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:1168
#, no-wrap
msgid ""
"(gdb) bt\n"
"#0  0x164a in bazz (anint=0x5) at temp.c:17\n"
"#1  0xefbfd888 in end ()\n"
"#2  0x162c in main () at temp.c:11\n"
"(gdb)\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:1172
msgid ""
"The `end()` function is called when a program crashes; in this case, the "
"`bazz()` function was called from `main()`."
msgstr ""

#. type: Title ====
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:1173
#, no-wrap
msgid "Attaching to a Running Program with gdb"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:1178
msgid ""
"One of the neatest features about `gdb` is that it can attach to a program "
"that is already running.  Of course, that requires sufficient permissions to "
"do so.  A common problem is stepping through a program that forks and "
"wanting to trace the child, but the debugger will only trace the parent."
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:1180
msgid ""
"To do that, start up another `gdb`, use `ps` to find the process ID for the "
"child, and do"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:1184
#, no-wrap
msgid "(gdb) attach pid\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:1187
msgid "in `gdb`, and then debug as usual."
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:1206
msgid ""
"Now all that is needed is to attach to the child, set PauseMode to `0`, and "
"wait for the `sleep()` call to return!"
msgstr ""

#. type: Title ==
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:1208
#, no-wrap
msgid "Using Emacs as a Development Environment"
msgstr ""

#. type: Title ===
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:1210
#, no-wrap
msgid "Emacs"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:1214
msgid ""
"Emacs is a highly customizable editor-indeed, it has been customized to the "
"point where it is more like an operating system than an editor! Many "
"developers and sysadmins do in fact spend practically all their time working "
"inside Emacs, leaving it only to log out."
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:1216
msgid ""
"It is impossible even to summarize everything Emacs can do here, but here "
"are some of the features of interest to developers:"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:1218
msgid ""
"Very powerful editor, allowing search-and-replace on both strings and "
"regular expressions (patterns), jumping to start/end of block expression, "
"etc, etc."
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:1219
msgid "Pull-down menus and online help."
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:1220
msgid "Language-dependent syntax highlighting and indentation."
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:1221
msgid "Completely customizable."
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:1222
msgid "You can compile and debug programs within Emacs."
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:1223
msgid ""
"On a compilation error, you can jump to the offending line of source code."
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:1224
msgid ""
"Friendly-ish front-end to the `info` program used for reading GNU hypertext "
"documentation, including the documentation on Emacs itself."
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:1225
msgid ""
"Friendly front-end to `gdb`, allowing you to look at the source code as you "
"step through your program."
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:1227
msgid "And doubtless many more that have been overlooked."
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:1229
msgid ""
"Emacs can be installed on FreeBSD using the package:editors/emacs[] port."
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:1232
msgid ""
"Once it is installed, start it up and do `C-h t` to read an Emacs tutorial-"
"that means hold down kbd:[control], press kbd:[h], let go of kbd:[control], "
"and then press kbd:[t].  (Alternatively, you can use the mouse to select [."
"guimenuitem]#Emacs Tutorial# from the menu:Help[] menu.)"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:1237
msgid ""
"Although Emacs does have menus, it is well worth learning the key bindings, "
"as it is much quicker when you are editing something to press a couple of "
"keys than to try to find the mouse and then click on the right place.  And, "
"when you are talking to seasoned Emacs users, you will find they often "
"casually throw around expressions like \"`M-x replace-s RET foo RET bar RET`"
"\" so it is useful to know what they mean.  And in any case, Emacs has far "
"too many useful functions for them to all fit on the menu bars."
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:1241
msgid ""
"Fortunately, it is quite easy to pick up the key-bindings, as they are "
"displayed next to the menu item.  My advice is to use the menu item for, "
"say, opening a file until you understand how it works and feel confident "
"with it, then try doing C-x C-f.  When you are happy with that, move on to "
"another menu command."
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:1244
msgid ""
"If you cannot remember what a particular combination of keys does, select [."
"guimenuitem]#Describe Key# from the menu:Help[] menu and type it in-Emacs "
"will tell you what it does.  You can also use the [.guimenuitem]#Command "
"Apropos# menu item to find out all the commands which contain a particular "
"word in them, with the key binding next to it."
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:1247
msgid ""
"By the way, the expression above means hold down the kbd:[Meta] key, press "
"kbd:[x], release the kbd:[Meta] key, type `replace-s` (short for `replace-"
"string`-another feature of Emacs is that you can abbreviate commands), press "
"the kbd:[return] key, type `foo` (the string you want replaced), press the "
"kbd:[return] key, type bar (the string you want to replace `foo` with) and "
"press kbd:[return] again.  Emacs will then do the search-and-replace "
"operation you have just requested."
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:1250
msgid ""
"If you are wondering what on earth kbd:[Meta] is, it is a special key that "
"many UNIX(R) workstations have.  Unfortunately, PC's do not have one, so it "
"is usually kbd:[alt] (or if you are unlucky, the kbd:[escape] key)."
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:1254
msgid ""
"Oh, and to get out of Emacs, do `C-x C-c` (that means hold down the kbd:"
"[control] key, press kbd:[x], press kbd:[c] and release the kbd:[control] "
"key).  If you have any unsaved files open, Emacs will ask you if you want to "
"save them.  (Ignore the bit in the documentation where it says `C-z` is the "
"usual way to leave Emacs-that leaves Emacs hanging around in the background, "
"and is only really useful if you are on a system which does not have virtual "
"terminals)."
msgstr ""

#. type: Title ===
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:1255
#, no-wrap
msgid "Configuring Emacs"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:1258
msgid ""
"Emacs does many wonderful things; some of them are built in, some of them "
"need to be configured."
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:1262
msgid ""
"Instead of using a proprietary macro language for configuration, Emacs uses "
"a version of Lisp specially adapted for editors, known as Emacs Lisp.  "
"Working with Emacs Lisp can be quite helpful if you want to go on and learn "
"something like Common Lisp.  Emacs Lisp has many features of Common Lisp, "
"although it is considerably smaller (and thus easier to master)."
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:1264
msgid ""
"The best way to learn Emacs Lisp is to download the link:ftp://ftp.gnu.org/"
"old-gnu/emacs/elisp-manual-19-2.4.tar.gz[Emacs Tutorial]"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:1269
msgid ""
"However, there is no need to actually know any Lisp to get started with "
"configuring Emacs, as I have included a sample [.filename]#.emacs#, which "
"should be enough to get you started.  Just copy it into your home directory "
"and restart Emacs if it is already running; it will read the commands from "
"the file and (hopefully) give you a useful basic setup."
msgstr ""

#. type: Block title
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:1270
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:1288
#, no-wrap
msgid "A Sample [.filename]#.emacs#"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:1273
msgid ""
"Unfortunately, there is far too much here to explain it in detail; however "
"there are one or two points worth mentioning."
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:1275
msgid "Everything beginning with a `;` is a comment and is ignored by Emacs."
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:1276
msgid ""
"In the first line, the `-*- Emacs-Lisp -*-` is so that we can edit [."
"filename]#.emacs# itself within Emacs and get all the fancy features for "
"editing Emacs Lisp. Emacs usually tries to guess this based on the filename, "
"and may not get it right for [.filename]#.emacs#."
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:1277
msgid ""
"The kbd:[tab] key is bound to an indentation function in some modes, so when "
"you press the tab key, it will indent the current line of code. If you want "
"to put a tab character in whatever you are writing, hold the kbd:[control] "
"key down while you are pressing the kbd:[tab] key."
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:1278
msgid ""
"This file supports syntax highlighting for C, C++, Perl, Lisp and Scheme, by "
"guessing the language from the filename."
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:1279
msgid ""
"Emacs already has a pre-defined function called `next-error`. In a "
"compilation output window, this allows you to move from one compilation "
"error to the next by doing `M-n`; we define a complementary function, "
"`previous-error`, that allows you to go to a previous error by doing `M-p`. "
"The nicest feature of all is that `C-c C-c` will open up the source file in "
"which the error occurred and jump to the appropriate line."
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:1280
msgid ""
"We enable Emacs's ability to act as a server, so that if you are doing "
"something outside Emacs and you want to edit a file, you can just type in"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:1284
#, no-wrap
msgid "% emacsclient filename\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:1287
msgid ""
"and then you can edit the file in your Emacs!footnote:[Many Emacs users set "
"their EDITOR environment to emacsclient so this happens every time they need "
"to edit a file.]"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:1293
#, no-wrap
msgid ";; -*-Emacs-Lisp-*-\n"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:1298
#, no-wrap
msgid ""
";; This file is designed to be re-evaled; use the variable first-time\n"
";; to avoid any problems with this.\n"
"(defvar first-time t\n"
"  \"Flag signifying this is the first time that .emacs has been evaled\")\n"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:1306
#, no-wrap
msgid ""
";; Meta\n"
"(global-set-key \"\\M- \" 'set-mark-command)\n"
"(global-set-key \"\\M-\\C-h\" 'backward-kill-word)\n"
"(global-set-key \"\\M-\\C-r\" 'query-replace)\n"
"(global-set-key \"\\M-r\" 'replace-string)\n"
"(global-set-key \"\\M-g\" 'goto-line)\n"
"(global-set-key \"\\M-h\" 'help-command)\n"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:1327
#, no-wrap
msgid ""
";; Function keys\n"
"(global-set-key [f1] 'manual-entry)\n"
"(global-set-key [f2] 'info)\n"
"(global-set-key [f3] 'repeat-complex-command)\n"
"(global-set-key [f4] 'advertised-undo)\n"
"(global-set-key [f5] 'eval-current-buffer)\n"
"(global-set-key [f6] 'buffer-menu)\n"
"(global-set-key [f7] 'other-window)\n"
"(global-set-key [f8] 'find-file)\n"
"(global-set-key [f9] 'save-buffer)\n"
"(global-set-key [f10] 'next-error)\n"
"(global-set-key [f11] 'compile)\n"
"(global-set-key [f12] 'grep)\n"
"(global-set-key [C-f1] 'compile)\n"
"(global-set-key [C-f2] 'grep)\n"
"(global-set-key [C-f3] 'next-error)\n"
"(global-set-key [C-f4] 'previous-error)\n"
"(global-set-key [C-f5] 'display-faces)\n"
"(global-set-key [C-f8] 'dired)\n"
"(global-set-key [C-f10] 'kill-compilation)\n"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:1345
#, no-wrap
msgid ""
";; Keypad bindings\n"
"(global-set-key [up] \"\\C-p\")\n"
"(global-set-key [down] \"\\C-n\")\n"
"(global-set-key [left] \"\\C-b\")\n"
"(global-set-key [right] \"\\C-f\")\n"
"(global-set-key [home] \"\\C-a\")\n"
"(global-set-key [end] \"\\C-e\")\n"
"(global-set-key [prior] \"\\M-v\")\n"
"(global-set-key [next] \"\\C-v\")\n"
"(global-set-key [C-up] \"\\M-\\C-b\")\n"
"(global-set-key [C-down] \"\\M-\\C-f\")\n"
"(global-set-key [C-left] \"\\M-b\")\n"
"(global-set-key [C-right] \"\\M-f\")\n"
"(global-set-key [C-home] \"\\M-<\")\n"
"(global-set-key [C-end] \"\\M->\")\n"
"(global-set-key [C-prior] \"\\M-<\")\n"
"(global-set-key [C-next] \"\\M->\")\n"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:1348
#, no-wrap
msgid ""
";; Mouse\n"
"(global-set-key [mouse-3] 'imenu)\n"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:1352
#, no-wrap
msgid ""
";; Misc\n"
"(global-set-key [C-tab] \"\\C-q\\t\")\t; Control tab quotes a tab.\n"
"(setq backup-by-copying-when-mismatch t)\n"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:1357
#, no-wrap
msgid ""
";; Treat 'y' or <CR> as yes, 'n' as no.\n"
"(fset 'yes-or-no-p 'y-or-n-p)\n"
"(define-key query-replace-map [return] 'act)\n"
"(define-key query-replace-map [?\\C-m] 'act)\n"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:1361
#, no-wrap
msgid ""
";; Load packages\n"
"(require 'desktop)\n"
"(require 'tar-mode)\n"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:1367
#, no-wrap
msgid ""
";; Pretty diff mode\n"
"(autoload 'ediff-buffers \"ediff\" \"Intelligent Emacs interface to diff\" t)\n"
"(autoload 'ediff-files \"ediff\" \"Intelligent Emacs interface to diff\" t)\n"
"(autoload 'ediff-files-remote \"ediff\"\n"
"  \"Intelligent Emacs interface to diff\")\n"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:1376
#, no-wrap
msgid ""
"(if first-time\n"
"    (setq auto-mode-alist\n"
"\t  (append '((\"\\\\.cpp$\" . c++-mode)\n"
"\t\t    (\"\\\\.hpp$\" . c++-mode)\n"
"\t\t    (\"\\\\.lsp$\" . lisp-mode)\n"
"\t\t    (\"\\\\.scm$\" . scheme-mode)\n"
"\t\t    (\"\\\\.pl$\" . perl-mode)\n"
"\t\t    ) auto-mode-alist)))\n"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:1381
#, no-wrap
msgid ""
";; Auto font lock mode\n"
"(defvar font-lock-auto-mode-list\n"
"  (list 'c-mode 'c++-mode 'c++-c-mode 'emacs-lisp-mode 'lisp-mode 'perl-mode 'scheme-mode)\n"
"  \"List of modes to always start in font-lock-mode\")\n"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:1386
#, no-wrap
msgid ""
"(defvar font-lock-mode-keyword-alist\n"
"  '((c++-c-mode . c-font-lock-keywords)\n"
"    (perl-mode . perl-font-lock-keywords))\n"
"  \"Associations between modes and keywords\")\n"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:1394
#, no-wrap
msgid ""
"(defun font-lock-auto-mode-select ()\n"
"  \"Automatically select font-lock-mode if the current major mode is in font-lock-auto-mode-list\"\n"
"  (if (memq major-mode font-lock-auto-mode-list)\n"
"      (progn\n"
"\t(font-lock-mode t))\n"
"    )\n"
"  )\n"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:1396
#, no-wrap
msgid "(global-set-key [M-f1] 'font-lock-fontify-buffer)\n"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:1413
#, no-wrap
msgid ""
";; New dabbrev stuff\n"
";(require 'new-dabbrev)\n"
"(setq dabbrev-always-check-other-buffers t)\n"
"(setq dabbrev-abbrev-char-regexp \"\\\\sw\\\\|\\\\s_\")\n"
"(add-hook 'emacs-lisp-mode-hook\n"
"\t  '(lambda ()\n"
"\t     (set (make-local-variable 'dabbrev-case-fold-search) nil)\n"
"\t     (set (make-local-variable 'dabbrev-case-replace) nil)))\n"
"(add-hook 'c-mode-hook\n"
"\t  '(lambda ()\n"
"\t     (set (make-local-variable 'dabbrev-case-fold-search) nil)\n"
"\t     (set (make-local-variable 'dabbrev-case-replace) nil)))\n"
"(add-hook 'text-mode-hook\n"
"\t  '(lambda ()\n"
"\t     (set (make-local-variable 'dabbrev-case-fold-search) t)\n"
"\t     (set (make-local-variable 'dabbrev-case-replace) t)))\n"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:1425
#, no-wrap
msgid ""
";; C++ and C mode...\n"
"(defun my-c++-mode-hook ()\n"
"  (setq tab-width 4)\n"
"  (define-key c++-mode-map \"\\C-m\" 'reindent-then-newline-and-indent)\n"
"  (define-key c++-mode-map \"\\C-ce\" 'c-comment-edit)\n"
"  (setq c++-auto-hungry-initial-state 'none)\n"
"  (setq c++-delete-function 'backward-delete-char)\n"
"  (setq c++-tab-always-indent t)\n"
"  (setq c-indent-level 4)\n"
"  (setq c-continued-statement-offset 4)\n"
"  (setq c++-empty-arglist-indent 4))\n"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:1439
#, no-wrap
msgid ""
"(defun my-c-mode-hook ()\n"
"  (setq tab-width 4)\n"
"  (define-key c-mode-map \"\\C-m\" 'reindent-then-newline-and-indent)\n"
"  (define-key c-mode-map \"\\C-ce\" 'c-comment-edit)\n"
"  (setq c-auto-hungry-initial-state 'none)\n"
"  (setq c-delete-function 'backward-delete-char)\n"
"  (setq c-tab-always-indent t)\n"
";; BSD-ish indentation style\n"
"  (setq c-indent-level 4)\n"
"  (setq c-continued-statement-offset 4)\n"
"  (setq c-brace-offset -4)\n"
"  (setq c-argdecl-indent 0)\n"
"  (setq c-label-offset -4))\n"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:1446
#, no-wrap
msgid ""
";; Perl mode\n"
"(defun my-perl-mode-hook ()\n"
"  (setq tab-width 4)\n"
"  (define-key c++-mode-map \"\\C-m\" 'reindent-then-newline-and-indent)\n"
"  (setq perl-indent-level 4)\n"
"  (setq perl-continued-statement-offset 4))\n"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:1450
#, no-wrap
msgid ""
";; Scheme mode...\n"
"(defun my-scheme-mode-hook ()\n"
"  (define-key scheme-mode-map \"\\C-m\" 'reindent-then-newline-and-indent))\n"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:1456
#, no-wrap
msgid ""
";; Emacs-Lisp mode...\n"
"(defun my-lisp-mode-hook ()\n"
"  (define-key lisp-mode-map \"\\C-m\" 'reindent-then-newline-and-indent)\n"
"  (define-key lisp-mode-map \"\\C-i\" 'lisp-indent-line)\n"
"  (define-key lisp-mode-map \"\\C-j\" 'eval-print-last-sexp))\n"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:1464
#, no-wrap
msgid ""
";; Add all of the hooks...\n"
"(add-hook 'c++-mode-hook 'my-c++-mode-hook)\n"
"(add-hook 'c-mode-hook 'my-c-mode-hook)\n"
"(add-hook 'scheme-mode-hook 'my-scheme-mode-hook)\n"
"(add-hook 'emacs-lisp-mode-hook 'my-lisp-mode-hook)\n"
"(add-hook 'lisp-mode-hook 'my-lisp-mode-hook)\n"
"(add-hook 'perl-mode-hook 'my-perl-mode-hook)\n"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:1470
#, no-wrap
msgid ""
";; Complement to next-error\n"
"(defun previous-error (n)\n"
"  \"Visit previous compilation error message and corresponding source code.\"\n"
"  (interactive \"p\")\n"
"  (next-error (- n)))\n"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:1483
#, no-wrap
msgid ""
";; Misc...\n"
"(transient-mark-mode 1)\n"
"(setq mark-even-if-inactive t)\n"
"(setq visible-bell nil)\n"
"(setq next-line-add-newlines nil)\n"
"(setq compile-command \"make\")\n"
"(setq suggest-key-bindings nil)\n"
"(put 'eval-expression 'disabled nil)\n"
"(put 'narrow-to-region 'disabled nil)\n"
"(put 'set-goal-column 'disabled nil)\n"
"(if (>= emacs-major-version 21)\n"
"\t(setq show-trailing-whitespace t))\n"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:1489
#, no-wrap
msgid ""
";; Elisp archive searching\n"
"(autoload 'format-lisp-code-directory \"lispdir\" nil t)\n"
"(autoload 'lisp-dir-apropos \"lispdir\" nil t)\n"
"(autoload 'lisp-dir-retrieve \"lispdir\" nil t)\n"
"(autoload 'lisp-dir-verify \"lispdir\" nil t)\n"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:1498
#, no-wrap
msgid ""
";; Font lock mode\n"
"(defun my-make-face (face color &optional bold)\n"
"  \"Create a face from a color and optionally make it bold\"\n"
"  (make-face face)\n"
"  (copy-face 'default face)\n"
"  (set-face-foreground face color)\n"
"  (if bold (make-face-bold face))\n"
"  )\n"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:1511
#, no-wrap
msgid ""
"(if (eq window-system 'x)\n"
"    (progn\n"
"      (my-make-face 'blue \"blue\")\n"
"      (my-make-face 'red \"red\")\n"
"      (my-make-face 'green \"dark green\")\n"
"      (setq font-lock-comment-face 'blue)\n"
"      (setq font-lock-string-face 'bold)\n"
"      (setq font-lock-type-face 'bold)\n"
"      (setq font-lock-keyword-face 'bold)\n"
"      (setq font-lock-function-name-face 'red)\n"
"      (setq font-lock-doc-string-face 'green)\n"
"      (add-hook 'find-file-hooks 'font-lock-auto-mode-select)\n"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:1519
#, no-wrap
msgid ""
"      (setq baud-rate 1000000)\n"
"      (global-set-key \"\\C-cmm\" 'menu-bar-mode)\n"
"      (global-set-key \"\\C-cms\" 'scroll-bar-mode)\n"
"      (global-set-key [backspace] 'backward-delete-char)\n"
"\t\t\t\t\t;      (global-set-key [delete] 'delete-char)\n"
"      (standard-display-european t)\n"
"      (load-library \"iso-transl\")))\n"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:1536
#, no-wrap
msgid ""
";; X11 or PC using direct screen writes\n"
"(if window-system\n"
"    (progn\n"
"      ;;      (global-set-key [M-f1] 'hilit-repaint-command)\n"
"      ;;      (global-set-key [M-f2] [?\\C-u M-f1])\n"
"      (setq hilit-mode-enable-list\n"
"\t    '(not text-mode c-mode c++-mode emacs-lisp-mode lisp-mode\n"
"\t\t  scheme-mode)\n"
"\t    hilit-auto-highlight nil\n"
"\t    hilit-auto-rehighlight 'visible\n"
"\t    hilit-inhibit-hooks nil\n"
"\t    hilit-inhibit-rebinding t)\n"
"      (require 'hilit19)\n"
"      (require 'paren))\n"
"  (setq baud-rate 2400)\t\t\t; For slow serial connections\n"
"  )\n"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:1545
#, no-wrap
msgid ""
";; TTY type terminal\n"
"(if (and (not window-system)\n"
"\t (not (equal system-type 'ms-dos)))\n"
"    (progn\n"
"      (if first-time\n"
"\t  (progn\n"
"\t    (keyboard-translate ?\\C-h ?\\C-?)\n"
"\t    (keyboard-translate ?\\C-? ?\\C-h)))))\n"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:1551
#, no-wrap
msgid ""
";; Under UNIX\n"
"(if (not (equal system-type 'ms-dos))\n"
"    (progn\n"
"      (if first-time\n"
"\t  (server-start))))\n"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:1559
#, no-wrap
msgid ""
";; Add any face changes here\n"
"(add-hook 'term-setup-hook 'my-term-setup-hook)\n"
"(defun my-term-setup-hook ()\n"
"  (if (eq window-system 'pc)\n"
"      (progn\n"
";;\t(set-face-background 'default \"red\")\n"
"\t)))\n"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:1565
#, no-wrap
msgid ""
";; Restore the \"desktop\" - do this as late as possible\n"
"(if first-time\n"
"    (progn\n"
"      (desktop-load-default)\n"
"      (desktop-read)))\n"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:1568
#, no-wrap
msgid ""
";; Indicate that this file has been read at least once\n"
"(setq first-time nil)\n"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:1570
#, no-wrap
msgid ";; No need to debug anything now\n"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:1572
#, no-wrap
msgid "(setq debug-on-error nil)\n"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:1575
#, no-wrap
msgid ""
";; All done\n"
"(message \"All done, %s%s\" (user-login-name) \".\")\n"
msgstr ""

#. type: Title ===
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:1578
#, no-wrap
msgid "Extending the Range of Languages Emacs Understands"
msgstr ""

#. type: delimited block = 4
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:1581
msgid ""
"Now, this is all very well if you only want to program in the languages "
"already catered for in [.filename]#.emacs# (C, C++, Perl, Lisp and Scheme), "
"but what happens if a new language called \"whizbang\" comes out, full of "
"exciting features?"
msgstr ""

#. type: delimited block = 4
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:1585
msgid ""
"The first thing to do is find out if whizbang comes with any files that tell "
"Emacs about the language.  These usually end in [.filename]#.el#, short for "
"\"Emacs Lisp\".  For example, if whizbang is a FreeBSD port, we can locate "
"these files by doing"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:1589
#, no-wrap
msgid "% find /usr/ports/lang/whizbang -name \"*.el\" -print\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:1593
msgid ""
"and install them by copying them into the Emacs site Lisp directory.  On "
"FreeBSD, this is [.filename]#/usr/local/share/emacs/site-lisp#."
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:1595
msgid "So for example, if the output from the find command was"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:1599
#, no-wrap
msgid "/usr/ports/lang/whizbang/work/misc/whizbang.el\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:1602
msgid "we would do"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:1606
#, no-wrap
msgid "# cp /usr/ports/lang/whizbang/work/misc/whizbang.el /usr/local/share/emacs/site-lisp\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:1611
msgid ""
"Next, we need to decide what extension whizbang source files have.  Let us "
"say for the sake of argument that they all end in [.filename]#.wiz#.  We "
"need to add an entry to our [.filename]#.emacs# to make sure Emacs will be "
"able to use the information in [.filename]#whizbang.el#."
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:1613
msgid ""
"Find the auto-mode-alist entry in [.filename]#.emacs# and add a line for "
"whizbang, such as:"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:1621
#, no-wrap
msgid ""
"...\n"
"(\"\\\\.lsp$\" . lisp-mode)\n"
"(\"\\\\.wiz$\" . whizbang-mode)\n"
"(\"\\\\.scm$\" . scheme-mode)\n"
"...\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:1624
msgid ""
"This means that Emacs will automatically go into `whizbang-mode` when you "
"edit a file ending in [.filename]#.wiz#."
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:1627
msgid ""
"Just below this, you will find the font-lock-auto-mode-list entry.  Add "
"`whizbang-mode` to it like so:"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:1634
#, no-wrap
msgid ""
";; Auto font lock mode\n"
"(defvar font-lock-auto-mode-list\n"
"  (list 'c-mode 'c++-mode 'c++-c-mode 'emacs-lisp-mode 'whizbang-mode 'lisp-mode 'perl-mode 'scheme-mode)\n"
"  \"List of modes to always start in font-lock-mode\")\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:1637
msgid ""
"This means that Emacs will always enable `font-lock-mode` (ie syntax "
"highlighting) when editing a [.filename]#.wiz# file."
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:1640
msgid ""
"And that is all that is needed. If there is anything else you want done "
"automatically when you open up [.filename]#.wiz#, you can add a `whizbang-"
"mode hook` (see `my-scheme-mode-hook` for a simple example that adds `auto-"
"indent`)."
msgstr ""

#. type: Title ==
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:1642
#, no-wrap
msgid "Further Reading"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:1645
msgid ""
"For information about setting up a development environment for contributing "
"fixes to FreeBSD itself, please see man:development[7]."
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:1647
msgid ""
"Brian Harvey and Matthew Wright _Simply Scheme_ MIT 1994. ISBN 0-262-08226-8"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:1648
msgid "Randall Schwartz _Learning Perl_ O'Reilly 1993 ISBN 1-56592-042-2"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:1649
msgid ""
"Patrick Henry Winston and Berthold Klaus Paul Horn _Lisp (3rd Edition)_ "
"Addison-Wesley 1989 ISBN 0-201-08319-1"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:1650
msgid ""
"Brian W. Kernighan and Rob Pike _The Unix Programming Environment_ Prentice-"
"Hall 1984 ISBN 0-13-937681-X"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:1651
msgid ""
"Brian W. Kernighan and Dennis M. Ritchie _The C Programming Language (2nd "
"Edition)_ Prentice-Hall 1988 ISBN 0-13-110362-8"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:1652
msgid ""
"Bjarne Stroustrup _The C++ Programming Language_ Addison-Wesley 1991 ISBN "
"0-201-53992-6"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:1653
msgid ""
"W. Richard Stevens _Advanced Programming in the Unix Environment_ Addison-"
"Wesley 1992 ISBN 0-201-56317-7"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/developers-handbook/tools/_index.adoc:1653
msgid ""
"W. Richard Stevens _Unix Network Programming_ Prentice-Hall 1990 ISBN "
"0-13-949876-1"
msgstr ""
